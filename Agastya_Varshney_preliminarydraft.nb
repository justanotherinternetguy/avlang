(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    580810,      10854]
NotebookOptionsPosition[    573521,      10737]
NotebookOutlinePosition[    573985,      10755]
CellTagsIndexPosition[    573942,      10752]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 "Evaluating freewill in  the computationally reducible pockets of a \
computationally irreducible world   \n\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzsvXV0XFe29SuTLChGVYnBki3JYmYwMzMzMzMzM9sxxI4pieM4DqeTdNKh
hnR3mu/te/syvPvRGN8b433vzbf2LlXpVNWBAsl20uePaUmlUkmWqvbvzL3X
mit1xtIRczpGRESsjKJ/Rkxf27hixfT1Iw30weglK+fPXTJ7Vv8lq2bPnb2i
YkYnunFeh4iI/yJ1pvc7xWRBTh1ienjUMTa7TdRJkyNQT1l11uZ5qZMuNHXW
54uqi6FAVp0MRQGrs7FYRCXoYioVVaS5zO/jQNXVUs4Vaan0UldrVUCKslVz
RVprPOpqq5VUlL1OVNFxjX6KcTR51NXRyBXlbBJVdHyzvJy9RRUT30dSsQl9
PYpO6MMVk9hXQv28FJvUX1Sa5AGiivFRbMpAHw0WlSZ1SBtpkILa6vs8H0n9
/lrl/fv2/XtI/d2k/s6+zwep5437eSV8rsk9J6Wex0rPf6nXjft15fvai7I3
+Ej8dSv3WheuCe51ItB1xW89almnfCW3tnmviextiajE19vioNbsSGMhl9T6
L8WNkDnkyzMF/glZ6cdRld3fO3Z7vQbamd1Sr30Xt+tfOHYL11K+nkoymz6f
FBi3X2x2/7D1rNnty2/Xc0TmOeT7fHvO7PblN3uNyr2GVXar7FbZ/WzY7fca
CIHd7tejm93B+m0Xs+sDYnfIzJZhd6CeW4rdbD12K1S/rSVOaH1Y4c9tcXa3
Jdu0aUNfaD1rdvvy2/13CtV/ez9XQme3JL8DfB1Ivo5EXn9Cfgtfq6H4b+Fa
obJbZbfK7tDYLfoaCILdwteh5/UYktcOj92B+OpwmS3FbuFa7JI8s319nC+j
pZlNvEgd1O5e+3mzub3ZraxBkr9/sb+VlC+X9uHy/JZ83oWyf67AdrHXkvt1
JsVw39drsB5cdM1Q2a2yW2V3QOyWev5HWSsCZrfYa1CM3cFxOzh2B7MnHuoe
uVsa8kwan/NKf26Ls1tqTzwUX63E7efN1hdd4Xt0eV+u7MH9nzNizynJffVw
+a3gwYWvtUDYHSy/JdcNld0qu1V2y7JbitluKbFb6rUXba/hCm5/3FsxjoaA
2R3seXa4zHZLnNcuaZKV98flue3P7mfvl4cr6Pnz91mxW5zf0p5c6jzc+zkh
zm8pSfnykBmusIcufK2JMdz1GpV+DSvx271OBMpwld0qu1V2i7NbyO1Q2e1+
PbrZHazXZuuBW0rsllp7YhJ6cUU7+8gqGG4Hym62HruldK4ttx8e6p54W7JN
lz5CQcOeq541u3353fp3kvg7KvDb+7kSOrul+K34/He/TqReRyLsFvLb+7Ua
vAcXrhUqu1V2q+x+fuwWvhb56zGo/fHnz+5guN0W7I5JHSiq2LRBLqUM5dKk
DpNQ++6Rq+wW/727/y7uv5PU37Gt2e23p65wDv682a3EcL/1QmX3C8/uzrHd
udqW02KS5nSorJb6fYuyWl/kke/ftaMxEDb7y/s5Fm4PmLfasxZN7DXt7kUR
SqxXRbIOVmEvXGl/3N1HK1Qo/dnStWiDvKRc1+zrsf17qrVpgz3SpA+VV9pw
WWmJv/IapSClr3/Bpch3we9apr893B6zQJ9Xcv3hos/lMGvZlHrI2vI8vL1r
2QJdH709kDLL5Xjuu8YzCZkQKMtD5bko8yTY7SeV3Sq7v0fslstWCZbbbcNu
eV+tsru92R2YT2+L/vDQ+C2e6aKyW2W3ym6V3c+T3Yr92wGwW7afJkB2h8Jt
X3aHy22V3S8uu9uiDj00fgfP7qAYrtD/rbJbZbfKbpXdgbL7WWaaKjE6mt53
S6y/V47Z/nVPIdSfZQyTV9h8C4/duoyRsnre7A71PD2YWjalWnRfCZ9Tyhkv
4WWqtlX/t8puld0qu1V2B5WVFmbvl1yeaSD92dLMdteQt09/toctz53d8tJl
jJbV8/b14dbEKfE7EF8ux/BA+8NDzVR9kfq/VXar7FbZ/cNjd1vkkYebixZI
3rh/r3a4/dne/dS+dd7hslvJFyuxt/2l9POF5+uVue3z+5bob2+L/nC5XDZp
hgefy9Ze/d8qu1V2q+xW2a3E7NYeMGV2y/V9BcrutpgVElp/tsru7wO7Q+d3
uLNOQstUdTNcMbsoiB4yld0qu1V2q+xuK3a3Vaap1BoaneItvz7tsHNVpLn9
fWC3vtsYWX3f2O3Pb6U9dPn+cN/ni+/zKVh2+/Lbk0Mg8TpQ2a2yOxB2C5nb
QZPLFT6vn3f2Sl6LAuO1r5RZLZ+9osTmLuy5yG738LlSVn6vhzDZHPYMz+fc
vy1fhzYg7FrxWLaOs/U85DrwcNkcrl50X6503h7e71exjj+sGvXBivVsL3r/
t/QMk9DYHuUjJXb7y7UOutdFJbZLrb1uKa3fSuu/NMddXHmu2S0qu1V2v0Ds
DrZ/u63Z7efTwurfan9267uNUpC8r25vfZ/YHUp/eLDsftH6v1V2q+xW2d3+
7Bbdh2pndr/o/dvyNeTBz88OhN1twey22hN/3mwOf8/9+8Fupf5wyefhC97/
/azZrcxvld0qu3847JY7334e7H6R+reDqSMPpT87XG639563Mj/HPle19557
2NdPYWe8hDcf/Hn3f7c3u4OZF6qyW2X3D4ndSjVpz5LdL2L/dqDztUPtzw7X
b7e3b9ZlKojx8zmqvX172PseYfaHt9V88OfV//0s2C1Xw6ayW2X3Xwu727qO
vL3mbz/r/m3pWZ2hMduzpoftqdvZN2eOk5UiW8P8emV2K6l969wDZXfoDA9v
Pvjz7v9+luwOZO6Yym6V3T9EdrdHD1j4Mzyfb/+20nztYLgdKLtfqD1vBfbq
Myc8X/1A2C3N7/Dmgz/v/u9nzW5ffqvsVtn9Q2e32Gvg+8Du9u7fDpbdwXC7
Ldgdfr3XXze7ldnetuwOnt9ty+5n3f/9PNgt5LfK7tDZHQqb5Vndqs7aXFlO
/zVlr0hlrSifb1d416bZxXktxW6l12ZQGeV+a0P4/duBzhIRzg4JZPZXwHVp
YdeHh1mLFeaedvhS4m/7fv9gz8tDrXUL5NxDqZYttP7vQaKKThrI1f793yLe
XGTvXCyDydVDJna9L87x9shu8cumCiDHJZTsFimet1V2S6CsDkQqu3+Y7Pb3
2i8WuwOpI/edJdKW7PbzUmFxO/w9cZXdz4bdUmwOht2h9X8Hx+627/8OjN1S
/A6G3WL8Vtmtsltld/uwO7yZYOH3b8txW7wHTHnWdlC9YGFx+/mz25A18YWW
0rVBKHXq4fSYtRe75fgtx/D27/8OnN1i/FbZrbJbZXf7slv6jDt4dgdeU962
/duBzQFrg33yENkdWi1auOfVP2x2K/7/2FuJ350uI7RatnDY3db75+3f/x0c
u335HSy7fRmusltlt8pucXYr16UFzm5JZgfB7lD6t6XqebQ+vbJSOWlhzddW
ZLb0jOuAaqkUfbU829qfr5MV9OKwPdT+cene8FHKe+ph93/LM7z9+7/l2S2X
uRYIu5UYrrJbZbfK7sDYHUgduRi7FbkdALtD6QGTYrZbShmn7dm/7fJloTHb
ozDPm8Nn74utYH15ONkvIZ2Hh93/Lc/v9u//Vma3fO5aYOyWZLjKbpXdKrvb
hd2KPWABsDuc/m05bmtDyElri/5tOXYH3ccUZo+VEruN3ae80Aqf3WJn5OM9
Cr6nrH3YHeo+evv3fwfObjF+q+xW2a2yu/3ZHWj/dluyO9z+7bZmd1v0b/9V
sTtrmrxeQHYL+f2s2R0qv9uK3cH3fz9bdvvxW2X3C8tu2dngPtks4bD7eWWv
KPX+K2Wv+D33ZJ637ZG90tXhK++esOD3yb37wcKfv+3qlZGsw1XYH1ear608
S2SU7Jm2ErsV68OzxrokUV+mxGhT1hRZKbFX3719pcRupZ8//LNx+V6zUGvU
3c8L3+eL/xwycWnYc5JLnuPPqv872MxUpR6yyLgGrlDq18Tq0OXWRW+2i7Nc
jufSuS3KPFfMbvH1imGyPBi2q+z+62N3ePVp8uyWmuEpPX87PHYrcVp5lsgz
YLcXt8cHfF4dCPu+/+wOrlbuebPb9zml47XocgxvW3aH2v+tsltlt8ru7ze7
A+4Hk2F3287fDpHZMuwWW2eDqUUTMlppvzzYnuxAas3acs/7ebM73D31QNkd
TB260t/Zm+Hizxshu90KlN3BMLwt+79DYbcSv1V2q+xW2d3+7I5yNoTFbrns
lUD6t8XnbwfPba/zxRDna8v1Z3uv82Mk+4sNPryQZ3ZgfjtYNht6TH+hFe55
uvL+uXxWm1J/eKB16JLPIx/581v+LLy9+78Vc9cC6S+R4bfKbpXdKrvbj90u
Zjf4sTuYvjDJ/KYA+rfl52/L55sq1aKFx+2RYftqT82UZK3ZeFFui/nOUHy1
oceM56z2ZbeSP1esZQvTlyvXsinxW76Wrb37v+Uz1wJnt5DfKrtVdqvsbn92
e3O7IXBmu+vNJV77bTd/O/Bc8mBz0eQytHzZLVmXrLgfHlx9eDBsNnUPxNu+
2Oxua7ZL7am3dX94oLlsenabBMNdHJevRX9W/d+SDA+B3UJ+q+xW2a2y+9mw
O5jXqhS723b+dojMlmG32Dob7IxOQ+ZYLq9e4rD7uiYHxG3GbLeU2KlXUHuz
O9zv31bsDiyjzb8/3P13lma4/GxRxm63AmV3MAxvy/7vUNjt2ycaSO6aym6V
3Sq7Xzx2y2WvhDZ/W57doWSatge726IfOxi/HSi7DdkzZWVsZyl9/7DZLXZO
kDm1VUFnrHrzu73ZHWgeW3v1fytmpobBbqn+b5XdLy67hWzuGOudv+LP6lwv
BfozSzFb7vfk+3vtaCgOitOtvH522StRtkpvVturg2KzWBZLjKPJI8XaNIVa
NDmf7Von2q5/W4zdyv3bI73U2tvjLcl+oHbuz5baI29lc6ta/eosaLNd0mfN
bBX/mhkw95gJC32OyZA+BZaMabBmzYY5Zy50Pecglphp6j4Ljh5zYc6awcW+
TshbXQ697Tkbxpw58uoxW17Bsj7APXd3Hbv79yTJ8aD20AX75pljuBRnkYbZ
/y0lz/Nace9cbB5P62zcYPu/5eaOBVLLJpV97uK4d+5TjL0xOJbbfTleIcLu
Fyy7xeDP92BYHjQPBSxV2a2yu63YHW7/tuieuWL/tjK3w2Z3GP3ZctxmPDUR
Q12axeXrZ025c7kYRw3Zs7mE7LQULoQldx4MGdOJBZMRk0Xcy6OvyZ4Dffo0
znN2PwOxnL1lt7sfi10jfF/YLclvv310OR/uw+l2YLdYpoAsx9uY3Ur93yq7
VXar7FbZLWR3OP3bsrXliv3bofntZ96fLcbt7v4cM/eY4SXGV7c87BawtVMe
fVyyBM6iJbDmuJhtKZzPxXmZN8+L++w6wNxyP87znHmyYveTU0j77MI9c0mm
uyRktxy/vRkeeD94oHXoofZ/K3pyxTNvVxawFMOD7f9W2a2yW2W3ym6pHrBg
+reDzU2TykUL2Gf79m+3c3+2nsvlIcVqw9k+uL7lXJuxifHaQrJmT+dyM8vN
crc/dyuiZCGiy5bDWriMvm4e31vX5cyGrifbc58BLXFa35M4nrcABnpryiWu
5y7gMue4PpaVArsDkZRn59cOsp5c3Jd7ZcNIenDfv5N8T7gUw8Pt/1bcU1fM
Ph8oy+9g+7+V6s5VdqvsVtn918vuYPq3FbPTAsw0DcZri7Fbntmh92dLMZt7
zpY9bCGL2Rk2O892szouZyaXPXcmbPzzM/nnmWdnzE+acAbGxq2IzV4IbcZc
YiAxmjjN9s3ZmXYs8+eFi2AtXgpT/kLoc+dxJpt7uvitxG7GdzmFzfAAfLlk
jbuYD5fNague3+H2fyvyWzFzzX8ejxi7A+3/VqpdU9mtsltl918fu8Pt3xbt
C1Ps3w7ea3vP+QqG2eH0Z/vsE7ewy5zrkpttbG9c1302lzaLfCn5aEN39rm5
xPaFdN9FMPZcwmXouRQp4y/B0rwX+sJ1sBSuha10DUxFxOmCRYijt/qeC4nb
yxFXtgrmwqXQEa8NuQvp6xdBn7OAP56s2pDdch5czJMH4st5DZ5MX5k8v1uz
cyQ5Hmb/tyLTFeePic3SGyjK7kD6v1V2q+xW2a2yu636t2Wz0xR7wIL32sIe
MHluS/vtQPuz9dnTvfudeQ3a7Nbz55Zzb86snHmcp/qei6EjNmvzlpNWQ5e3
lti8HoaSLTCV7YCpfDeMFUx70bV8J2JKttHntsFStgW64rWIJuZqeywgn76I
M9pStIzz25i/mMtcvIzzXcN8tQK73fvrUjJlzwta7DrELcV9dZ+eM9/+cffv
z+8s3M1u3kcmXYsu/FuLPhfC7CFT9OWK80MHcUkxPOgeMpXdKrtVdqvsbgd2
B5+90rbs9ub2eGnPHWB/tl9WiYDbTLyHi+2R58yFOX8JMXYlrGXrYavcDFv1
djiaTpBOwdF8GrbmM7A0nYWp4Qz0dWegqz0NQ+VBYvk+YvcO6Eo2Q1u6AYay
tTAT962ZC8ljL4Ypbyn36eyawFy0AvZK8uhlq6HJW/xc2C3kd9uxe4a49xbt
JRNej42X5fezZLc4v9uW3b6zvlV2/7DZLZW7wlncRtkrcryWY3e42SusPz+Y
3JVwslfEcliUsleUWO2exSfMGJZktd8coVBY7bsW9HfJa59cUAeryO5hfvLK
g1ZgtxKrFXvARPJNvXx25sQWTeZqnV85jUupFs13j9wlN7eIYwVzXOfS7Pai
1YhvOILUAS8jedAbcPR/CnPTFZh7vQRzn+swNF+Btp4x+yiMNQdhqTsAY9V+
mCr3cE/urN6B2OzF0BKvo7IXQJNP3rpsHlKyFiO1ZDtiMtejy8yXEDHuEJKz
lvHvb+m5VEGLuaT5vqRFro/Zvj6XyNm5WB07v2bJaa19963FE69nn+GRVF2b
62/S+nfyzExt+Tu6/67iPeEy9WstfeEeKfSQhe+75XvIolO8e8b8+8YCz24R
57jI/DGFnNQf+oxQJebIcVyObcFyUmW3yu4Xid1+c5ieMbt965OF7Pbltovd
wXJ7diu3SYburresdoyfYeet4vvf1rpjSOh9GcnE8bje12Gsvwx9w2VYmq/C
1usSzA2noa88DGvzcWjLdkNfug3G4g2c/0by7vZK8u4V6xBZSN+DPLbFuQQR
Q49Dt+QudOkrEF+0xlV3Tp5cXos9Yvvvvmpltw+/JWrf5NjN+R0Qu2dKsHsG
/PrDs6ZJ8FvIbl9+Px92y597y7NbuudbZbfKbpXdLyq7A+J2O7FbmzSAy5fd
rft6Svvlz57dyp5bpvfLN9dLZDaId2ao9x65X/905mLYc5fCQZy05c6DNmsG
YrrPgr5wGexVG+CoOwNH43k4mi7BTh7c2nSVuH0ZpvoLMNWeh7HhBLqWELsr
dyOmYC1MpeuhyVsCR/VGYvda8vNLYei7D7opl6EZcQ7WqgN0nbAOhvxlcDLO
KrLbX+5aOSa3P/flt4fjCgxvrXuT8N6yveRi/eEKs05k55KJee/Wj8X4rdT/
3VbsluK3kN1ufj9LdivxW2W3ym6V3eIKmNvPkN3eZ3JKZ9wSzG4Hdge6Ty7Z
9+V3pt3KCiFHvLy2V06ZgNkte8tGYqspZ3HL+THbw57Ds0pZtqkmdzZpLcwl
2+GsP4qEptOwNZyBsfYUDMR0c8NFxFYeQUz5PlgbjsBUtYPXqrH9cmPBcuLz
UkSWkYcfeBravsfQceolRBdshMU0G5Ely1r8tDynzcR4t0Tv03OZCNcFvrzn
Ao+Ue9BE/LdvrXrOLPHfswS/5erYgp9LJpKpGmD/d6DsDpbhvuz2z2tpf3bL
8Vtlt8puld2Bs1tytkA7s1tLrNb61dMo1aaJM9szh6mN2B1YTpqA2RI1Ty5u
t9ZHGXK854EYc6RyRue1Mst9JkyKJaaxem8NyzDtSbcVkHctXA49cTA6e7Gn
5lyXvwLm0k2w1eyFrf4IjHVHoa05AkMVMZvesrPv+Ob9MJDvNpet4ezWkw+O
HngWcdVH0Zm+rmuf/bxePaXvAZiat9DjErvzlwctY94yj1hNHJMvw9377FLn
5O7/vzAnxpffLh/urm+T4LdIr7iQ4eHWssnyu03mfwc2q0SK3zGp/pkt3vVq
z4bdQn6r7FbZrbI7cHYreu52Zreb277sVq4nF2d2W7E78P5tgc8WrPHCDC/R
edlezPbnNjtT9lLuQk9/NZOmcB50hXRbAXE6bwlpOXGa2Fu8Edby7TAXLOKZ
KoyDzEfrCldCX7aReL0L5sZDiKslblfuRSzd31a7A8bydUhp3glHxXrOWe2w
q7CVHYZmwgXEZ65BXOZyODbeQVz9NmIjcbdgRcAS47ib3R75+HN3rZtUzZvF
IyHDhfx295GL5LPmzJLMepGeXRZaLpvkTPAg+r/l2B0qwxm75Xq+nwe7hfxW
2a2yW2W3NLuluO07v6892K1LHsjly253b4tyH9izZ7d3X9Bkcb/tw27JWjQP
s1u57Zof4vLYvtz2rvVaAlPRYi6Wm2IkNrO8FWPBSlhK18FetYmfIccRr53F
dFvBUmhyFiGG3adiMxzNB4nLO2Es3IDYgjXQlawmrSSfvRHOyk3E1pWIGXkN
nQaehD13MxIqt6Jr5SpoC5YhtpyuD/JWwUKPLSdzwSo/scd1y5K/gkvIbqF8
2e3LcIsPv/3993x5fnt6zsSz2pRq2ZTnkk2W5XcwPWThsFuK30J2u/n9LNn9
1zjfW2W3yu62YLdc//aLyG7/NUma2+3Bbv/+7cmSntuf3T4c6C7FbXF2+3Kb
yZbvqvMyZhPLshfzj61F9HEh6/EidvVcC2vP1aSV9LkVsBLXzSXkqcs3w1Cx
jX/elLcWjqrN5MmXQ1O0HFEsf61kLffwyRPuImLyWeibdiEpYwnPVTNWr+Xn
4s7cdSGxW8hv18c+vpyuDdyy5i2T7D9j/29fdvvzWynHTYTdQv/N8tlkvHfo
maoT2oXdwfL7RWa3q+dbZffzYrcUt1slze1g2C3N6rwWCX4H+iKPQmV2az9+
cOzuwt4Gkb0izBdwZ6/Isdqf241+auvsFTl2K+eVy/eEhZ+b5r5NyOgxrQqz
f1vfY5JLnrkhLvn6M78a8hZG6HJnQJ87p9VXszqxnHktHJ/dkpO2EIa8RdDn
u8Te5x/T5xwNu2Gp3oKYwlUwlK/jZ9XsnNpGDHQQeyNKiNe5K/jtGbmrkZS1
ArrKzUhqOgTd8NPER7p/0Ro4G3dBX70J+ooNiMwhNhatI46uRuyw4+jWcBQx
3Zcjtoh4TtcAhgH7kbn+VXSq30LXApthLGaZLhuhpWsCfcFa+n+shjF/Le85
sxRt4I9lLlwLc9FqLm+2y++tW/NaJdU7Ltc/Lt5vNrf1Wkmpls2nLt27Dn1q
ALPIguz/Vpwh2ra5a0ozQxXzzhXYHW52i/fZ9/PNbukSQF6LPw/ks1sU2S1g
lTfHXVwLh+Mqu1V2S3K7HdgdfG5a27Lb7xxThN3iM6Vn+LGbsYLN6hKym4nn
jrNZH3kur817o/MXe5jN3vf0TBMLDcWrEc3OiSvWw1qxjtepsX1oxruEoo2I
z1+D2MJldL+V5KtXIrJ4DewtOahG4rGm5wpYyjdCX0KMrdjE+8Ti63bAXrEZ
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
z0fX8/TZsFuK3yq7VXar7FbZrcRu0VlHQbBbOZ9cmt3+fjuw+dtCv+3u3xae
b4tze4mL1aym3O252TzMItcMERPLOKvYgNjydbyvmvVksewynl9WsNaVO9py
m6VsGyzEXGPtLugqtvFaMtafZa3eQ/w9gLjm44gdcBz2kZfQtXQndEPOILr5
MN1nN8xDT8NQvR9xhbuhY+fdRTvIix9G175HEUksj+x/Fsapd9H5le/QYeXr
9Deka4iao+SvT8KWvQ0p1YcQV3QcptH3oZnxNsxD7pLHP4fE4v2cy7yuvGwf
/X/28veZ3zZX7W+5nW4rdXlvLjYnnNevbRXwe3PLmfgmD8OF/PZmeCvHhf5b
LteFsVvyLNxTh648H1yu/1uYf+7bP2bK8t5DF+/5fnbsFmO4ym6V3Sq7VXbL
sVtqRmEg7JbOYPHtr/Fnt38v2ER/ZsvM35auKZ/vl5Xmy223vDx3ydpWdpdt
IE+6mctStoWLvc/6r5lMrKacMa/WdY5trN4NY+n2Fm7uhaluPxKJnfqqfbAX
7Ydz0h1Edt+KlEzy5KMvw5GzHQm9T8HYeBgRvffD3nMHMqqOka++DG3VYThY
n9foW0iqOIvoEVcRMeMm7NXH4Sw5iK69jyC2hL5P8TEYxt1H9IzHiOlzha4D
DiKBuG+tpJ+lYids5Xu4WH2aiWsvF2O3lWQu39nKbwHD3bL5MVy8rk2M366e
utZcF7FsF+VaNqX54PL9314z43xq1rzZLcXvZ89u3/neKrtVdqvsVtnty26l
+dxK7JbPYAmE3d575PLMnu5XU+xbT+7Fbd+cUwG3DVyuPG/GbXbObei5nNeG
szxxnldWvQ1O8tRxVTtgr9zuecsYzrjNOM4yT8xV5KHr9xG7iYtluzi7GSf1
FXthKNkBzYRLMPYhRs9+AP2Ia3CWHoFu4ksw1B2Ctf9p6BsOo0s9+e9G4nLD
cViaT8JUtBeJxOlug24jfsB1RNPXJIy6jbg5ryFu6EuIziCe1tB9yw6T734Z
sePuIqbuFDF0L+Iq98BUsweG8l1wkM9m5+nmij1e7LaU0/VEhavfm8laxtTK
cSG/raVbvOrZ2Jm4WyzzzcuLe/jtrl9b5cdvznAPu/3nlAUzH1yp/1vIbt8a
dJNoz5jvGXj7sjuY+d4qu1V2q+xW2S3Hbq8eliDZLc3tQNittEcuwm7itiF7
tji3hexu4TZXC7eZWA6La/YGy0ZbwWdiMw/JclnY7A+WkcK8NZOlJTvFWLoV
+uLN/C3PKyN/y7lNzGQMtJW6fK2O/G5k/S5E1+5D5NaniKg/CtP42+g48zZM
yRvRYfIl6GsPQldzgNhKvnzkNej6nCSPewC6ImJtGb0tPw7N1Hvku4n1xUdh
rD2DhKmvIWHYy0gqPY34KuJ/v/PQ9znPz7kdFQfpOuIAPe4BOMoPw1p1gIvt
lfP6cpKb23HlrewW8tvNcKsXw8X5bSry5rfZh90u/+3eR/fmN8uEd7Fbmt9K
88GV+r/F2O3mN2d35tSAclPbm93Pb763ym6V3Sq7fwjs9suOeIbsluK2lOdm
vb1CbjN5cbuF3a4ZnkLPvcxLPEetaA2fGcIyTI091/CZ2qxPW1e0ieebMXFW
l7H5X1u4zOWs9nsn97OGKpevZfvQjIm2ygOck4n525FUdRi6/mdhHfMyfa8j
iC86hsTGs7CXEa9L9sNQf9i1pz7iKmJ7HUcC+Wlj/zOwVR8iFp9EVN+zsM1+
BFOfS0guP4suFcTzma8hZvpDJJK3N9P3MpQcQnzxYSTWHIGePLy2ej9SKk7A
SJw2EacNlfthJH7z8266zcZU6vLfTGL85hL4b996dBe7N/vwe50ku0X57WG3
7/65OLt9+a3U/y2c/+3b/22SzGyZ6MPvZ8Pu5zPfW2X3i8punq/ix2tX7koX
XX47ZLH4MFsmh6WjMRBue+ev+P5txP52XvPa/VTpxWcxXgulxGpXPoG3hLyW
Zrb/3Ht/Zvf1y1/xZ7VS9op8D5jvx8HPGpGrTROb8TmeyzNjJH0iLD1c54/R
aROgyZ5G7FtMvnURonKm+80YcdUhic8WEWadsqwV3oeU1/J+vmuOJ69NI7/H
eM0UU7MREWVLkFC8Fgk5W6AlpiYNuouUgmPEDvq4dAO65i7jNWwJtdugo7cx
pet5fRpjXecK8r1NZ6Gjt1Flu+CoOQxH0S5o84hxfchnExedAy/APOgidA2n
kdT7Oiz1lxHRdAG6xe+jw7EvETPpDjR9LiC6+TRiq48iZsh5GEZfQ0L5EWL3
CWSUnOTcj5z3BjRN15FcdQNdq07CMOIKOq94H066zdbzMCx1p6BtOMo9fFb5
UVg408lj02PaSw8ikRRP1xGxlXsRU72X18lZK1rFas/d5+NCfltKtsNB/7c4
dj6Qv55z2lG+1bU34TkL9+kHb8l0YddDbrWegbey2/2xe76o97w2/7lkUrNM
3Ax3z2V3S+i7/evPp/idgfv2gLufp+7nrdScMSWWt91870FeUpxVosjyvrIM
912jfHNbxNgdHMtF1lwJjouyXJHdpaLscHNFid9CRinntQTHcpXdKrvDZXd4
Mz7DY7c5cwrM3afyNVOXRW9zZxIbaA0umIvYbNcaK5V56p3B4sPulv5hU8GS
ltnbrr1yXkvO8sfZ3O3CVbBlLUIyee6EHuuQWHUGaTM/h3PRz+GY/gkS536A
nKqriK84hSjicQR5zOjqHTDV7eb+21i4CSl0u6P7Rjjzt/FzZSP5YCf55eT6
EzBVH0bUrFuwTboJa68ziM1jdWtnoOl3DZEjXkbSqs9hHHcXjkF0n/rzcJaf
RnbZOWRWn4O19hTPIu9E1wJxfS7CPOEOTEvfg2XiW3D2ugtnn1tIGXcPKcWX
EEWePH30Q5hKj0I3+AJSxt5GTPMJ2CuPIY0ex9L7FDrUH0AUXWuklh9GNvn2
lKqj5MX3ebGbqZXduz1idfO2cnbuv4vnq9sqttFjs9kmG/3q2IJlt7CGTawX
XLn/25vdnrpzUXbP8Osde5HYHdh8b5XdKrtVdqvslj/rDmzWSPDsFtYBsVpf
XTe2Rk5y7WWSr2Zrqi7LJSnP7dUjJOA2nw0myF6xFK+k64BlrnlgbO5Viatf
m8271hOztSWLYS9ai6i87TAPeYTEWb+Had7fInHtPyNr8R+ROP4rpE39Eo7B
bxCzLiCt6AQcPXchtnwHjCNOIS1/M2IatiF26BEkNJBP7sH2lsnDkofWEic7
F++Gse44EgZc5TNDLINuwNL3OrH/LFLKL8OZdRRpVVcQV3IahuZLsCx9Cs28
19Gpz2lomon3JE3vM4huPAX7rCewrPwcEf1uQdP3Fue+ZcJrMA+4iajV79DH
d/jPZ+p1EV2J25aKM4grOABbPvPUhzjDDb1P8v10a+k+zm9r1UGXRPjN5GQ1
6UU7eA6bqXIXDBXb+FxSNnOU59CI1KELs1zYTHGX1gj2zld615379JH5zyEL
pP97vii7/c+9ffLvA2R3K7+fL7t9+a2yW2W3ym6V3aHN+Ayc3cJ53K1zub3n
jLDaISNTt2kwZYrPGfHNPJXiNs/vInYbilbwDHLms9kMbJZhyjyjsZj4Qiw3
J69GQp87yF3/j0hd9K+I2/g/kHji/0A/95dIm/E3xMzfQjftayRO+wkKJn6C
rF53YKw6BV2f8/xMO6ZiDyJzt9LPtZv4fQ7afufQqek499qJFSdh70WeevhN
mBrP089xFI7y83xGiGXMAxjHPoBl/tvE4Fehn/Y6onf/GJoV7yCu12V0q7+C
xKpzMFWdgCXvIGx9b8C+41foSn7dPu9H0C96B7oFbyFy/G3EjbkHXa9L/Bog
vewSujZdgnnyY3QdfZnPEcsoPoak4iOwVh6GvfYYf8v2BTzs5vw+IOC360w8
rYJ8f5Erx4XV5GlLtvKzfn4GXrjRrx/c00fmZjfLn2vx4KymwG+eSd5KLt8a
dDe7g+n/Fp57++6dS/E7GHb7nn23B7uV53t7M1xlt8puld1/3eyWmjnSVuz2
7pdtlZb57ZzpsLCz7W60bpIstL7ayUtburszLpXPuH257e7d1rHMNMbsotU8
E415bT3LVSG+8N7t/icRm3cICWN+BOeiP8I48hs4F/wBzrV/A8PID5Ay6TsY
xn+N2GnfwDLjp7CN/xRO4rdj9ueInfMjOIa+irh+dxHT/2V0mvQQutmPYR18
HXbyu86cnTw7xdx0Ac4pr8I6hVg9+g5s0x9Bs+xddNz8ETQjbqPT1PvQj7wD
R8NVGGovEANPIbH0LPT0OCll55HUeBG5NcTiwpMwL6Xvv/d3SFz8Gc8tN/a/
hviai0ipuwJD9Vny2CeROOFNGPb8HNr5H9BjHUFy0TGkE8sj648gomIvXV+c
gb3hBCIa6Xqg6ggXYznjt63Sm+HJFYc4u+1l++Cs3M9rz21srim9TSzZIahj
29oyl2yTVx84Y7c0v1e3cNvVR+Z19t1zmRe75fq/peaHivHbl+GhsFtuvnew
7A5+vrfP61hlt8puld1/tewObz63PLv95yq6/barjjc2YwKtp9O4YjMm0eNP
goXWV1vuHF4TLMdtXmcsyGDx5TZnN6t7KlzBz7jZnG02W5tlpbFMNOa/LQvf
gX3mj5Cw4DvoJnwJx4gfI3vK10ge9QHyRv4YllEfwznmJ0ib8nPYRn+ODkPf
g2bpr2A78R/oevQfoT3+F0Tu/T3iVnwLx5An6DD2IaIu/xqJL/8epqk3YFjy
FDFzXod+zhvoOuEOOg4mxva7ioSK88jMP4PUqitwVF9CRt1VZFRdJl6egaX+
Il0T3IZu4j3YGq/B0HQeqb2uIK6MPjf8PgyT30LX+kswsh6x/BNIGHgLOuJz
Ej1m1Kr3EDHlHjIqbyJiFf2/pr8Kc/lRJNWehW7wJXTsewrW6mP82sJe73qf
ycNvUiu/D8BCPNcV7+IZbImVhxBftheOkp1wkg+3l/jmsfnye5MnD13Ib7kM
Va+zb4X+ManslmD4rcRusX4xufneobI78PneKrtVdqvsVtktP59bnxFIX1jw
7BauiZpuE7n31tFa6a5L02dPh677dGjZeirJbddaLcxMc+emCdnNxPZm+R4t
eW+WncbzV4pdM7Y1DbeIyR8icfTXSBj5EyTP+AqOyR8jmjgcOfEzJIz6EX3u
U8RN+gKa+T9H1NY/wXzon2Fd/xvEjHsP+pnvo/OSj2Fb+hVs8z9HxK2/Qcf/
FzD9I5A0/Dr0TZeJnWf5Pna3kvNIqbpIPL6MyLrT6NJ8DsbeFxFXew7mugvQ
9rkMTb8rXCby2klFp2FsegnRNacRU3cCSb2vIb33y9Cz8+3GC8isvYjkAXfI
P5/m9W7apU/RYeZ9OOqvQdP3BmInPoL2j/8HETNfhq3nQXQrPYWsuosoLD+P
bj0OIK36NM93YXLx+5iA3y6Gm4ZdRHTdAWjL9vDeN85uet9cuQta1iPH+t5F
8lR9/bcri21da5Yq/S2YrAVruVz5qStb1Hr+rdz/vcAvt8W7X0yk/lyY3xIg
u4X9Ys+T3b78Vtmtsltlt8puIbsZt9uD3b7rIdsvZ9xm8xrtRfPJ07Fe7FnQ
EMN1Od6zuANhty+3ef4Hyczq1ApcfdzMg7sZkjT+fRhnfkF+9jN0G/kVLGM/
gmbgYySN+QYxM/+Ajuu+hWHRL2Ce+Dlss38K69rfInL+Z+gy8B7im+7BuOtz
RB36BpGHfwHNtm8Qt+5rONd+Ds2cx4gYSmytv04cvgxd32v8bXLtZWTUXIGz
8RKSxz9AfM15ZJG3ZrPAonqfQ0Y1fQ35cE3vS3ASj+NrbqD7gHuIaTwFG/nv
pLJzsI+8Bz15a1vVCfLixP9el+E48FPopz+gv8FeZC39BCln/oiu896Cbe17
MNF1QgYxW9PrLCLqjyCh7iz/2o6Dzvqx29t/H0bCotehHX4BsTWuvvD48gOI
qzkAU8NBRNfv9uSocol6b+FcsvXeOejEblbH5s9uF78D6/8Ogd1CfgfBbhe/
25fdyvO9fXo7VXb/YNktxuxQWC3FbeHHgeSx+Eq5V953lro8t5XYrZjFYvdR
iOwWPr/FuB1IDguXUvZKYn8uIbO9M1jabtaIS97zuc1NtKaWEUuzJkCbOhJd
6T5RWa7Zifb0ydCkt9aWG7q56spZP7cla6qrtztrOq9PY17bVDiXuMpqkFz7
5ebM1nkjTJbsWT7r8hxoshYgIm8+7MTpRFKXkkXoQmt4QvZK16zOwhXQ5q+B
ljhiKd/IP2bZp/qq/bAOvsvPrp3NbyJu8PuwTv0SpqlfIHbxTxG7/luY5v8E
5skfQTfpA9iGPoV9wZewL/wKsX0ewjj+XRj6v4aY5oewzP0EnfcSv6e+jpih
9xE95hGsNS/B0Pcl6HtfhbnPS+jUTD655irSe91AhyriZf/rSDjzG2RMfgLn
4DuI7n2Z9445el2HpvkysptehrX8HCxN15DUdAPdaq7D3vsGogZe59cDCdkn
kTruDVhnfQLj4k8RMeAG0ma9A9P6D9Bhyet0LXITaWXnObfjG+h6oPQcXRNc
QfS5X8FM1xVdMnfS412GqeIgZ7me/H9G4Vny+icR2fsEHLUH6bpgK+Kzic8s
O6ZiL5Ly6b79XoFzyidIGvkJEhue8usJY+UxmMoOwZC/A0nV++maaR2f1cKy
ZXldW/lWOMq3wV68GbaCDbAXbqTrtPU8P5VxO67YVdNmZPWEbM+8oPXs23Pt
5alfa61D9PR/t9SteeoehPm4olmpMwTzSlql797aO8b6FZmEtZSsF8L//LsN
s1syhnFp0oe2SPw1612vNsAjIcdb1wVvdgvFc56Cymvx5jdb22IcTR75roMu
ybPbk3fly3ELrcnWCkV2e9b5gHJa/BVMTouYxJgnxkYxfqvsVtn9rNktXIs6
9ZyMKLZ2pY2CgaTtPhax2ePIv0yCNWMyYjJoTes+EebsKfw2tv4ZurXKnEnr
JN1PQ0zX5tL6mccyTpkfmu7Hbnd9udtbsbU5oXIjYsppvc9ZCGePRdCVLYep
ZCXieixHVI8lfK+cz/8q2cDPu9meemzBGmgaTsE06k1ELPoRum79NUxLfwb9
pE8RNf9L6Gb8GMYBbyC6730Y6m/Dsus7RLz8Fxg2foNY4qZt7JvQ9r2DyIEv
I2b3L8nvvkW++iWk5Z9DWm/yyFOewEyMTm6+AWuva7DVXUYc3ZfN57Q3XUFc
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
0OXCH5G06Ts4q2+i25yPYVj+EcwrPkbG3I+RNPAREgc9Qfz4jxDx5D+Reejv
kDLmHWh3/wKpq7+Cvtc15De9Anuf63yPnO3l5xHn7b2u8j5uO3E5beG3KJrz
Z6TO+z2S536HpNm/QPKMb+j64DMkTvwAcaOewDqUrg82fgz99HvoNOwcEuc+
hI4YnlJzjK6FDsBOnLbWEbvLD8NQfxSOuqMwFO+Crf4I4gt38fljcZV7eP65
rXgrHNW7Ed98EM6mfYiroNsKWvNSpTPP17pyzwtWueSTu2bMW+aZHeqe/e3N
7rlecs+fE2b+8Fmh3WeJ9orxfaSWekrvc++2mVUi9vrzup5WyGlhr3Gv17wP
w8XWDPmslkA53sgVCLtls1riajzia28AOS3utbyLucJrre8iwwdhJovKbpXd
fw3sZvXibI2JTaa1JGUELN1ddeVRdL8uqcPoc655I1riu45uZ73c7Hybr2MZ
4z3cdu2XT+LMZvO6mdj7cuxmvojNATXmke/OX8hrih25yxBP3ot57ijiuZM8
mK5oGZ/vyX1Y8SrEEwcSSKzOPK7HWkRVbIOtdB8MZQehKXP1MrOaanMd+cTq
fTCW7aXH3g4dfY1zzGmYa1zzO5wNxxFXfADRVfuJh6eQ2HSBvPp5RBHPDWNf
QdK0J0huvonEsguc1frht5FG3LYRf7v1e4ik0quIuPQbdJn3NlIGP0I0MTu5
6hbShj1CxIVfInHpj2A+9EsYjvweEQe/RUa/J+gx4HV63LeQMu0dZJTcgHX4
G8ia8zkco9+EZdADzuiUiT+Cc85PYJj3JTrt+BkKVv0a9knvInr2O3Cu+QId
Bt9ANF1/2JqvIa4XvU/+29GXrkeaL/LrF3u/20id8w26L/wzUub9xsPuhGlf
IX7Sp4gb+wHso5/CNuot2AfdQVL5RST3PIb4Srp+KduPlOoT/HpGX7QHncde
RPyKN6Ejn22q2I9E+t0lZO9AdD39TusOuOZ+l7rqy20VO2Ct3kUenfhethVx
RZtF887l2O3KXwuf3R5+q+xW2a2yW2X3D5DduswxvGacZbIwD86yViLpbVfi
s7lkrquunPGbuG3InsjPvg3ZLetaC7vduWpsVhjr6XbP67bmzBLsT87w8kLu
PU1b5gzY8hZAS+tuVCbr0V3Efbc5uyWfo2QVorrNR1dWu1S9kfcN63osQ0zh
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
IXD7N4jd8A1pbmL0rM8RtfAzhM38A5pM/RQxM/+I0FmfoNGAp7Dkn4dl3BNi
921EtD2OkLRTvHepPfM06eyTnN3MWE2XKfUQZ7ct9TBCW+6HmdYTLP/M0u0c
9F2O87pvc8ImhDfeDFv+QSiI3cqcPdBk7YO85Saomm/m8fZQWpOYOl9GSNlj
RAz+FI6Bn5P2/xJBg79G8IDP4ej1jM83UTckfV1nDix158LRYD4sDedAGT8d
/vWJ1fWmc2Ps1pXz+7fY7cxde+u1ni2/1q/ll9j98ozQspf5HdPjF+Z7u9nt
Zreb3W52/3uxW+xIf4ndbK/blb/2u9hdieHMWG8WZ88qZy81P/Kn5nojoCPu
ysN7wxJPvjx+NMTRA6CMHcr9bUBwMYzV+kIR2xfe1XvDkTkbUQXL4R03gK7D
9s8HQRLRH0Hhw2Akv+7XYixUbWbDlLEWQu5G0unDuW4XokuJ58PgaekHQ7dD
UEw4D4PuLegTpiOw9VKYIqZBHz0efrXmQZd0FLoGG0hTb4GygFg59o8Qz/4c
2v6PoetO/Oz1EH4LPoGVdLSDvU48Ck2b3ZCPuImAklMIHPI2NMv/CGPqMUS2
PwtZ0gGENz2IailnIHQ8BkXuScQVv42YofdgH/8IIaPeRUzPu/SdT0NedgP1
Ui/A3uE8dFmnEdr5OuSZJ6DLOIXQ5NMIzL9M+vkmIhOJ3VlnuNk4w4/z+Dnb
/7aQ9ral0+9A/LZnHOO5a9rE7TBm7oei3TYYknfBkrgTjsTdPJ7O+rrIMw5C
k3sChsLLsNAawdz3Hkz93od58HMYB30KXf9PYBtIa4sBz2DvfA2KtrQeaDQe
9ibTeY9zc+2F0NdeBH2DBdA0mgVFw0kV7Gamq9DeU15jN5sR6mK3vtbI3+y3
Vpndzrzz1/ut/VLOuZvdbna72e1m938Ku10xc1d+WuV4+e/JVWMzw9i8bqd1
hTqya/nMzyI+45PNB1NX7QlddBn5w56Q0qN/jX6854ooqozPGJFHdIc+phfk
9J5HRA8ENBgNfeNx8CamW2oMgrL+aNhix8EaMwrWGsN4b/MqidOgIR5XiXwL
YXoWR+8Bv7CuEEwlkLZfDa8db0N472cE5O6j7zQSknqzICSuIn4egrTteghs
Fse4a/DPWAN13ArIidO+ve5D0+Md2IveRnjHm5Au/wrCoR/hM/A6ApOPQtz1
JLS11vE4u7D3GxgXfwL/lMOIybyEWrnXEZp2FqacczBlEu8zzkI95D4CJz2B
fNwjGIY/QmCvd+AgZmt630VwPl2z4BpCSt9GbOYVhGZcgLXTFcQU3IIjna6R
cx7heVc5tx3ZZxFIxjQ4i6Fb045xY7F0VdoROk5Mb7MH8mbrYSs4CmnqdgQk
b4e23S5Y2+zjrNdmn4SemG0vewe2/k+g7fculIPeg4meq3u9C0XPpzD2+yNC
BvwBocW3eI/UgNpzYWsyFwY2Vyx+PrQNl0AdvwiquvS6/gx6b/bL7Gazx8r5
ravN+D35JXZz+x3srtxrzTUb9NV+a66asV9i90v8drPbzW43u93s/jdkt4vX
lXPVGMeZFmf2Rt0dklcxt9tZ612+z03G+qoportCbM+FLrKYx8d9Qum9un1h
azUO8jr94VejP6Tkaw1Vy2Bh+9eksX3D+vIe5iHVh/G+WkKbibDUngavqkN5
bbcmoi+ErssgbbkY4hZzIdR/C0JEEXT1hsGv/3bSm2vhl7wUwp1PISx+BtHw
QzC3Il63WQPj7Ivwbb8Rog7HYZh8CbqExaTLN0KRdhyyjEswdrsPxbSPIRn6
DuT97kI2hpg7+SMoWu+Gqec16Bc/h2LYHUgLz0Lf5w6qFt7i/DZmkDbOvgBL
56uomXMdsSkXEDz8KaxznkPb9w4MI54gNudt1M24i+r0aO72NuLSryMk7xqi
sq4iqvMd0tHnUT3vFiwdr0LR6RJC0y/xXHPG7iBaEziY/i5nt0t/2xKP8HUF
642mytmP6pMeQ9GV9Hj6fkSQLrcWXERQr7uw9LkHfc97sPZ6BGPpQ6i7PYCh
z4ew0XrFXPYIDtLawQM/hqnwDuStdvDZ5IFNlkDXcB00jddC1YzWN80WQ9l0
PvSN5sNYdxbMtWb9j9nt4ndldr+svf9xdnN+u9ntZve/KLv/J71YfovdPgGx
3Coz+8Xv9uu/8z8LuyvPf/9Hue1k94v/p5X//76J3c574/V+CP8ouyv3ZXDa
68z+LXbLQtKIyc7jAcFpxNiMl4z5F9ZTzWk5FTVivA9qYBZ0wbl89oh3KPG8
Rgmf2RlA+tY3qhiqFsO5XxRXI70bmQ1LZCdozOl8lokoqhCmeoMgjSJNHUU6
ecwaeNfrD6WZtHlYT0imb4G8Vl9aN5TymSJBg3ZDmzYfQkxv+DQdAUO14VAF
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
/OsjYDYR6wavklclb507DzpDHYyRBeTpi6FPHYI2mDiW1QtTw3kY5t8PcdEh
yFuOwmgjZofO4/bM5THkXe3k60OLiNsLOI8vjqqHLGw2JIFz6H2th9rWQp+P
GZAndEHSsRfqxqNcvZAsn9YQMw9AMucUVGWnoFj8GLSzjnBzvwJKj0JYdR6K
Anpc6iBkbC369D0wxe+EpuIS1AMvUzzbBdnh9yCedicES1+BcORjBOz6GEzz
DQgXvwqG+M10Pg/VSvp+8TUuhstil8GRT+9L1DLETBmCiI4t77gCxaZXEBTW
RX6/C4xkEYQzTiFg8d1gYjfQmoTWRY6FEEQ0QhdIf5dwGIG190DRdoW8PJ3T
wqeh3Po5eLu/QNTyD6A+/R10F8l37/8Mshf/gKAn/g3iTW8Qs0e57ZQ5dz/H
cJdYjpMHd5e7Lx7/N2/Gj8mN257735774N7+2p3ZvvLHXXVfbr3JPbg9VgN2
K26bMn30TRur43bpFtwe1dpJ2c3N+Uzqd7Gb5baT3Sy3/ez2s9vPbj+7fyi7
xXRNiKwlHLvZ/XH2K99UDJ59OkQRc8EEN8FgmQo9nYcwsh3inC2cHzUmdILv
mAm+sQTsjFi29pFhvba9krhZwN0Ll0UTn6cRg2M6IAmZBsYxG3JDIczEd1Ni
M5i8jVA07Aev4QT0DWuhqiEvHNIGdWIH1M2XIEpch4C8VbCGdsAUQR46oxm8
4A7wS5ZAG98GZumD5NVXQJixBtbinVCGkC9O7YQybx635y/QUiwInAupg9YV
tiJah+RDEFTM5cMFZ7QgwJQFxloGW+xCio1LoY5ZhuAI+j60HtKoWnremWCm
rIc1rYebkSyZth8y8teK6l3QVY2AP42+FhCr269Cue09MFe+gvDGr6B49rcw
l94HXv9bMF/7dzD1j5AXvonA1R+TH/8RDNVPQtL5NCwrX4I5ain53nUUpym+
p7I+bTUc6SNQ5tP7NnwTTOk6CI2VHFMC6fm0+acR0P4amBknoDNvgsXRQCyn
9yNwI5j1j8BUew7WpF0wld0Fc+E1hBz4HpKLv4Vgz6cwrCPvffZb2B79N2h2
fQbmzDfE532c3PltYvfPx9htcumwW17bMZfcc918yZvbt2O3B7e92O3N7dGa
7X0T9slZOed4erPbndscu71mcntwO32jz17lfwy7nXXcfnb72f23zm53/f/J
bveffZ377V777Tnu/V7fvleLsz7/j+nVwtZeSQze/Vqmcqx06tYsn/h5df88
u+ebO/PMuVxz7v53CVcbpqXz0ttKyfuSx8sdBhPSTL57DoQxnWDil4FJXEHX
aT/4KRSvwskjxtZDRx48wFIBdSE9Pp5iUFY3DKYuCDKOgOl5APzWfVCUD0JS
1Aq+dhqMoa0QJLUjVD8T8vh6MOkUR2LnQjHrJMS5S2CLrocmYTmtBXZDXDAM
SdRiqAqHwKStQEgxncP809Bkb4Y+cTHMS0bA6OLAlA0jiM6VsRHfohshckzl
3kt5WBMYew2xOxVScy4UdGzt1CGoyw5ByPZ7SeiHIbIVVnsVJMRVJnkYCebF
EKfvgLDgELf3EBa7DSHJ3VBXj0BdewHq9ufB7P0Expf+F5h/+A8oNpDnTrkL
wp1fQrP+Y0h6X4Nk7VsQN92ApPoBiOc/D82q96Aq34Yg2xJunpkyYzUiYoeg
7b5I65Z+GGfshKD3KszFxNKqoxAUb4cjbSd3jpquy+THN9HraEJw2EooQgbB
TN9HbNzN9XU1Z5+AcvOPYD36CzA3/gkhi18Hc/Rj+vlbMNf/CbqRz2E88Aso
Wu6GOXUH1LT20ZfvhpVeI1tXFZS5H8bcvS62j/rx/cTRAx5zNW8n9xou3zrI
afS4E2V12xd3FzvDk5Wrt6lHv5XxeWC+vLa7uHncY7plHbeX93Yxe8xju+rC
aP1lSFnpVg/mKff9clajvF7iEsfs+IUusfUcGo9eLOO85pjt4nWrl5rH+q94
8lrtxevxXiyePVkm7cXixW5fvPbsxVLtkjuzFY4qTt6svl0vllvz2rMPC+tT
bs3t4luz2ivOurN7ND5n/9m9WCZjxzjLf1hPFqduxWtfrPSz+2+L3d41Yu7X
gCioFio6lsbOzgKrhzJtFRjLdPDIP/OsFVA5SslT10BhmE1M64SIfDGT0QNj
/jA0hTsg6n0O2t6LYNqPQlp2ABHkYaXkqyXpq+l6ptghp3VCQS8kycTfuC6o
I+aRT54Ni6GOmxFqnE6sp1gijWsgj0usajwJafkOKBO7wYTPg6RgN+Sp82Gz
0vMWDkAwYzuMxnkU35dBlbmBzrmYWwuIIqqJ55kwUGyxxpCHNs+G2lQNLa1B
VKHNFCMXQ5ncA2HCEq6OTZHeDVX6IkTb2yEq2ABlfBeU5Qcgq7sA2YI7oJzz
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
PfIl++Tz+e0LS+ouHvP7thfEiv3b82NpL7e/vfL5nuXzmc3m1/nCt1du9lOn
5jvzDtwXZuSxlNn32N22Iq/vy3slYiGrF3uwMDYvjtWwemUflnIei8/55nM7
ELtX7cUyj92rZvWduLuur8jue6xYLV8WsjprKbMXc20Zdi/HziC7/32zW0nM
lTtLfR5EnnU8FM7KO/vo5QHZrTKT5naVQequ5V4igqmcNNoIBNKojNni8Hbu
iyZz90AZ1sI5JjbmQZU5CkX1ZaiKOqEYfA5u8wgMEUPEPOJxdh+E2PWQRHRA
TazUJg0jLLIHQuEOxH/8jxA6LkOfexCi0t2wh/XCYq2AI7QDkjCmw5sRkjkE
S+vjkKy9Bn0a5QOFtCavGaf1sRteWzflDFtpfRkCm93N9gGcJnrOxocgitxK
jzvDfdscoaMwmDtgL9oCDXHYHTYEbcowNPXTcDYdhCppHKLiw7CMvgx9403o
smagypmBJ/kkRF1XYfN0wVq8j/eFK4iT0upXoGq8QTnGQWgrn4K87U3oiq4Q
/0/A3fAcVO0fQmh5AcKWb0F+7OfQfOdfYVl7Bp4UynFm3qC85SY8HdehjhmH
qelhyKduw+uehKH2SQg934Om6GmYh78DU/8HcL343+HZ8TOIW96CcPpn0E1+
BunVf4L+8v8K5ZXPYSBWMo+2iKJTcMfTZ0N5liN3H+wZxDTiddSacwgpOUt5
0wE+f8WZ6TsvZrrWzfbT847c1b02rmkP/AHYvbyuvl92z+c2j7vM9sPt9JX7
txeze3Eft99z7gW9YMOL2D20lN0LuD2wIrsDcTvI7iC7g+z+82G3xjP391zG
e7pYKB335oPOZ7c8qo843AalJQFqSylx2jeHTFCkQ5SyDerM7bQ+tEPsruPz
wRi7TWHroQhZC238NNShbTATLzTpx+jxy6BP3wFh5AYMzUdgiOuCPrwVArFa
XrwX0oxtPFdg3wtFO6FqeoQY9zTcRY/RzzbDRI8llPTD5G2HMnsa8rwu0sTN
kKfQmp56GK6i41DnEP8qN8JmaSVtewbO6u0IjRuGm/mklh6GvPIgYnKOQhU5
ArOxB5EFB6EeeBhC/Ba4XBuI0Vtgj9hEa1gffRatSCjdBXfpXlrftsNddh1C
//MQlx6CkvIVXdlxCBufQbhtExykzZ3xu6HOmoYj72UIw0/4PNZLrkPc8TbC
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
RnmHNHMU3qgxeJO2QZ05wtmtSRzi3LansZxkDLqUUe5JE0jjzunar8reB8nu
QD5oy83+WtkXzZ9P2jI6+0vO3/Zbh7YK37SV54v4Z/ZidvudM/IHmM8dZHeQ
3UF2B2A38zt1+vQ2mynGZnizf30cL4Zgr+bzrcWGDM5shT4RWlsm/f1m89dh
MOVDTf8KZubLUgdLDKuN3g7B1QllxgaoQkqhThindWUzZJZCiN1lpE/7SYuP
QVp4kpiwifToMQi5oxAe+RjCthdpzSDNS0wTcmcgZrXInl64VOshdJLuHCNu
xV2kdZU0ak4lFN1noC27ADfxW1Gwl15PHQz2KgitO3ndtol4JVSdhWntNVii
hvh6ZIpohTeiB4qweu5PbozvhCqiGdroVhhjO+72iLGQeFshyahHGOluIXod
LB1PQ3BmQCKEUa6SQe89n66vPK6/mf6wxrDH64aK+CbP3QtR/nnY0o/R4zbC
6a6EOn0PjOvOwOztgTT3EKxRg9DUnoaQMgRdRBsiwjfDGdoPIX8Y2uqz0I2/
DnPBQXgiBhAZ1k1afAjC9segarwGdfk16HOnocye5p+TLHYrdKnTvCdN3v0s
lLOfQ7T1m7AXH4CjYB8UZacgKn0UlsyTUA68DuGpf4Cy9jkIJz+g3GIGRg8x
KHEEQvIGfr5tSB+FM3kMDvqZi3hsj93MP0MH6XJnyjbS5gvZ7G9v+uvQzV8m
lvMwXW7etv+e7eVq0fz4mt6JpX1gK3G7IyCz2d8o/ztdwTttpf7t5bitXobZ
6pAaHl/3jM8gu4PsDrI7ALvZ3rcln+ttpaea+34yr3LWf6EhzSwKaeb+xYIq
DlJ1JERKCm08RHpWr5ZK7I+EYM2BKmYz8fggadZ9dE0TX0iLCi7S5hF9ECdu
h8G7FjZ3KmlWYmLmYXrcQUgyx/9/9t4zvK7jzPOsm8/NOeIi55xzzhlEIgAi
kgRIAgTBDBLMOQeJoiiSokRKpCQqRyvbsiTLsiSndra7bfe0Z3Z6np7u3p3d
D9Mf9tn/vlUQJIpGYlBy40M9Fzj33hPqnlO/91/1BliD+6EzroHTsAiu3gtg
Nafh8tQLHy2jpU/4jBlp/NS0HoMyfQeUceOQmkkn5k3AFLoCssKzMLtrwAJb
iPVr4M09CGXMRjB3NpwVE9A1HCWtei9UNQ8QH4mLrmoRV6aOobHRS2NJaCMc
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
1/aUYcFta8oqmBOGRB7wr4LdU7U3b2yf1+G8e+yejtvTsXsmRt9u/PaMzJ6F
3TMx+2Zuz8TuL8aBzY/d03L7Ftl9M7cX2L3A7m8zu6fen+L2jezm22+8H2+H
3XrirpIfL6AMjMcokwbl+UDVvgbIbcRuXQj0AR1Q+AdIexOrDXbIJQ+UUjwk
aw7xuxR6b42oL8Jzk6lofFAS/w3hxH5nATzBZBME10KeeIz4lYoAT7nIqcZ4
nZJgeu6D+8H8mbCF0LFjm+G10/P80FtQ3Pd7Yu/D0FecgaX8PkglJ6CuvRcs
ex9c+cSjopOQ15yGsuUYVG1nYc06Al3pQagXEYsr14G17YOB3tdsJA3fexaB
I69DX7sdrH2ryL0aVLoPctLGrogWaKKbYMobgDNnOSRPPbSmKthDFov1fktM
O9wJnZM+33RNtgg+z1gNW2yrmPvn9UPUCT3QJnfARXaBLXEjbNUnwFLHIBH7
DH7qj+JVUCUMwl+7F5bCzaSl18O1/ipY/naYMo6QNr4GZdvL0MWdh3/tu5Bf
+ClY1QUom64Tv4nZcWuhjR+FI43XL1km1uJ5DQruY8fjseWxa6Gv2g9L3ha4
vL3EeGJ08mbBeFvCFqjzx6DsOAR972Xoio5BH7kcpsS1MJWcg6PnFbCP/h0B
Wz4GO/xr2Ba/A+PEh5AqDkBK6oOSr7MnDcMUxuPoN8FYtxX6hOUICFkKZ+TS
Sd0dvUzMletiue3SJ67bErUUjpi558zvNrtv5PYku2fLpTKf+K+vlt2zcvqG
pud1c26I375b7L45fns2bt9Ndk/H7QV2f7vZPRu/efz43c7VMhvHv8m5W26O
+55qU2tZam8F5M4SqDg7ef4Fei55XhVes1tDvNS46dpJB3OfM+ZOgSakC4zP
MfsXgRlzSFcn0/VEQeeMJs1K94YUA402BVJAAWT2fMhsJfQM1kBLjFOGEq9I
/2mTVkBrTwALr4c7aJ1Yb5bF0piRdQXWUDpO8ErII0pgtxTDRBpVYa+Arewk
cW8/jAFdUNQfhtR0dnLOOmcbWPI6KNJ3QBO6Bsb4VSLGyxzdSLr5frCOK6S/
q2gMrqXtg8TP81AMfAA29gO4fvBvxKV3oRx7B+qhR8HqNkO283HIlp+Dvu00
9NlbhKa0pw7CE9olYsM0CctEvheDp0HUAuV5VER9saBm2Dx1sATUwsjzVxCj
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
ecuHbO3fTQ+s/g7YaV7eC1I3fDmnv3y/kXkRsiPE5zTM5yomdcVaYAlz3A/x
OHKnyz2sZQ3XT0bHerR/dahwrNxzk7rOJnnbmRNkOBkbriPzM2RYN/mzAFf9
s3DUPaH9rO2lg3BIXHSWOl3WzNP7teeH9Ih05Pdp/pS9QA4UZM1bdPk+5Zpy
ObtLeenIlTku+7QkZG58TufopbeHJTlNbbwXfmp38Ses2S5dl3bVHFO97JC8
8qD0PhnQmDSpXaq9UiQuvtjO7Q0gUf2kxm5bUu3U4wuIlS7DmpGct0Fq81mE
ZW0g3K/rxa5MJ7fJ86y+AG/fIo/huNaQS+R6yfER1eurjW3Ca+dSXLk7V879
Ep9Dct7EfKWh8nvpowSkDjh5LvXTpSZcsPIobC7eU+4q2Nw52H0J/h6n5s5q
3SFPpA++TA3i4h8ldtB3eRKJkS/D13oF/q0/gzn6C1h3fRWOmovI1F1BqP9V
aumfoPD6/w4z/h36KK8gfPUvYXq+RX7/Dmy7voHo0Ldh3/tnCFz/DZyNZ7Vn
mfRi9acntR66xPn5SpNwVtBnKU2sn22rzTlvcKzYRs55Pw45Xss1VO5lq/F4
9f8v526O39U+yfztu3F69foqK7P5zv/f7T1rjUW7n7nxB+X03Vi9kWzeZPf6
2K11eQIdui1nqGzWQKtqMmGvrN96EtTAiQnYoo18nRouWKs53oHUSeraw2Ra
n9b/tISoq6Pl+WR/9pB+3uJv4Bi1m/qU3CI7LdynJ1KnPUWs4YmlGLHd8BaP
Ilh1EaHqK1pTTda9rYWdcJW2aSy4aFprai9s8SPk7hGdK3cWpDbJrNYLd6bK
c+eypi1x2NqvS3prk7OSnyy9smzchiUxpHPIkssm6+3Sy1L6dIhWlxh6iT/3
psrPvCXSS+5IbVPJZ+/k8XOcyB2kflzQnDBvxTyCxWMaL22SnYjUPkl+l/0I
G6+Pmz6N1Pe0V+5CYugL1PTbdC07zG156Q9Iv9JV5xRzW7S36Uf1jMzP+7IT
OsfuyU1ojN5yPTTv0rmrZg+kyeqMxqVZHXVweMpzRdJPzITqYJVc+uJuBNqP
IzDxNbhL83B2nIHZ+St4J7+G2MAX4Jggs/ufhWm7BlvjFTL+Ol/7PnxX/hHh
cz+Htf9NBPre0ppppvctBI7+Iczoi/yOZhFsPQZfHX20wgz9kK3qdwizpE6r
6yGwcZPdny52f1xj353ZYq7klk80f3uj2f0genuT3ZvsvpdZl75nR7BVTbZh
8bfovLid96YvQ05mqbFjVdob0kbd6IpRF8eP6bMttbftsXJfbtGokism+lfm
y6UGm7BC66KUZlUrS3yW1kPl/6x+anvqfmdoQPuGyDq0uzgHd+UitfApOGvO
Ud/KnPc8OXC4PJde5HvyW8paO7ZXtbtodGG3rMdrPDmZ6M5znwXRq5OI1l1F
qJE8yo9oHJ0j1601N73Fm9ofS+bVrRHq4NgwfNTbnmS5R7jMY/tSW7TvqDVS
7hEqtdrCdadgySxq3JWsDVuz49qTO1TxJM+xX49P6pyLFnbF6Z9kuhFofZHM
I8fpMwQ0PrazPLauNqeYHiznftM/kJ7f5R4mI9pj3JXj8USWYtJKo/p/6aMS
LM7rOGwi/B5dYVjcaTh8tbDL+ruTfpm7XedHPMVRBNu/CCO9stsOwyF85nfg
H74OM/s+EhI3PsL/73kb4aHnEC4dofa+hMDgLXhHqbuv/DPsM2/B1fkEkjVP
wFX3Aszga/DNvqlrGr7IBMKDT3DbZ2Ct2Kdxg+K7BHK7EcxP68+NZvejto1n
98bmZ288ux+f/O27zY0/LHY/6Fz5Jrs32X0v014gAe4r2ASpfVrmeaf2zZA+
VybeWe7VEaVmo772xy+TPedhT/VrbW9LgBwSrc37RXp4mDCf18Jefn6bstun
c/JkRZzPAnkpvTGt0W06N+2RfGey3hXqpmYXf4G6PtYFS3prOWZKYtVLr5Gv
l6i9p8mVLRovLnPfoq2l3vbyWreb/oJwS7Sd1HyTOWapYeJM7qYvMM7PUivH
9sNR0Y1grdRuO09tf0SZbYsOK7dlrlyeV3u0v7yWJrFg5Lidx+SKldeabfku
RBvOwV54AqbE7VQf05zlUNUFWBN7y7VVMiWODxPwSox7qE9ztI2sfzed1/Pz
p+Z4XK33xW67rL2nhrXvqNZApcaWfmLSZ1zrtiT2lde1C730Wfrhy80iXDig
45fxUHPbKmDzVMIZrOQ1L8L46IMFeT6FOcQazyPS8jTZvUgfbTsMP2vvu4ng
6Juw7XiL/sBpmLFvwRx/F9bO47wWe2A6byA6+V1Y278Cc/Z9svoGIk0Sn3gO
puVluLa8Q21+GNGqrYgktsLdfBrOukWNXZRYBG9ul87tSzyg7PNRs/VxZ/ea
1q43JD97ff2118LsxzF/e73sXu/69ia7N9l9T3YHGpTbZaPmDkoMeZ+uB2v+
s79Sa5b74qcRSFzRNWBrXDg7rBrWFhrk/4bLtc8lPjpGrZmfh4UstIa6tJe2
8TRwOw3UXdSKZLfUPJda4sJua6yWLOfPcC+3tYVGPoZHVPPbY7xfq3fAWXGU
Opm6rnhNeWsrkola/2zXUhx7Oa68XPN7h9ZqdaVnefzz8OfHdB7dJCeVn4HK
Cwhwe9YM/+ZYYQv1as0Wf2akzG3pA8pn3p4c0XMQzS1z/9JzU9e9K7oQqDlC
f+BprfvtrKGez40iWnuZPN6nMXDOXIWyW47DmepFvP4k99WLdPsN1ecSqy9j
o3B51fXufDkfXeLrXFJnheO51Fz1FPfoWkO04riO0dZ0h/YnDRRm4ZeacHx+
jTsCl5/fq6ea+jvP76DE7XTAKz3Jqhd5Dqe1XrzMG2Qz+7UWrGvsXXhb34F3
6JbWcw8s/hypW78il88h1f48HPM/1N7bkdHfhe/492HtfRaJ6jPwDFGz734X
6e4vwhfbSp+GmjsnOnta+6mKxg7c0RdFfBCZG1mv7lzN1pIfvRG6eMN19brz
s1fW2utl92qM9mhN8rK5ldUftU8mf3utcWjrYfd6aq9ssnuT3csmedrWcLNy
2/jbtBemLTqq9cEsiR2q+VzxI7rmLc+HNdJFvS053Dz38B5ytw/exJTeu7Zk
P7m8jxyd1zlZe7BTX3dHOvTYjJ8aPr6lnLOVmVK2m2iXvldyqEXvag9O6cUZ
aIUz0EQfoZvc64K9NARf9RyZc5H8fAqO/CUyk5qXelxi0WQ9XObRnckd5dxo
6vZg1UmOE3Jcs5pz5aiaJdue5ZhxFCZBPyXTqc+trG+L5hb/Qc4xVKSezst6
wKDGrIkvE+C2ja+Tr/coTz2V3Hbtca3jYqvay2OSPpbXyKkuBAv0PeJ9Ovcg
dWNjtQuwpMZ5/POIS40S7jtYPKJr6KuNcYGag7quLucmvUfdySllt+SPy/xG
su6IXkuT6NV5CFm7dkg8v5s+kTfF656HzVeh95EjOKjz+L6KObhKkgfPc6oY
R4GaPFX7JPzbf6A9RvzNb8HZ8ypMJX2eiZfgPfoDxCa+A1fLG7Du+y7M0MsI
jHwFrm3fhrXrWTL4vPbsth54F7HsCeTpI5lkn9ZSD8V4vElqcHJEeo/4ltbv
pU6rp7T1c8/ujdbV6+H2RrD7fnX1MqMfRf/ttfUCu392P4y6aZvs3mT3B+wW
zSuxaa1aJ81KHa29vKgZTXwawfQpfcYsfI+81x5tJe/Gtbaa9t2O9mletyNB
fU3+OslTiSmzxtrhDAqbW8n2XviDPbC6Ra/zvirw8/mdmkvmjE7ShnS71kiN
mtRQd4X7tYeJxKPLfS/HZgISz92hc9CBqvOI1r0CS+Ux2CoOay10iV/THt8Z
qX8yB3fVAmwBat+KTtXrjtyTZNaw6md7cAa+UtPtZ1h8EFt0UOPApMeHsFvz
UJLLvUyGNKZPYtkcUkslPYZgzRNwNLwIR+0B7R0SL56Fn/ral5rQscaeHKN2
p29QGOPvPN/oMOLNT8Ii6/A8VqkHsxq7ncJubl96jEqNN4kL0PpxhV0aSx6q
3AU79yfz51JrVOb5jY/XyVkFt78WxlvkuTbyWvZqnoBcb4lhk7x6yU9zNc4h
H+V12PI2zMBXYDL7EBj7EpyNT2g/EmfzC3DMfhuZJ/4Upv0p2OuvItH8HBJT
34T95B/C0fUMDN9j3fYOrENX4YmMI1GxR+c0QpInn+Z3ld2ux7ystSU/TnLv
3YWdj1zXPmp7nNh9t/Xs5XyGe9lGsPtOJj/uPTw/6Zqnm+zeZPed7Lbo3Hk7
dXGX5klpflN2H6zJeVjkvouU72ep9V3uBzZRfj6E19TKluhOvneQLO4iE05T
A85St7fCHSRv481auyXgJdN87dxek+poiYlyZA5yrG+AJ9yi9Upc4UHte2Lj
ftQviLcjFKTmDdH4P190HC5qT2GsifGYE3Vk9zXq6UtlHVzYp3ndWkOU446R
8Yj8DRT4f6lvXpD5an4+3sBntIbnQ65L77JEeY5c1vclV9vQl5B9yFhjwn3w
kT+eeBd88V71J1zpFo21D5Wehb/tG7DWkcvcrjM2So25R9kZys2Rqb26XX9+
VNfgTWAbfI1SJ53aO1inceKrsdsUqZFr9iJQPaOaVfLIJe5dxj3pk+rMDCq7
Ja9O5tHtqQEYTwXZXQE/7wfp4ybxgMbboLn4zmQHAqUp1d4yPyJxetq77MzP
YapOwttwDM6ZV/j9TiHQ/hxsW34f/kkyvfckrC0HEKi7gFDHq/CR3WbgFURG
X0Rg+nvwjL4Nq9S9yfVpXEK4dh/Cck0K0l9um+b2Oclr6TfnKYrfUZ5Lf9Ts
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
aA0s1JaiaX2V28v5YbEh2Cp36Jq69EJzJQ5Qe89rzVSZP7CHRuANS576Fkgt
EzHR4DL3LLYcx2oyfQjkn6euvKY1xKU+rPgGsfpjPK4TZPlWrRMTqHkNFmpx
U+B5Fugn1F/WdWBX9hhs1NEyF+9NSn/P7dTzfXqsct5SU9UhfUzj21TnL7Nb
dLhLxuLV2K2143m+nnpY3eS1u1L7czv89HU8VXB6a9WPssW7tH+KvXJRue1r
OANLfh62mosIFsepvc/C2/9t8voK/I30wVqOwV17Gq7cHpi6E3DO/gyG73fu
/WP4tvwOQl2X1OeQmvGSCy/Mll5h/syUzp1LrXVreqmG64r2WWf3yuf/IHXP
7mT0anlenzZ2P2hdtPvl9sNg953sfdg5YCux+2HkfG2y+7PDbr3vgk3UbE0I
p3epxjZ+iQsbgrdw5kPclrpeH3B7Qk2eb+Pvh7/qKiwcr02AnApn4BM96+/U
2Gvl99LcuWhx+Sk6X/gtPb9dyT26fRMmb6I5cqaGzyef8cic5nx5JU5ccq/I
OxOlvpS+otHucgy69NJMTPKztMQMvKXDGidvfGMab6XHF+/WfmUe/s9TITW/
ZD8N8CW2k5F9S9aj/Tod8c6yJdrVAtUvUD9u4/trtSa7keuQ3I5w1T7Nbfc3
XoVJz8NffwvOylk4C9KHZFbrtkrvzEjdTe2DZonXwhUbRDC+k/ulnpCaaukR
BGql1/eC+i7SK1N0uY5jMvbdhd0f5bfUdRfOG1dt+X501cFir9WceWG319UF
i6sc4+et369r3NbKc5rr5ajaSh5LDPMiPCNf0P6o1oY5+Ma+D7P1O0imW7VH
m33wOuw7/gCergsws79EcOBdjf+TnuTC7nIe8FS5Dkt6m85vaO31/PrZ/aBs
u22r5Eevd/uPC7vv3Svks81uT6xfzR3tu6t9Vtj9sPK1P03svpPbd7NV2e27
23vuzfOP2p3v/eR4fv9sd/o6Na7MBMhYaj8x+V1ek/85ik/BWhggL7dwG9Qp
0eFyP1BqRGGkLcbxP7wTkcrjZX5GpEdVDdlKloSayZUWnTO3uMlGb0e5Dku8
aalW2hDsUl+NXJUaKMJFa2Ya9sKCxmx7ktNwLuWH670e6tX5bek7pr3HggNw
h6u176hJ79E+Y+E4xyN/u9ZYNVU74RB/glpf6sp4eA5SY1x6dVt1fVzqo3XB
z22FZNuSgx0d0bl8e5ZatvIZ8qyP310vAvExBPN8v6+D/sQJavg5zUtzVl8s
j1MNPP/SBQTp/2hts+oFOJIzcJQuI9j4FNwNi+UccunflZlBlPv3Rqo1l8xT
/5SuBUh/NVOxQ+PUI+EBjb//aBz6st2O/ckeoK/RC5uvSuPKjUty5yq0drl+
7xzXAuFO+ONTMMVp+Ntukq0LPK82uIqneW0G4O24Dlv/l+B2t6FUvQsme1h7
gVqG34SZfo0+ETV7+0WEtlN7L/4J3HUXEOX3EuL7VusztX72rc+Wc6zuZRu+
/8zkirYaWx+kj9d6ebzeumjrr0H+QW2V1Xp0bnQvkcc9f/tB2P2o2Lxs98vP
TXavj93W/ATsifOwp5e0d2iH8kZ0oiU2pTVIhVHhSrIpMKZxXZKn7Qi3kav9
PO9u1dw+alrJF3cGR5XZhmO/STXClZP86b26X1t8nNyapE1oT3AbGXqb22rd
mvNd5ndfOYZd+qCRe5bcrNYZ9ZDRXjkviaEr7tT6qZbwkm8eGeJ4MA53Yabc
D5z7cXr7YU1x28kxrVPjoV9hK8xqrLrM+3rSPNfAANk3DK/EaEudt0rpfzpD
LtIHqTyr+slU7Ie19rL2LJG6n4a6XNaijcyHVx2gPj8Pb+018ntO5xfks8Jv
W7IP3spDCBQWdY1f6sJI7LnUmZM59Ptht6zpW72VsDp5n3lay/1jAhUahyh9
0o2zQ+fogw3nqbVPwJaRGLh5+Cp3w8fvKzRwC5bulzXvO1R9kIxf1J5fjhby
eutbiLW+CF/jdSSe/GdYxr4Fm8b396pftV52b7Stxu4N3/9jxu6Hye3PG7sf
x/ztTXZvsvte7Ja5YmdsEZ7UKdiyI1ozzBrbobW1JXfKktqp9ThFhxpvf5mt
EkPupdaTePNgK9yhQbjCw9rzxETyMHFe+/Q8PIXnNCdN5szdiUmdJ5e8LamL
rr2nQ3VLc+v3np+yiz7N7ijzNjnB/bXDy/274yPaZ8sh67WREfgk5kX6nki+
eXpKP+MrkPXiR2iPbT7ryXayl+dWPAFHflZj+KQejNaCjXKcSPbqHIG/8ojW
fHfEmzVXLFAh8/lT5NtlSN9yW3YKFun3kaY/UdqqfVBs+WMI1N2iXaafMaJ5
atIXzMLj8qUHkKi+op+zx1v595zO8wdSQx/KrfkYt+W13EK5P4y7pOy2So/u
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
cyrb195ksT59Hr3UziZ3Hd6KXQgVR3kcW3VtwBuSdXpq+TTfG5rUmDRHokXX
r30VJ7U+mSfVWWZ3dr/WVPPyeoWl5nnFedhbTpZzxTMzqqmdqWk16Vntzh3k
sZ/WWD1LRS/8tdTErS9oT29LtgRTPUk+3oDbw2Ol/l+d3XPKbqu3BHegtcxu
XxWtVtlt4ovw5Tu0P6ij6gJM5Sz8mT1af8bTeBgu+g2S5+6rPaE8Nl2vwtv3
CiLU5daWWzDjP4S99lkU9/0Ipuc40k76XjkyPtsMT/XIJrs/RexeK7fL7B4s
94v/SL+uD+yTZff952X3YLln8KeB3RvB7c86uz9qH2fv+mw1tm/EtbkXu+9q
oUY4fNSs/h4ys1K5a6Ld2m9b62H76+GMtGuNFeMkC/xV1I9t1NNXqelOIly8
SA3Xwc9Uq/72FZ/QeipuWTuOHodV2JKVdd39sMT2wxql7ozu4vM7ofXDXfJ8
JY+RZafJgwbYfIPw8Lg81MQagxWR3GWyOdyrulhqvpn8GPzpK3ymKled55L1
W6mXUs4xLz//llSt9uNwJGcRzJ/l8bdqL41g4ZSeuwlVapy6KzAKX4jHmOH7
w4MI0R+R+QLp3eJNDWnMnCluRTB3Ws9Deo1LHRZPNf2a9KiuxWu90yWTdXLp
RSrzBWXbQ9sKdwV9guoX4GjhsdQchrP6Oo+hF7HEcPk4ZH2COt/NsVL6iUo/
cB1TM61aF9346Jd5m+D2t8MarOM1K2h9Ol/0sPZgC8aGYak9ze/lALfFY2ig
rq8ZQmDk5/Qd9sC0PUGtfYnHfAmxsWdgbeD7d7wJ7xR5XXEJmdH34Dnw54iQ
7dLbLZTt077twfwW+iI8vsyomsyjeDPjt9dZpS7deutlP3p7OLFiG2UPGmt2
O0/hPnO87r2Ofa++2nfvr/2xnp2rrF+vHqvW+zF70PizjYpFe5xzwDaa02vR
th+1TXY/ALslFmyJ3VJrVO8R6TcW5PUMNJMrfbAmJYb7PDnKMZ9a0llzjtrx
FTLqBjX2/FKt0O30nRe1X6c7u5OcmSxzNLMVlgS1W2QOTunjnaQGJcssCbIu
1kB2D+ratjVCNpLfLukVKscSIFezvN8lXy1Tjkdb7Rm0FA9qbU6dUw+WxwoT
I98SElt2CB7p28n9SK0Zf/5wec030lyuZx4qs9ueqNV4eF/x7G12C0dlDd1I
v+r8GfVvpM6bNUctXHlW882duZ0fZnd2l7L7Tn5L31R7lr+Lj9GwAFvjFfib
3uDr+3jtGuGOSU8U+jPpXkgfEfF3tHarjGXJDt2GCbbAGaCP5W3Xnp+SOy5z
Fc7QTphAUzkmvuYUXHn6TvFJMnoEtoqdsDS9DmtmEPbmW+pvyPyJu3k//YcL
SB14H9bKQzBNz8E39Luw7v8Tzf2WmMNgcYA+2JTmty33TbUnR7S+m/BCmCIM
9y1x/NNtm+x+0D6dZd199/XslXp0rofdD9r3a6Ni0TbZvcnuR8Fu6SG53B9U
NKsrVlL9alzDZF8deXwOka5fw9b0AkztPIz0v0yfhEkd1zqfkvftT++mRp3W
XC5bfOfSOjgtuw2WwjayeztZPKS9uRxxWfvu0rlerZ8abdV1dm+Cz5NX6qI0
cJ+HycFZ8jfHZ2Fs1efQUTqmtdJEI/vjAxpjJrnj9tQEQoUTGkunc+zkkDu7
W9eGpb6azJNL/3JPeISfp6Yt7NSa6o74Fj0unS+QWqvZCYRL52CL1sMd3UFN
3w5ncRae0hVYs2Na+3xF7U1tbqPvYstNwF45DVfdZfiaXkak+abGzEkOvTvJ
40j//+y96XOd+Xkl9t713e6+L9j3nQBILARAEDsBAuC+s9kkm92tbnW3ulu7
ZMuSJa+SrZE18lgaS04UL2NrPLYTezLjqkxSqUzyJamaypdUpZI/IP/Fk+ec
3wWbzW7ykgRAgOz74VcggXvf7d73Pc95lnOm9NiO1fp4ZoxmrB5zBNcCWu6p
Ngm5qHtP8/mKY0OsYxeOcva9OPCGeJ03xW5dNP2DA+/RYwRe5lb+huTGvkZv
llB1U6zZn0t4/Dvk+/GLfyP++p+LdfmvFfs3FPsVoytHFee3TdzStiUxvTbQ
F4X3GdZ9/Iae+YFj7+HG7t1opexmxutZsfvp6927x+7Hv2ZvsXuvc+KHfX67
gd0vNnaHvZFPYHcA3pwxo48G7A4qp3Oy3cZ72z1GPIPfN3K8we7b4va+J173
FxW3XpdA+ari1Ctil96UQBZ6aYpR+YuKfdeJf6Ei/L5PkPtGM8q3i0Pk4exZ
y18l3wwmjlGbFMeBexCxBHTdvNzbinn9zAk/yb2GGS7MiIEje/kxw+WzwOkt
eoMFMj30JkHfPPhjrHJTn1Gr/D30x6HLgh76ROc5zrXTqwTzaslx6rZY+p50
2xv6+i7xMuepBxuunJRU+68prk8bb3JdOxgO7r2D38Tw1gWJaqzj4f+YKWtW
3ttxRYqTv0dtNkevC/Ta0RsfKYxz4d/wKfWKK9SORV95KFnlZxT0V3j84ewo
8+fUk2k5Lxnl91HMyylnRh4+NvSb1MxzK3ck06XcvfUCddUKg18Qa+Rb+jqN
YfR91Xf+D4lt/TsJXvor8upgakKPc0yvxzWNBbYk3XFOEq3bup01xaJlue85
XjKepgePvQ3s3ivsfrZetd1hd/1etU/H7P2c2X6Z5rcb2P3yYncwNiqYvQ6n
eqiVgt+jNyqUOiWR0rTe/5tmRku/M5j7TbS/Kfnub4qHOnheX1P9QEJlzJXp
dgun6IkJXVJbMd1VTA/ljaYKfE2c8qrG2fcUx6HR0mdmuNB7FRvROKFPefPb
xoM0PcI+FnMcj7+3ws1XlCuu8f7G3BkwH31uMcWyYHJN99POvHQwo/ev8vt4
9YZ4hXPMm4OjQ2/USi9KvBO59ePkvA7wCzl4YLc+n8C7A9leYncg3aZxyqTy
0W8qDs8/gN1rH8fvGoYDu93iq5Jo2mQfu6W/sxRDs+O/JVbbOeW055kPCBf0
vPMTxG70nwMjvcI6vVMtH1osZb1WR/VZodvPLlHDDnP2bnlWj+OMOIkF5uWt
0oQklT+7fb+m21Ne3vqGZNqhv35Nwke+JOmRLyqfviDwTQ8t/EjsS/+DWDO/
kPDmn0q6oJifQ519SvH6KnsOoclDH7j8omL7Ao8LmORV5hu8+zlg97PMZ+8V
137cjNfj/LWfRW/l0b1q+4fZD2o6vqzz2w3sfnGxO5joI3ZH/aPUwHayF1lj
3sHugGt00qLZTv33jOL7iPHASkFDRLm3MyvJ1Hnxk8rdvG7FkQJnwVEPT3Tc
Fq/jLbHbXlOsui7B4jnl4Mojcxv0Co8VNpVzK26mtiWcGyEGBPNGzyRU6BY7
rs+3+Anqu7DHu4zeq37mz92iYiq12B5/b0HTLFo6TQ5txXupoYIaNzyzrBj4
84B4jAc0XsmMKOYohywqrqdneH6BzCjr8Q40aTKmpg3NdOrEZFH3n1J8vUeN
Uze7ztw1PEXc6huKh7rvGnY/Cr+jyrPZD1Cdo28K5r0jre9KrOtdjQtGJdZ+
Ttzms3wfNNfDxSnqyeO5HM3Bb1NjCnyP4u3MEYRTituZSV4n9NEn26ADtyF2
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
kylnj8SPUe/cLur1z/UR+9zSTQm3XGWtG71rmA2DbrnRRT9GT9CQ/hvenehl
d1MDrH9HElPiJxXbynpNOt9QzD1F7RJPuXUE2yovsS+NefTqCnvhqJvaYjxC
Lcx45Y9KTLk1vMvsEublpjjf5lRGWPsOV9+RSM9FcVvPMc/A+8ftZN0bPd7o
+fZKqxLKL0uygG31ij38BcXlrzFWal98S0Jjv2Hm3qqXxG9e1ffps77ntjh6
Ps78v5LwxM8lMfEj8c7+92IfeVf81DD90MLKt3PFSdYJGtjdwO4Gdh/k/PbT
Y/deYkkDuw8vdqMXDRri6MPCswB1WLwOeA7sNrXsUePbBc2vHLy3x9i39iTY
zb6z5KDy3X7FmwGD3eDVhUsSa/+mhJtvKx6ip3nB6IMWTlLbK1pcop4zathm
jTJnHkgeox46/L+t+Ay9TFJNX5Ro+aZiwSXdp2JlupN162BiyczAxSaYOwhR
D1WPIQbPU+Wildvi9t3VY9nQ6zEpvj4LkrlxU0NIjLK+y3u89VXmBmxqvkxR
k93DzJxycKfjluLsWb2mK2aeCj9LituVk6xdhxTHbXi5ZJUTd18Xt+0CvU4w
mwYfsYDGMeHMceYVYtBjURxmHb71jKSP/II+aoidQh6+n52chYM/GOe19Nmf
Rc2gPEPt6ETPFyTYcVvfuy3l7Z8qh76g57gq8fY71DN1KuOc7fZarou19F+L
M/an4s38XDJn/1ZCna/Qmz3WeZbXP1uY4Pek3vxw3fniFx276x1/nbXb+ev9
6CNvYPfTYffBzm8/HXbvNZY0sPvwYrfljJi5qLzx87Di5juJ/LLNPLPR4QRe
U+tL8Rs4DjzHtut9N2Mp9LUpVkZH6dsN/4Zo9bSEStvKT8+K1bSu/G6OfSPU
RFEMCiq/D+WW6L8dyZ+jLnkof4o1Z3iJYD7dSsM7vF8xsaLYeEWirevsk0Nt
PpAo6LEeUb6PHMK68mdw8nnl13rehXXm6d32u+J13RWn+5YexyZr/Zif9vVe
dXd6WJR34x6Ntik+K3ZHU4PsATfYrTFNdlyclnOcA8P5wDuU/fNFxW7Fb+wz
rDGIqzhspTcl2/8aa+zwJg+nJqmFino6ODdyDvEc8EL5fKlHrPazkhlVfMXM
vI+8QRdn9alLWlnnHDyejYlYl1jNlyVYQA//OckOf1P5+itiDd1j/j3atCpO
86vsBbDbV8Sa/dfiDys33/h7SUz9UoLHfyGZpZ+Yvnk9Z2irhdOzksiihlLf
v3nXvHG/e7l2mzfY5/PfLXY/2nvzyXrN9no++2mx+1n6z54ndh/8/PaTY/d+
YEkDuw8xdnuTzJMDu8E1obEWTY4wzwz/C2A38+aYI6PO0UlT91YuiN/X+25G
45jXVn7pLev7VlkDthVjkOvFzLRVXaD+GrVb0aum91MgpfibnNP75AS1XfBa
LOCgWYv3l5XT72zlhnLjU4q/c5wrh7+4r5w3kFlnXtxpOkP/TfSKRZpvSbzz
XfE6XpNQZUvfe1rclm09JsW12KReP9PTjYU4hjFM602NITaI3Zj3jiYnJQ7P
VHiJ6X4c6MNUL+l5nGQt2s0t0oslpNgNDhtBjblwUdK99xRDj7GHHXkAaL+g
Px7+4Yif8Cyym8bEbb6mx/tFCfddo6ashdxIspse4+gXAI8PZObJwR3Fe8QQ
ibZ1iXR8IPEjX5WQno+V0/PquMYZNMYV2VXxRj4vgcW/FHv+v5Hg6t+JM/Fz
seb+K0ke+6bxO8ezFtvPzlI/FXmH3fK6zzp27z9v3h127z+vPljsRv7tsesp
sXsvcXsvsPtxOLAX3pYN7D682B1MnSB+gAeinwvvQQ85a8S+6UdDXxr601A/
Zt0bfWvoP0Pfc53vJvrU8XqntEV9D/RMBxOna33g/UY3NHeCfe0OZs5TJjeO
+jtmra1MH/VZg8C73DQx0VEchTaaV7ggkdZrisNfl0j7eQmXz0midEdxd10S
im+Yn0JdO4j95oDzioP5Lf25oThfq+unoCOux1c+ZTTgMqbmz/kWxDAaBzjt
NxS71+mbGoCHYXJaknp9EHOg59ttuSqh5huKz/PsZYNXeUS5PrRTUfOG51ik
/Y5Eq69Qo8ZLD1IvBv3v8F910uvsiQso33aRE2h6R7d3Tvm0cubsBufuA6lu
xjrQI3daoJuDvPkxiRcv6DXNSmL4dcl0f0/CbXjfWfGaXhW7ZUHjhwW99srv
yxckPvGHEpr+qVhb/1n82X8j1sgPxFr6c0n03WV9xKvMSUBjAa+gMRCezcj5
NrC7gd0N7D7A+e2nx+699KVuYPfhxW47vybB5Kz+f6zWiz3IhZovcubAbmA5
5sLQ+405McyLUSck1l8fu9NHDG8uADuHiHfA3Xhuk5w2VLyi9+Ca2Mp54XHJ
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
wVX383E7mZO1/HbWqe2Ucr6Y8ju3WaLoT0v01+anu7mCitPYLjRZHOXQwD7U
jo0/yaR+z41PKDTSgooZdustxQnMWB2hzxZ6zZgHjxkdc+iCRdKL5LymptzP
7UFPFRwcfd6ct4bXVva0BOxmxbIhPQbl3in9d1HxKTvLXIFfWZZYeZn96pjj
hm9oJNPNmjo02tBHbmXHDAbnp7jgyQUNUbu0JdAGh6Yr+qlRA7CTx9jjRq/P
tPHyooZ5doYLc15Wbkwi7Z+n3hifd23n6Z0d8Rb13JfF6jinmH1OgkWNRdwm
SefuSqFbf5eqKld/3/ibFU+JV90Qr6z/1u2iXx65b7cwzf5x+nHnlzRW0Pgm
NmhqzvEZxkf0Btd4x+39Nv0+A4VFCfdckVTmLGe7MbPmVkYkWrqimD0osZZX
JJDVc9ZYI9CsMZBy72T72+KzH75D/CN3xZ/7S7HG35PwwF9KfOnHYvX/tuSv
/FRcb0ZCuRHqvkNbLqaxQl296zqr7nxy4fFr33lz3f3vbr56v/XCD2uv2ZNi
8tP6az+86s2A7TY3/mnY++CCZvTOehac3u/57Yfx4mn7yneLbweNz4cJux/G
7yfGbvSZY/4rtSFhzDIrXyV2Kyajx5za5MpXw4qt4NwmRlKuHRuRYHKcWMc+
adSF0/PsF8e8l918XTFhgd9Dp/Z+C3Phys+j/hg12Kh/Ds9M9IsnjNYbcVvx
PuIq5/Wr7I+Kl9GLrd93v02fGxoflE6zZzyQ3lYuq7iLenxulpzaeHx2U3Mc
xwefE9Sh3cJpxcgLEmu6JvHmm+yfQz8Yc+XImacmHojXRx6D3XMGu7PjxO5Q
wcxMMd9dWhYvaWawrcopCWrc4bfMsQ/ATl8Tp1Tj2u3vELcjxVX6hTPmyRxn
/R/PRcxRY6ab+YFajwGuHY7LQp1ef4e+ffQQOG1vanxwhvnycOsZ5VTb1GID
foRznfp5bdOzLN6jr+s8J5HOy+J3vEVdGOizIf8fKCxLbvS2WPA07f+hxGZ+
KuHNP5VA3+9KYPQ7Ehq7JylHY56mSXLGNPBtl9hdl1fmH7/2mxfX3//uVgO7
n90n5El49YuO3fs9v/043G5g9/PH7gfxu35OpIc925Zf6+lO6rM/NsN6Kt4f
QK7bO3I/BiQnhtYXXo8VOy6YeYbnBerIqIFavuJPYkGgZRotn1c+PUvtc+bK
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
PC9+5SL/hj67eOEE5+d5vaALq3FQMDcgdmlZ7MI2sdeKd0ugtCh+820JF+b0
ei3p56IxQ6ZTAshb56ckWL6lr58Sz6/NvEMztXhHQho3xBLQYeuTdNcrEmu6
St9vS2Mi+KSH0K9QGpJo+SJ75dCPh3545Pk9aMFCmzbZ38DuA8fuOjnvBnbv
OXY/D8x+FHY3cuIv7tp77G79FOwerGG38RyznF5ybuAzNEiD/Nugeb/bq3jT
rRh4hvNggUQ7MRe9aQH4e4LDJs1zBLNd0PkiN1TcxlwWsZ/6Z31ciAPwftTa
ie817IbfmJXsMdpk0FrR1xG7692/6EeLTfLYnMyq0XSD5ppybQf91t4wa+Xs
ncf5ZY5T6xy95egxd8rbptc8D33PCfNMTE5Q343z5Sl4b12QcPMtsXJbiqmK
aXmNFcqL9AZDHxpy3sHcCme+AtA4U95qZYeYY8ecF7RnAohxctPUj0WdPgpN
c+XVXlox31vSz2CK545eNS/7qh77q7X6co8e3yb7yZBXcFNrup0RauZY+u9A
4Tq1auBZHokrvuc0XiqjRn6TvN/KKr/OnlV+/SbnxJ3yeT2WbY03rkioWbE9
84ouPZZsl76ugzpsEeQkoPmeHThwbGqsOtj9kufEnzd2P0/cfhi7G/XsF3vt
D3ZfJxZ9DLu9Y2K08JXzOf30+QJuA7+Iq47xA0ddF1ppTuoMsRS1avLaVFm5
9yzr2Pze815CX/iGvs7oo1HXzKvNnSEvHzc4bmrBQ6b+nUBcsE0tNSvRSdxl
Xhtcn1qnj783o6nBWhwwQS1y8FrMllm+2YYDndYcfMamWT92lO8CuyPZJcXx
Zc6Dob5Mj7VEv+nN08VZMH02WZmiBJXX2pVLphcer2ePm2JdQq9P9hjxGtqx
mKMOK47DszSau0itOPbO49pT1xW92bryyqkLJ6kPA01V1Nvpp+KM0fME3iwh
7DN3jd5kduaS8f5Ot0ssO0pPbs7Ax9eZcwhnL0moqv8vjrIv30nrdSnAS/Wi
iRESem2hR1M9qpz7NHvTMNsdab4pdtN7ZlZNY4Rwrov58hB8WTV+i2SHDxyb
Gmt32L1b3nzQ2P0kPl97hd3PG7d3sPuRfcafggcN7D68a3+x+wifyw9iN/24
XeWm3oTJlyeNzwePxe1nn1U4fo7aX/h+BxxoiLRyHixAX88K69jwKoOXtgVv
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
44qepx8a94scMH5wrj1jz17el3PsrLGnsdw+tsHamXXaT+Q7vidxk3A97i9y
viryf1RBbp75ix7f39Que9UWHXvMnVfwZ2Nebs+6Vy1roC42C5iDnYX0+GF2
PXvxfJId0s7d/w+9C4DHViX+Ru659+Xe/Vp0lmin6LUtxfKz6F70M8Pvkp4i
SY8xtGCBGvgOHy+M+qXItZ+zvjtGoguJUP06JthLdpwIV5pb5G7oNubShVfQ
f2XiA3qIo1/NCYfc2YF9mAZeLp5wW7huy/5z4W7hnXqHM8y456LPGTtERxz7
IUz3lMOTHNcDauyo6aNPHP7cnNP1+1N8rb4reA5+KponGJAfndaJdUVPY8+m
WRJ92jyTGEj0avMpd4Ohxl2B74lwexm1h/BL0bUP7JWW9oWb5XP5+3NrWi/k
O3glnxPc3eWu0Lz8zFp3dMzn3aWf5D1vj7l7tIsTn79U6xM50eD4HG48TDxw
erYY36SnOXocrtbhFdO2tfiF9aJHcg7XuYcNsVJQP7GhvIaBlobPSu1QfeTg
nRZsWD/akP+dbd0v6tzWHgHsE722bcuxcF/lvz8DtujYIev3T5tvT+Peebk/
jTvTru+sUXR6s1Hdmon0+GBrJtLu9x8zP/4JZSMX3w==
     "], {{0, 180.}, {247.5, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{144., 144.},
     RasterInterpolation->"High"],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{541.8749999999942, Automatic},
   ImageSizeRaw->{247.5, 180.},
   PlotRange->{{0, 247.5}, {0, 180.}}]], "Input",ExpressionUUID->
  "d50f36f9-5d0d-5644-b78a-29d2abd14c78"],
 "\n"
}], "Title",
 CellChangeTimes->{{3.960886848723282*^9, 3.960886868403305*^9}, {
   3.960889180641142*^9, 3.9608891875433426`*^9}, {3.960968878331442*^9, 
   3.9609688806044903`*^9}, {3.960970086610037*^9, 3.960970087848009*^9}, {
   3.9609701250082073`*^9, 3.9609701391798954`*^9}, {3.9609701776979713`*^9, 
   3.960970194232418*^9}, {3.960970369447899*^9, 3.96097039566716*^9}, {
   3.96097682018095*^9, 3.9609768439465218`*^9}, {3.960977048700966*^9, 
   3.9609771067320023`*^9}, {3.9610188477716236`*^9, 3.961018856100689*^9}, 
   3.9610596072052345`*^9, 3.9610655065945797`*^9, {3.9610664853331966`*^9, 
   3.9610665128592606`*^9}, {3.9611414895044575`*^9, 
   3.9611414977661552`*^9}, {3.9611465864872246`*^9, 
   3.9611465872645016`*^9}, {3.9611466995756702`*^9, 
   3.961146717141594*^9}},ExpressionUUID->"73436020-c31b-6d43-a5d8-\
258d56151c3d"],

Cell[TextData[{
 "Abstract\n\[OpenCurlyDoubleQuote]free will is the supposed power or \
capacity of humans to make decisions or perform actions independently of any \
prior event or state of the universe.\[CloseCurlyDoubleQuote].In this \
computational essay, we use Neural Networks to explore free will by exploring \
how weight trajectories while training  neural networks, converge or diverge \
and treat weight trajectories as computational proxies to free will. We also \
draw upon the concepts of computational irreducibility to explore if the \
weights of Artificial neural networks are computationally reducible or not.\n\
\n\nIntroduction\n",
 Cell[BoxData[
  RowBox[{"\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
    "Would", " ", "we", " ", "say", " ", "that", " ", "an", " ", "ant", " ", 
     "has", " ", "any", " ", "degree", " ", "of", " ", "freedom", " ", "or", " ",
      "gets", " ", "to", " ", "exercise", " ", "its", " ", "freedom", " ", 
     "of", " ", "will", " ", "if", " ", "we", " ", "can", " ", "reasonably", " ",
      "predict", " ", "its", " ", 
     RowBox[{"actions", "?", "Probably"}], " ", 
     RowBox[{"not", ".", "What"}], " ", "about", " ", 
     RowBox[{"humans", "?", "Can"}], " ", "we", " ", "predict", " ", "what", " ",
      "a", " ", "human", " ", "agent", " ", "is", " ", "going", " ", "to", " ",
      "do", " ", "before", " ", "the", " ", "agent", " ", "carries", " ", 
     "out", " ", "their", " ", "actions", " ", "with", " ", "great", " ", 
     RowBox[{"certainty", "?", "Probably"}], " ", 
     RowBox[{"not", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\[OpenCurlyDoubleQuote]", 
       RowBox[{
        RowBox[{
        "While", " ", "many", " ", "computations", " ", "admit", " ", 
         "shortcuts", " ", "that", " ", "allow", " ", "them", " ", "to", " ", 
         "be", " ", "performed", " ", "more", " ", "rapidly"}], ",", 
        RowBox[{"others", " ", "cannot", " ", "be", " ", "sped", " ", 
         RowBox[{"up", ".", "Computations"}], " ", "that", " ", "cannot", " ",
          "be", " ", "sped", " ", "up", " ", "by", " ", "means", " ", "of", " ",
          "any", " ", "shortcut", " ", "are", " ", "called", " ", 
         "computationally", " ", 
         RowBox[{"irreducible", ".", "The"}], " ", "principle", " ", "of", " ",
          "computational", " ", "irreducibility", " ", "says", " ", "that", " ",
          "the", " ", "only", " ", "way", " ", "to", " ", "determine", " ", 
         "the", " ", "answer", " ", "to", " ", "a", " ", "computationally", " ",
          "irreducible", " ", "question", " ", "is", " ", "to", " ", 
         "perform"}], ",", 
        RowBox[{"or", " ", "simulate"}], ",", 
        RowBox[{"the", " ", 
         RowBox[{"computation", ".", "Some"}], " ", "irreducible", " ", 
         "computations", " ", "can", " ", "be", " ", "sped", " ", "up", " ", 
         "by", " ", "performing", " ", "them", " ", "on", " ", "faster", " ", 
         "hardware"}], ",", 
        RowBox[{
        "as", " ", "the", " ", "principle", " ", "refers", " ", "only", " ", 
         "to", " ", "computation", " ", 
         RowBox[{"time", "."}]}]}], "\[CloseCurlyDoubleQuote]"}]}]}], 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
     "We", " ", "posit", " ", "that", " ", "a", " ", "system", " ", "that", " ",
       "has", " ", "\"\<free will\>\""}], " ", ",", 
     RowBox[{
     "will", " ", "exhibit", " ", "lots", " ", "of", " ", "different", " ", 
      "behaviors", " ", "and", " ", "one", " ", "that", " ", "does", " ", 
      "not", " ", "will", " ", "exhibit", " ", "very", " ", 
      RowBox[{"few", ".", "We"}], " ", "are", " ", "interested", " ", "in", " ",
       "when", " ", "neural", " ", "nets"}], ",", 
     RowBox[{
     "an", " ", "emulation", " ", "of", " ", "biological", " ", "thinking", " ",
       "processes"}], ",", 
     RowBox[{"exhibit", " ", "free", " ", 
      RowBox[{"will", ".", "We"}], " ", "base", " ", "our", " ", "experiment",
       " ", "on", " ", 
      RowBox[{"Dr", ".", 
       RowBox[{"Wolfram", "'"}]}], "s", " ", "Article", 
      " ", "\"\<What's Really Going On in Machine Learning\>\"", " ", "where",
       " ", "he", " ", "sets", " ", "up", " ", "mesh", " ", "neural", " ", 
      "networks", " ", "to", " ", "predict", " ", "cellular", " ", "automata",
       " ", "and", " ", "observes", " ", "how", " ", "different", " ", 
      "random", " ", "weights", " ", "affects", " ", "his", " ", 
      RowBox[{"results", ".", "We"}], " ", "start", " ", "by", " ", 
      "choosing", " ", "a", " ", "mathematical", " ", "function", " ", "that",
       " ", "our", " ", "neural", " ", "networks", " ", "shall", " ", 
      RowBox[{"model", ".", "\n"}]}]}]}]}]], "Text",
  CellChangeTimes->{3.9609770558012676`*^9},ExpressionUUID->
  "084a1b7f-2822-2645-95c5-d972f11cac7a"]
}], "Text",
 CellChangeTimes->{{3.961066826816675*^9, 3.961066835481966*^9}, {
   3.9610672020736713`*^9, 3.9610672077654285`*^9}, {3.9611415026669064`*^9, 
   3.961141510553568*^9}, {3.9611415617079563`*^9, 3.9611415890592422`*^9}, {
   3.9611420940161476`*^9, 3.9611420943616066`*^9}, {3.961142487932823*^9, 
   3.9611424895033207`*^9}, {3.9611425342166233`*^9, 3.961142549406254*^9}, {
   3.961142675164171*^9, 3.961142744734354*^9}, {3.9611461287704697`*^9, 
   3.9611461288950634`*^9}, {3.9611501993492393`*^9, 3.96115025285841*^9}, {
   3.9611506549883976`*^9, 3.961150658473114*^9}, {3.9611507964533234`*^9, 
   3.9611508233128815`*^9}, 3.961152080901575*^9, {3.961152794836933*^9, 
   3.961152796023794*^9}, {3.9611528999717484`*^9, 3.9611529146342583`*^9}, {
   3.96115326152046*^9, 3.9611532621830807`*^9}, {3.961157803525364*^9, 
   3.961157843986143*^9}, {3.961157891007614*^9, 3.961157933645773*^9}, {
   3.9611582525809193`*^9, 
   3.9611582839780846`*^9}},ExpressionUUID->"edec75ca-a45a-f544-9707-\
ef405a57030f"],

Cell["", "Text",
 CellChangeTimes->{{3.961066826816675*^9, 3.961066835481966*^9}, {
   3.9610672020736713`*^9, 3.9610672077654285`*^9}, {3.9611415026669064`*^9, 
   3.961141510553568*^9}, 3.9611415617079563`*^9, {3.9611416006420803`*^9, 
   3.9611416050823975`*^9}},ExpressionUUID->"fafc8c76-42bc-3445-a4ff-\
a063d561a6dd"],

Cell[CellGroupData[{

Cell["Methodology", "Section",
 CellChangeTimes->{{3.961066826816675*^9, 3.961066835481966*^9}, {
   3.9610672020736713`*^9, 3.9610672077654285`*^9}, {3.9611415026669064`*^9, 
   3.961141510553568*^9}, 3.9611415617079563`*^9, {3.9611416006420803`*^9, 
   3.961141628459503*^9}, 3.961141903599121*^9, {3.961142124274679*^9, 
   3.961142127175335*^9}, {3.961142483995529*^9, 3.9611424855183334`*^9}, {
   3.9611523831360664`*^9, 3.961152385944172*^9}, {3.9611536583939857`*^9, 
   3.9611536615797253`*^9}},ExpressionUUID->"6ceca294-3648-da49-bf63-\
4b7584a1001b"],

Cell["\<\
For this experiment, we wanted to choose a simple mathematical function to \
model and picked the  piecewise function below\
\>", "CodeText",
 CellChangeTimes->{{3.961066826816675*^9, 3.961066835481966*^9}, {
   3.9610672020736713`*^9, 3.9610672077654285`*^9}, {3.9611415026669064`*^9, 
   3.961141510553568*^9}, 3.9611415617079563`*^9, {3.9611416006420803`*^9, 
   3.961141628459503*^9}, 3.961141903599121*^9, {3.961142124274679*^9, 
   3.961142127175335*^9}, {3.961142483995529*^9, 3.9611424855183334`*^9}, {
   3.9611523831360664`*^9, 3.961152385944172*^9}, 
   3.9611536583939857`*^9},ExpressionUUID->"1a15f1a1-7a68-7a45-8deb-\
3d0e18519760"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"                                                                    \
                                                                       ", 
  "\n", 
  StyleBox[
   RowBox[{
    RowBox[{
     RowBox[{"whichFunction", "[", "x_", "]"}], " ", ":=", " ", 
     RowBox[{"Which", "[", "\n", "      ", 
      RowBox[{
       RowBox[{"x", " ", "<", " ", 
        RowBox[{"-", "2"}]}], ",", " ", "0", ",", "\n", "      ", 
       RowBox[{
        RowBox[{"-", "2"}], " ", "<", " ", "x", " ", "<", " ", 
        RowBox[{"-", "1"}]}], ",", " ", "1", ",", "\n", "      ", 
       RowBox[{
        RowBox[{"-", "1"}], " ", "<", " ", "x", " ", "<", " ", "2"}], ",", 
       " ", "0", ",", "\n", "      ", 
       RowBox[{"x", " ", ">", " ", "2"}], ",", " ", "1", ",", "\n", "      ", 
       "True", ",", " ", "0"}], "  ", "\n", "    ", "]"}]}], "\n", "  ", "\n", 
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"whichFunction", "[", "x", "]"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"x", ",", " ", 
        RowBox[{"-", "3"}], ",", " ", "3"}], "}"}], ",", " ", 
      RowBox[{"PlotRange", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", "1"}], "}"}]}]}], "]"}], "\[LineSeparator]"}], 
   "Input"]}]], "Input",
 CellChangeTimes->{{3.961066826816675*^9, 3.961066835481966*^9}, {
   3.9610672020736713`*^9, 3.9610672077654285`*^9}, {3.9611415026669064`*^9, 
   3.961141510553568*^9}, 3.9611415617079563`*^9, {3.9611416006420803`*^9, 
   3.961141628459503*^9}, {3.9611419067032547`*^9, 3.961141927629917*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"48822193-caa5-7b46-a7be-8a359909f4d6"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1:eJxN1n0wFAgUAPBdtVhiHMtlazgcDjed8hE55yODQ1cIWygnos6ONOUradbQ
Im0YIlxtkc/ycV3otHRiwwoXdT5KpO3I17a25dYudzfVe/dm3rz5/fPevPfX
0wuN9gmXIxAIBf/mf/VIXfbi+rrCA8LHoKxSjeyk6A7Xm0GxK2ij8XvdcwL0
201TpSOT6BPHrWh3HqKTDUcfHGWii4oNch+roq+9TI/2JsuDtQZ895poksBd
+3xdeIYbwe4mhqcM9DeAd9UGlfd/IweWZB7V2GFCBNemRneaGqJDk+PjDPTQ
PTGZYxRtdBGttnRZEW1rJLbgTBPA8b+n7XevRH/dwpJ3KkNP/FrQbMtGu1dW
bTUrRH9+6fFrlXR0Y5Dm6cEI9HF/HePeI2idfcYjHYfR53fb2jcGoP1Ng0lX
3NDvl8vyDxmjD6Y3FZQYoB9s7rkyqovOsl382X8zWthNZOdR0AEHKTeeqKH1
z9iW/0BGpyt7VWaR0AvFh6p7iOgK2ivaZ9L1tg8SOJxMUAi+KEKTW7zD0/ho
trSYfvYZWirXyQouQgeQF+rsD6FVtRyFMv4auEM/17KVjibkKYpEkTKwHenc
HbMwKTjPcedOp7MS8JESGv/ttRVwf4UOmVgkButsqt/e1igCK33xpn+mWoj9
f7Oy7K56B47an1ZYWSkAU8p3nLwbheYsv/RsN0cbe3mmdOqhc9iNzV3qaK7H
nK+HMnpVpLfI24AO+a6OUryy2Pbp/rxcqufVGbT1X2mM66Nott27pjIe+tTr
R1/W3EZvtT691hSDPp85YdkSihaMe/7U6ovuYOoPd1ih6SP9DX/8vQBuTTIN
n2WgQx6+5OnkzoPd7FfCXzDQ25rUCCUxaGm1k6W2N7owt7REQw098GMEXZE1
B3YiLKoKM2bB+vZr3p2MGXBV5J3JlkY++PhSQ9CFokmcn0w6IG8wBtZIGFK+
XDwI/jMsyrRuiguOSzRldefXgqsv2TiWmd92+GTWMcazkJRHYBWRl90t70Hw
xCmuZWzqGHjh3p72uK5JcDnzekhYBh9sKK7RiC+eAY//osuxi5wH+xVMpM9m
C8BXb2ZxvC4LwRsD6fOkBBG4L6SqwidVDL6rQg1ejloBGxXpTSt4ScCS2FRZ
ja8UrPSUO+8QiKZakMcHQ9G2ixdbV2PQ8REF5zyz0eKAauJsL1poM0AydZWB
5QrUxZw9aPX3+994+6G3N4xwE8LQJ0ymmN0p6AVtMflYG3pWskW10mYN/C2X
6TXuiGblLGVSvkebf8VTYBxAx/olEg8mogn1wyLl+2ifMy4Wzh3oUtf6mPhe
tOsL5sLr5+gLSjunOTK0Vnj+WLTDOjjCnEgtd0M3r0bRnu9FB+a6PHUPQbPb
lvr0GGhh5mEVWgZ6tz/Pk5WDfjN3o0tyHW1G9WkfbEcn8TkEJR66r97EwXEQ
rZuUfzZ2DH3CjXj/1hS6XZ0ueTWL1hgfttEWocOqXOL2Sv+3z67hUWc5guMH
CRzWBuoC6tTR7Ajm0BYDdOFQVT21DJ3t1JulbUgEq0bXOD/UlAO3ujRzGqkb
wDL6YWt/1Y1gosKTK2YytLX7yXYPgjxY8vzWtKYQvY2rM6eUoAD++F+B/wF6
9Z/Y
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJxN1n0wFAgUAPBdtVhiHMtlazgcDjed8hE55yODQ1cIWygnos6ONOUradbQ
Im0YIlxtkc/ycV3otHRiwwoXdT5KpO3I17a25dYudzfVe/dm3rz5/fPevPfX
0wuN9gmXIxAIBf/mf/VIXfbi+rrCA8LHoKxSjeyk6A7Xm0GxK2ij8XvdcwL0
201TpSOT6BPHrWh3HqKTDUcfHGWii4oNch+roq+9TI/2JsuDtQZ895poksBd
+3xdeIYbwe4mhqcM9DeAd9UGlfd/IweWZB7V2GFCBNemRneaGqJDk+PjDPTQ
PTGZYxRtdBGttnRZEW1rJLbgTBPA8b+n7XevRH/dwpJ3KkNP/FrQbMtGu1dW
bTUrRH9+6fFrlXR0Y5Dm6cEI9HF/HePeI2idfcYjHYfR53fb2jcGoP1Ng0lX
3NDvl8vyDxmjD6Y3FZQYoB9s7rkyqovOsl382X8zWthNZOdR0AEHKTeeqKH1
z9iW/0BGpyt7VWaR0AvFh6p7iOgK2ivaZ9L1tg8SOJxMUAi+KEKTW7zD0/ho
trSYfvYZWirXyQouQgeQF+rsD6FVtRyFMv4auEM/17KVjibkKYpEkTKwHenc
HbMwKTjPcedOp7MS8JESGv/ttRVwf4UOmVgkButsqt/e1igCK33xpn+mWoj9
f7Oy7K56B47an1ZYWSkAU8p3nLwbheYsv/RsN0cbe3mmdOqhc9iNzV3qaK7H
nK+HMnpVpLfI24AO+a6OUryy2Pbp/rxcqufVGbT1X2mM66Nott27pjIe+tTr
R1/W3EZvtT691hSDPp85YdkSihaMe/7U6ovuYOoPd1ih6SP9DX/8vQBuTTIN
n2WgQx6+5OnkzoPd7FfCXzDQ25rUCCUxaGm1k6W2N7owt7REQw098GMEXZE1
B3YiLKoKM2bB+vZr3p2MGXBV5J3JlkY++PhSQ9CFokmcn0w6IG8wBtZIGFK+
XDwI/jMsyrRuiguOSzRldefXgqsv2TiWmd92+GTWMcazkJRHYBWRl90t70Hw
xCmuZWzqGHjh3p72uK5JcDnzekhYBh9sKK7RiC+eAY//osuxi5wH+xVMpM9m
C8BXb2ZxvC4LwRsD6fOkBBG4L6SqwidVDL6rQg1ejloBGxXpTSt4ScCS2FRZ
ja8UrPSUO+8QiKZakMcHQ9G2ixdbV2PQ8REF5zyz0eKAauJsL1poM0AydZWB
5QrUxZw9aPX3+994+6G3N4xwE8LQJ0ymmN0p6AVtMflYG3pWskW10mYN/C2X
6TXuiGblLGVSvkebf8VTYBxAx/olEg8mogn1wyLl+2ifMy4Wzh3oUtf6mPhe
tOsL5sLr5+gLSjunOTK0Vnj+WLTDOjjCnEgtd0M3r0bRnu9FB+a6PHUPQbPb
lvr0GGhh5mEVWgZ6tz/Pk5WDfjN3o0tyHW1G9WkfbEcn8TkEJR66r97EwXEQ
rZuUfzZ2DH3CjXj/1hS6XZ0ueTWL1hgfttEWocOqXOL2Sv+3z67hUWc5guMH
CRzWBuoC6tTR7Ajm0BYDdOFQVT21DJ3t1JulbUgEq0bXOD/UlAO3ujRzGqkb
wDL6YWt/1Y1gosKTK2YytLX7yXYPgjxY8vzWtKYQvY2rM6eUoAD++F+B/wF6
9Z/Y
              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{-2.9999998775510206`, 2.9999998775510206`}, {0., 
            1.}}, "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{-2.9999998775510206`, 2.9999998775510206`}, {0., 
           1.}}, "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
          "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
          GoldenRatio^(-1), "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJxN1n0wFAgUAPBdtVhiHMtlazgcDjed8hE55yODQ1cIWygnos6ONOUradbQ
Im0YIlxtkc/ycV3otHRiwwoXdT5KpO3I17a25dYudzfVe/dm3rz5/fPevPfX
0wuN9gmXIxAIBf/mf/VIXfbi+rrCA8LHoKxSjeyk6A7Xm0GxK2ij8XvdcwL0
201TpSOT6BPHrWh3HqKTDUcfHGWii4oNch+roq+9TI/2JsuDtQZ895poksBd
+3xdeIYbwe4mhqcM9DeAd9UGlfd/IweWZB7V2GFCBNemRneaGqJDk+PjDPTQ
PTGZYxRtdBGttnRZEW1rJLbgTBPA8b+n7XevRH/dwpJ3KkNP/FrQbMtGu1dW
bTUrRH9+6fFrlXR0Y5Dm6cEI9HF/HePeI2idfcYjHYfR53fb2jcGoP1Ng0lX
3NDvl8vyDxmjD6Y3FZQYoB9s7rkyqovOsl382X8zWthNZOdR0AEHKTeeqKH1
z9iW/0BGpyt7VWaR0AvFh6p7iOgK2ivaZ9L1tg8SOJxMUAi+KEKTW7zD0/ho
trSYfvYZWirXyQouQgeQF+rsD6FVtRyFMv4auEM/17KVjibkKYpEkTKwHenc
HbMwKTjPcedOp7MS8JESGv/ttRVwf4UOmVgkButsqt/e1igCK33xpn+mWoj9
f7Oy7K56B47an1ZYWSkAU8p3nLwbheYsv/RsN0cbe3mmdOqhc9iNzV3qaK7H
nK+HMnpVpLfI24AO+a6OUryy2Pbp/rxcqufVGbT1X2mM66Nott27pjIe+tTr
R1/W3EZvtT691hSDPp85YdkSihaMe/7U6ovuYOoPd1ih6SP9DX/8vQBuTTIN
n2WgQx6+5OnkzoPd7FfCXzDQ25rUCCUxaGm1k6W2N7owt7REQw098GMEXZE1
B3YiLKoKM2bB+vZr3p2MGXBV5J3JlkY++PhSQ9CFokmcn0w6IG8wBtZIGFK+
XDwI/jMsyrRuiguOSzRldefXgqsv2TiWmd92+GTWMcazkJRHYBWRl90t70Hw
xCmuZWzqGHjh3p72uK5JcDnzekhYBh9sKK7RiC+eAY//osuxi5wH+xVMpM9m
C8BXb2ZxvC4LwRsD6fOkBBG4L6SqwidVDL6rQg1ejloBGxXpTSt4ScCS2FRZ
ja8UrPSUO+8QiKZakMcHQ9G2ixdbV2PQ8REF5zyz0eKAauJsL1poM0AydZWB
5QrUxZw9aPX3+994+6G3N4xwE8LQJ0ymmN0p6AVtMflYG3pWskW10mYN/C2X
6TXuiGblLGVSvkebf8VTYBxAx/olEg8mogn1wyLl+2ifMy4Wzh3oUtf6mPhe
tOsL5sLr5+gLSjunOTK0Vnj+WLTDOjjCnEgtd0M3r0bRnu9FB+a6PHUPQbPb
lvr0GGhh5mEVWgZ6tz/Pk5WDfjN3o0tyHW1G9WkfbEcn8TkEJR66r97EwXEQ
rZuUfzZ2DH3CjXj/1hS6XZ0ueTWL1hgfttEWocOqXOL2Sv+3z67hUWc5guMH
CRzWBuoC6tTR7Ajm0BYDdOFQVT21DJ3t1JulbUgEq0bXOD/UlAO3ujRzGqkb
wDL6YWt/1Y1gosKTK2YytLX7yXYPgjxY8vzWtKYQvY2rM6eUoAD++F+B/wF6
9Z/Y
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{-2.9999998775510206`, 2.9999998775510206`}, {0., 1.}},
        "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.9999998775510206`, 2.9999998775510206`}, {0., 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.9611419365339203`*^9, 3.961143305505455*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"7d3e48f4-6200-2e44-9dc5-09ca2bd34cf2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["1)We first decided on a stopping percent \
(10,20,30,40,50,60,70,80,90%), and a \[OpenCurlyDoubleQuote]simple\
\[CloseCurlyDoubleQuote] neural net architecture, e.g., a small number of \
LinearLayer with a small number of neurons \n2)We then initialized the net \
with random weights(Randomizing the seed as well)\n3)We trained 2 identical \
neural nets  to recreate the function and recorded the number of \
rounds/epochs\n- We then stored the weights (and the final loss) in a list\n\
4)We reset the weights via NetInitialize\n5)Retrained the 2 neural networks \
for 10,20,30,40,50,60,70,80 and 90 percent of the rounds we know would lead \
to convergence\n6)recorded the net loss which we assume to be higher than our \
threshold) and weights\n7)Calculated the distance between the weights of the \
neural networks layer wise\n8)Plotted our results ", "Text"]], "Section",
 CellChangeTimes->{{3.961066826816675*^9, 3.961066835481966*^9}, {
   3.9610672020736713`*^9, 3.9610672077654285`*^9}, {3.9611415026669064`*^9, 
   3.961141510553568*^9}, 3.9611415617079563`*^9, {3.9611416006420803`*^9, 
   3.961141628459503*^9}, {3.9611421434166546`*^9, 3.9611422831775723`*^9}, 
   3.9611449142283287`*^9, 3.9611523952166004`*^9, {3.961158307973154*^9, 
   3.9611583422057285`*^9}},ExpressionUUID->"5a53c9d9-0461-4a4b-972c-\
344367689301"],

Cell["\<\
We start by generating  our training data below by looping through the  \
piecewise function from a range of -3 to +3\
\>", "CodeText",
 CellChangeTimes->{{3.9611420064240265`*^9, 3.9611420248560543`*^9}, {
  3.961142292925417*^9, 3.9611422989227257`*^9}, {3.961150262173355*^9, 
  3.961150278719805*^9}},ExpressionUUID->"197c5c42-6e0a-bb4e-be65-\
af97e9044de6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingDataFormatted", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", "x", "}"}], "->", 
      RowBox[{"{", 
       RowBox[{"N", "[", 
        RowBox[{"whichFunction", "[", "x", "]"}], "]"}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", "0.001"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, 3.9610589522819424`*^9, 
   3.961152414751644*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"a2249e0b-ab34-f640-9e10-b125c60d64d4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Architecture of the neural network
\
\>", "Section",
 CellChangeTimes->{{3.9610758185604057`*^9, 3.9610758633881435`*^9}, {
   3.961141667795824*^9, 3.9611417204504604`*^9}, 3.9611501667647095`*^9, {
   3.9611502862686043`*^9, 3.961150295085968*^9}, {3.961150720512146*^9, 
   3.961150733672184*^9}},ExpressionUUID->"953060bf-b991-ef4a-a648-\
c4363279db71"],

Cell[TextData[{
 "Our neural networks with 3 layers have been set up below with 5 neurons in \
each layer.\nThese specific model configurations were chosen through trial \
and error while keeping simplicity in mind.We have chosen ReLU(Ramp) as our \
activation function while keeping the standard Mean squared error as our loss \
function. We have also chosen the Adam Optimiser to avoid getting stuck in \
local minima/maxima\n",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzt3W9wVGWe939/c/8e/Hamamunah/s1tY95a+2tvbB1O7UVu9u3SllICzB
in8WwxTOxJIFBhIQTAIkK4uSAUQUEAysOMZE/BsJirWjjorgDCjDCoqJBBcQ
BFFREIdFKB0zotD39+bUnPvYp/vq61znOqfPOf1+PbAw6T45J/kkffX17W9/
//+fto1v/tYll1zS/v/Jf8ZPmVc7d+6U+T/6E/mfCa3tN05vbZpW39rRNL1p
7v/66f+QD970/1xyyfr/95JL/s+/8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAACAEAYGBvr6+pYvX75gwYLOzs5Vq1Zt3Ljx7bffrvR5AaEQbGQSwQYA
AJreffddWTOMHj06l8uNGTNmypQpbW1tLS0tN9xww+WXXy4fHDdu3P3333/2
7NlKnykQAMFGJhFsAACg7/z586tWrZIVQkNDw7p16w4fPuy/zdDQUFdX18iR
I2Ut0dfXF/9JAkERbGQSwQYAAIEcPHiwsbFxxIgRTzzxRNkbDw8Pr127VlYa
c+fO/fzzz2M4PcAMwUYmEWwAABDInj17amtrm5qaPvzwQ/177d69+8orr5w4
ceLp06ejOzfAGMFGJhFsAAAQiKwZxo4d29bWduHChaD3/eCDDxoaGmThEcWJ
AWEQbGQSwQYAAEHdeOONjY2Nv//9783ufvDgwZqamrvuusvuWQEhEWxkEsEG
AACBPPHEE7lcbmhoKMxBfvGLX8hBBgYGbJ0VEBLBRiYRbAAAEFR9fb2Vzd7m
5ua2trbwxwGsINjIJIINAAACef7553O5XKDe/1K2bt0qh3rnnXfCHwoIiWAj
kwg2AAAIqqOjo7W11dbRrrjiit7eXltHA4wRbGQSwQYAAEGNGjXq8ccft3W0
zs7OGTNm2DoaYIxgI5MINgAACOTDDz/M5XKDg4O2DihLkdGjR9s6GmCGYCOT
CDYAAAjqzTfflPXDiRMnbB3QaQwZHh62dUDAAMFGJhFsAAAQ1M6dO+Xh/syZ
M7YO+Oqrr8oB77jjjpVA5bS3txNsZE9EwbZ4QAAAkDSDg4PycP/xxx/bOuC2
bdvkgF988YWtAwIGCDYyiWADAICgjh07Jg/3e/bssXXA/v7+2tpaW0cDzBBs
ZBLBBgAABkaMGLFhwwZbR1u0aNHVV18tB9y+ffs777zzu9/9ztaRgbLOnDmz
f//+X/3qV4899lhNTQ3BRjZEGuympiZbRwMAAMk05yJbR6uvr1+7du2RI0d+
85vfPPnkk2vWrOnt7X3++ecHBwctvhIJcJw/f/7YsWOvv/76L37xi5///Of3
3nuv/OO111774IMPZs+eTbCRUnEGu7u729bRAABAMsny1VZjyPbt2+VQ+/fv
937wk08+2bNnz6ZNm9atW9fV1UWVBCF56x3Lly9/9NFH5d/79u07ffq092YE
G+mSkGADAIAsOX78+AsvvHDXXXfV1tauXr06/AFnzZp13XXXrVmz5pVXXin6
5m/Dw8NUSRCUot7x9ddf+29PsJEKyQ82AABIr3feeWfjxo333Xffrl27fv/7
3/f19eVyuQMHDoQ5pixx5SA7d+787//+71//+td33333c8899+GHHyru4lRJ
ZA1DlQQFNOsdBQg2Ei7VwQYAAMl34cKFwcHBBx98UBYbb731lvdTU6dOnTx5
svGRjx49+sMf/nDSpEnPPvvs559/Lh85d+7ca6+9dv/99z/xxBNvv/122SMU
VEkeeOABqiRVJWi9w6tosE+cOPH44483NDRILI3PimAjpMQGe+TIkUuXLnU/
EjTYAAAgaT777DNZc95zzz2y2Hjvvff8N5BF6ahRo26++WaDg588efLHP/7x
tddeK2ubV1555d///d+9Tyf37du3fv16Wei+8cYbZVc4Lqok1cCs3uFVKtiv
vvrqqlWr3nzzTUnRZZddRrARp+QHu7GxUZ4wSrD9nzULNgAAqCC39eOll176
7W9/q7jla6+9VlNT09LScurUKf3jyxp4/PjxEyZMePLJJ2WdIAvXDz744JFH
HnFrIg754DPPPGPWMEKVJDPC1DsKlAq2UwH5j//4j08//VRuc99998l6m2Aj
UmkMthxQcbMwwQYAALEpaP3QucvQ0FBDQ0NdXZ081uvcft26dblcbubMmc6S
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
dqkilJUKSD6C2WThg12q0uRechUGW74EwQ6kmoNtcPeiKP8ZoMUPQLbRrFdW
RIU8NTl+TU1NS0vLqVOn9O8lP8Hx48dPmDDBfTVU0QJBmC3N6DaTQ040czmX
LBco67GKB9tbhJLzsVIBsTWbzGKwS1Wa/EUfgm2MYGtKdbCto/wXCC1+ALKH
Zj0FWS4eOHAg0kJeWUNDQw0NDXV1dbLG07n9unXrcrnczJkz/UuOot1AVrY0
7W4mh59olv9DsBcsWNDe3i4/tTCHskiWW62trcuWLQvZMBJyNpn1YCsqTaWK
PgTbjBPsW2+9taOjg2AXyFiwo0P5TxMtfgAygGY9P/mTHn8hryx5FF66dKms
ChobG9evX//RRx/5b3Po0KHu7u76+nq5WW9vb6lDleoGsrilaWsz2XiiWUGw
LY42C8NbDgjZMGIwmyyiYKtfG1C2n6tqg93f30+w/Qh2RVD+K4sWPwApRbOe
VxIKeTrklBYvXlxTUyMrhGuuuWbWrFnz58+fN29ec3NzXV2dfHDs2LHykKTz
uiDFW/+ZdUIpeDeT77777kCbyUEnmimCHXK0WUhFywFmRSj92WSRBrvsawP0
+7kIdlkE26sKgx2nMMHONlr8AKQFzXqOZBbyNJ07d27Hjh09PT0LFy6cM2dO
e3v7kiVLHnnkkYGBgUDHURcIItrSNNhM1plophnsitREypYDAhWh1LPJ4gl2
2dcGmL1VI8H2I9gOgl0plP/8aPEDkGQ065XaFg75JgNppy4QRL2lqbmZrJho
ZhDsOGsigd63sGwRqujQvTiDrfPaAFtv1RgSwY6U9WD7h+4R7ASi/OdFix+A
RKnaZr1UF/LiVLZAEM+Wpnoz2T/RLEywY6iJGI8kK1WEcmeTxR9szUqTrSls
thDsKBBsOCj/OWjxA1BxVdisRyHPmE6BwHonlIJ/M/m5555buXLlr3/9a1vB
jq4mEr4cUFCEcq538+bNMQdbv9KU2AoIwbaIYKOUKi//0eIHIH5V1ayn2Bb+
6quvKn12KaNZIIh/S9PZTJb1gyy9Jk2a1Nzc3Nvba2Uz2XpNxFY5wAm2rDa7
urrkkqdNm9bT0xNnsPUrTcmvgKQl2NOnT5dnnVUV7KamJoKdPVVb/qPFD0A8
qqRZj0JepDQLBHFuaXqDffToUVmGybN7i5vJtmoiIcsB/mDLil0OKIulOItQ
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
gWzUqFE333yzwX1PnjzZ2Ng4adIk+U3xf9bsXcso/8GK6gl2yHKAn79A4O9p
KiAfl6cMslg1+HIHDhxYvnx50V3QUkWoGC7ZjNm2sJei0uQg2MYItrFUBxso
hWCj2rz22ms1NTUtLS2nTp3Sv5c8iIwfP37ChAnqR8Mw71pG+Q9hZD7YtsoB
fk6BQC5QlqBFN+S9tm7d6s4mM/P+++/LI6Z8B4p+1luEkvOJ9JKD1kRCbgt7
qStNXgTbGMHWlL1gA3mrwXab9Qg20mVoaKihoaGurk4eCnVuv27dulwuN3Pm
TM0AW3nXMsp/CCrDwbZeDvBy9i0XLFjQ3t7+q1/9SnFL/2wyM+5EM8Vt5HlE
a2vrsmXLrA87c+nUROR50IEDB8JsCxcoW2nyI9hmCLbiNtUQbFQhgg0UkEfh
pUuXSsYaGxvXr1//0Ucf+W9z6NCh7u7u+vp6uVlvb2/QL2H8rmV+lP+gKXvB
jq4CkvdtyCsKBIrZZGa8E80KeC/Z7rAzP/8lyyLc1rawl6KnSQfBDoRgE2xU
iYiCnS/drKeDYCNp9u3bt3jx4pqaGsnbNddcM2vWrPnz58+bN6+5ubmurk4+
OHbsWHlIClllNmsYUfBuJt99992U/1AgM8GWf8iF7Nq1K/zBCyj2Lf0FgrKz
ycwUTDRzFC36WClCKbz44otLliyRa7S1LexVtvVDX5aCvWjRIoJNsB3xBBuZ
Yb2Q50WwkWHnzp3bsWNHT0/PwoUL58yZ097eLo8RjzzyyMDAgMWvEtGWJuU/
lJLqYMsDzb333itLQTlhi8HW3JD3Fgj0h+6ZcSealS36WCxC+beFH3rooWXL
lslVh+nkKqDf0xRIBoItz31kkZaEYOsM3TNDsIOKJ9hIo+gKeV76zXqBEGxU
p6i3NCn/oSLsBttfDggfbIN9S1nq33777T/72c+iHvUlJyZf6I477tDs5zIr
QpXaFvauw22926FB60cyEewwCDZgTCfYthBsICIWtzQVKP8hZuGDrdPcFDTY
xhvye/fulfWqLBSjmPPlci5ZVuwrV670TzRTKFuEMtsWDjPaLGRPU2JlMtjy
JQi2pqwGG4kSTyGvQJhmPQD6rDeMKFD+Q2zMgm32voWKYIfZt/TOJrNVIPDz
XrJioplCQRHK1rZw0Eu22PqRZARbE8EGdMRZyPMi2EBFRP2uZX6U/xAD/WDb
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
XnnllY0e+/fvL3pL/zM+57/uDXjGl0ysH9S+/vprOQfvr8CuXbuK3tK/fjh0
6JD/+1CRVwtUIYKtRrBTimCrEeyUWnaR/scLZPsZn36q/c/43AW5cwOe8elw
f+ufvcjd//HuP8ht5C+GfKTgU/LfW2+91fsddn4czvuZuPVr/xOiUhn2Fr6d
exU8vXJu4/6alDrbgYGB711U9A/am2++eemll/793/99k8cLL7xQ9Pvjf8b3
+uuvz549u+CSFd9hVIR6/VDw8C0/RCdI3/72t90ft/6nvElT/B55lVo/eH93
nF1Bubvz2O29jXsaZc+haDiPHTv2D//wD3/913/905/+1P0V8Fauvfzrh/37
90+ePNn72mb/SSIiBJtgZxLBJtjZo7Mdob+QdkLoXyfn/xAh/8HdvBXNdqln
fEFTLScmv25FT8lWqv3P+Hbv3j1r1qw9e/aU/VbD5X3G97d/+7fukynv/oN8
b+VT7nM09y1xSgXV+XfQGp83e/LvH/zgB3Ibf8ycE3YK5e7X8j4xlH/Ip0r9
KTt58qQ813vqqad0vjl53zO+5uZm+ciWLVuKXjKSQ3/94O0QcXLl/mFUfEo+
7v6CeP/UKH6PvEqtH7yn7X6Jgoy5f9vV51Aqll988cU///M/L1++3G18VitY
P0ycOLGzs7O7u9s9yVIbO4gCwSbYmUSwCXb2qEvDTolKfyEt//C+QPS4573i
Sz3jyxvV+AKlWv7rfS7p1t3sptr/jG/t2rWTJk2S4/gvGaV4n/F5X2ns/e7J
Pwp+akGDWkCnTu0eyptk95ldQbzznpj5z9brhRde+Md//MdDhw4d/6ZSOXGe
8cldnHdu+e53v9vf368ZUVSQ+7jm9e1vf7tg/eD/KyGfGjdunPN2Z6U+5f8z
7o1rqd8jL53XCLlp9/5ZdvdA9M+hwJ49e77//e8PDAwU/Ap8+umnRW/vrB+u
vPJK930A5K/0uXPn1CePiBDsUocl2KlGsEsdlmCnl/c1aX4Gz/icPLu3LLUk
DvmMz0udav/Je0/JYqrdZ3zOO7dceuml8oTRfT8iaCp4Vaf7cW9g/JtvTgij
eMbn/bPvHMobM+87d5V6aPC+stdPjvmtb33rL/7iL/7nN5X6Y+484/vxj398
zz33yBddtWqVt8CHxNLcMfb/QXaTr/6Uf3FSdqvNS7F+8B7c/YPpXo73zBXn
oHiUkSPIGuDP//zPC34F5syZU/T2zvpBVg59fX0tLS3r168v9boLxIBgl/rO
EOxUI9ilvjMEO73UGwXuK9b0n/EVHM1dHlt/xqeZ6uPffOmp9/Z2U+0+4/v5
z38+ceLEbdu2tba2ugU+aErOMz4nYO7dvYfy74QoXkup7kf+zW9+k8vlPv74
41I3KOC+qvPkyZPTp0//z//8zylTprjvDoTEinr9UOpPWZj1g/PH0/3r6n2t
svsV3UvQP4cCR44c+Zu/+Zu33nqr1A0KuK8R+vDDD+UXcNOmTfKL8M4772je
HXYR7KKfyhPslCPYRT+VJ9hpVipO3k8l7RlfoFQrLtBuqr2v6tyyZcuSJUvk
HPr6+jTvDofOM76C10l667kFTXbeWwZ9xlfwB997KCdm3j+Yij+e6md8cs51
dXXXX3/92bNnS93Gy9vHt3379tbW1o0bN65atYoXdiac5vrhDd9bA3lfCKT/
KVeY9UPBfZ/1vCjiuO8t1/TPocBXX301Y8aMESNGHDt2rNRtvLxdIbJskN+d
V155Ze7cubxMqCIIdtFP5Ql2yhHsop/KE+yUK9Vn5HaM6i+k/a/qdFfCBUti
7y2DPuMLlGr/yZc6ToGgqfY+45MkT5s2bdu2bdOnTz969KjO3eHQecZX8M4t
3u5jb5uzokhXoOgzPm/I5b7elk9nD0ROw81VwTu35D1zRcu+5/CJEycmTJgg
p/rd735X81WdzrdCnuXJabz00kvyx3NwcFDxJVBx+u8DUNBN/73vfa9Us3+p
Twn54+Nu5IZZP3g31uRXwLtCkNtL/LwH1zwHv88//7ytre1b3/rWd77zHc3X
CLl/1bu7ux999NFVq1Y988wzii+BiBBsxTeHYKcXwVZ8cwh2en3mm8fn/4jm
QvqNb75zi/zvD37wA+enLP9137Gw4D2L1HXGos/4AqX62W++c4scU+KXt53q
N775zi3/9V//NWvWrO3bt8+bN0+ePCq+Crw0X9XpzDtwXqPr/ZPlRMt97W5B
OJ33a/X/0Au68P7lD+/+6h7Kyb/3jt734PJ/ae9ZaU6ZGR4e9raLlnrnlsmT
J8sTw3/6p39ybvDOO+/81V/9lXzk6quv5iXESRbovb7d7lEJuUTd++dR51Pe
F7rrrx/cdzO+xPNO3e6vhmRb1gPev7TeP+/+M1ecQynnzp37+OOPy3ZMyyn9
yZ/8icTe+dKnTp0aMWLEn/7pn8oDwcmTJ8t+FdhFsMt+iwh2GhHsst8igp1e
BYvegh+35kLa+S1YVmzAR97TeeefS+Kkruh0Bm8XnvtuGEFT/ayn6c89K7up
lq/7Z3/2Z/Lc0DnmhQsXfvazn0mq/+iP/oj31rArCZM6FRVDoBooXhQEpBfB
RiYRbNilfh+Y2M6BVGdbxZ/xKarSQJVQvwktkFIEG5lEsGFXEp7xkerMq/gz
Pu+LnIEq5G/ZBjKAYCOTCDasq/gzPlJdDSr4jM95DbP/5cdAlXBe4e++wB7I
BoKNTCLYiEgFn/GRagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUBH/GzuS7Ao=
     "], {{0, 182.}, {595., 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->{144., 144.},
     RasterInterpolation->"High"],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{785.7142857142867, Automatic},
   ImageSizeRaw->{595., 182.},
   PlotRange->{{0, 595.}, {0, 182.}}]], "Input",ExpressionUUID->
  "de5ccb28-38b4-a947-b3db-8f80abec0748"],
 "\n"
}], "CodeText",
 CellChangeTimes->{{3.9610758185604057`*^9, 3.9610758633881435`*^9}, {
   3.961141667795824*^9, 3.9611417204504604`*^9}, 3.9611501667647095`*^9, {
   3.9611502862686043`*^9, 3.961150295085968*^9}, {3.961150720512146*^9, 
   3.9611507216444016`*^9}, {3.9611521515258503`*^9, 
   3.9611521595179462`*^9}, {3.9611579809120827`*^9, 
   3.9611579871352463`*^9}},ExpressionUUID->"b9cce6ed-c375-984b-b708-\
0f8953bd1df0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"newNet", "[", "]"}], ":=", 
   RowBox[{"NetChain", "[", "\[IndentingNewLine]", "  ", 
    RowBox[{"{", "\[IndentingNewLine]", "    ", 
     RowBox[{
      RowBox[{"LinearLayer", "[", 
       RowBox[{"5", ",", 
        RowBox[{"\"\<Input\>\"", "->", "1"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"LinearLayer", "[", 
       RowBox[{"5", ",", 
        RowBox[{"\"\<Input\>\"", "->", "5"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", "    ", 
      RowBox[{"LinearLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Input\>\"", "->", "5"}]}], "]"}]}], 
     "\[IndentingNewLine]", "  ", "}"}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"listOfNetworks", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"newNet", "[", "]"}], ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, {3.961059679760475*^9, 
   3.961059714477068*^9}, {3.9610603292059746`*^9, 3.9610603580422344`*^9}, {
   3.961060627457386*^9, 3.961060776235546*^9}, {3.96106087325066*^9, 
   3.9610610007331467`*^9}, {3.961061085517929*^9, 3.9610610878569336`*^9}, 
   3.9610611938738575`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"cbf99f82-4c5d-144c-8c37-2da53395989d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["NetChain",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                 ImageSizeCache -> {5.475, {0., 5.475}}], Appearance -> None, 
                BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
                  GrayLevel[1, 0], BaseStyle -> GrayLevel[1], ImageSize -> 36,
                   PlotRange -> {{-2, 30}, {-2, 30}}], Center, Center, 32], 
                InsetBox[
                 FrameBox[
                  StyleBox[
                  "\"uninitialized\"", StripOnInput -> False, LineColor -> 
                   RGBColor[0.66, 0, 0], FrontFaceColor -> 
                   RGBColor[0.66, 0, 0], BackFaceColor -> 
                   RGBColor[0.66, 0, 0], GraphicsColor -> 
                   RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                   FontColor -> RGBColor[0.66, 0, 0]], Background -> 
                  GrayLevel[1, 0.9], BaselinePosition -> (Center -> Center), 
                  FrameMargins -> {{0, 0}, {-1.5, -1.5}}, FrameStyle -> None, 
                  RoundingRadius -> 3, StripOnInput -> False], {14, 14}]}, 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-12, 40}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 Appearance -> None, BaseStyle -> {}, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
                  GrayLevel[1, 0], BaseStyle -> GrayLevel[1], ImageSize -> 36,
                   PlotRange -> {{-2, 30}, {-2, 30}}], Center, Center, 32], 
                InsetBox[
                 FrameBox[
                  StyleBox[
                  "\"uninitialized\"", StripOnInput -> False, LineColor -> 
                   RGBColor[0.66, 0, 0], FrontFaceColor -> 
                   RGBColor[0.66, 0, 0], BackFaceColor -> 
                   RGBColor[0.66, 0, 0], GraphicsColor -> 
                   RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                   FontColor -> RGBColor[0.66, 0, 0]], Background -> 
                  GrayLevel[1, 0.9], BaselinePosition -> (Center -> Center), 
                  FrameMargins -> {{0, 0}, {-1.5, -1.5}}, FrameStyle -> None, 
                  RoundingRadius -> 3, StripOnInput -> False], {14, 14}]}, 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-12, 40}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  
                  DynamicModuleBox[{
                   NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{5, 1}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{5, 5}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 5}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                   DynamicBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                   Initialization :> {NetChain}], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    NetChain[<|
     "Type" -> "Chain", 
      "Nodes" -> <|
       "1" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> NeuralNetworks`TensorT[{5, 1}, NeuralNetworks`RealT], 
            "Biases" -> NeuralNetworks`Nullable[
              NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 1, 
            "$InputDimensions" -> {1}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "3" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> NeuralNetworks`TensorT[{5, 5}, NeuralNetworks`RealT], 
            "Biases" -> NeuralNetworks`Nullable[
              NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "5" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> NeuralNetworks`TensorT[{1, 5}, NeuralNetworks`RealT], 
            "Biases" -> NeuralNetworks`Nullable[
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
      "Edges" -> {
       NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Inputs", "Input"], 
        NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Outputs", "Output"] -> 
        NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
      "Inputs" -> <|
       "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
      "Outputs" -> <|
       "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
     "Version" -> "14.1.2", "Unstable" -> False|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["NetChain",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                 ImageSizeCache -> {5.475, {0., 5.475}}], Appearance -> None, 
                BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
                  GrayLevel[1, 0], BaseStyle -> GrayLevel[1], ImageSize -> 36,
                   PlotRange -> {{-2, 30}, {-2, 30}}], Center, Center, 32], 
                InsetBox[
                 FrameBox[
                  StyleBox[
                  "\"uninitialized\"", StripOnInput -> False, LineColor -> 
                   RGBColor[0.66, 0, 0], FrontFaceColor -> 
                   RGBColor[0.66, 0, 0], BackFaceColor -> 
                   RGBColor[0.66, 0, 0], GraphicsColor -> 
                   RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                   FontColor -> RGBColor[0.66, 0, 0]], Background -> 
                  GrayLevel[1, 0.9], BaselinePosition -> (Center -> Center), 
                  FrameMargins -> {{0, 0}, {-1.5, -1.5}}, FrameStyle -> None, 
                  RoundingRadius -> 3, StripOnInput -> False], {14, 14}]}, 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-12, 40}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 Appearance -> None, BaseStyle -> {}, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{
                InsetBox[
                 GraphicsBox[{{
                    EdgeForm[{
                    RGBColor[
                    0.817375, 0.31808499999999995`, 0.3521274999999998], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9939125, 0.9772695, 0.97840425]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    Hue[0.033923303834808266`, 0.44313725490196076`, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6.221999645233154, 18.73400115966797}, {
                    9.045999526977539, 18.73400115966797}, {9.045999526977539,
                     8.734001159667969}, {6.221999645233154, 
                    8.734001159667969}, {6.221999645233154, 
                    18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[0.7565, 0.09078, 0.1361699999999998], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.81100082397461, 18.73400115966797}, {
                    15.635000228881836`, 18.73400115966797}, {
                    15.635000228881836`, 8.734001159667969}, {
                    12.81100082397461, 8.734001159667969}, {12.81100082397461,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    Hue[0.04791666666666667, 0.6274509803921569, 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{19.39900016784668, 18.73400115966797}, {
                    22.222999572753906`, 18.73400115966797}, {
                    22.222999572753906`, 8.734001159667969}, {
                    19.39900016784668, 8.734001159667969}, {19.39900016784668,
                     18.73400115966797}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.98699951171875, 15.73439884185791}, {
                    11.868999481201172`, 13.73439884185791}, {
                    9.98699951171875, 11.73439884185791}, {9.98699951171875, 
                    15.73439884185791}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    16.575298309326172`, 15.73439884185791}, {
                    18.457298278808594`, 13.73439884185791}, {
                    16.575298309326172`, 11.73439884185791}, {
                    16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
                  GrayLevel[1, 0], BaseStyle -> GrayLevel[1], ImageSize -> 36,
                   PlotRange -> {{-2, 30}, {-2, 30}}], Center, Center, 32], 
                InsetBox[
                 FrameBox[
                  StyleBox[
                  "\"uninitialized\"", StripOnInput -> False, LineColor -> 
                   RGBColor[0.66, 0, 0], FrontFaceColor -> 
                   RGBColor[0.66, 0, 0], BackFaceColor -> 
                   RGBColor[0.66, 0, 0], GraphicsColor -> 
                   RGBColor[0.66, 0, 0], FontSize -> -3 + Inherited, 
                   FontColor -> RGBColor[0.66, 0, 0]], Background -> 
                  GrayLevel[1, 0.9], BaselinePosition -> (Center -> Center), 
                  FrameMargins -> {{0, 0}, {-1.5, -1.5}}, FrameStyle -> None, 
                  RoundingRadius -> 3, StripOnInput -> False], {14, 14}]}, 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-12, 40}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  
                  DynamicModuleBox[{
                   NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{5, 1}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{5, 5}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 5}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                   DynamicBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                   Initialization :> {NetChain}], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    NetChain[<|
     "Type" -> "Chain", 
      "Nodes" -> <|
       "1" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> NeuralNetworks`TensorT[{5, 1}, NeuralNetworks`RealT], 
            "Biases" -> NeuralNetworks`Nullable[
              NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 1, 
            "$InputDimensions" -> {1}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "3" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> NeuralNetworks`TensorT[{5, 5}, NeuralNetworks`RealT], 
            "Biases" -> NeuralNetworks`Nullable[
              NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "5" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> NeuralNetworks`TensorT[{1, 5}, NeuralNetworks`RealT], 
            "Biases" -> NeuralNetworks`Nullable[
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
      "Edges" -> {
       NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Inputs", "Input"], 
        NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Outputs", "Output"] -> 
        NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
      "Inputs" -> <|
       "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
      "Outputs" -> <|
       "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
     "Version" -> "14.1.2", "Unstable" -> False|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.9610615683802376`*^9, 3.9610765905233765`*^9, 
  3.9611433167029533`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"ac701ae6-4311-9e4d-83d6-a6b9742b3271"]
}, Open  ]],

Cell["\<\

Initialized the neural network with random weights.\
\>", "CodeText",
 CellChangeTimes->{
  3.9610613364373417`*^9, {3.9610758728556423`*^9, 3.9610758826595936`*^9}, {
   3.9611417255069294`*^9, 3.961141734464697*^9}, 
   3.96114203643721*^9},ExpressionUUID->"e9bbaf78-1f05-4447-b654-\
1c713be7a20e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"initialiseNetworks", "[", "i_", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", "  ", 
    RowBox[{
     RowBox[{"{", "netInitialized", "}"}], ",", "\[IndentingNewLine]", "  ", 
     RowBox[{
      RowBox[{"netInitialized", "=", 
       RowBox[{"NetInitialize", "[", 
        RowBox[{
         RowBox[{"listOfNetworks", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"Method", "->", 
          RowBox[{"{", "\"\<Random\>\"", "}"}]}], ",", 
         RowBox[{"RandomSeeding", "->", "Automatic"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "  ", "netInitialized"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"netxInitialized", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"initialiseNetworks", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "2"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, {3.961059679760475*^9, 
   3.961059714477068*^9}, {3.9610603292059746`*^9, 3.9610603580422344`*^9}, {
   3.961060627457386*^9, 3.961060776235546*^9}, {3.96106087325066*^9, 
   3.9610610007331467`*^9}, {3.961061085517929*^9, 3.9610610878569336`*^9}, 
   3.9610611938738575`*^9, {3.961061295664959*^9, 3.9610615375018635`*^9}, 
   3.9610615797585773`*^9, {3.9610616318403683`*^9, 3.961061634136944*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"d161b084-f366-e843-b1d3-a177f384eba0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["NetChain",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                 ImageSizeCache -> {5.475, {0., 5.475}}], Appearance -> None, 
                BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 EdgeForm[{
                   RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                   Thickness[0.03]}], 
                 FaceForm[
                  RGBColor[0.9855164, 0.9754575, 0.99025]], 
                 
                 RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                  7]}, {
                 Thickness[0.03571428571428571], {
                  FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{6.221999645233154, 18.73400115966797}, {
                   9.045999526977539, 18.73400115966797}, {9.045999526977539, 
                   8.734001159667969}, {6.221999645233154, 
                   8.734001159667969}, {6.221999645233154, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{12.81100082397461, 18.73400115966797}, {
                   15.635000228881836`, 18.73400115966797}, {
                   15.635000228881836`, 8.734001159667969}, {
                   12.81100082397461, 8.734001159667969}, {12.81100082397461, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{19.39900016784668, 18.73400115966797}, {
                   22.222999572753906`, 18.73400115966797}, {
                   22.222999572753906`, 8.734001159667969}, {
                   19.39900016784668, 8.734001159667969}, {19.39900016784668, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   9.98699951171875, 15.73439884185791}, {11.868999481201172`,
                    13.73439884185791}, {9.98699951171875, 
                   11.73439884185791}, {9.98699951171875, 
                   15.73439884185791}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   16.575298309326172`, 15.73439884185791}, {
                   18.457298278808594`, 13.73439884185791}, {
                   16.575298309326172`, 11.73439884185791}, {
                   16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
               GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-2, 30}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 Appearance -> None, BaseStyle -> {}, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 EdgeForm[{
                   RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                   Thickness[0.03]}], 
                 FaceForm[
                  RGBColor[0.9855164, 0.9754575, 0.99025]], 
                 
                 RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                  7]}, {
                 Thickness[0.03571428571428571], {
                  FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{6.221999645233154, 18.73400115966797}, {
                   9.045999526977539, 18.73400115966797}, {9.045999526977539, 
                   8.734001159667969}, {6.221999645233154, 
                   8.734001159667969}, {6.221999645233154, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{12.81100082397461, 18.73400115966797}, {
                   15.635000228881836`, 18.73400115966797}, {
                   15.635000228881836`, 8.734001159667969}, {
                   12.81100082397461, 8.734001159667969}, {12.81100082397461, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{19.39900016784668, 18.73400115966797}, {
                   22.222999572753906`, 18.73400115966797}, {
                   22.222999572753906`, 8.734001159667969}, {
                   19.39900016784668, 8.734001159667969}, {19.39900016784668, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   9.98699951171875, 15.73439884185791}, {11.868999481201172`,
                    13.73439884185791}, {9.98699951171875, 
                   11.73439884185791}, {9.98699951171875, 
                   15.73439884185791}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   16.575298309326172`, 15.73439884185791}, {
                   18.457298278808594`, 13.73439884185791}, {
                   16.575298309326172`, 11.73439884185791}, {
                   16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
               GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-2, 30}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  
                  DynamicModuleBox[{
                   NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                   DynamicBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                   Initialization :> {NetChain}], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    NetChain[<|
     "Type" -> "Chain", 
      "Nodes" -> <|
       "1" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> 
            RawArray["Real32",{{0.7892025709152222}, {-0.7578114867210388}, {
              2.1120755672454834`}, {2.224012851715088}, {
              1.982345700263977}}], "Biases" -> 
            RawArray["Real32",{0., 0., 0., 0., 0.}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 1, 
            "$InputDimensions" -> {1}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "3" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> 
            RawArray["Real32",{{1.3289780616760254`, 0.0405958816409111, 
              0.294809490442276, -0.4432952404022217, -0.5003182888031006}, {
              0.8918954730033875, -0.19351281225681305`, 1.2761718034744263`, 
              1.2099127769470215`, 2.123265504837036}, {
              1.5418106317520142`, -1.2641630172729492`, \
-1.8796520233154297`, -1.0948234796524048`, -0.1350535899400711}, {
              0.6015110611915588, 0.23164354264736176`, 
              0.09406493604183197, -0.30059900879859924`, 
              1.0104182958602905`}, {-0.12274882942438126`, \
-0.29502055048942566`, 0.46425414085388184`, 0.05658531188964844, 
              0.04008433222770691}}], "Biases" -> 
            RawArray["Real32",{0., 0., 0., 0., 0.}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "5" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> 
            RawArray["Real32",{{-0.09756164252758026, -0.5967461466789246, 
              0.31901735067367554`, 
              0.9860906004905701, -0.7348400950431824}}], "Biases" -> 
            RawArray["Real32",{0.}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
      "Edges" -> {
       NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Inputs", "Input"], 
        NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Outputs", "Output"] -> 
        NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
      "Inputs" -> <|
       "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
      "Outputs" -> <|
       "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
     "Version" -> "14.1.2", "Unstable" -> False|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   InterpretationBox[
    RowBox[{
     TagBox["NetChain",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                 ImageSizeCache -> {5.475, {0., 5.475}}], Appearance -> None, 
                BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 EdgeForm[{
                   RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                   Thickness[0.03]}], 
                 FaceForm[
                  RGBColor[0.9855164, 0.9754575, 0.99025]], 
                 
                 RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                  7]}, {
                 Thickness[0.03571428571428571], {
                  FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{6.221999645233154, 18.73400115966797}, {
                   9.045999526977539, 18.73400115966797}, {9.045999526977539, 
                   8.734001159667969}, {6.221999645233154, 
                   8.734001159667969}, {6.221999645233154, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{12.81100082397461, 18.73400115966797}, {
                   15.635000228881836`, 18.73400115966797}, {
                   15.635000228881836`, 8.734001159667969}, {
                   12.81100082397461, 8.734001159667969}, {12.81100082397461, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{19.39900016784668, 18.73400115966797}, {
                   22.222999572753906`, 18.73400115966797}, {
                   22.222999572753906`, 8.734001159667969}, {
                   19.39900016784668, 8.734001159667969}, {19.39900016784668, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   9.98699951171875, 15.73439884185791}, {11.868999481201172`,
                    13.73439884185791}, {9.98699951171875, 
                   11.73439884185791}, {9.98699951171875, 
                   15.73439884185791}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   16.575298309326172`, 15.73439884185791}, {
                   18.457298278808594`, 13.73439884185791}, {
                   16.575298309326172`, 11.73439884185791}, {
                   16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
               GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-2, 30}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]],
                 Appearance -> None, BaseStyle -> {}, 
                ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[{{
                 EdgeForm[{
                   RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                   Thickness[0.03]}], 
                 FaceForm[
                  RGBColor[0.9855164, 0.9754575, 0.99025]], 
                 
                 RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                  7]}, {
                 Thickness[0.03571428571428571], {
                  FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{6.221999645233154, 18.73400115966797}, {
                   9.045999526977539, 18.73400115966797}, {9.045999526977539, 
                   8.734001159667969}, {6.221999645233154, 
                   8.734001159667969}, {6.221999645233154, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{12.81100082397461, 18.73400115966797}, {
                   15.635000228881836`, 18.73400115966797}, {
                   15.635000228881836`, 8.734001159667969}, {
                   12.81100082397461, 8.734001159667969}, {12.81100082397461, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{19.39900016784668, 18.73400115966797}, {
                   22.222999572753906`, 18.73400115966797}, {
                   22.222999572753906`, 8.734001159667969}, {
                   19.39900016784668, 8.734001159667969}, {19.39900016784668, 
                   18.73400115966797}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   9.98699951171875, 15.73439884185791}, {11.868999481201172`,
                    13.73439884185791}, {9.98699951171875, 
                   11.73439884185791}, {9.98699951171875, 
                   15.73439884185791}}}]}, {
                  FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                   16.575298309326172`, 15.73439884185791}, {
                   18.457298278808594`, 13.73439884185791}, {
                   16.575298309326172`, 11.73439884185791}, {
                   16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
               GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
               ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}], PlotRange -> {{-2, 30}, {-2, 30}}], 
              GridBox[{{
                 TagBox[
                  
                  DynamicModuleBox[{
                   NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                    NeuralNetworks`Private`NetChain`opart, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null}, 
                   DynamicBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                   Initialization :> {NetChain}], "SummaryItem"]}}, 
               AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    NetChain[<|
     "Type" -> "Chain", 
      "Nodes" -> <|
       "1" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> 
            RawArray["Real32",{{-0.21574272215366364`}, {
              0.5722241401672363}, {-1.473862886428833}, \
{-1.568463683128357}, {-1.8266255855560303`}}], "Biases" -> 
            RawArray["Real32",{0., 0., 0., 0., 0.}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 1, 
            "$InputDimensions" -> {1}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "3" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> 
            RawArray["Real32",{{0.33536243438720703`, 
              0.9933422207832336, -0.5735992789268494, -0.1907532513141632, 
              1.9709714651107788`}, {-0.21616213023662567`, 
              0.2981514036655426, 0.5091119408607483, -1.7242804765701294`, 
              0.4629846215248108}, {-2.32709002494812, 
              0.7347227334976196, -0.39608994126319885`, \
-0.48577338457107544`, -0.20317435264587402`}, {
              1.019619107246399, -1.4406723976135254`, 
              1.6968382596969604`, -0.5626122355461121, \
-1.0354398488998413`}, {1.2244466543197632`, 
              0.40120846033096313`, -0.5749109983444214, \
-0.007618395145982504, 1.0600217580795288`}}], "Biases" -> 
            RawArray["Real32",{0., 0., 0., 0., 0.}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
          "Parameters" -> <|
           "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
            "$Dimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
        "5" -> <|"Type" -> "Linear", 
          "Arrays" -> <|
           "Weights" -> 
            RawArray["Real32",{{0.8957197070121765, -0.7140951752662659, 
              0.1490992307662964, 
              0.0069239940494298935`, -0.8201590180397034}}], "Biases" -> 
            RawArray["Real32",{0.}]|>, 
          "Parameters" -> <|
           "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5, 
            "$InputDimensions" -> {5}|>, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
      "Edges" -> {
       NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Inputs", "Input"], 
        NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
        NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
        NeuralNetworks`NetPath["Outputs", "Output"] -> 
        NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
      "Inputs" -> <|
       "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
      "Outputs" -> <|
       "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
     "Version" -> "14.1.2", "Unstable" -> False|>],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.9610616370101776`*^9, 3.961076594337076*^9, 
  3.9610780865813675`*^9, 3.96114331934433*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"2f09533e-b47e-9145-8c55-a081b3533753"]
}, Open  ]],

Cell["\<\
Trained the model while checkpointing the weights in a local directory. We \
implemented early stopping to get a more accurate estimate of the number of \
rounds required for our neural network to reach convergence. If there wasn\
\[CloseCurlyQuote]t a 0.001 change in the Mean squared error over the last 40 \
epochs then the neural network would stop training.\
\>", "CodeText",
 CellChangeTimes->{{3.961075949710436*^9, 3.961075952769844*^9}, {
  3.961141741034588*^9, 3.9611417548679733`*^9}, {3.9611427813066425`*^9, 
  3.9611428868303967`*^9}},ExpressionUUID->"6fd673e9-8bc7-b640-aa65-\
cfd7df4fcb01"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"checkpointDir", "=", 
  "\"\<checkpointold\>\""}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"netxtrained", "[", "x_", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", "    ", 
    RowBox[{
     RowBox[{"{", "trainedNetPiece", "}"}], ",", "\[IndentingNewLine]", 
     "    ", 
     RowBox[{
      RowBox[{"trainedNetPiece", "=", 
       RowBox[{"NetTrain", "[", "\[IndentingNewLine]", "        ", 
        RowBox[{
         RowBox[{"netxInitialized", "[", 
          RowBox[{"[", "x", "]"}], "]"}], ",", "\[IndentingNewLine]", 
         "        ", "trainingDataFormatted", ",", "All", ",", 
         "\[IndentingNewLine]", "        ", 
         RowBox[{"TrainingStoppingCriterion", "->", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<Criterion\>\"", "->", "\"\<Loss\>\""}], ",", 
            RowBox[{"\"\<Patience\>\"", "->", "40"}], ",", 
            RowBox[{"\"\<AbsoluteChange\>\"", "->", "0.001"}]}], "|>"}]}], 
         ",", "\[IndentingNewLine]", "        ", 
         RowBox[{"TrainingProgressCheckpointing", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<Directory\>\"", ",", "checkpointDir", ",", 
            RowBox[{"\"\<Interval\>\"", "->", 
             RowBox[{"Quantity", "[", 
              RowBox[{"1", ",", "\"\<Rounds\>\""}], "]"}]}]}], "}"}]}]}], 
        "\[IndentingNewLine]", "    ", "]"}]}], ";", "\[IndentingNewLine]", 
      "    ", "trainedNetPiece"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"listoftrained", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"netxtrained", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "2"}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, {3.961059679760475*^9, 
   3.961059714477068*^9}, {3.9610603292059746`*^9, 3.9610603580422344`*^9}, {
   3.961060627457386*^9, 3.961060776235546*^9}, {3.96106087325066*^9, 
   3.9610610007331467`*^9}, {3.961061085517929*^9, 3.9610610878569336`*^9}, 
   3.9610611938738575`*^9, {3.961061295664959*^9, 3.9610615375018635`*^9}, 
   3.9610615797585773`*^9, {3.961061644692898*^9, 3.961061656741371*^9}, {
   3.9610617327091007`*^9, 3.9610618006814327`*^9}, {3.9610618403705616`*^9, 
   3.9610618734684315`*^9}, {3.961061924868679*^9, 3.9610619321283493`*^9}, {
   3.9610625412755165`*^9, 3.961062549217396*^9}, {3.961066047900038*^9, 
   3.9610660497027817`*^9}, {3.9610660875576572`*^9, 3.961066145297827*^9}, {
   3.9610759611976013`*^9, 3.9610759996375675`*^9}, {3.9610766560381413`*^9, 
   3.961076688668499*^9}, {3.961076765966028*^9, 3.961076788827551*^9}, {
   3.9610768355705338`*^9, 3.9610768508857384`*^9}, {3.9610780402204227`*^9, 
   3.9610780639170704`*^9}, {3.9610785635380344`*^9, 3.961078569259224*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"392d3c1b-778a-bf44-b324-3c8d90b77d0b"],

Cell[BoxData["\<\"checkpointold\"\>"], "Output",
 CellChangeTimes->{{3.961076680352339*^9, 3.9610766955742455`*^9}, {
   3.9610767776761494`*^9, 3.9610767902721252`*^9}, {3.9610768410663357`*^9, 
   3.9610768519789753`*^9}, 3.961078570000082*^9, 3.9611433220159817`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"78b32294-5b7b-c14c-add7-0485051cc995"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "novalidation", 
   "\"No validation set provided, defaulting to training set for stopping \
criterion.\"", 2, 12, 1, 29290908441463531701, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.961076614071293*^9, {3.9610766802354774`*^9, 3.9610766957386227`*^9}, {
   3.96107677758317*^9, 3.9610767903814354`*^9}, {3.9610768409006996`*^9, 
   3.9610768520876904`*^9}, 3.9610785701878834`*^9, 3.9611433230410423`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"9fc74690-c48e-da47-be7e-5a867a7c7dbf"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "novalidation", 
   "\"No validation set provided, defaulting to training set for stopping \
criterion.\"", 2, 12, 2, 29290908441463531701, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.961076614071293*^9, {3.9610766802354774`*^9, 3.9610766957386227`*^9}, {
   3.96107677758317*^9, 3.9610767903814354`*^9}, {3.9610768409006996`*^9, 
   3.9610768520876904`*^9}, 3.9610785701878834`*^9, 3.961143337308037*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"19e4cb3e-52a4-bb44-b504-c7500fc52231"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    StyleBox[
     TagBox["NetTrainResultsObject",
      "SummaryHead"], "NonInterpretableSummary"], 
    StyleBox["[", "NonInterpretableSummary"], 
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["summary"], 
                   TextCell["summary"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["batches:"], 
                    TextCell["batches:"]], "9870"}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["rounds:"], 
                    TextCell["rounds:"]], "105"}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["time:"], 
                    TextCell["time:"]], 
                   InterpretationBox[
                    Cell["15s"], 
                    TextCell["15s"]]}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["examples/s:"], 
                    TextCell["examples/s:"]], "44741"}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["data"], 
                   TextCell["data"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["training examples:"], 
                    TextCell["training examples:"]], "6001"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["processed examples:"], 
                    TextCell["processed examples:"]], "631680"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["skipped examples:"], 
                    TextCell["skipped examples:"]], "0"}, 
                  "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["method"], 
                   TextCell["method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["ADAM"], 
                    TextCell["ADAM"]], 
                   InterpretationBox[
                    Cell["optimizer"], 
                    TextCell["optimizer"]]}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["batch size"], 
                    TextCell["batch size"]], "64"}, "RowWithSeparators"], 
                 InterpretationBox[
                  Cell["CPU"], 
                  TextCell["CPU"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["round"], 
                   TextCell["round"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                   TagBox[
                    InterpretationBox[
                    StyleBox[
                    RowBox[{"\"2.87\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], ShowStringCharacters -> 
                    False], 0.028690068559327746`, AutoDelete -> True], 
                    ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               ItemBox[GridBox[{
                  {"", 
                   ItemBox["\<\"rounds\"\>",
                    DefaultBaseStyle->"LabeledLabel"]},
                  {
                   RotationBox[
                    ItemBox["\<\"loss\"\>",
                    DefaultBaseStyle->"LabeledLabel"],
                    BoxRotation->1.5708], 
                   GraphicsBox[
                    {AbsoluteThickness[1.25], {
                    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
S5rh
                    "]]}, {}}, {
                    {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
                    {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], 
                    PointBox[{}]}}},
                    AspectRatio->Full,
                    Axes->None,
                    Background->GrayLevel[1],
                    
                    BaseStyle->{
                    FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6},
                    Frame->True,
                    FrameStyle->GrayLevel[0.5],
                    FrameTicks->None,
                    GridLines->{{25., 50., 75., 100., 125., 150.}, {{-3., 
                    GrayLevel[0.3001]}, {-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}}},
                    ImagePadding->1,
                    ImageSize->{302, 182.},
                    PlotRange->{{0, 105.32446808510676`}, {-2.241, 1.941}},
                    PlotRangeClipping->True,
                    PlotRangePadding->None,
                    Prolog->{{
                    InsetBox[
                    FormBox["25", TraditionalForm], 
                    Offset[{-2, -2}, {25., 1.941}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["50", TraditionalForm], 
                    Offset[{-2, -2}, {50., 1.941}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["75", TraditionalForm], 
                    Offset[{-2, -2}, {75., 1.941}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["100", TraditionalForm], 
                    Offset[{-2, -2}, {100., 1.941}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["125", TraditionalForm], 
                    Offset[{-2, -2}, {125., 1.941}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["150", TraditionalForm], 
                    Offset[{-2, -2}, {150., 1.941}], 
                    ImageScaled[{1., 1.}]]}, {
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -2.}], 
                    ImageScaled[{0, 0.}]], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -1.}], 
                    ImageScaled[{0, 0.}]], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], 
                    ImageScaled[{0, 0.}]], 
                    InsetBox[
                    FormBox["\"10\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 1.}], 
                    ImageScaled[{0, 0.}]]}}]}
                 },
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.4]},
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}},
                 GridBoxSpacings->{"Columns" -> {{0.5}}}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"},
              {
               ItemBox[
                
                InterpretationBox[Cell[
                 "",ExpressionUUID->"ed370cf7-424a-d046-9539-ecd5fa80a168"],
                 TextCell[""]],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False], 
    StyleBox["]", "NonInterpretableSummary"]}], ",", 
   RowBox[{
    StyleBox[
     TagBox["NetTrainResultsObject",
      "SummaryHead"], "NonInterpretableSummary"], 
    StyleBox["[", "NonInterpretableSummary"], 
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["summary"], 
                   TextCell["summary"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["batches:"], 
                    TextCell["batches:"]], "5452"}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["rounds:"], 
                    TextCell["rounds:"]], "58"}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["time:"], 
                    TextCell["time:"]], 
                   InterpretationBox[
                    Cell["7.5s"], 
                    TextCell["7.5s"]]}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["examples/s:"], 
                    TextCell["examples/s:"]], "46768"}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["data"], 
                   TextCell["data"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["training examples:"], 
                    TextCell["training examples:"]], "6001"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["processed examples:"], 
                    TextCell["processed examples:"]], "348928"}, 
                  "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["skipped examples:"], 
                    TextCell["skipped examples:"]], "0"}, 
                  "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["method"], 
                   TextCell["method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["ADAM"], 
                    TextCell["ADAM"]], 
                   InterpretationBox[
                    Cell["optimizer"], 
                    TextCell["optimizer"]]}, "RowWithSeparators"], 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   InterpretationBox[
                    Cell["batch size"], 
                    TextCell["batch size"]], "64"}, "RowWithSeparators"], 
                 InterpretationBox[
                  Cell["CPU"], 
                  TextCell["CPU"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["round"], 
                   TextCell["round"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 TemplateBox[{"\[ThinSpace]", "\" \"", 
                   TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                   TagBox[
                    InterpretationBox[
                    StyleBox[
                    RowBox[{"\"4.26\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], ShowStringCharacters -> 
                    False], 0.04256922607544655, AutoDelete -> True], 
                    ScientificForm[#, 3]& ]}, "RowWithSeparators"]},
                "RowWithSeparators"]},
              {
               ItemBox[GridBox[{
                  {"", 
                   ItemBox["\<\"rounds\"\>",
                    DefaultBaseStyle->"LabeledLabel"]},
                  {
                   RotationBox[
                    ItemBox["\<\"loss\"\>",
                    DefaultBaseStyle->"LabeledLabel"],
                    BoxRotation->1.5708], 
                   GraphicsBox[
                    {AbsoluteThickness[1.25], {
                    {Hue[0.083, 1., 1.], LineBox[CompressedData["
1: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
VFfSr07w/wFrH0I=
                    "]]}, {}}, {
                    {Hue[0.59, 0.7, 0.75], LineBox[{}]}, 
                    {Hue[0.59, 0.7, 0.65], AbsolutePointSize[4.5], 
                    PointBox[{}]}}},
                    AspectRatio->Full,
                    Axes->None,
                    Background->GrayLevel[1],
                    
                    BaseStyle->{
                    FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6},
                    Frame->True,
                    FrameStyle->GrayLevel[0.5],
                    FrameTicks->None,
                    GridLines->{{20., 40., 60., 80., 100.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {-1.6989700043360185`, 
                    GrayLevel[0.8501]}, {-1.3979400086720375`, 
                    GrayLevel[0.8501]}, {-1.2218487496163564`, 
                    GrayLevel[0.8501]}, {-1.0969100130080565`, 
                    GrayLevel[0.8501]}, {-0.6989700043360187, 
                    GrayLevel[0.8501]}, {-0.39794000867203755`, 
                    GrayLevel[0.8501]}, {-0.22184874961635626`, 
                    GrayLevel[0.8501]}, {-0.09691001300805638, 
                    GrayLevel[0.8501]}, {0.30102999566398114`, 
                    GrayLevel[0.8501]}, {0.6020599913279623, 
                    GrayLevel[0.8501]}, {0.7781512503836435, 
                    GrayLevel[0.8501]}, {0.9030899869919434, 
                    GrayLevel[0.8501]}}},
                    ImagePadding->1,
                    ImageSize->{302, 182.},
                    PlotRange->{{0, 58.015957446808216`}, {-1.823, 0.523}},
                    PlotRangeClipping->True,
                    PlotRangePadding->None,
                    Prolog->{{
                    InsetBox[
                    FormBox["20", TraditionalForm], 
                    Offset[{-2, -2}, {20., 0.523}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["40", TraditionalForm], 
                    Offset[{-2, -2}, {40., 0.523}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["60", TraditionalForm], 
                    Offset[{-2, -2}, {60., 0.523}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["80", TraditionalForm], 
                    Offset[{-2, -2}, {80., 0.523}], 
                    ImageScaled[{1., 1.}]], 
                    InsetBox[
                    FormBox["100", TraditionalForm], 
                    Offset[{-2, -2}, {100., 0.523}], 
                    ImageScaled[{1., 1.}]]}, {
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
                    SuperscriptBox], TraditionalForm], 
                    Offset[{3, 0}, {0, -1.}], 
                    ImageScaled[{0, 0.}]], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    Offset[{3, 0}, {0, 0.}], 
                    ImageScaled[{0, 0.}]]}}]}
                 },
                 
                 BaseStyle->{
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.4]},
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}},
                 GridBoxSpacings->{"Columns" -> {{0.5}}}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"},
              {
               ItemBox[
                
                InterpretationBox[Cell[
                 "",ExpressionUUID->"2d131119-90c2-554b-92df-278101825463"],
                 TextCell[""]],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False], 
    StyleBox["]", "NonInterpretableSummary"]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.961076680352339*^9, 3.9610766955742455`*^9}, {
   3.9610767776761494`*^9, 3.9610767902721252`*^9}, {3.9610768410663357`*^9, 
   3.9610768519789753`*^9}, 3.961078570000082*^9, 3.9611433448488617`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"a77bded9-fa11-754b-ab64-1dff1292c03f"]
}, Open  ]],

Cell["\<\
We can retrieve the number of \"rounds\" the model took to reach convergence\
\>", "CodeText",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, {3.961059679760475*^9, 
   3.961059714477068*^9}, {3.9610603292059746`*^9, 3.9610603580422344`*^9}, {
   3.961060627457386*^9, 3.961060776235546*^9}, {3.96106087325066*^9, 
   3.9610610007331467`*^9}, {3.961061085517929*^9, 3.9610610878569336`*^9}, 
   3.9610611938738575`*^9, {3.961061295664959*^9, 3.9610615375018635`*^9}, 
   3.9610615797585773`*^9, {3.961061644692898*^9, 3.961061656741371*^9}, {
   3.9610617327091007`*^9, 3.9610618006814327`*^9}, {3.9610618403705616`*^9, 
   3.9610618734684315`*^9}, {3.961061924868679*^9, 3.9610619321283493`*^9}, {
   3.9610625412755165`*^9, 3.961062549217396*^9}, {3.961066047900038*^9, 
   3.9610660497027817`*^9}, {3.9610660875576572`*^9, 3.961066145297827*^9}, {
   3.9610759611976013`*^9, 
   3.9610760139035053`*^9}},ExpressionUUID->"1b3d5913-f10c-ad44-aa23-\
8a6754486109"],

Cell[CellGroupData[{

Cell[BoxData[{
 StyleBox[
  RowBox[{"convergencetime1", " ", "=", " ", 
   RowBox[{
    RowBox[{"listoftrained", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<TotalRounds\>\"", "]"}]}], 
  "Code"], "\[LineSeparator]", 
 StyleBox[
  RowBox[{"convergencetime2", "=", 
   RowBox[{
    RowBox[{"listoftrained", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "[", "\"\<TotalRounds\>\"", "]"}]}], 
  "Input"], "\n"}], "Input",
 CellChangeTimes->{
  3.9610764729460125`*^9, {3.9610768984839706`*^9, 3.9610769857100296`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"a44d491b-dffc-9847-930c-85d041d3fcb1"],

Cell[BoxData["105"], "Output",
 CellChangeTimes->{{3.9610768928324966`*^9, 3.961076940249695*^9}, 
   3.961076986896736*^9, 3.9610786076280556`*^9, 3.96114335295154*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"78fb7c42-ea7b-384f-935c-a9cd8aae9f29"]
}, Open  ]],

Cell["", "CodeText",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, {3.961059679760475*^9, 
   3.961059714477068*^9}, {3.9610603292059746`*^9, 3.9610603580422344`*^9}, {
   3.961060627457386*^9, 3.961060776235546*^9}, {3.96106087325066*^9, 
   3.9610610007331467`*^9}, {3.961061085517929*^9, 3.9610610878569336`*^9}, 
   3.9610611938738575`*^9, {3.961061295664959*^9, 3.9610615375018635`*^9}, 
   3.9610615797585773`*^9, {3.961061644692898*^9, 3.961061656741371*^9}, {
   3.9610617327091007`*^9, 3.9610618006814327`*^9}, {3.9610618403705616`*^9, 
   3.9610618734684315`*^9}, {3.961061924868679*^9, 3.9610619321283493`*^9}, {
   3.9610625412755165`*^9, 3.961062549217396*^9}, {3.961066047900038*^9, 
   3.9610660497027817`*^9}, {3.9610660875576572`*^9, 3.961066145297827*^9}, {
   3.9610759611976013`*^9, 3.9610760375975475`*^9}, 
   3.96107647009939*^9},ExpressionUUID->"35d16ba2-a5a0-d546-b041-\
ea5c83965f3e"],

Cell[BoxData["\<\"C:\\\\Users\\\\agast\\\\checkpointsNetNew909\"\>"], "Output",
 CellChangeTimes->{{3.96106185525753*^9, 3.961061874473345*^9}, {
  3.9610619265178585`*^9, 3.961061933008484*^9}},
 CellLabel->"Out[22]=",ExpressionUUID->"b07f2c68-df20-2e46-accb-28c89ab08923"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "novalidation", 
   "\"No validation set provided, defaulting to training set for stopping \
criterion.\"", 2, 24, 10, 29290163072459471371, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.9610618551766796`*^9, 3.961061874408167*^9}, {
  3.961061926449484*^9, 3.9610619331337013`*^9}},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"fb43dd2f-a348-9143-aa0a-677ee1f355cc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["NetChain",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {5.475, {0., 5.475}}], Appearance -> None, 
              BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               EdgeForm[{
                 RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                 Thickness[0.03]}], 
               FaceForm[
                RGBColor[0.9855164, 0.9754575, 0.99025]], 
               
               RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                7]}, {
               Thickness[0.03571428571428571], {
                FaceForm[{
                  RGBColor[
                  0.6274509803921569, 0.8156862745098039, 
                   0.49411764705882355`], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{6.221999645233154, 18.73400115966797}, {
                 9.045999526977539, 18.73400115966797}, {9.045999526977539, 
                 8.734001159667969}, {6.221999645233154, 8.734001159667969}, {
                 6.221999645233154, 18.73400115966797}}}]}, {
                FaceForm[{
                  RGBColor[0.42065599999999986`, 0.018300000000000014`, 0.61], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.81100082397461, 18.73400115966797}, {
                 15.635000228881836`, 18.73400115966797}, {
                 15.635000228881836`, 8.734001159667969}, {12.81100082397461, 
                 8.734001159667969}, {12.81100082397461, 
                 18.73400115966797}}}]}, {
                FaceForm[{
                  Hue[0.5247747747747747, 0.43, 0.86], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{19.39900016784668, 18.73400115966797}, {
                 22.222999572753906`, 18.73400115966797}, {
                 22.222999572753906`, 8.734001159667969}, {19.39900016784668, 
                 8.734001159667969}, {19.39900016784668, 
                 18.73400115966797}}}]}, {
                FaceForm[{
                  RGBColor[
                  0.6509803921568628, 0.6509803921568628, 0.6509803921568628], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.98699951171875, 15.73439884185791}, {11.868999481201172`, 
                 13.73439884185791}, {9.98699951171875, 11.73439884185791}, {
                 9.98699951171875, 15.73439884185791}}}]}, {
                FaceForm[{
                  RGBColor[
                  0.6509803921568628, 0.6509803921568628, 0.6509803921568628], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 16.575298309326172`, 15.73439884185791}, {
                 18.457298278808594`, 13.73439884185791}, {
                 16.575298309326172`, 11.73439884185791}, {
                 16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
             GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
             ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
             Dynamic[{
               Automatic, 
                4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{-2, 30}, {-2, 30}}], 
            GridBox[{{
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}, {
               TagBox[
                StyleBox[
                 TemplateBox[{
                   TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], "SummaryItem"], 
               TagBox[
                StyleBox[
                 TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                   StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                  "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               EdgeForm[{
                 RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                 Thickness[0.03]}], 
               FaceForm[
                RGBColor[0.9855164, 0.9754575, 0.99025]], 
               
               RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                7]}, {
               Thickness[0.03571428571428571], {
                FaceForm[{
                  RGBColor[
                  0.6274509803921569, 0.8156862745098039, 
                   0.49411764705882355`], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{6.221999645233154, 18.73400115966797}, {
                 9.045999526977539, 18.73400115966797}, {9.045999526977539, 
                 8.734001159667969}, {6.221999645233154, 8.734001159667969}, {
                 6.221999645233154, 18.73400115966797}}}]}, {
                FaceForm[{
                  RGBColor[0.42065599999999986`, 0.018300000000000014`, 0.61], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.81100082397461, 18.73400115966797}, {
                 15.635000228881836`, 18.73400115966797}, {
                 15.635000228881836`, 8.734001159667969}, {12.81100082397461, 
                 8.734001159667969}, {12.81100082397461, 
                 18.73400115966797}}}]}, {
                FaceForm[{
                  Hue[0.5247747747747747, 0.43, 0.86], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{19.39900016784668, 18.73400115966797}, {
                 22.222999572753906`, 18.73400115966797}, {
                 22.222999572753906`, 8.734001159667969}, {19.39900016784668, 
                 8.734001159667969}, {19.39900016784668, 
                 18.73400115966797}}}]}, {
                FaceForm[{
                  RGBColor[
                  0.6509803921568628, 0.6509803921568628, 0.6509803921568628], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 9.98699951171875, 15.73439884185791}, {11.868999481201172`, 
                 13.73439884185791}, {9.98699951171875, 11.73439884185791}, {
                 9.98699951171875, 15.73439884185791}}}]}, {
                FaceForm[{
                  RGBColor[
                  0.6509803921568628, 0.6509803921568628, 0.6509803921568628], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                 16.575298309326172`, 15.73439884185791}, {
                 18.457298278808594`, 13.73439884185791}, {
                 16.575298309326172`, 11.73439884185791}, {
                 16.575298309326172`, 15.73439884185791}}}]}}}, Background -> 
             GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
             ImagePadding -> {{0, 1}, {1, 0}}, ImageSize -> 
             Dynamic[{
               Automatic, 
                4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], PlotRange -> {{-2, 30}, {-2, 30}}], 
            GridBox[{{
               TagBox[
                
                DynamicModuleBox[{
                 NeuralNetworks`Private`NetChain`assoc3 = <|
                   "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{5}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {5}, "$OutputSize" -> 5, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 5, "$InputDimensions" -> {5}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, 
                  NeuralNetworks`Private`NetChain`opart, 
                  NeuralNetworks`Private`NetChain`part, 
                  NeuralNetworks`Private`NetChain`selected = Null}, 
                 DynamicBox[
                  GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 5\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                   GridFrameMargins -> {{0, 0}, {0, 0}}], 
                  TrackedSymbols :> {
                   NeuralNetworks`Private`NetChain`selected}], 
                 Initialization :> {NetChain}], "SummaryItem"]}}, AutoDelete -> 
             False, BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  NetChain[<|
   "Type" -> "Chain", 
    "Nodes" -> <|
     "1" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> 
          RawArray["Real32",{{0.06097433343529701}, {-0.25649628043174744`}, {
            0.5825083255767822}, {-1.37462317943573}, {-0.7149075269699097}}],
           "Biases" -> 
          RawArray[
            "Real32",{-0.1171165406703949, -0.7464954853057861, \
-0.4036056399345398, -0.42524468898773193`, -0.42161932587623596`}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 1, 
          "$InputDimensions" -> {1}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
      "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
          "$Dimensions" -> {5}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
      "3" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> 
          RawArray["Real32",{{0.5461822748184204, 1.6984448432922363`, 
            1.2661761045455933`, -2.293010711669922, -0.3072489798069}, {
            0.23986637592315674`, -3.0183346271514893`, 0.09487488865852356, 
            0.21420137584209442`, -0.8031144738197327}, \
{-1.7544615268707275`, -0.5973291397094727, 
            0.276313841342926, -0.7476599812507629, 
            0.4060826003551483}, {-0.7134541869163513, 
            0.7931922078132629, -0.9211391806602478, 
            0.8008654713630676, -0.04763742908835411}, {-1.9763238430023193`, \
-1.2171897888183594`, 0.2318926602602005, 0.9212265610694885, 
            1.1390025615692139`}}], "Biases" -> 
          RawArray[
            "Real32",{-0.5229189395904541, -0.2627250850200653, \
-0.26367470622062683`, -0.4408760070800781, -0.4618930220603943}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {5}, "$OutputSize" -> 5, "$InputSize" -> 5, 
          "$InputDimensions" -> {5}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
      "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
        "Parameters" -> <|
         "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
          "$Dimensions" -> {5}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>|>, 
      "5" -> <|"Type" -> "Linear", 
        "Arrays" -> <|
         "Weights" -> 
          RawArray["Real32",{{1.396848201751709, 1.1381934881210327`, 
            1.9575203657150269`, 
            1.0358200073242188`, -0.32348623871803284`}}], "Biases" -> 
          RawArray["Real32",{-0.18939930200576782`}]|>, 
        "Parameters" -> <|
         "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 5, 
          "$InputDimensions" -> {5}|>, 
        "Inputs" -> <|
         "Input" -> NeuralNetworks`TensorT[{5}, NeuralNetworks`RealT]|>, 
        "Outputs" -> <|
         "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>|>, 
    "Edges" -> {
     NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Inputs", "Input"], 
      NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
      NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
      NeuralNetworks`NetPath["Outputs", "Output"] -> 
      NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
    "Inputs" -> <|
     "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`AtomT]|>, 
    "Outputs" -> <|
     "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
   "Version" -> "14.1.2", "Unstable" -> False|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.96106185525753*^9, 3.961061874473345*^9}, {
  3.9610619265178585`*^9, 3.961061938812788*^9}},
 CellLabel->"Out[24]=",ExpressionUUID->"8098fa4a-4f9e-5a45-a581-30d948239393"],

Cell["\<\
We then extract the weights of our 2 neural networks  by looping through each \
layer of the neural network with Table and then extracting the weights with \
NetExtract\
\>", "CodeText",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, {3.961059679760475*^9, 
   3.961059714477068*^9}, {3.9610603292059746`*^9, 3.9610603580422344`*^9}, {
   3.961060627457386*^9, 3.961060776235546*^9}, {3.96106087325066*^9, 
   3.9610610007331467`*^9}, {3.961061085517929*^9, 3.9610610878569336`*^9}, 
   3.9610611938738575`*^9, {3.961061295664959*^9, 3.9610615375018635`*^9}, 
   3.9610615797585773`*^9, {3.961061644692898*^9, 3.961061656741371*^9}, {
   3.9610617327091007`*^9, 3.9610618006814327`*^9}, {3.9611429076727943`*^9, 
   3.961142926197836*^9}, {3.9611429628046856`*^9, 3.9611429838464184`*^9}, {
   3.96115031730999*^9, 3.9611503175876007`*^9}, {3.961150582816164*^9, 
   3.9611506111858273`*^9}},ExpressionUUID->"6d1138df-1a33-e043-8412-\
821afbaeeceb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"listofweights", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", "    ", 
    RowBox[{
     RowBox[{"Table", "[", "\[IndentingNewLine]", "        ", 
      RowBox[{
       RowBox[{"Normal", "[", 
        RowBox[{"NetExtract", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"listoftrained", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<TrainedNet\>\"", "]"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "\"\<Weights\>\""}], "}"}]}], "]"}], "]"}], ",", 
       "\[IndentingNewLine]", "        ", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{"Length", "[", 
          RowBox[{"netxInitialized", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", "2"}], "}"}]}], 
      "\[IndentingNewLine]", "    ", "]"}], ",", "\[IndentingNewLine]", 
     "    ", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "listoftrained", "]"}]}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, 3.9610594265263023`*^9, {
   3.9610622812366524`*^9, 3.961062301170006*^9}, {3.961062557543377*^9, 
   3.9610625986207333`*^9}, {3.9610629511722775`*^9, 
   3.9610629573984528`*^9}, {3.961077000071535*^9, 3.9610770014483356`*^9}, {
   3.961077366805681*^9, 3.961077374327965*^9}, {3.961077474653595*^9, 
   3.961077476761402*^9}, {3.9610776076242065`*^9, 3.9610776115269394`*^9}, {
   3.9610779354382896`*^9, 3.9610779471227016`*^9}, {3.961142928753723*^9, 
   3.9611429318279896`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"fa2f2514-1d5e-c64a-bc46-cb985354f2f9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "0.9645141959190369`", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"-", "0.9971227049827576`"}], "}"}], ",", 
       RowBox[{"{", "1.980356216430664`", "}"}], ",", 
       RowBox[{"{", "2.133596658706665`", "}"}], ",", 
       RowBox[{"{", "2.1409711837768555`", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "1.9428086280822754`", ",", "0.2862285375595093`", ",", 
         "0.026198899373412132`", ",", 
         RowBox[{"-", "0.717161238193512`"}], ",", 
         RowBox[{"-", "0.6214132308959961`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "0.8591431379318237`", ",", "0.3455796539783478`", ",", 
         "1.114931583404541`", ",", "1.0516239404678345`", ",", 
         "1.9567898511886597`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2.1498353481292725`", ",", 
         RowBox[{"-", "1.2009406089782715`"}], ",", 
         RowBox[{"-", "1.292858362197876`"}], ",", 
         RowBox[{"-", "0.5078237056732178`"}], ",", 
         RowBox[{"-", "0.1946604698896408`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "0.6230666041374207`", ",", "0.05345873907208443`", ",", 
         "0.27752986550331116`", ",", 
         RowBox[{"-", "0.12071128189563751`"}], ",", "1.1999621391296387`"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "0.2661089301109314`"}], ",", 
         RowBox[{"-", "0.29502055048942566`"}], ",", "0.33410197496414185`", 
         ",", 
         RowBox[{"-", "0.0736108124256134`"}], ",", 
         RowBox[{"-", "0.09288231283426285`"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2.755387306213379`"}], ",", 
        RowBox[{"-", "0.44564375281333923`"}], ",", "1.2092974185943604`", 
        ",", "1.1647447347640991`", ",", 
        RowBox[{"-", "0.6485587954521179`"}]}], "}"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"-", "0.34763798117637634`"}], "}"}], ",", 
       RowBox[{"{", "0.6101671457290649`", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"-", "1.64121675491333`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"-", "1.4356061220169067`"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"-", "1.723673939704895`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.3085172176361084`", ",", "1.0723471641540527`", ",", 
         RowBox[{"-", "0.6352789998054504`"}], ",", 
         RowBox[{"-", "0.2494359165430069`"}], ",", "1.9213896989822388`"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2.418436288833618`"}], ",", "0.22522523999214172`", 
         ",", "0.10238364338874817`", ",", 
         RowBox[{"-", "1.8430366516113281`"}], ",", "0.4951079487800598`"}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2.3257570266723633`"}], ",", "1.320785641670227`", ",", 
         RowBox[{"-", "0.39608994126319885`"}], ",", 
         RowBox[{"-", "0.48577338457107544`"}], ",", 
         RowBox[{"-", "0.20317435264587402`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.485316276550293`", ",", 
         RowBox[{"-", "1.4505754709243774`"}], ",", "1.9835853576660156`", 
         ",", 
         RowBox[{"-", "0.32120850682258606`"}], ",", 
         RowBox[{"-", "0.8580366969108582`"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.2533011436462402`", ",", "0.3185557723045349`", ",", 
         RowBox[{"-", "0.5114841461181641`"}], ",", "0.05259160324931145`", 
         ",", "1.1097092628479004`"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"0.8534741401672363`", ",", 
        RowBox[{"-", "1.1772925853729248`"}], ",", "0.8232061862945557`", ",", 
        RowBox[{"-", "0.6496121883392334`"}], ",", 
        RowBox[{"-", "0.8609667420387268`"}]}], "}"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.961077484867914*^9, 3.961077613317465*^9, 
  3.9610779480635624`*^9, 3.961078106084671*^9, 3.9610784990408115`*^9, 
  3.961078614629114*^9, 3.9610788533132095`*^9, 3.961143357751713*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"248d0d92-409b-7148-85e3-f06c4c510450"]
}, Open  ]],

Cell["\<\
To calculate the distance between the weights of our neural networks, we must \
first sort the weights of each layer in ascending order. This is because \
neurons in an artificial neural network may be permutations of each other. We \
then Map the corresponding weights and calculate the euclidean distance \
between them\
\>", "CodeText",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, 3.9610594265263023`*^9, {
   3.9610619653997498`*^9, 3.961061994193449*^9}, {3.9610620339044456`*^9, 
   3.9610620352195225`*^9}, {3.9610629659862022`*^9, 
   3.9610629866312466`*^9}, {3.9610781237608604`*^9, 
   3.9610781247660007`*^9}, {3.9610790122315407`*^9, 3.961079052143852*^9}, {
   3.9611429902186546`*^9, 3.961143207633341*^9}, {3.9611522205682087`*^9, 
   3.9611522225871143`*^9}},ExpressionUUID->"7be68840-22b0-6d40-89cf-\
7e7806122ee2"],

Cell[BoxData[
 StyleBox[
  RowBox[{"\n", 
   RowBox[{
    RowBox[{
     RowBox[{"orderedWeights1", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"listofweights", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", 
           RowBox[{"listofweights", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", "1"}], "}"}]}], 
       "]"}]}], ";"}], "\n", 
    RowBox[{
     RowBox[{"orderedWeights2", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{"listofweights", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", 
           RowBox[{"listofweights", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", " ", "1"}], "}"}]}], 
       "]"}]}], ";"}]}]}], "Input"]], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, 3.9610594265263023`*^9, {
   3.9610619653997498`*^9, 3.961061994193449*^9}, {3.9610620339044456`*^9, 
   3.9610620352195225`*^9}, {3.9610629659862022`*^9, 
   3.9610629866312466`*^9}, {3.9610781237608604`*^9, 
   3.9610781247660007`*^9}, {3.9610790122315407`*^9, 3.961079052143852*^9}, {
   3.9611429902186546`*^9, 3.961143122439064*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"52de1af5-25f3-0f4b-96fa-4ab75c5f3a64"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"euclideanDistances", "=", 
   RowBox[{"MapThread", "[", 
    RowBox[{"EuclideanDistance", ",", 
     RowBox[{"{", 
      RowBox[{"orderedWeights1", ",", "orderedWeights2"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"totalDistance", "=", 
    RowBox[{"Total", "[", "euclideanDistances", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", "totalDistance"}], "Input",
 CellChangeTimes->{{3.9609711303069096`*^9, 3.960971147343973*^9}, {
   3.9609712840905476`*^9, 3.960971284636343*^9}, {3.960971654412039*^9, 
   3.9609716649189377`*^9}, {3.960971703515114*^9, 3.960971754658146*^9}, {
   3.9609718679254093`*^9, 3.9609719028065224`*^9}, {3.960971973349697*^9, 
   3.960971990729191*^9}, {3.960972034516947*^9, 3.9609720369579544`*^9}, {
   3.960972096640383*^9, 3.960972101532772*^9}, {3.960972152293251*^9, 
   3.960972197561491*^9}, {3.9609722542363625`*^9, 3.960972332311413*^9}, {
   3.9609724593879395`*^9, 3.960972471414509*^9}, {3.960972576267826*^9, 
   3.960972622156252*^9}, {3.960972806600315*^9, 3.9609728085202866`*^9}, {
   3.9609728709150696`*^9, 3.9609728727547398`*^9}, {3.9609761664107056`*^9, 
   3.960976185163233*^9}, 3.960979379525234*^9, {3.9610589522819424`*^9, 
   3.9610589711373177`*^9}, 3.961059373765911*^9, 3.9610594265263023`*^9, {
   3.9610619653997498`*^9, 3.961061994193449*^9}, {3.9610620339044456`*^9, 
   3.9610620352195225`*^9}, {3.9610629659862022`*^9, 
   3.9610629866312466`*^9}, {3.9610781237608604`*^9, 3.9610781247660007`*^9}, 
   3.9610790122315407`*^9, 
   3.961152373947645*^9},ExpressionUUID->"d51009cb-6f04-8642-954b-\
1d227d144465"],

Cell[BoxData["11.755650827667033`"], "Output",
 CellChangeTimes->{3.961078506248905*^9, 3.961078618931408*^9, 
  3.9610788586616554`*^9, 3.9610790556640205`*^9, 3.9611433661075134`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"ddcb8d21-7d0d-2e47-98eb-ba12003ff4dc"]
}, Open  ]],

Cell["\<\
We can now plot the output of our trained neural nets against the objective \
function\
\>", "CodeText",
 CellChangeTimes->{{3.9611432300949497`*^9, 
  3.9611432699213543`*^9}},ExpressionUUID->"477da182-ce5c-fb47-acf0-\
a60362b46a52"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Plot", "[", "\[IndentingNewLine]", "    ", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", "        ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"listoftrained", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<TrainedNet\>\"", "]"}], 
       "[", "x", "]"}], " ", "//", " ", "Normal"}], ",", 
     "\[IndentingNewLine]", "   ", "\[IndentingNewLine]", "        ", 
     RowBox[{"whichFunction", "[", "x", "]"}]}], "\[IndentingNewLine]", 
    "    ", "}"}], ",", "\[IndentingNewLine]", "    ", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", "\[IndentingNewLine]", 
   "    ", 
   RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", "    ", 
   RowBox[{
   "PlotLabel", "->", 
    "\"\<Neural Network and Piecewise Function Output\>\""}], ",", 
   "\[IndentingNewLine]", "    ", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Input\>\"", ",", "\"\<Output\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", "    ", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Neural Network 1\>\"", ",", "\"\<Piecewise Function\>\""}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", "\[IndentingNewLine]", "    ", 
  RowBox[{
   RowBox[{
   "{", "\[IndentingNewLine]", "        ", "\[IndentingNewLine]", "        ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"listoftrained", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "[", "\"\<TrainedNet\>\"", "]"}], 
       "[", "x", "]"}], " ", "//", " ", "Normal"}], ",", 
     "\[IndentingNewLine]", "        ", 
     RowBox[{"whichFunction", "[", "x", "]"}]}], "\[IndentingNewLine]", 
    "    ", "}"}], ",", "\[IndentingNewLine]", "    ", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", "\[IndentingNewLine]", 
   "    ", 
   RowBox[{"PlotRange", "->", "All"}], ",", "\[IndentingNewLine]", "    ", 
   RowBox[{
   "PlotLabel", "->", 
    "\"\<Neural Network and Piecewise Function Output\>\""}], ",", 
   "\[IndentingNewLine]", "    ", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Input\>\"", ",", "\"\<Output\>\""}], "}"}]}], ",", 
   "\[IndentingNewLine]", "    ", 
   RowBox[{"PlotLegends", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Neural Network 1\>\"", ",", "\"\<Piecewise Function\>\""}], 
     "}"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.960971512493183*^9, 3.9609715271958447`*^9}, {
  3.960971793451275*^9, 3.9609718027524033`*^9}, {3.960972396330511*^9, 
  3.960972398461605*^9}, {3.9609725162923393`*^9, 3.960972533590206*^9}, {
  3.9610634389132385`*^9, 3.9610634413264656`*^9}, {3.961065299270975*^9, 
  3.9610653105439873`*^9}, {3.9610790724244003`*^9, 3.9610791359043274`*^9}, {
  3.9610791942576904`*^9, 3.961079196715025*^9}, {3.9610792644499435`*^9, 
  3.961079267553131*^9}, {3.9610808741700554`*^9, 3.9610808808142776`*^9}, {
  3.9611436644228287`*^9, 3.9611436704652424`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"761e2e77-8d55-0448-a4d6-bec529595c02"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    InterpretationBox[{
      TagBox[{{{}, {}, 
         TagBox[{
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Opacity[1.], 
           LineBox[CompressedData["
1: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
BSCn4LGmbFBUb6kARP9/p45bJID/Aa+trTk=
            "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
         TagBox[{
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[2], 
           Opacity[1.], 
           LineBox[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
            "]], 
           LineBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQHed38LTmj//7GcDggz3n7sDU1qcI/oI/s3NrryH4
f5iO9sXOQvDDOd+tt41D8PnEHD79ffoPzj+iNMlkXy6CzzCF48uXjL9wvjVr
/WbtlD9w/hQHc3PH2l9wfvKciKev5v+A888vl+NknPUNzpfj2WC4f9sXOJ9L
4dn5l6s+IczfZWpycuVHOD8npHXGihUf4HyRZUZFW3MQ/L3f73sfMkDw1X28
m44qIvgTF2zbcUIIwT/m9SbYixvBX7TRzuQaO4IPAHsxgac=
            "]], 
           LineBox[CompressedData["
1:eJxFzXlIkwEYBvBvkpnKRFwErki0g1wQhmYLk2mJFs5iM0tbxxKHWg4d2Dxa
xSfWUmvpYC5UQtMsr9KiLHSOlk1lYsaytOnSPFLmps21bB4dUO/7wMPD76/H
NzGdK3AiCIL9p3+3vSJPGTs/pyb+JfjrNbLqE7oy5FtrjQ6dOdG1taEJvSn4
4mqrCH29cDSoLRE9b4y+0BGL7pT6DXbuQQuH3ra8+2kBd0gYAhOJ5r/+rNss
N4OjQhcFIyR6V6snUSFCL9eHB3lz0Hfk1RU0T3T/uWThOtksOJyY87AWmMB+
oaucN+QMuC7l6Vjb80nw+YWWU0VlY/h/xTlh7RYDmJbz3r20XA/+mJTGeDyu
BWflMmQ9ikfg+tvMsJqAJtZ/y1LJD/y8LjDVxg5p5OjBo5naIHG+AWx5GaPJ
6h4D10qr+EkFk+Bt9gZadvkM2PjERxWSYgbHKUdvmIrnwXfv31SxS63gNTyh
2TnHBu7j1z3g5tvBz6j00z/SFsHby3ynXdgOsEOcv9IQuwx2G9CaWTw0PdDV
qE9E75u71bEkQmcnK69GF6PtJ+oppl60ldnvzIhcATspveyqGLTX92NTnDj0
7pYhbU4SOsN/XNqTh7Z4211T1WiTY6PHQ+YqeL9WyjaGoWUlC4XrD6MDduhc
yAS0OC6XcjIXTTQP2tzb0dxLEYEHOtHVkc2i7F505IjUMjGMLnLbO61aQW8Q
KAzprF/g5AAKvTYK/WIpLX74KJonjxg4xEdXqhf6fEm0tfAsNb4AffC4LlpW
gp6avdftqELvpHM1eg1aMqki3HTovmZ/Vpge7SNRXBYb0BlRlPbGcbTGS+j4
YkLTjINMbxv6zJFXOv9F9G9c41OH
            "]], 
           
           LineBox[{{2.0019132653061225`, 1.}, {2.009123501828184, 1.}, {
            2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
            2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
            2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
            2.623618318292643, 1.}, {2.75014259253751, 1.}, {
            2.8682058503869685`, 1.}, {2.9341028639689943`, 1.}, {
            2.9999998775510206`, 1.}}]}, 
          Annotation[#, "Charting`Private`Tag#2"]& ], {}}, {}}, {
       "WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[
        (Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
             Annotation[{
               Directive[
                Opacity[1.], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1: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
BSCn4LGmbFBUb6kARP9/p45bJID/Aa+trTk=
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Directive[
                Opacity[1.], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
                "]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGAQA2IQHed38LTmj//7GcDggz3n7sDU1qcI/oI/s3NrryH4
f5iO9sXOQvDDOd+tt41D8PnEHD79ffoPzj+iNMlkXy6CzzCF48uXjL9wvjVr
/WbtlD9w/hQHc3PH2l9wfvKciKev5v+A888vl+NknPUNzpfj2WC4f9sXOJ9L
4dn5l6s+IczfZWpycuVHOD8npHXGihUf4HyRZUZFW3MQ/L3f73sfMkDw1X28
m44qIvgTF2zbcUIIwT/m9SbYixvBX7TRzuQaO4IPAHsxgac=
                "]], 
               Line[CompressedData["
1:eJxFzXlIkwEYBvBvkpnKRFwErki0g1wQhmYLk2mJFs5iM0tbxxKHWg4d2Dxa
xSfWUmvpYC5UQtMsr9KiLHSOlk1lYsaytOnSPFLmps21bB4dUO/7wMPD76/H
NzGdK3AiCIL9p3+3vSJPGTs/pyb+JfjrNbLqE7oy5FtrjQ6dOdG1taEJvSn4
4mqrCH29cDSoLRE9b4y+0BGL7pT6DXbuQQuH3ra8+2kBd0gYAhOJ5r/+rNss
N4OjQhcFIyR6V6snUSFCL9eHB3lz0Hfk1RU0T3T/uWThOtksOJyY87AWmMB+
oaucN+QMuC7l6Vjb80nw+YWWU0VlY/h/xTlh7RYDmJbz3r20XA/+mJTGeDyu
BWflMmQ9ikfg+tvMsJqAJtZ/y1LJD/y8LjDVxg5p5OjBo5naIHG+AWx5GaPJ
6h4D10qr+EkFk+Bt9gZadvkM2PjERxWSYgbHKUdvmIrnwXfv31SxS63gNTyh
2TnHBu7j1z3g5tvBz6j00z/SFsHby3ynXdgOsEOcv9IQuwx2G9CaWTw0PdDV
qE9E75u71bEkQmcnK69GF6PtJ+oppl60ldnvzIhcATspveyqGLTX92NTnDj0
7pYhbU4SOsN/XNqTh7Z4211T1WiTY6PHQ+YqeL9WyjaGoWUlC4XrD6MDduhc
yAS0OC6XcjIXTTQP2tzb0dxLEYEHOtHVkc2i7F505IjUMjGMLnLbO61aQW8Q
KAzprF/g5AAKvTYK/WIpLX74KJonjxg4xEdXqhf6fEm0tfAsNb4AffC4LlpW
gp6avdftqELvpHM1eg1aMqki3HTovmZ/Vpge7SNRXBYb0BlRlPbGcbTGS+j4
YkLTjINMbxv6zJFXOv9F9G9c41OH
                "]], 
               
               Line[{{2.0019132653061225`, 1.}, {2.009123501828184, 1.}, {
                2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
                2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
                2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
                2.623618318292643, 1.}, {2.75014259253751, 1.}, {
                2.8682058503869685`, 1.}, {2.9341028639689943`, 1.}, {
                2.9999998775510206`, 1.}}]}, 
              "Charting`Private`Tag#2"], {}}}, {}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, "PlotRange" -> {All, All}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                Opacity[1.], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                Opacity[1.], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> Plot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, "PlotRange" -> {All, All}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               Opacity[1.], 
               RGBColor[0.880722, 0.611041, 0.142051], 
               AbsoluteThickness[2]], 
              Directive[
               Opacity[1.], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            Plot, "GroupHighlight" -> False|>|>], 
        ImageSizeCache -> {{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
       False]}, 
     Annotation[{{{{}, {}, 
         Annotation[{
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
BSCn4LGmbFBUb6kARP9/p45bJID/Aa+trTk=
            "]]}, "Charting`Private`Tag#1"], 
         Annotation[{
           Directive[
            Opacity[1.], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
            "]], 
           Line[CompressedData["
1:eJxTTMoPSmViYGAQA2IQHed38LTmj//7GcDggz3n7sDU1qcI/oI/s3NrryH4
f5iO9sXOQvDDOd+tt41D8PnEHD79ffoPzj+iNMlkXy6CzzCF48uXjL9wvjVr
/WbtlD9w/hQHc3PH2l9wfvKciKev5v+A888vl+NknPUNzpfj2WC4f9sXOJ9L
4dn5l6s+IczfZWpycuVHOD8npHXGihUf4HyRZUZFW3MQ/L3f73sfMkDw1X28
m44qIvgTF2zbcUIIwT/m9SbYixvBX7TRzuQaO4IPAHsxgac=
            "]], 
           Line[CompressedData["
1:eJxFzXlIkwEYBvBvkpnKRFwErki0g1wQhmYLk2mJFs5iM0tbxxKHWg4d2Dxa
xSfWUmvpYC5UQtMsr9KiLHSOlk1lYsaytOnSPFLmps21bB4dUO/7wMPD76/H
NzGdK3AiCIL9p3+3vSJPGTs/pyb+JfjrNbLqE7oy5FtrjQ6dOdG1taEJvSn4
4mqrCH29cDSoLRE9b4y+0BGL7pT6DXbuQQuH3ra8+2kBd0gYAhOJ5r/+rNss
N4OjQhcFIyR6V6snUSFCL9eHB3lz0Hfk1RU0T3T/uWThOtksOJyY87AWmMB+
oaucN+QMuC7l6Vjb80nw+YWWU0VlY/h/xTlh7RYDmJbz3r20XA/+mJTGeDyu
BWflMmQ9ikfg+tvMsJqAJtZ/y1LJD/y8LjDVxg5p5OjBo5naIHG+AWx5GaPJ
6h4D10qr+EkFk+Bt9gZadvkM2PjERxWSYgbHKUdvmIrnwXfv31SxS63gNTyh
2TnHBu7j1z3g5tvBz6j00z/SFsHby3ynXdgOsEOcv9IQuwx2G9CaWTw0PdDV
qE9E75u71bEkQmcnK69GF6PtJ+oppl60ldnvzIhcATspveyqGLTX92NTnDj0
7pYhbU4SOsN/XNqTh7Z4211T1WiTY6PHQ+YqeL9WyjaGoWUlC4XrD6MDduhc
yAS0OC6XcjIXTTQP2tzb0dxLEYEHOtHVkc2i7F505IjUMjGMLnLbO61aQW8Q
KAzprF/g5AAKvTYK/WIpLX74KJonjxg4xEdXqhf6fEm0tfAsNb4AffC4LlpW
gp6avdftqELvpHM1eg1aMqki3HTovmZ/Vpge7SNRXBYb0BlRlPbGcbTGS+j4
YkLTjINMbxv6zJFXOv9F9G9c41OH
            "]], 
           
           Line[{{2.0019132653061225`, 1.}, {2.009123501828184, 1.}, {
            2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
            2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
            2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
            2.623618318292643, 1.}, {2.75014259253751, 1.}, {
            2.8682058503869685`, 1.}, {2.9341028639689943`, 1.}, {
            2.9999998775510206`, 1.}}]}, 
          "Charting`Private`Tag#2"], {}}}, {}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, "PlotRange" -> {All, All}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]], 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {True, True}, AxesLabel -> {
      FormBox[
       TagBox["\"Input\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"Output\"", HoldForm], TraditionalForm]}, 
    AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> All, 
    Method -> {
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}}, PlotLabel -> 
    FormBox["\"Neural Network and Piecewise Function Output\"", 
      TraditionalForm], PlotRange -> {All, All}, PlotRangeClipping -> True, 
    PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Neural Network 1\"", "\"Piecewise Function\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.9609715200523205`*^9, 3.9609715282259064`*^9}, 
   3.9609718045881367`*^9, 3.960971937743162*^9, {3.9609720202496567`*^9, 
   3.9609720543285637`*^9}, 3.960972109680586*^9, 3.960972186165184*^9, 
   3.960972219231119*^9, 3.960972342145067*^9, 3.9609723995759068`*^9, {
   3.9609724916822643`*^9, 3.9609725593887177`*^9}, 3.9609726042709045`*^9, 
   3.9609726622215805`*^9, 3.960972833139801*^9, 3.960972950702368*^9, 
   3.961079062790539*^9, 3.9610790962975254`*^9, 3.961079137139675*^9, 
   3.9610792025214596`*^9, 3.9610808849302406`*^9, 3.961143376555277*^9, 
   3.961143674299366*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"76f95e36-8503-2a4c-b5ce-e4739ce84fa6"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[
    InterpretationBox[{
      TagBox[{{{}, {}, 
         TagBox[{
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           Opacity[1.], 
           LineBox[CompressedData["
1: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
D2TlXXeV8XF+tIwHf/7/Qv06q3jwL4hA27Y=
            "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
         TagBox[{
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[2], 
           Opacity[1.], 
           LineBox[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
            "]], 
           LineBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQHed38LTmj//7GcDggz3n7sDU1qcI/oI/s3NrryH4
f5iO9sXOQvDDOd+tt41D8PnEHD79ffoPzj+iNMlkXy6CzzCF48uXjL9wvjVr
/WbtlD9w/hQHc3PH2l9wfvKciKev5v+A888vl+NknPUNzpfj2WC4f9sXOJ9L
4dn5l6s+IczfZWpycuVHOD8npHXGihUf4HyRZUZFW3MQ/L3f73sfMkDw1X28
m44qIvgTF2zbcUIIwT/m9SbYixvBX7TRzuQaO4IPAHsxgac=
            "]], 
           LineBox[CompressedData["
1:eJxFzXlIkwEYBvBvkpnKRFwErki0g1wQhmYLk2mJFs5iM0tbxxKHWg4d2Dxa
xSfWUmvpYC5UQtMsr9KiLHSOlk1lYsaytOnSPFLmps21bB4dUO/7wMPD76/H
NzGdK3AiCIL9p3+3vSJPGTs/pyb+JfjrNbLqE7oy5FtrjQ6dOdG1taEJvSn4
4mqrCH29cDSoLRE9b4y+0BGL7pT6DXbuQQuH3ra8+2kBd0gYAhOJ5r/+rNss
N4OjQhcFIyR6V6snUSFCL9eHB3lz0Hfk1RU0T3T/uWThOtksOJyY87AWmMB+
oaucN+QMuC7l6Vjb80nw+YWWU0VlY/h/xTlh7RYDmJbz3r20XA/+mJTGeDyu
BWflMmQ9ikfg+tvMsJqAJtZ/y1LJD/y8LjDVxg5p5OjBo5naIHG+AWx5GaPJ
6h4D10qr+EkFk+Bt9gZadvkM2PjERxWSYgbHKUdvmIrnwXfv31SxS63gNTyh
2TnHBu7j1z3g5tvBz6j00z/SFsHby3ynXdgOsEOcv9IQuwx2G9CaWTw0PdDV
qE9E75u71bEkQmcnK69GF6PtJ+oppl60ldnvzIhcATspveyqGLTX92NTnDj0
7pYhbU4SOsN/XNqTh7Z4211T1WiTY6PHQ+YqeL9WyjaGoWUlC4XrD6MDduhc
yAS0OC6XcjIXTTQP2tzb0dxLEYEHOtHVkc2i7F505IjUMjGMLnLbO61aQW8Q
KAzprF/g5AAKvTYK/WIpLX74KJonjxg4xEdXqhf6fEm0tfAsNb4AffC4LlpW
gp6avdftqELvpHM1eg1aMqki3HTovmZ/Vpge7SNRXBYb0BlRlPbGcbTGS+j4
YkLTjINMbxv6zJFXOv9F9G9c41OH
            "]], 
           
           LineBox[{{2.0019132653061225`, 1.}, {2.009123501828184, 1.}, {
            2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
            2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
            2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
            2.623618318292643, 1.}, {2.75014259253751, 1.}, {
            2.8682058503869685`, 1.}, {2.9341028639689943`, 1.}, {
            2.9999998775510206`, 1.}}]}, 
          Annotation[#, "Charting`Private`Tag#2"]& ], {}}, {}}, {
       "WolframDynamicHighlight", <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
      StyleBox[
       DynamicBox[
        (Charting`HighlightActionBox["DynamicHighlight", {}, 
         Slot["HighlightElements"], 
         Slot["LayoutOptions"], 
         Slot["Meta"], 
         Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
             Annotation[{
               Directive[
                Opacity[1.], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1: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
D2TlXXeV8XF+tIwHf/7/Qv06q3jwL4hA27Y=
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Directive[
                Opacity[1.], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
                "]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGAQA2IQHed38LTmj//7GcDggz3n7sDU1qcI/oI/s3NrryH4
f5iO9sXOQvDDOd+tt41D8PnEHD79ffoPzj+iNMlkXy6CzzCF48uXjL9wvjVr
/WbtlD9w/hQHc3PH2l9wfvKciKev5v+A888vl+NknPUNzpfj2WC4f9sXOJ9L
4dn5l6s+IczfZWpycuVHOD8npHXGihUf4HyRZUZFW3MQ/L3f73sfMkDw1X28
m44qIvgTF2zbcUIIwT/m9SbYixvBX7TRzuQaO4IPAHsxgac=
                "]], 
               Line[CompressedData["
1:eJxFzXlIkwEYBvBvkpnKRFwErki0g1wQhmYLk2mJFs5iM0tbxxKHWg4d2Dxa
xSfWUmvpYC5UQtMsr9KiLHSOlk1lYsaytOnSPFLmps21bB4dUO/7wMPD76/H
NzGdK3AiCIL9p3+3vSJPGTs/pyb+JfjrNbLqE7oy5FtrjQ6dOdG1taEJvSn4
4mqrCH29cDSoLRE9b4y+0BGL7pT6DXbuQQuH3ra8+2kBd0gYAhOJ5r/+rNss
N4OjQhcFIyR6V6snUSFCL9eHB3lz0Hfk1RU0T3T/uWThOtksOJyY87AWmMB+
oaucN+QMuC7l6Vjb80nw+YWWU0VlY/h/xTlh7RYDmJbz3r20XA/+mJTGeDyu
BWflMmQ9ikfg+tvMsJqAJtZ/y1LJD/y8LjDVxg5p5OjBo5naIHG+AWx5GaPJ
6h4D10qr+EkFk+Bt9gZadvkM2PjERxWSYgbHKUdvmIrnwXfv31SxS63gNTyh
2TnHBu7j1z3g5tvBz6j00z/SFsHby3ynXdgOsEOcv9IQuwx2G9CaWTw0PdDV
qE9E75u71bEkQmcnK69GF6PtJ+oppl60ldnvzIhcATspveyqGLTX92NTnDj0
7pYhbU4SOsN/XNqTh7Z4211T1WiTY6PHQ+YqeL9WyjaGoWUlC4XrD6MDduhc
yAS0OC6XcjIXTTQP2tzb0dxLEYEHOtHVkc2i7F505IjUMjGMLnLbO61aQW8Q
KAzprF/g5AAKvTYK/WIpLX74KJonjxg4xEdXqhf6fEm0tfAsNb4AffC4LlpW
gp6avdftqELvpHM1eg1aMqki3HTovmZ/Vpge7SNRXBYb0BlRlPbGcbTGS+j4
YkLTjINMbxv6zJFXOv9F9G9c41OH
                "]], 
               
               Line[{{2.0019132653061225`, 1.}, {2.009123501828184, 1.}, {
                2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
                2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
                2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
                2.623618318292643, 1.}, {2.75014259253751, 1.}, {
                2.8682058503869685`, 1.}, {2.9341028639689943`, 1.}, {
                2.9999998775510206`, 1.}}]}, 
              "Charting`Private`Tag#2"], {}}}, {}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, "PlotRange" -> {All, All}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                Opacity[1.], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                Opacity[1.], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> Plot, "GroupHighlight" -> False|>|>]]& )[<|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, "PlotRange" -> {All, All}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
            "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
            GoldenRatio^(-1), "DefaultStyle" -> {
              Directive[
               Opacity[1.], 
               RGBColor[0.880722, 0.611041, 0.142051], 
               AbsoluteThickness[2]], 
              Directive[
               Opacity[1.], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            Plot, "GroupHighlight" -> False|>|>], 
        ImageSizeCache -> {{4.503599627370496*^15, -4.503599627370496*^15}, {
         4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
       False]}, 
     Annotation[{{{{}, {}, 
         Annotation[{
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1: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
D2TlXXeV8XF+tIwHf/7/Qv06q3jwL4hA27Y=
            "]]}, "Charting`Private`Tag#1"], 
         Annotation[{
           Directive[
            Opacity[1.], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Line[CompressedData["
1:eJxTTMoPSmViYGBQA2IQnbx+wvv//9kPMECByG8pNes/CP4Rt6UxZT8QfLV7
O0+++YDgv+J5vPjmQwS/IMs0YvNhBL9O9daBtHYEf9Zs5Uln+RD8+fc78gM5
2eB8sQvB/pqirHD+iYBgl9OqLHC+h6ZqibISM5xvtS5m2Xl9Jjj/V1easJEm
I5y/riX/qJYqgp9UV1GurIjgnyrsui0iieDPili3+DsHgm+p9s147wsGOL/i
YGuIxwoEX2d3H5vjEgT/wZbpOywXIPgeK1bKaM9A8MX7zz7h7UDwt8WIll5O
R/CzwuTUzyQj+HIB6jePxCP4bc6WttvCEfwwrVjWme4I/tfvS6bGqSP4UR3b
p89RRvAPSJyaeUsewe+xfD83TALB/3SSccEUEQQ/PEpk0SUBBF+p2nKZHyeC
38Hts6KHFcG/GCEv9ZoZwQcA/sSInQ==
            "]], 
           Line[CompressedData["
1:eJxTTMoPSmViYGAQA2IQHed38LTmj//7GcDggz3n7sDU1qcI/oI/s3NrryH4
f5iO9sXOQvDDOd+tt41D8PnEHD79ffoPzj+iNMlkXy6CzzCF48uXjL9wvjVr
/WbtlD9w/hQHc3PH2l9wfvKciKev5v+A888vl+NknPUNzpfj2WC4f9sXOJ9L
4dn5l6s+IczfZWpycuVHOD8npHXGihUf4HyRZUZFW3MQ/L3f73sfMkDw1X28
m44qIvgTF2zbcUIIwT/m9SbYixvBX7TRzuQaO4IPAHsxgac=
            "]], 
           Line[CompressedData["
1:eJxFzXlIkwEYBvBvkpnKRFwErki0g1wQhmYLk2mJFs5iM0tbxxKHWg4d2Dxa
xSfWUmvpYC5UQtMsr9KiLHSOlk1lYsaytOnSPFLmps21bB4dUO/7wMPD76/H
NzGdK3AiCIL9p3+3vSJPGTs/pyb+JfjrNbLqE7oy5FtrjQ6dOdG1taEJvSn4
4mqrCH29cDSoLRE9b4y+0BGL7pT6DXbuQQuH3ra8+2kBd0gYAhOJ5r/+rNss
N4OjQhcFIyR6V6snUSFCL9eHB3lz0Hfk1RU0T3T/uWThOtksOJyY87AWmMB+
oaucN+QMuC7l6Vjb80nw+YWWU0VlY/h/xTlh7RYDmJbz3r20XA/+mJTGeDyu
BWflMmQ9ikfg+tvMsJqAJtZ/y1LJD/y8LjDVxg5p5OjBo5naIHG+AWx5GaPJ
6h4D10qr+EkFk+Bt9gZadvkM2PjERxWSYgbHKUdvmIrnwXfv31SxS63gNTyh
2TnHBu7j1z3g5tvBz6j00z/SFsHby3ynXdgOsEOcv9IQuwx2G9CaWTw0PdDV
qE9E75u71bEkQmcnK69GF6PtJ+oppl60ldnvzIhcATspveyqGLTX92NTnDj0
7pYhbU4SOsN/XNqTh7Z4211T1WiTY6PHQ+YqeL9WyjaGoWUlC4XrD6MDduhc
yAS0OC6XcjIXTTQP2tzb0dxLEYEHOtHVkc2i7F505IjUMjGMLnLbO61aQW8Q
KAzprF/g5AAKvTYK/WIpLX74KJonjxg4xEdXqhf6fEm0tfAsNb4AffC4LlpW
gp6avdftqELvpHM1eg1aMqki3HTovmZ/Vpge7SNRXBYb0BlRlPbGcbTGS+j4
YkLTjINMbxv6zJFXOv9F9G9c41OH
            "]], 
           
           Line[{{2.0019132653061225`, 1.}, {2.009123501828184, 1.}, {
            2.0171429256269704`, 1.}, {2.0801290323093546`, 1.}, {
            2.143115138991739, 1.}, {2.2606263359610983`, 1.}, {
            2.3880438634738246`, 1.}, {2.5070003745911422`, 1.}, {
            2.623618318292643, 1.}, {2.75014259253751, 1.}, {
            2.8682058503869685`, 1.}, {2.9341028639689943`, 1.}, {
            2.9999998775510206`, 1.}}]}, 
          "Charting`Private`Tag#2"], {}}}, {}}, <|
      "HighlightElements" -> <|
        "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
       "LayoutOptions" -> <|
        "PanelPlotLayout" -> <||>, "PlotRange" -> {All, All}, 
         "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
         "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
         "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
         "DefaultStyle" -> {
           Directive[
            Opacity[1.], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Directive[
            Opacity[1.], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]]}, 
         "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), 
           "ScalingFunctions" -> {{Identity, Identity}, {
             Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
       "Meta" -> <|
        "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
         Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]], 
    AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
    Axes -> {True, True}, AxesLabel -> {
      FormBox[
       TagBox["\"Input\"", HoldForm], TraditionalForm], 
      FormBox[
       TagBox["\"Output\"", HoldForm], TraditionalForm]}, 
    AxesOrigin -> {0, 0}, DisplayFunction -> Identity, 
    Frame -> {{False, False}, {False, False}}, 
    FrameLabel -> {{None, None}, {None, None}}, 
    FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
    GridLines -> {None, None}, GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], ImagePadding -> All, 
    Method -> {
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}}, PlotLabel -> 
    FormBox["\"Neural Network and Piecewise Function Output\"", 
      TraditionalForm], PlotRange -> {All, All}, PlotRangeClipping -> True, 
    PlotRangePadding -> {{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Neural Network 1\"", "\"Piecewise Function\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.9609715200523205`*^9, 3.9609715282259064`*^9}, 
   3.9609718045881367`*^9, 3.960971937743162*^9, {3.9609720202496567`*^9, 
   3.9609720543285637`*^9}, 3.960972109680586*^9, 3.960972186165184*^9, 
   3.960972219231119*^9, 3.960972342145067*^9, 3.9609723995759068`*^9, {
   3.9609724916822643`*^9, 3.9609725593887177`*^9}, 3.9609726042709045`*^9, 
   3.9609726622215805`*^9, 3.960972833139801*^9, 3.960972950702368*^9, 
   3.961079062790539*^9, 3.9610790962975254`*^9, 3.961079137139675*^9, 
   3.9610792025214596`*^9, 3.9610808849302406`*^9, 3.961143376555277*^9, 
   3.9611436764843197`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"60ea9f02-f89e-294c-bfbd-1728fcba4c5a"]
}, Open  ]],

Cell[BoxData[""], "Input",ExpressionUUID->"e9b516d9-fbd9-c446-99b7-a4d7454b93f6"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9609759875524883`*^9, 3.960975987866087*^9}, {
   3.9610634616346684`*^9, 3.961063463895817*^9}, 
   3.961065296262417*^9},ExpressionUUID->"2f906260-c3d4-464d-9ae1-\
0fded9d56430"],

Cell["\<\
We now want to repeat the training procedure but want to train each neural \
network for only 10,20,30,40,50,60,70,80,90% of the total number of rounds \
required to reach convergence. This would tell us how the weights grow closer \
or further apart as we train the model and if the neural networks converge or \
diverge at certain points of the training process.\
\>", "CodeText",
 CellChangeTimes->{{3.9611450987131844`*^9, 3.961145103201769*^9}, {
  3.961145142047014*^9, 3.961145188506666*^9}, {3.9611515930104504`*^9, 
  3.9611516196324863`*^9}, {3.9611522579505157`*^9, 
  3.96115227400193*^9}},ExpressionUUID->"029b21a4-5425-7043-8f24-\
258cba1dbbf5"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9611432197124443`*^9, 
  3.9611432197201443`*^9}},ExpressionUUID->"96094b3c-e04b-f840-867c-\
bed9e87eada9"],

Cell[BoxData[""], "Input",ExpressionUUID->"6e18b8d0-17d2-2040-b87f-b736b6c20966"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"array1", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Floor", "[", 
       RowBox[{"convergencetime1", "*", "0.1", "*", "i"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"array2", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Floor", "[", 
       RowBox[{"convergencetime2", "*", "0.1", "*", "i"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.960990784884346*^9, 3.9609910207618904`*^9}, {
  3.96099127287327*^9, 3.9609912820290947`*^9}, {3.9610663427578297`*^9, 
  3.9610664587316456`*^9}, {3.961143414159727*^9, 3.961143443046238*^9}, {
  3.961143511438179*^9, 3.961143514266762*^9}, {3.9611435837183266`*^9, 
  3.9611436292455597`*^9}, {3.961143733808058*^9, 3.9611437432603455`*^9}, {
  3.9611437916094856`*^9, 3.961143859020397*^9}, {3.9611460395821743`*^9, 
  3.9611460630809345`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"5f107dc2-6adb-e943-a509-3bffdaee59e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "21", ",", "31", ",", "42", ",", "52", ",", "63", ",", "73", ",",
    "84", ",", "94", ",", "105"}], "}"}]], "Output",
 CellChangeTimes->{{3.961146053120329*^9, 3.961146063944666*^9}},
 CellLabel->"Out[55]=",ExpressionUUID->"267a57b4-b7da-3d47-8553-eb5db48ffefc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "5", ",", "11", ",", "17", ",", "23", ",", "29", ",", "34", ",", "40", ",", 
   "46", ",", "52", ",", "58"}], "}"}]], "Output",
 CellChangeTimes->{{3.961146053120329*^9, 3.9611460640251694`*^9}},
 CellLabel->"Out[56]=",ExpressionUUID->"c5307361-07e1-c244-ac9a-76c8bd9e4d88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"listofSums", "=", 
     RowBox[{"{", "}"}]}], ";"}], "  ", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", "    ", 
    RowBox[{
     RowBox[{
      RowBox[{"trainedNetPiece150", "=", 
       RowBox[{"NetTrain", "[", "\[IndentingNewLine]", "        ", 
        RowBox[{
         RowBox[{"netxInitialized", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
         "        ", "trainingDataFormatted", ",", "\[IndentingNewLine]", 
         "        ", 
         RowBox[{"MaxTrainingRounds", "->", 
          RowBox[{"(", 
           RowBox[{"array1", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ",", 
         "\[IndentingNewLine]", "        ", 
         RowBox[{"TrainingProgressCheckpointing", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<Directory\>\"", ",", "checkpointDir", ",", 
            RowBox[{"\"\<Interval\>\"", "->", 
             RowBox[{"Quantity", "[", 
              RowBox[{"1", ",", "\"\<Rounds\>\""}], "]"}]}]}], "}"}]}]}], 
        "\[IndentingNewLine]", "    ", "]"}]}], ";", "\[IndentingNewLine]", 
      "    ", 
      RowBox[{"trainedNetPiece250", "=", 
       RowBox[{"NetTrain", "[", "\[IndentingNewLine]", "        ", 
        RowBox[{
         RowBox[{"netxInitialized", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", "\[IndentingNewLine]", 
         "        ", "trainingDataFormatted", ",", "\[IndentingNewLine]", 
         "        ", 
         RowBox[{"MaxTrainingRounds", "->", 
          RowBox[{"(", 
           RowBox[{"array2", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ",", 
         "\[IndentingNewLine]", "        ", 
         RowBox[{"TrainingProgressCheckpointing", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<Directory\>\"", ",", "checkpointDir", ",", 
            RowBox[{"\"\<Interval\>\"", "->", 
             RowBox[{"Quantity", "[", 
              RowBox[{"1", ",", "\"\<Rounds\>\""}], "]"}]}]}], "}"}]}]}], 
        "\[IndentingNewLine]", "    ", "]"}]}], ";", "\[IndentingNewLine]", 
      "    ", 
      RowBox[{"weights1", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Normal", "[", 
          RowBox[{"NetExtract", "[", 
           RowBox[{"trainedNetPiece150", ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "\"\<Weights\>\""}], "}"}]}], "]"}], "]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"netxInitialized", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "2"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "    ", 
      RowBox[{"weights2", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Normal", "[", 
          RowBox[{"NetExtract", "[", 
           RowBox[{"trainedNetPiece250", ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "\"\<Weights\>\""}], "}"}]}], "]"}], "]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "[", 
            RowBox[{"netxInitialized", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", "2"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "    ", 
      RowBox[{"orderedWeights1", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"weights1", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "[", "weights1", "]"}], ",", "1"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "    ", 
      RowBox[{"orderedWeights2", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"weights2", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "[", "weights2", "]"}], ",", "1"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "    ", 
      RowBox[{"euclideanDistances", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"EuclideanDistance", ",", 
         RowBox[{"{", 
          RowBox[{"orderedWeights1", ",", "orderedWeights2"}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", "    ", 
      RowBox[{"totalDistance", "=", 
       RowBox[{"Total", "[", "euclideanDistances", "]"}]}], ";", 
      "\[IndentingNewLine]", "  ", "\[IndentingNewLine]", "    ", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"listofSums", ",", "totalDistance"}], "]"}]}], " ", 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "9", ",", "1"}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.960990784884346*^9, 3.9609910207618904`*^9}, {
  3.96099127287327*^9, 3.9609912820290947`*^9}, {3.9610663427578297`*^9, 
  3.9610664587316456`*^9}, {3.961143414159727*^9, 3.961143443046238*^9}, {
  3.961143511438179*^9, 3.961143514266762*^9}, {3.9611435837183266`*^9, 
  3.9611436292455597`*^9}, {3.961143733808058*^9, 3.9611437432603455`*^9}, {
  3.9611437916094856`*^9, 3.961143859020397*^9}, {3.9611460395821743`*^9, 
  3.9611460441695232`*^9}, {3.96114679908251*^9, 3.961146827413206*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"5983214e-91bd-a84e-8516-aef370a48315"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "9.62668819872802`", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9.62668819872802`", ",", "9.951845365343143`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`", ",", "9.97826811441378`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`", ",", "9.97826811441378`", ",", 
     "10.145680229744816`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`", ",", "9.97826811441378`", ",", 
     "10.145680229744816`", ",", "10.711304067705434`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`", ",", "9.97826811441378`", ",", 
     "10.145680229744816`", ",", "10.711304067705434`", ",", 
     "11.061148152473653`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`", ",", "9.97826811441378`", ",", 
     "10.145680229744816`", ",", "10.711304067705434`", ",", 
     "11.061148152473653`", ",", "11.300698128995508`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "9.62668819872802`", ",", "9.951845365343143`", ",", 
     "10.022419616023472`", ",", "9.97826811441378`", ",", 
     "10.145680229744816`", ",", "10.711304067705434`", ",", 
     "11.061148152473653`", ",", "11.300698128995508`", ",", 
     "11.463471899380728`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.9609906801653004`*^9, 3.9609908165217247`*^9, {3.9609910053146286`*^9, 
   3.9609910227704697`*^9}, 3.9609913516770153`*^9, 3.961018924248554*^9, 
   3.961143385456621*^9, 3.9611434440236073`*^9, 3.9611436364566193`*^9, 
   3.9611437449354286`*^9, 3.9611438202999573`*^9, 3.9611438600190735`*^9, 
   3.9611446822491302`*^9, 3.9611469283404713`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"d3b6563d-c8af-1249-b58c-4ffa3d666e9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"10", ",", "90", ",", "10"}], "]"}], ",", "listofSums"}], 
     "}"}], "]"}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"PointSize", "[", "Medium", "]"}]}], ",", 
   RowBox[{"PlotRange", "->", "All"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Training Rounds\>\"", ",", "\"\<Total Distance\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9609968431637*^9, 3.9609968685235977`*^9}, {
   3.960996908600172*^9, 3.9609969390772057`*^9}, {3.960997094775961*^9, 
   3.9609971929150085`*^9}, 3.960997309569975*^9, {3.9610631927075024`*^9, 
   3.9610631951746883`*^9}, {3.961076563607973*^9, 3.9610765660133705`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"f0afa46e-12d1-174b-b870-9313dbf962c6"],

Cell[BoxData[
 GraphicsBox[{{}, 
   InterpretationBox[{
     TagBox[
      TagBox[
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[Medium], 
        AbsoluteThickness[2], 
        PointBox[{{10., 9.62668819872802}, {20., 9.951845365343143}, {30., 
         10.022419616023472`}, {40., 9.97826811441378}, {50., 
         10.145680229744816`}, {60., 10.711304067705434`}, {70., 
         11.061148152473653`}, {80., 11.300698128995508`}, {90., 
         11.463471899380728`}}]},
       Annotation[#, "Charting`Private`Tag#1"]& ],
      {"WolframDynamicHighlight", <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>}], 
     StyleBox[
      DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
        Slot["HighlightElements"], 
        Slot["LayoutOptions"], 
        Slot["Meta"], 
        Charting`HighlightActionFunction["DynamicHighlight", {{
           Annotation[{
             Directive[
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2], 
              PointSize[Medium]], 
             
             Point[{{10., 9.62668819872802}, {20., 9.951845365343143}, {30., 
              10.022419616023472`}, {40., 9.97826811441378}, {50., 
              10.145680229744816`}, {60., 10.711304067705434`}, {70., 
              11.061148152473653`}, {80., 11.300698128995508`}, {90., 
              11.463471899380728`}}]}, "Charting`Private`Tag#1"]}}, <|
         "HighlightElements" -> <|
           "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
          "LayoutOptions" -> <|
           "PanelPlotLayout" -> <||>, 
            "PlotRange" -> {{8.33333333333335, 90.}, {9.524644659802892, 
             11.463471899380728`}}, 
            "Frame" -> {{False, False}, {False, False}}, 
            "AxesOrigin" -> {8.33333333333335, 9.524644659802892}, 
            "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
            "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
            "DefaultStyle" -> {
              Directive[
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2], 
               PointSize[Medium]]}, 
            "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                Identity[
                 Part[#, 1]], 
                Identity[
                 Part[#, 2]]}& ), 
              "ScalingFunctions" -> {{Identity, Identity}, {
                Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
            False|>, 
          "Meta" -> <|
           "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
            ListPlot, "GroupHighlight" -> False|>|>]]& )[<|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{8.33333333333335, 90.}, {9.524644659802892, 
            11.463471899380728`}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {8.33333333333335, 9.524644659802892}, 
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
           "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
           "DefaultStyle" -> {
             Directive[
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2], 
              PointSize[Medium]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           ListPlot, "GroupHighlight" -> False|>|>],
       ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
        4.503599627370496*^15, -4.503599627370496*^15}}],
      Selectable->False]},
    Annotation[{{
       Annotation[{
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2], 
          PointSize[Medium]], 
         Point[{{10., 9.62668819872802}, {20., 9.951845365343143}, {30., 
          10.022419616023472`}, {40., 9.97826811441378}, {50., 
          10.145680229744816`}, {60., 10.711304067705434`}, {70., 
          11.061148152473653`}, {80., 11.300698128995508`}, {90., 
          11.463471899380728`}}]}, "Charting`Private`Tag#1"]}}, <|
     "HighlightElements" -> <|
       "Label" -> {"XYLabel"}, "Ball" -> {"IndicatedBall"}|>, 
      "LayoutOptions" -> <|
       "PanelPlotLayout" -> <||>, 
        "PlotRange" -> {{8.33333333333335, 90.}, {9.524644659802892, 
         11.463471899380728`}}, "Frame" -> {{False, False}, {False, False}}, 
        "AxesOrigin" -> {8.33333333333335, 9.524644659802892}, 
        "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
        "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
          Directive[
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[2], 
           PointSize[Medium]]}, 
        "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
            Identity[
             Part[#, 1]], 
            Identity[
             Part[#, 2]]}& ), 
          "ScalingFunctions" -> {{Identity, Identity}, {
            Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>, 
      "Meta" -> <|
       "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
        ListPlot, "GroupHighlight" -> False|>|>, 
     "DynamicHighlight"]], {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Training Rounds\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Total Distance\"", HoldForm], TraditionalForm]},
  AxesOrigin->{8.33333333333335, 9.524644659802892},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentPoint", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{8.33333333333335, 90.}, {9.524644659802892, 
   11.463471899380728`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.9609968693218403`*^9, {3.9609969271520653`*^9, 3.960996940256716*^9}, 
   3.960997100397337*^9, 3.960997194504484*^9, 3.960997311395668*^9, 
   3.9610632043356934`*^9, 3.9611442695120335`*^9, 3.9611467711670628`*^9, 
   3.9611469355816917`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"a55e3fa7-541a-bf49-b538-560867048d1e"]
}, Open  ]],

Cell["\<\
The line graph above shows that the weights of the neural networks do not \
converge but instead diverge as the euclidean distance between them increases \
as we train the 2 neural networks for more rounds.\
\>", "Text",
 CellChangeTimes->{{3.961144245852644*^9, 3.9611443162608356`*^9}, {
  3.9611505082835865`*^9, 
  3.961150546499441*^9}},ExpressionUUID->"9994572d-8bcd-0549-a71e-\
fb1334f1a332"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Section",
 CellChangeTimes->{{3.96106698051758*^9, 3.9610669976087513`*^9}, {
   3.9611438739309616`*^9, 3.9611438750398808`*^9}, {3.961144130454708*^9, 
   3.9611441471635666`*^9}, {3.9611441788069763`*^9, 3.9611442364143925`*^9}, 
   3.9611447495674534`*^9},ExpressionUUID->"d5177a46-3e61-de40-9496-\
fb7316acf2fb"],

Cell["\<\
This project set out to evaluate whether weights of neural networks are \
computationally irreducible or not as computational irreducibility is \
characteristic of agents who are able to exercise free will. We were able to \
reasonably ascertain that neural networks trained to model the same function \
can take various paths to do so since both of our neural networks ended up \
with different weights. This leads us to the conclusion that neural networks \
do have limited forms of free will and agency in the form of their weight \
trajectories,  even if they are being trained to model a predefined function.\
\>", "Text",
 CellChangeTimes->{{3.96106698051758*^9, 3.9610669976087513`*^9}, {
   3.9611438739309616`*^9, 3.9611438750398808`*^9}, {3.961144130454708*^9, 
   3.9611441471635666`*^9}, {3.9611441788069763`*^9, 
   3.9611442364143925`*^9}, {3.961144764990135*^9, 3.9611447659729767`*^9}, {
   3.961146228653286*^9, 3.961146233120386*^9}, {3.961152971963478*^9, 
   3.961152990489664*^9}, {3.9611531820801067`*^9, 3.961153187037609*^9}, {
   3.9611533040032654`*^9, 3.961153350786236*^9}, {3.9611535813610153`*^9, 
   3.961153636889803*^9}, {3.961157313212143*^9, 3.961157318343172*^9}, {
   3.9611577611767178`*^9, 3.9611577613351555`*^9}, {3.9611580808200665`*^9, 
   3.9611581559970474`*^9}, 
   3.9611582080527554`*^9},ExpressionUUID->"d42908a2-5ff7-f442-9991-\
dcbfde4da695"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Limitations and future work
\
\>", "Section",
 CellChangeTimes->{{3.9610567534743443`*^9, 3.961056754619278*^9}, {
  3.9610669566654415`*^9, 3.961066974022274*^9}, {3.961132763085495*^9, 
  3.9611327818118687`*^9}, {3.9611449784775505`*^9, 3.9611449828801193`*^9}, {
  3.961146115972719*^9, 
  3.9611461162838135`*^9}},ExpressionUUID->"8aa4b553-25a4-0e4a-8c8a-\
25c132fe59cf"],

Cell["\<\
Limitations-

There are various limitations to the experiment we carried out above .
    1) We intentionally chose a simple mathematical function to model. \
Choosing a simple function inadvertently simplified the loss landscape of the \
2 neural networks
    2)We have only compared 2 seeds. Using more seeds would have helped us \
get a better idea of the variance in the weights.
    3)Comparing weights using the hungarian algorithm only allows us to know \
whether the weights of the neural networks with random seeds converge or not. \
Comparing weights does not allow us to verify whether the weights have \
further diverged independently or are just reflecting the noise from the \
random initialisation.
    
    
Future work-
-Repeat the experiment for 30 Seeds
-Choose a more complex function to model or more chaotic/irreducible datasets \
(Rule 110 cellular automata etc)
-Use dropout layers to introduce stochasticity
-Try Monte Carlo Dropout and generate multiple predictions from the same \
network with different dropout masks

\
\>", "Text",
 CellChangeTimes->{{3.9611510756839924`*^9, 3.9611511572964573`*^9}, {
  3.96115124206122*^9, 3.9611512895633945`*^9}, {3.9611513339594574`*^9, 
  3.961151349167261*^9}, {3.961151796340088*^9, 3.961151894186001*^9}, {
  3.961151931278841*^9, 3.9611520117298183`*^9}, {3.961152304881464*^9, 
  3.9611523366930466`*^9}, {3.9611574356071606`*^9, 
  3.96115743852606*^9}},ExpressionUUID->"713d6893-b300-b54a-9618-\
1c7ff02ccdab"],

Cell["", "Text",
 CellChangeTimes->{{3.9610567534743443`*^9, 3.961056754619278*^9}, {
  3.9610669566654415`*^9, 3.961066974022274*^9}, {3.961132763085495*^9, 
  3.9611327818118687`*^9}, {3.9611449784775505`*^9, 
  3.9611449786171207`*^9}},ExpressionUUID->"802e2086-d044-eb4e-9f60-\
fcb29712f521"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Acknowledgements", "Section",
 CellChangeTimes->{{3.9610667965968437`*^9, 3.961066805089775*^9}, {
   3.961078799163807*^9, 3.9610788043238792`*^9}, {3.9611446255421734`*^9, 
   3.961144647529375*^9}, {3.961144826080879*^9, 3.961144853861662*^9}, 
   3.961144971429245*^9},ExpressionUUID->"01b4263d-0587-424b-8a55-\
62920fd6393e"],

Cell["\<\
I would like to sincerely thank my mentor, Dr.Lyman Hurd, for his consistent \
guidance throughout this project. I\[CloseCurlyQuote]m also grateful to the \
WSRP directors(Rory Foulger, Program Director,Eryn Gillam, Academic \
Director,Megan Davis, Academic Director) for organizing this opportunity, and \
to Stephen Wolfram for helping brainstorm and shape the initial idea that \
inspired this work.I would also like to thank the Notebook assistant for \
helping me debug my code.
\
\>", "Text",
 CellChangeTimes->{{3.9610667965968437`*^9, 3.961066805089775*^9}, {
  3.961078799163807*^9, 3.9610788043238792`*^9}, {3.9611446255421734`*^9, 
  3.961144647529375*^9}, {3.961144826080879*^9, 3.961144853861662*^9}, {
  3.9611459912529583`*^9, 3.961146001146784*^9}, {3.961158046508028*^9, 
  3.9611580689220448`*^9}},ExpressionUUID->"f041ce10-7ed8-db48-a2cb-\
f9646c4664f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellChangeTimes->{{3.9610667965968437`*^9, 3.9610668078876057`*^9}, {
  3.961067067511112*^9, 3.9610670939895725`*^9}, {3.9611453327805176`*^9, 
  3.9611453367412434`*^9}, {3.961145413971449*^9, 
  3.961145423622938*^9}},ExpressionUUID->"fcfa1712-3d27-1544-9098-\
3a5f68b26c99"],

Cell["\<\
1)Wolfram, S. (2024, August 22). What\[CloseCurlyQuote]s really going on in \
machine learning? Some minimal models. Stephen\:202fWolfram Writings. \
https://writings.stephenwolfram.com/2024/08/whats-really-going-on-in-machine-\
learning-some-minimal-models/ 

2)Kuhn, H. W. (n.d.). Hungarian algorithm. Retrieved July 10, 2025, from \
https://www.hungarianalgorithm.com/hungarianalgorithm.php
3)Rowland, T. (2025, June 27). Computational irreducibility. In MathWorld\
\[Dash]A Wolfram Web Resource. Retrieved July 10, 2025, from \
https://mathworld.wolfram.com/ComputationalIrreducibility.html
\
\>", "Text",
 CellChangeTimes->{{3.9610667965968437`*^9, 3.9610668078876057`*^9}, {
   3.961067067511112*^9, 3.9610670939895725`*^9}, {3.9611453327805176`*^9, 
   3.9611453367412434`*^9}, {3.961145413971449*^9, 3.9611454197723274`*^9}, {
   3.9611454730285015`*^9, 3.9611454756759243`*^9}, 3.9611509905320797`*^9, {
   3.96115245711298*^9, 
   3.9611524574849606`*^9}},ExpressionUUID->"f9d3a7fe-6050-0244-ab6e-\
25bf03b79ed0"]
}, Open  ]],

Cell["", "Section",
 CellChangeTimes->{{3.9610667965968437`*^9, 3.9610668078876057`*^9}, {
  3.961067067511112*^9, 
  3.9610670676881237`*^9}},ExpressionUUID->"d5713f6a-71b4-ea4c-ad23-\
e628776859ba"]
}, Open  ]]
},
WindowSize->{1080, 625.5},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>0.5 Inherited,
FrontEndVersion->"14.2 for Linux x86 (64-bit) (March 16, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"5c7d2c1f-07d3-f14e-877d-278948eb2b4d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 198600, 3262, 305, "Title",ExpressionUUID->"73436020-c31b-6d43-a5d8-258d56151c3d"],
Cell[199179, 3286, 5902, 99, 210, "Text",ExpressionUUID->"edec75ca-a45a-f544-9707-ef405a57030f"],
Cell[205084, 3387, 323, 5, 19, "Text",ExpressionUUID->"fafc8c76-42bc-3445-a4ff-a063d561a6dd"],
Cell[CellGroupData[{
Cell[205432, 3396, 561, 8, 33, "Section",ExpressionUUID->"6ceca294-3648-da49-bf63-4b7584a1001b"],
Cell[205996, 3406, 656, 11, 21, "CodeText",ExpressionUUID->"1a15f1a1-7a68-7a45-8deb-3d0e18519760"],
Cell[CellGroupData[{
Cell[206677, 3421, 1634, 34, 124, "Input",ExpressionUUID->"48822193-caa5-7b46-a7be-8a359909f4d6"],
Cell[208314, 3457, 11106, 226, 130, "Output",ExpressionUUID->"7d3e48f4-6200-2e44-9dc5-09ca2bd34cf2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[219469, 3689, 1358, 18, 112, "Section",ExpressionUUID->"5a53c9d9-0461-4a4b-972c-344367689301"],
Cell[220830, 3709, 372, 7, 21, "CodeText",ExpressionUUID->"197c5c42-6e0a-bb4e-be65-af97e9044de6"],
Cell[221205, 3718, 1332, 26, 18, "Input",ExpressionUUID->"a2249e0b-ab34-f640-9e10-b125c60d64d4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222574, 3749, 367, 8, 52, "Section",ExpressionUUID->"953060bf-b991-ef4a-a648-c4363279db71"],
Cell[222944, 3759, 28785, 478, 158, "CodeText",ExpressionUUID->"b9cce6ed-c375-984b-b708-0f8953bd1df0"],
Cell[CellGroupData[{
Cell[251754, 4241, 2344, 45, 125, "Input",ExpressionUUID->"cbf99f82-4c5d-144c-8c37-2da53395989d"],
Cell[254101, 4288, 62316, 1213, 33, "Output",ExpressionUUID->"ac701ae6-4311-9e4d-83d6-a6b9742b3271"]
}, Open  ]],
Cell[316432, 5504, 311, 8, 28, "CodeText",ExpressionUUID->"e9bbaf78-1f05-4447-b654-1c713be7a20e"],
Cell[CellGroupData[{
Cell[316768, 5516, 2300, 42, 80, "Input",ExpressionUUID->"d161b084-f366-e843-b1d3-a177f384eba0"],
Cell[319071, 5560, 59594, 1177, 33, "Output",ExpressionUUID->"2f09533e-b47e-9145-8c55-a081b3533753"]
}, Open  ]],
Cell[378680, 6740, 617, 10, 28, "CodeText",ExpressionUUID->"6fd673e9-8bc7-b640-aa65-cfd7df4fcb01"],
Cell[CellGroupData[{
Cell[379322, 6754, 3714, 65, 147, "Input",ExpressionUUID->"392d3c1b-778a-bf44-b324-3c8d90b77d0b"],
Cell[383039, 6821, 349, 4, 20, "Output",ExpressionUUID->"78b32294-5b7b-c14c-add7-0485051cc995"],
Cell[383391, 6827, 586, 12, 16, "Message",ExpressionUUID->"9fc74690-c48e-da47-be7e-5a867a7c7dbf"],
Cell[383980, 6841, 584, 12, 16, "Message",ExpressionUUID->"19e4cb3e-52a4-bb44-b504-c7500fc52231"],
Cell[384567, 6855, 35260, 762, 209, "Output",ExpressionUUID->"a77bded9-fa11-754b-ab64-1dff1292c03f"]
}, Open  ]],
Cell[419842, 7620, 1798, 26, 21, "CodeText",ExpressionUUID->"1b3d5913-f10c-ad44-aa23-8a6754486109"],
Cell[CellGroupData[{
Cell[421665, 7650, 599, 15, 36, "Input",ExpressionUUID->"a44d491b-dffc-9847-930c-85d041d3fcb1"],
Cell[422267, 7667, 248, 3, 20, "Output",ExpressionUUID->"78fb7c42-ea7b-384f-935c-a9cd8aae9f29"]
}, Open  ]],
Cell[422530, 7673, 1735, 24, 21, "CodeText",ExpressionUUID->"35d16ba2-a5a0-d546-b041-ea5c83965f3e"],
Cell[424268, 7699, 274, 3, 20, "Output",ExpressionUUID->"b07f2c68-df20-2e46-accb-28c89ab08923"],
Cell[424545, 7704, 458, 10, 16, "Message",ExpressionUUID->"fb43dd2f-a348-9143-aa0a-677ee1f355cc"],
Cell[425006, 7716, 29244, 580, 33, "Output",ExpressionUUID->"8098fa4a-4f9e-5a45-a581-30d948239393"],
Cell[454253, 8298, 1783, 26, 21, "CodeText",ExpressionUUID->"6d1138df-1a33-e043-8412-821afbaeeceb"],
Cell[CellGroupData[{
Cell[456061, 8328, 2502, 47, 93, "Input",ExpressionUUID->"fa2f2514-1d5e-c64a-bc46-cb985354f2f9"],
Cell[458566, 8377, 4432, 104, 48, "Output",ExpressionUUID->"248d0d92-409b-7148-85e3-f06c4c510450"]
}, Open  ]],
Cell[463013, 8484, 1670, 25, 21, "CodeText",ExpressionUUID->"7be68840-22b0-6d40-89cf-7e7806122ee2"],
Cell[464686, 8511, 2475, 51, 38, "Input",ExpressionUUID->"52de1af5-25f3-0f4b-96fa-4ab75c5f3a64"],
Cell[CellGroupData[{
Cell[467186, 8566, 1676, 30, 46, "Input",ExpressionUUID->"d51009cb-6f04-8642-954b-1d227d144465"],
Cell[468865, 8598, 264, 3, 20, "Output",ExpressionUUID->"ddcb8d21-7d0d-2e47-98eb-ba12003ff4dc"]
}, Open  ]],
Cell[469144, 8604, 244, 6, 21, "CodeText",ExpressionUUID->"477da182-ce5c-fb47-acf0-a60362b46a52"],
Cell[CellGroupData[{
Cell[469413, 8614, 3146, 70, 270, "Input",ExpressionUUID->"761e2e77-8d55-0448-a4d6-bec529595c02"],
Cell[472562, 8686, 37859, 718, 125, "Output",ExpressionUUID->"76f95e36-8503-2a4c-b5ce-e4739ce84fa6"],
Cell[510424, 9406, 34750, 667, 125, "Output",ExpressionUUID->"60ea9f02-f89e-294c-bfbd-1728fcba4c5a"]
}, Open  ]],
Cell[545189, 10076, 81, 0, 18, "Input",ExpressionUUID->"e9b516d9-fbd9-c446-99b7-a4d7454b93f6"],
Cell[545273, 10078, 229, 4, 18, "Input",ExpressionUUID->"2f906260-c3d4-464d-9ae1-0fded9d56430"],
Cell[545505, 10084, 669, 11, 28, "CodeText",ExpressionUUID->"029b21a4-5425-7043-8f24-258cba1dbbf5"],
Cell[546177, 10097, 156, 3, 18, "Input",ExpressionUUID->"96094b3c-e04b-f840-867c-bed9e87eada9"],
Cell[546336, 10102, 81, 0, 18, "Input",ExpressionUUID->"6e18b8d0-17d2-2040-b87f-b736b6c20966"],
Cell[CellGroupData[{
Cell[546442, 10106, 1176, 26, 46, "Input",ExpressionUUID->"5f107dc2-6adb-e943-a509-3bffdaee59e2"],
Cell[547621, 10134, 316, 6, 20, "Output",ExpressionUUID->"267a57b4-b7da-3d47-8553-eb5db48ffefc"],
Cell[547940, 10142, 316, 6, 20, "Output",ExpressionUUID->"c5307361-07e1-c244-ac9a-76c8bd9e4d88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[548293, 10153, 5389, 121, 266, "Input",ExpressionUUID->"5983214e-91bd-a84e-8516-aef370a48315"],
Cell[553685, 10276, 2194, 49, 27, "Output",ExpressionUUID->"d3b6563d-c8af-1249-b58c-4ffa3d666e9e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[555916, 10330, 901, 20, 18, "Input",ExpressionUUID->"f0afa46e-12d1-174b-b870-9313dbf962c6"],
Cell[556820, 10352, 9405, 218, 94, "Output",ExpressionUUID->"a55e3fa7-541a-bf49-b538-560867048d1e"]
}, Open  ]],
Cell[566240, 10573, 409, 8, 19, "Text",ExpressionUUID->"9994572d-8bcd-0549-a71e-fb1334f1a332"]
}, Open  ]],
Cell[CellGroupData[{
Cell[566686, 10586, 337, 5, 33, "Section",ExpressionUUID->"d5177a46-3e61-de40-9496-fb7316acf2fb"],
Cell[567026, 10593, 1403, 21, 27, "Text",ExpressionUUID->"d42908a2-5ff7-f442-9991-dcbfde4da695"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568466, 10619, 386, 9, 52, "Section",ExpressionUUID->"8aa4b553-25a4-0e4a-8c8a-25c132fe59cf"],
Cell[568855, 10630, 1495, 32, 180, "Text",ExpressionUUID->"713d6893-b300-b54a-9618-1c7ff02ccdab"],
Cell[570353, 10664, 296, 5, 19, "Text",ExpressionUUID->"802e2086-d044-eb4e-9f60-fcb29712f521"]
}, Open  ]],
Cell[CellGroupData[{
Cell[570686, 10674, 336, 5, 33, "Section",ExpressionUUID->"01b4263d-0587-424b-8a55-62920fd6393e"],
Cell[571025, 10681, 883, 15, 38, "Text",ExpressionUUID->"f041ce10-7ed8-db48-a2cb-f9646c4664f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[571945, 10701, 309, 5, 33, "Section",ExpressionUUID->"fcfa1712-3d27-1544-9098-3a5f68b26c99"],
Cell[572257, 10708, 1033, 19, 60, "Text",ExpressionUUID->"f9d3a7fe-6050-0244-ab6e-25bf03b79ed0"]
}, Open  ]],
Cell[573305, 10730, 200, 4, 33, "Section",ExpressionUUID->"d5713f6a-71b4-ea4c-ad23-e628776859ba"]
}, Open  ]]
}
]
*)

