(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    105455,       2266]
NotebookOptionsPosition[    104449,       2243]
NotebookOutlinePosition[    104871,       2260]
CellTagsIndexPosition[    104828,       2257]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"keyWord", "=", "\"\<sun\>\""}], ",", 
     RowBox[{"mostFreqCharWord", "=", "\"\<\>\""}], ",", 
     RowBox[{"mostDigramGenerated", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"SYLLABLECOUNT", "=", "0"}], ",", 
     RowBox[{"bestWordGeneticPool", "=", "\"\<\>\""}], ",", 
     RowBox[{"bestWord", "=", "\"\<\>\""}], ",", 
     RowBox[{"newAvgWords", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"newAvgWordsPhonetics", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"progress", "=", "0"}], ",", 
     RowBox[{"progressLabel", "=", "\"\<Ready\>\""}], ",", 
     RowBox[{"isRunning", "=", "False"}]}], "}"}], ",", 
   RowBox[{"Panel", "[", 
    RowBox[{"Column", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<\[Mu]Lang Lexicon Generator\>\"", ",", "Bold", ",", 
         "14"}], "]"}], ",", 
       RowBox[{"Row", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<Enter keyword: \>\"", ",", 
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", "keyWord", "]"}], ",", "String"}], 
           "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Generate\>\"", ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "languages", ",", "rawTranslations", ",", "translatedList", ",", 
             "charLists", ",", "avgLen", ",", "augmentedLists", ",", 
             "transposed", ",", "mostFreqChar", ",", "positionedDigrams", ",",
              "groupedByPosition", ",", "countsByPosition", ",", 
             "topDigramsByPosition", ",", "generateWord", ",", 
             "populationSize", ",", "generations", ",", "mutationRate", ",", 
             "fitnessFunction", ",", "population", ",", "randomString", ",", 
             "allBest", ",", "words", ",", "charSet", ",", "MAXLENGTH", ",", 
             "allPopulations", ",", "avgFitnessPerGen", ",", 
             "phoneticDifference", ",", "bestCandidate", ",", "fitnesses", ",",
              "parents", ",", "baseWord", ",", "testList", ",", "padChar", ",",
              "baseWordStates", ",", "targetWords", ",", "GENERATIONS", ",", 
             "averageLength", ",", "allPossibleChars", ",", "rawFrequencies", 
             ",", "charFreqWeights", ",", "initialState", ",", 
             "evolutionResults", ",", "finalWord", ",", "bestDistance", ",", 
             "testPositions", ",", "positionDict", ",", "net", ",", 
             "vocabulary", ",", "results", ",", "trainednet", ",", 
             "generator", ",", "wordz", ",", "netPhon", ",", "symbolMap", ",",
              "ipaList", ",", "convertedTrainList", ",", "vocabularyPhon", ",",
              "resultsPhon", ",", "trainednetPhon", ",", "generatorPhon", ",",
              "wordzPhon", ",", "updateProgress"}], "}"}], ",", 
           RowBox[{"(*", 
            RowBox[{"Initialize", " ", "progress"}], "*)"}], 
           RowBox[{
            RowBox[{"isRunning", "=", "True"}], ";", "\[IndentingNewLine]", 
            RowBox[{"progress", "=", "0"}], ";", "\[IndentingNewLine]", 
            RowBox[{"progressLabel", "=", "\"\<Starting...\>\""}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"Progress", " ", "update", " ", "function"}], "*)"}], 
            RowBox[{
             RowBox[{"updateProgress", "[", 
              RowBox[{"value_", ",", "label_"}], "]"}], ":=", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"progress", "=", "value"}], ";", "\[IndentingNewLine]", 
               RowBox[{"progressLabel", "=", "label"}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Pause", "[", "0.1", "]"}], ";"}], " ", 
              RowBox[{"(*", 
               RowBox[{
               "Small", " ", "pause", " ", "to", " ", "allow", " ", "UI", " ",
                 "update"}], "*)"}], ")"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"--", 
                 RowBox[{"-", "Translation"}]}], "&"}], " ", 
               RowBox[{"Preprocessing", "--"}]}], "-"}], "*)"}], 
            RowBox[{"updateProgress", "[", 
             RowBox[{"5", ",", "\"\<Fetching translations...\>\""}], "]"}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"languages", "=", 
             RowBox[{
              RowBox[{"EntityClass", "[", 
               RowBox[{"\"\<Language\>\"", ",", 
                RowBox[{"{", 
                 RowBox[{"\"\<TotalSpeakers\>\"", "->", 
                  RowBox[{"TakeLargest", "[", "100", "]"}]}], "}"}]}], "]"}], 
              "//", "EntityList"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"rawTranslations", "=", 
             RowBox[{"KeyValueMap", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#1", "->", 
                 RowBox[{"First", "[", "#2", "]"}]}], "&"}], ",", 
               RowBox[{"WordTranslation", "[", 
                RowBox[{"keyWord", ",", "languages"}], "]"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"translatedList", "=", 
             RowBox[{"DeleteCases", "[", 
              RowBox[{
               RowBox[{"DeleteDuplicates", "[", 
                RowBox[{"ToLowerCase", "[", 
                 RowBox[{"Select", "[", 
                  RowBox[{
                   RowBox[{"Transliterate", "[", 
                    RowBox[{"Values", "[", "rawTranslations", "]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"StringMatchQ", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{
                    RowBox[{"CharacterRange", "[", 
                    RowBox[{"\"\<A\>\"", ",", "\"\<z\>\""}], "]"}], ".."}]}], 
                    "]"}], "&"}]}], "]"}], "]"}], "]"}], 
               ",", "\"\<notavailable\>\""}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{
             "15", ",", "\"\<Processing character frequencies...\>\""}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"charLists", "=", 
             RowBox[{"Characters", "/@", "translatedList"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"avgLen", "=", 
             RowBox[{"Round", "[", 
              RowBox[{"Mean", "[", 
               RowBox[{"Length", "/@", "charLists"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"augmentedLists", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{"Function", "[", 
                RowBox[{"chars", ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "chars", "]"}], ">", "avgLen"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{"chars", ",", "avgLen"}], "]"}], ",", 
                   RowBox[{"PadRight", "[", 
                    RowBox[{"chars", ",", "avgLen", ",", "\"\<-\>\""}], 
                    "]"}]}], "]"}]}], "]"}], ",", "charLists"}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"transposed", "=", 
             RowBox[{"Transpose", "[", "augmentedLists", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"mostFreqChar", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", "\"\<-\>\""}], "]"}], "===", 
                   RowBox[{"{", "}"}]}], ",", "\"\<-\>\"", ",", 
                  RowBox[{"First", "@", 
                   RowBox[{"First", "@", 
                    RowBox[{"SortBy", "[", 
                    RowBox[{
                    RowBox[{"Tally", "@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", "\"\<-\>\""}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Last", "[", "#", "]"}]}], "&"}]}], "]"}]}]}]}], "]"}
                 ], "&"}], ",", "transposed"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"mostFreqCharWord", "=", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"DeleteCases", "[", 
               RowBox[{"mostFreqChar", ",", "\"\<-\>\""}], "]"}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"SYLLABLECOUNT", "=", 
             RowBox[{"Round", "[", 
              RowBox[{"Mean", "[", 
               RowBox[{"Length", "/@", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "ResourceFunction", "[", "\"\<WordSyllables\>\"", "]"}], "[",
                     "#", "]"}], "&"}], "/@", "translatedList"}], ")"}]}], 
               "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{"25", ",", "\"\<Generating digram-based words...\>\""}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"positionedDigrams", "=", 
             RowBox[{"Flatten", "[", 
              RowBox[{
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"StringLength", "[", "word", "]"}], ">=", 
                    RowBox[{"pos", "+", "1"}]}], ",", 
                   RowBox[{"{", 
                    RowBox[{"pos", ",", 
                    RowBox[{"StringTake", "[", 
                    RowBox[{"word", ",", 
                    RowBox[{"{", 
                    RowBox[{"pos", ",", 
                    RowBox[{"pos", "+", "1"}]}], "}"}]}], "]"}]}], "}"}], ",",
                    "Nothing"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"word", ",", "translatedList"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"pos", ",", 
                   RowBox[{
                    RowBox[{"StringLength", "[", "word", "]"}], "-", "1"}]}], 
                  "}"}]}], "]"}], ",", "1"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"groupedByPosition", "=", 
             RowBox[{"GroupBy", "[", 
              RowBox[{"positionedDigrams", ",", 
               RowBox[{"First", "->", "Last"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"countsByPosition", "=", 
             RowBox[{"AssociationMap", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Counts", "[", 
                 RowBox[{"groupedByPosition", "[", "#", "]"}], "]"}], "&"}], ",", 
               RowBox[{"Keys", "[", "groupedByPosition", "]"}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"topDigramsByPosition", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Keys", "@", 
                RowBox[{"TakeLargestBy", "[", 
                 RowBox[{
                  RowBox[{"countsByPosition", "[", "pos", "]"}], ",", 
                  "Identity", ",", 
                  RowBox[{"UpTo", "[", "1", "]"}]}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"pos", ",", 
                 RowBox[{"Sort", "@", 
                  RowBox[{"Keys", "[", "countsByPosition", "]"}]}]}], "}"}]}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"generateWord", "[", "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "numSyllables", ",", "selectedLists", ",", "syllables"}], 
                "}"}], ",", 
               RowBox[{
                RowBox[{"numSyllables", "=", 
                 RowBox[{"RandomInteger", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"SYLLABLECOUNT", "-", "2"}]}], "]"}], ",", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"Length", "[", "topDigramsByPosition", "]"}], ",", 
                    RowBox[{"SYLLABLECOUNT", "+", "2"}]}], "]"}]}], "}"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"selectedLists", "=", 
                 RowBox[{"Take", "[", 
                  RowBox[{"topDigramsByPosition", ",", "numSyllables"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"syllables", "=", 
                 RowBox[{"RandomChoice", "/@", "selectedLists"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"StringJoin", "[", "syllables", "]"}]}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"mostDigramGenerated", "=", 
             RowBox[{"DeleteDuplicates", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"generateWord", "[", "]"}], ",", 
                RowBox[{"{", "10", "}"}]}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{"35", ",", "\"\<Running genetic algorithm...\>\""}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"populationSize", "=", "100"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"generations", "=", "5"}], ";", "\[IndentingNewLine]", 
            RowBox[{"mutationRate", "=", "0.2"}], ";", "\[IndentingNewLine]", 
            
            RowBox[{"topDigramsByPosition", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Keys", "@", 
                RowBox[{"TakeLargestBy", "[", 
                 RowBox[{
                  RowBox[{"countsByPosition", "[", "pos", "]"}], ",", 
                  "Identity", ",", 
                  RowBox[{"UpTo", "[", "5", "]"}]}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"pos", ",", 
                 RowBox[{"Sort", "@", 
                  RowBox[{"Keys", "[", "countsByPosition", "]"}]}]}], "}"}]}],
               "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"allBest", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"words", "=", "translatedList"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"charSet", "=", 
             RowBox[{"Flatten", "[", "topDigramsByPosition", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"MAXLENGTH", "=", 
             RowBox[{"Round", "[", 
              RowBox[{"Mean", "[", 
               RowBox[{"StringLength", "/@", "words"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"allPopulations", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"avgFitnessPerGen", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"phoneticDifference", "[", 
              RowBox[{"word1_String", ",", "word2_String"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"soundex1", ",", "soundex2"}], "}"}], ",", 
               RowBox[{
                RowBox[{"soundex1", "=", 
                 RowBox[{
                  RowBox[{"ResourceFunction", "[", "\"\<Soundex\>\"", "]"}], "[",
                   "word1", "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"soundex2", "=", 
                 RowBox[{
                  RowBox[{"ResourceFunction", "[", "\"\<Soundex\>\"", "]"}], "[",
                   "word2", "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"soundex1", "===", "soundex2"}], ",", "0", ",", 
                  RowBox[{"EditDistance", "[", 
                   RowBox[{"soundex1", ",", "soundex2"}], "]"}]}], "]"}]}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"fitnessFunction", "[", "candidate_String", "]"}], ":=", 
             
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "maxEditDistance", ",", "maxPhoneticDistance", ",", 
                 "editScore", ",", "phoneticScore"}], "}"}], ",", 
               RowBox[{
                RowBox[{"maxEditDistance", "=", 
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"EditDistance", "[", 
                    RowBox[{"candidate", ",", "#"}], "]"}], "&"}], "/@", 
                   "words"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"maxPhoneticDistance", "=", 
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"phoneticDifference", "[", 
                    RowBox[{"candidate", ",", "#"}], "]"}], "&"}], "/@", 
                   "words"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"editScore", "=", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"maxEditDistance", ">", "0"}], ",", 
                   RowBox[{"1", "-", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"EditDistance", "[", 
                    RowBox[{"candidate", ",", "#"}], "]"}], "&"}], "/@", 
                    "words"}], "]"}], "/", "maxEditDistance"}], "]"}]}], ",", 
                   "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"phoneticScore", "=", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"maxPhoneticDistance", ">", "0"}], ",", 
                   RowBox[{"1", "-", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"Mean", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"phoneticDifference", "[", 
                    RowBox[{"candidate", ",", "#"}], "]"}], "&"}], "/@", 
                    "words"}], "]"}], "/", "maxPhoneticDistance"}], "]"}]}], ",",
                    "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"0.5", "*", "editScore"}], "+", 
                 RowBox[{"0.5", "*", "phoneticScore"}]}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"randomString", "[", "]"}], ":=", 
             RowBox[{"StringJoin", "@", 
              RowBox[{"RandomChoice", "[", 
               RowBox[{
                RowBox[{"Flatten", "[", "topDigramsByPosition", "]"}], ",", 
                RowBox[{"RandomInteger", "[", 
                 RowBox[{"{", 
                  RowBox[{"SYLLABLECOUNT", ",", 
                   RowBox[{"SYLLABLECOUNT", "+", "2"}]}], "}"}], "]"}]}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"population", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"randomString", "[", "]"}], ",", 
               RowBox[{"{", "populationSize", "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"lengthVaryTwoPointCrossover", "[", 
              RowBox[{"p1_", ",", "p2_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "len1", ",", "len2", ",", "minLen", ",", "pt1", ",", "pt2", ",",
                  "c1", ",", "c2", ",", "child"}], "}"}], ",", 
               RowBox[{
                RowBox[{"len1", "=", 
                 RowBox[{"StringLength", "[", "p1", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"len2", "=", 
                 RowBox[{"StringLength", "[", "p2", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"minLen", "=", 
                 RowBox[{"Min", "[", 
                  RowBox[{"len1", ",", "len2"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"pt1", ",", "pt2"}], "}"}], "=", 
                 RowBox[{"Sort", "@", 
                  RowBox[{"RandomSample", "[", 
                   RowBox[{
                    RowBox[{"Range", "[", "minLen", "]"}], ",", "2"}], 
                   "]"}]}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"c1", "=", 
                 RowBox[{"Characters", "[", "p1", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"c2", "=", 
                 RowBox[{"Characters", "[", "p2", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"child", "=", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"Take", "[", 
                    RowBox[{"c1", ",", 
                    RowBox[{"pt1", "-", "1"}]}], "]"}], ",", 
                   RowBox[{"Take", "[", 
                    RowBox[{"c2", ",", 
                    RowBox[{"{", 
                    RowBox[{"pt1", ",", "pt2"}], "}"}]}], "]"}], ",", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"c1", ",", "pt2"}], "]"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", "child", "]"}], ">", "MAXLENGTH"}], 
                  ",", 
                  RowBox[{"child", "=", 
                   RowBox[{"Take", "[", 
                    RowBox[{"child", ",", "MAXLENGTH"}], "]"}]}]}], "]"}], ";",
                 "\[IndentingNewLine]", 
                RowBox[{"StringJoin", "[", "child", "]"}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"mutate", "[", "str_", "]"}], ":=", 
             RowBox[{"StringJoin", "@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"RandomReal", "[", "]"}], "<", "mutationRate"}], ",", 
                  RowBox[{"RandomChoice", "[", "charSet", "]"}], ",", "c"}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"c", ",", 
                  RowBox[{"Characters", "[", "str", "]"}]}], "}"}]}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"allBest", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Mod", "[", 
                    RowBox[{"gen", ",", "2"}], "]"}], "==", "0"}], ",", 
                  RowBox[{"updateProgress", "[", 
                   RowBox[{
                    RowBox[{"35", "+", 
                    RowBox[{"gen", "*", "2"}]}], ",", 
                    RowBox[{"\"\<Genetic algorithm generation \>\"", "<>", 
                    RowBox[{"ToString", "[", "gen", "]"}], "<>", "\"\</\>\"", 
                    "<>", 
                    RowBox[{"ToString", "[", "generations", "]"}]}]}], 
                   "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"fitnesses", "=", 
                 RowBox[{"fitnessFunction", "/@", "population"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"bestCandidate", "=", 
                 RowBox[{"population", "[", 
                  RowBox[{"[", 
                   RowBox[{"First", "@", 
                    RowBox[{"Ordering", "[", 
                    RowBox[{"fitnesses", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"avgFitnessPerGen", ",", 
                  RowBox[{"N", "[", 
                   RowBox[{"Mean", "[", "fitnesses", "]"}], "]"}]}], "]"}], ";",
                 "\[IndentingNewLine]", 
                RowBox[{"AppendTo", "[", 
                 RowBox[{"allPopulations", ",", "population"}], "]"}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"parents", "=", 
                 RowBox[{
                  RowBox[{"TakeLargestBy", "[", 
                   RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"population", ",", "fitnesses"}], "}"}], "]"}], ",",
                     "Last", ",", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{"populationSize", "/", "2"}], "]"}]}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"population", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"mutate", "@", 
                    RowBox[{"lengthVaryTwoPointCrossover", "[", 
                    RowBox[{
                    RowBox[{"RandomChoice", "[", "parents", "]"}], ",", 
                    RowBox[{"RandomChoice", "[", "parents", "]"}]}], "]"}]}], 
                   ",", 
                   RowBox[{"{", "populationSize", "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", "bestCandidate"}], ",", 
               RowBox[{"{", 
                RowBox[{"gen", ",", "1", ",", "generations"}], "}"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"allPopulations", ",", "population"}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"bestWordGeneticPool", "=", 
             RowBox[{"First", "@", 
              RowBox[{"MaximalBy", "[", 
               RowBox[{"allBest", ",", "fitnessFunction"}], "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{"50", ",", "\"\<Running evolution algorithm...\>\""}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"baseWord", "=", 
             RowBox[{"StringJoin", "@", 
              RowBox[{"RandomChoice", "[", 
               RowBox[{
                RowBox[{"CharacterRange", "[", 
                 RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], ",", "5"}], 
               "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"testList", "=", "translatedList"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"padChar", "=", "\"\<_\>\""}], ";", "\[IndentingNewLine]", 
            RowBox[{"baseWordStates", "=", 
             RowBox[{"{", "baseWord", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"targetWords", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"GENERATIONS", "=", "1000"}], ";", "\[IndentingNewLine]", 
            
            RowBox[{"averageLength", "=", 
             RowBox[{"Round", "[", 
              RowBox[{"Mean", "[", 
               RowBox[{"StringLength", "/@", "testList"}], "]"}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"getAllChars", "[", "wordList_", "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"maxLen", ",", "paddedWords", ",", "allChars"}], 
                "}"}], ",", 
               RowBox[{
                RowBox[{"maxLen", "=", 
                 RowBox[{"Max", "[", 
                  RowBox[{"StringLength", "/@", "wordList"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"paddedWords", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{"#", ",", "maxLen", ",", "padChar"}], "]"}], 
                   "&"}], "/@", "wordList"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"allChars", "=", 
                 RowBox[{"Union", "[", 
                  RowBox[{"Flatten", "[", 
                   RowBox[{"Characters", "/@", "paddedWords"}], "]"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "allChars"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"pad", "[", 
              RowBox[{"w1_", ",", "w2_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"maxLen", ",", "p1", ",", "p2"}], "}"}], ",", 
               RowBox[{
                RowBox[{"maxLen", "=", 
                 RowBox[{"Max", "[", 
                  RowBox[{
                   RowBox[{"StringLength", "[", "w1", "]"}], ",", 
                   RowBox[{"StringLength", "[", "w2", "]"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"StringPadRight", "[", 
                   RowBox[{"w1", ",", "maxLen", ",", "padChar"}], "]"}], ",", 
                  
                  RowBox[{"StringPadRight", "[", 
                   RowBox[{"w2", ",", "maxLen", ",", "padChar"}], "]"}]}], 
                 "}"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"mostDifferentWord", "[", 
              RowBox[{"base_", ",", "list_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", "diffs", "}"}], ",", 
               RowBox[{
                RowBox[{"diffs", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"word", ",", 
                    RowBox[{"EditDistance", "[", 
                    RowBox[{"base", ",", "word"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"word", ",", "list"}], "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"First", "@", 
                 RowBox[{"MaximalBy", "[", 
                  RowBox[{"diffs", ",", "Last"}], "]"}]}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"findDifferingIndices", "[", 
              RowBox[{"str1_", ",", "str2_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"minLen", ",", "diffs"}], "}"}], ",", 
               RowBox[{
                RowBox[{"minLen", "=", 
                 RowBox[{"Min", "[", 
                  RowBox[{
                   RowBox[{"StringLength", "[", "str1", "]"}], ",", 
                   RowBox[{"StringLength", "[", "str2", "]"}]}], "]"}]}], ";",
                 "\[IndentingNewLine]", 
                RowBox[{"diffs", "=", 
                 RowBox[{"Select", "[", 
                  RowBox[{
                   RowBox[{"Range", "[", "minLen", "]"}], ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"str1", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], "=!=", 
                    RowBox[{"StringTake", "[", 
                    RowBox[{"str2", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], "&"}]}], "]"}]}], ";",
                 "\[IndentingNewLine]", "diffs"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"layoutTestWords", "[", 
              RowBox[{"baseWord_", ",", "testList_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"angles", ",", "positions"}], "}"}], ",", 
               RowBox[{
                RowBox[{"angles", "=", 
                 RowBox[{
                  RowBox[{"Subdivide", "[", 
                   RowBox[{"0", ",", 
                    RowBox[{"2", "*", "Pi"}], ",", 
                    RowBox[{"Length", "[", "testList", "]"}]}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"1", ";;", 
                    RowBox[{"-", "2"}]}], "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"positions", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"dist", "=", 
                    RowBox[{"EditDistance", "[", 
                    RowBox[{"baseWord", ",", 
                    RowBox[{"testList", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"testList", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{"angles", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "*", "dist"}], ",", 
                    RowBox[{
                    RowBox[{"Sin", "[", 
                    RowBox[{"angles", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], "*", "dist"}]}], 
                    "}"}]}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "testList", "]"}]}], "}"}]}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "positions"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"calculateCharFrequencies", "[", "wordList_", "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"maxLen", ",", "paddedWords", ",", "freqTables"}], 
                "}"}], ",", 
               RowBox[{
                RowBox[{"maxLen", "=", 
                 RowBox[{"Max", "[", 
                  RowBox[{"StringLength", "/@", "wordList"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"paddedWords", "=", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"StringPadRight", "[", 
                    RowBox[{"#", ",", "maxLen", ",", "padChar"}], "]"}], 
                   "&"}], "/@", "wordList"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"freqTables", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"Counts", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", "pos", "}"}]}], "]"}], "&"}], "/@", 
                    "paddedWords"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"pos", ",", "1", ",", "maxLen"}], "}"}]}], 
                  "]"}]}], ";", "\[IndentingNewLine]", "freqTables"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"normalizeFrequencies", "[", "freqTable_", "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"nonZeroEntries", ",", "total"}], "}"}], ",", 
               RowBox[{
                RowBox[{"nonZeroEntries", "=", 
                 RowBox[{"Select", "[", 
                  RowBox[{"freqTable", ",", 
                   RowBox[{
                    RowBox[{"#", ">", "0"}], "&"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"total", "=", 
                 RowBox[{"Total", "[", 
                  RowBox[{"Values", "[", "nonZeroEntries", "]"}], "]"}]}], ";",
                 "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"total", "==", "0"}], ",", "freqTable", ",", 
                  RowBox[{"Association", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", "->", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"freqTable", "[", "#", "]"}], ">", "0"}], ",", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"freqTable", "[", "#", "]"}], "/", "total"}], 
                    "]"}], ",", "0"}], "]"}]}], "&"}], "/@", 
                    RowBox[{"Keys", "[", "freqTable", "]"}]}], "]"}]}], 
                 "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"allPossibleChars", "=", 
             RowBox[{"getAllChars", "[", "testList", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"rawFrequencies", "=", 
             RowBox[{"calculateCharFrequencies", "[", "testList", "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"charFreqWeights", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"normalizeFrequencies", "[", 
                 RowBox[{"AssociationThread", "[", 
                  RowBox[{"allPossibleChars", ",", 
                   RowBox[{"Lookup", "[", 
                    RowBox[{"#", ",", "allPossibleChars", ",", "0"}], "]"}]}],
                   "]"}], "]"}], "&"}], ",", "rawFrequencies"}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"weightedRandomTarget", "[", 
              RowBox[{"base_", ",", "list_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"diffs", ",", "total", ",", "weights"}], "}"}], ",", 
               RowBox[{
                RowBox[{"diffs", "=", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"word", ",", 
                    RowBox[{"EditDistance", "[", 
                    RowBox[{"base", ",", "word"}], "]"}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"word", ",", "list"}], "}"}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"total", "=", 
                 RowBox[{"Total", "[", 
                  RowBox[{"diffs", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"total", "==", "0"}], ",", 
                  RowBox[{"RandomChoice", "[", "list", "]"}], ",", 
                  RowBox[{
                   RowBox[{"weights", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"diffs", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "^", "3"}], 
                    ")"}], "/", 
                    RowBox[{"Total", "[", 
                    RowBox[{
                    RowBox[{"diffs", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}], "^", "3"}], 
                    "]"}]}]}], ";", "\[IndentingNewLine]", 
                   RowBox[{"RandomChoice", "[", 
                    RowBox[{"weights", "->", 
                    RowBox[{"diffs", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], "]"}]}]}], 
                 "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"randomMutation", "[", 
              RowBox[{"word_", ",", 
               RowBox[{"rate_", ":", "0.05"}]}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"chars", ",", "mutated"}], "}"}], ",", 
               RowBox[{
                RowBox[{"chars", "=", 
                 RowBox[{"Characters", "[", "word", "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"mutated", "=", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RandomReal", "[", "]"}], "<", "rate"}], ",", 
                    RowBox[{"RandomChoice", "[", 
                    RowBox[{
                    RowBox[{"CharacterRange", "[", 
                    RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], "~", 
                    "Join", "~", 
                    RowBox[{"{", "padChar", "}"}]}], "]"}], ",", "#"}], "]"}],
                     "&"}], ",", "chars"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"StringJoin", "[", "mutated", "]"}]}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"evolveTowardWeighted", "[", 
              RowBox[{"base_", ",", "target_"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "basePadded", ",", "targetPadded", ",", "diffIndices", ",", 
                 "i", ",", "targetChar", ",", "baseChar", ",", "weight", ",", 
                 "chars", ",", "weights", ",", "choice"}], "}"}], ",", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"basePadded", ",", "targetPadded"}], "}"}], "=", 
                 RowBox[{"pad", "[", 
                  RowBox[{"base", ",", "target"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"diffIndices", "=", 
                 RowBox[{"findDifferingIndices", "[", 
                  RowBox[{"basePadded", ",", "targetPadded"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"diffIndices", "===", 
                   RowBox[{"{", "}"}]}], ",", "basePadded", ",", 
                  RowBox[{
                   RowBox[{"i", "=", 
                    RowBox[{"RandomChoice", "[", "diffIndices", "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"targetChar", "=", 
                    RowBox[{"StringTake", "[", 
                    RowBox[{"targetPadded", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "i"}], "}"}]}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"baseChar", "=", 
                    RowBox[{"StringTake", "[", 
                    RowBox[{"basePadded", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "i"}], "}"}]}], "]"}]}], ";", 
                   "\[IndentingNewLine]", 
                   RowBox[{"weight", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"i", "<=", 
                    RowBox[{"Length", "[", "charFreqWeights", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"chars", "=", 
                    RowBox[{"Keys", "[", 
                    RowBox[{"charFreqWeights", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"weights", "=", 
                    RowBox[{"Values", "[", 
                    RowBox[{"charFreqWeights", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"choice", "=", 
                    RowBox[{"RandomChoice", "[", 
                    RowBox[{"weights", "->", "chars"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"StringReplacePart", "[", 
                    RowBox[{"basePadded", ",", "choice", ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "i"}], "}"}]}], "]"}]}], ",", 
                    "basePadded"}], "]"}]}]}]}], "]"}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"baseWordStates", "=", 
             RowBox[{"{", "baseWord", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"targetWords", "=", 
             RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"bestWord", "=", "baseWord"}], ";", "\[IndentingNewLine]", 
            RowBox[{"bestDistance", "=", 
             RowBox[{"Mean", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"EditDistance", "[", 
                 RowBox[{"baseWord", ",", "#"}], "]"}], "&"}], "/@", 
               "testList"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"evolutionStep", "[", 
              RowBox[{"{", 
               RowBox[{
               "currentWord_", ",", "currentBest_", ",", "bestDist_", ",", 
                "targetHist_", ",", "stateHist_"}], "}"}], "]"}], ":=", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"target", ",", "newWord", ",", "newDist"}], "}"}], ",", 
               RowBox[{
                RowBox[{"target", "=", 
                 RowBox[{"weightedRandomTarget", "[", 
                  RowBox[{"currentWord", ",", "testList"}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"newWord", "=", 
                 RowBox[{"StringReplace", "[", 
                  RowBox[{
                   RowBox[{"evolveTowardWeighted", "[", 
                    RowBox[{"currentWord", ",", "target"}], "]"}], ",", 
                   RowBox[{"\"\<_\>\"", "->", "\"\<\>\""}]}], "]"}]}], ";", 
                "\[IndentingNewLine]", 
                RowBox[{"newDist", "=", 
                 RowBox[{"Mean", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"EditDistance", "[", 
                    RowBox[{"newWord", ",", "#"}], "]"}], "&"}], "/@", 
                   "testList"}], "]"}]}], ";", "\[IndentingNewLine]", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"newDist", "<", "bestDist"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"newWord", ",", "newWord", ",", "newDist", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"targetHist", ",", "target"}], "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"stateHist", ",", "newWord"}], "]"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"newWord", ",", "currentBest", ",", "bestDist", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"targetHist", ",", "target"}], "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"stateHist", ",", "newWord"}], "]"}]}], "}"}]}], 
                 "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"initialState", "=", 
             RowBox[{"{", 
              RowBox[{"baseWord", ",", "baseWord", ",", 
               RowBox[{"Mean", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"EditDistance", "[", 
                   RowBox[{"baseWord", ",", "#"}], "]"}], "&"}], "/@", 
                 "testList"}], "]"}], ",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "baseWord", "}"}]}], "}"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{
             "Evolution", " ", "with", " ", "progress", " ", "updates"}], 
             "*)"}], 
            RowBox[{"evolutionResults", "=", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Mod", "[", 
                    RowBox[{"gen", ",", "100"}], "]"}], "==", "0"}], ",", 
                  RowBox[{"updateProgress", "[", 
                   RowBox[{
                    RowBox[{"50", "+", 
                    RowBox[{
                    RowBox[{"gen", "/", "GENERATIONS"}], "*", "15"}]}], ",", 
                    RowBox[{"\"\<Evolution step \>\"", "<>", 
                    RowBox[{"ToString", "[", "gen", "]"}], "<>", "\"\</\>\"", 
                    "<>", 
                    RowBox[{"ToString", "[", "GENERATIONS", "]"}]}]}], 
                   "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
                RowBox[{"evolutionStep", "[", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"gen", "==", "1"}], ",", "initialState", ",", 
                   RowBox[{"evolutionResults", "[", 
                    RowBox[{"[", 
                    RowBox[{"gen", "-", "1"}], "]"}], "]"}]}], "]"}], "]"}]}],
                ",", 
               RowBox[{"{", 
                RowBox[{"gen", ",", "1", ",", "GENERATIONS"}], "}"}]}], 
              "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "finalWord", ",", "bestWord", ",", "bestDistance", ",", 
               "targetWords", ",", "baseWordStates"}], "}"}], "=", 
             RowBox[{"Last", "[", "evolutionResults", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"testPositions", "=", 
             RowBox[{"layoutTestWords", "[", 
              RowBox[{
               RowBox[{"baseWordStates", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", "testList"}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"positionDict", "=", 
             RowBox[{"Association", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "->", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}]}], "}"}]}], "&"}], "/@", 
               "testPositions"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"bestWord", "=", 
             RowBox[{"StringReplace", "[", 
              RowBox[{"bestWord", ",", 
               RowBox[{"\"\<_\>\"", "->", "\"\<\>\""}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{
             "70", ",", "\"\<Training neural network (standard)...\>\""}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"net", "=", 
             RowBox[{"NetModel", "[", 
              
              RowBox[{"\"\<Wolfram English Character-Level Language Model \
V1\>\"", ",", "\"\<TrainingNet\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"vocabulary", "=", 
             RowBox[{
             "Characters", 
              "[", "\"\<\\t\\n \
!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`\
abcdefghijklmnopqrstuvwxyz{}\[EAcute]\>\"", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"net", "=", 
             RowBox[{"NetReplacePart", "[", 
              RowBox[{"net", ",", 
               RowBox[{"\"\<Input\>\"", "->", 
                RowBox[{"NetEncoder", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Characters\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"vocabulary", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"StartOfString", ",", "EndOfString"}], "}"}], "->",
                     "97"}]}], "}"}]}], "}"}], "]"}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"results", "=", 
             RowBox[{"NetTrain", "[", 
              RowBox[{"net", ",", 
               RowBox[{"<|", 
                RowBox[{"\"\<Input\>\"", "->", "translatedList"}], "|>"}], ",",
                "All", ",", 
               RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
               RowBox[{"MaxTrainingRounds", "->", "500"}], ",", 
               RowBox[{"TrainingProgressFunction", "->", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "assoc", "}"}], ",", 
                  RowBox[{"updateProgress", "[", 
                   RowBox[{
                    RowBox[{"70", "+", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"assoc", "[", "\"\<Round\>\"", "]"}], "/", 
                    "500"}], "*", "15"}]}], ",", 
                    RowBox[{"\"\<Training neural network: round \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"assoc", "[", "\"\<Round\>\"", "]"}], "]"}], 
                    "<>", "\"\</500\>\""}]}], "]"}]}], "]"}]}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"trainednet", "=", 
             RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"generator", "=", 
             RowBox[{"NetReplacePart", "[", 
              RowBox[{
               RowBox[{"NetExtract", "[", 
                RowBox[{"trainednet", ",", "\"\<predict\>\""}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<Input\>\"", "->", 
                  RowBox[{"NetEncoder", "[", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Characters\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"vocabulary", ",", "EndOfString"}], "}"}], ",", 
                    RowBox[{"\"\<TargetLength\>\"", "->", "1"}]}], "}"}], 
                   "]"}]}], ",", 
                 RowBox[{"\"\<Output\>\"", "->", 
                  RowBox[{"NetDecoder", "[", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Class\>\"", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"vocabulary", ",", "\"\<\>\""}], "]"}]}], "}"}], 
                   "]"}]}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"wordz", "[", "]"}], ":=", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"obj", "=", 
                 RowBox[{"NetStateObject", "[", "generator", "]"}]}], "}"}], ",", 
               RowBox[{"StringJoin", "@", 
                RowBox[{"NestWhileList", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"obj", "[", 
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], 
                    ",", "\"\<RandomSample\>\""}], "]"}], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"#", "=!=", 
                    RowBox[{"{", "\"\<\>\"", "}"}]}], "&"}], ",", 
                  "SYLLABLECOUNT", ",", 
                  RowBox[{"SYLLABLECOUNT", "+", "2"}]}], "]"}]}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"newAvgWords", "=", 
             RowBox[{"Sort", "@", 
              RowBox[{"Complement", "[", 
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"wordz", "[", "]"}], ",", "15"}], "]"}], ",", 
                "translatedList"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{
             "85", ",", "\"\<Training phonetic neural network...\>\""}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"netPhon", "=", 
             RowBox[{"NetModel", "[", 
              
              RowBox[{"\"\<Wolfram English Character-Level Language Model \
V1\>\"", ",", "\"\<TrainingNet\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"symbolMap", "=", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"\"\<\[Theta]\>\"", "->", "\"\<1\>\""}], ",", 
               RowBox[{"\"\<\[Eth]\>\"", "->", "\"\<2\>\""}], ",", 
               RowBox[{"\"\<\:0283\>\"", "->", "\"\<3\>\""}], ",", 
               RowBox[{"\"\<\:0292\>\"", "->", "\"\<4\>\""}], ",", 
               RowBox[{"\"\<\:026a\>\"", "->", "\"\<5\>\""}], ",", 
               RowBox[{"\"\<\:025b\>\"", "->", "\"\<6\>\""}], ",", 
               RowBox[{"\"\<\[AE]\>\"", "->", "\"\<7\>\""}], ",", 
               RowBox[{"\"\<\:0254\>\"", "->", "\"\<8\>\""}], ",", 
               RowBox[{"\"\<\:028a\>\"", "->", "\"\<9\>\""}], ",", 
               RowBox[{"\"\<\:028c\>\"", "->", "\"\<0\>\""}], ",", 
               RowBox[{"\"\<\:0259\>\"", "->", "\"\<.\>\""}], ",", 
               RowBox[{"\"\<\:025c\>\"", "->", "\"\<,\>\""}], ",", 
               RowBox[{"\"\<\:014b\>\"", "->", "\"\<;\>\""}], ",", 
               RowBox[{"\"\<\:0261\>\"", "->", "\"\<:\>\""}], ",", 
               RowBox[{"\"\<\:0251\>\"", "->", "\"\<!\>\""}], ",", 
               RowBox[{"\"\<\:02c8\>\"", "->", "\"\<@\>\""}], ",", 
               RowBox[{"\"\<\:02cc\>\"", "->", "\"\<=\>\""}], ",", 
               RowBox[{"\"\<\:0252\>\"", "->", "\"\<*\>\""}], ",", 
               RowBox[{"\"\<\:025d\>\"", "->", "\"\<[\>\""}]}], "|>"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"ipaList", "=", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                 "ResourceFunction", "[", "\"\<WordPhoneticSyllabify\>\"", 
                  "]"}], "[", "#", "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}], "&"}], "/@", 
              "translatedList"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"convertedTrainList", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"StringJoin", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Lookup", "[", 
                   RowBox[{"symbolMap", ",", "#", ",", "#"}], "]"}], "&"}], "/@", 
                 RowBox[{"Characters", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
              
              RowBox[{"StringReplace", "[", 
               RowBox[{"ipaList", ",", 
                RowBox[{"\"\<\[Bullet]\>\"", "->", "\"\<\>\""}]}], "]"}]}]}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"vocabularyPhon", "=", 
             RowBox[{
             "Characters", 
              "[", "\"\<\\t\\n \
!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`\
abcdefghijklmnopqrstuvwxyz{}\[Bullet]\>\"", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"netPhon", "=", 
             RowBox[{"NetReplacePart", "[", 
              RowBox[{"netPhon", ",", 
               RowBox[{"\"\<Input\>\"", "->", 
                RowBox[{"NetEncoder", "[", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Characters\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{"vocabularyPhon", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"StartOfString", ",", "EndOfString"}], "}"}], "->",
                     "97"}]}], "}"}]}], "}"}], "]"}]}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"resultsPhon", "=", 
             RowBox[{"NetTrain", "[", 
              RowBox[{"netPhon", ",", 
               RowBox[{"<|", 
                RowBox[{"\"\<Input\>\"", "->", "convertedTrainList"}], "|>"}],
                ",", "All", ",", 
               RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
               RowBox[{"MaxTrainingRounds", "->", "500"}], ",", 
               RowBox[{"TrainingProgressFunction", "->", 
                RowBox[{"Function", "[", 
                 RowBox[{
                  RowBox[{"{", "assoc", "}"}], ",", 
                  RowBox[{"updateProgress", "[", 
                   RowBox[{
                    RowBox[{"85", "+", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"assoc", "[", "\"\<Round\>\"", "]"}], "/", 
                    "500"}], "*", "14"}]}], ",", 
                    RowBox[{"\"\<Training phonetic network: round \>\"", "<>", 
                    RowBox[{"ToString", "[", 
                    RowBox[{"assoc", "[", "\"\<Round\>\"", "]"}], "]"}], 
                    "<>", "\"\</500\>\""}]}], "]"}]}], "]"}]}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"trainednetPhon", "=", 
             RowBox[{"resultsPhon", "[", "\"\<TrainedNet\>\"", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"generatorPhon", "=", 
             RowBox[{"NetReplacePart", "[", 
              RowBox[{
               RowBox[{"NetExtract", "[", 
                RowBox[{"trainednetPhon", ",", "\"\<predict\>\""}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<Input\>\"", "->", 
                  RowBox[{"NetEncoder", "[", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Characters\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{"vocabularyPhon", ",", "EndOfString"}], "}"}], ",", 
                    RowBox[{"\"\<TargetLength\>\"", "->", "1"}]}], "}"}], 
                   "]"}]}], ",", 
                 RowBox[{"\"\<Output\>\"", "->", 
                  RowBox[{"NetDecoder", "[", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Class\>\"", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"vocabularyPhon", ",", "\"\<\>\""}], "]"}]}], 
                    "}"}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"wordzPhon", "[", "]"}], ":=", 
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"obj", "=", 
                 RowBox[{"NetStateObject", "[", "generatorPhon", "]"}]}], 
                "}"}], ",", 
               RowBox[{"StringJoin", "@", 
                RowBox[{"NestWhileList", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"obj", "[", 
                    RowBox[{
                    RowBox[{"Last", "[", "#", "]"}], 
                    ",", "\"\<RandomSample\>\""}], "]"}], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", 
                  RowBox[{
                   RowBox[{"#", "=!=", 
                    RowBox[{"{", "\"\<\>\"", "}"}]}], "&"}], ",", 
                  "SYLLABLECOUNT", ",", 
                  RowBox[{"SYLLABLECOUNT", "+", "2"}]}], "]"}]}]}], "]"}]}], ";",
             "\[IndentingNewLine]", 
            RowBox[{"newAvgWordsPhonetics", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"StringJoin", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Lookup", "[", 
                   RowBox[{
                    RowBox[{"Association", "[", 
                    RowBox[{"Reverse", "/@", 
                    RowBox[{"Normal", "[", "symbolMap", "]"}]}], "]"}], ",", 
                    "#", ",", "#"}], "]"}], "&"}], "/@", 
                 RowBox[{"Characters", "[", "#", "]"}]}], "]"}], "&"}], "/@", 
              
              RowBox[{"Sort", "@", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"DeleteDuplicates", "[", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{"wordzPhon", "[", "]"}], ",", "15"}], "]"}], 
                  "]"}], ",", "convertedTrainList"}], "]"}]}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"updateProgress", "[", 
             RowBox[{"100", ",", "\"\<Complete!\>\""}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"isRunning", "=", "False"}], ";"}]}], "]"}], ",", 
         RowBox[{"Method", "->", "\"\<Queued\>\""}], ",", 
         RowBox[{"Enabled", "->", 
          RowBox[{"Dynamic", "[", 
           RowBox[{"!", "isRunning"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"(*", 
        RowBox[{"Progress", " ", "Bar"}], "*)"}], 
       RowBox[{"Dynamic", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"isRunning", "||", 
           RowBox[{"progress", ">", "0"}]}], ",", 
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"ProgressIndicator", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", 
                RowBox[{"progress", "/", "100"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "]"}], ",", 
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", "progressLabel", "]"}], ",", "Gray", ",",
                "12"}], "]"}]}], "}"}], "]"}], ",", "\"\<\>\""}], "]"}], 
        "]"}], ",", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"mostFreqCharWord", "===", "\"\<\>\""}], ",", "\"\<\>\"", ",", 
          RowBox[{"Panel", "[", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<Most frequent character word: \>\"", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"mostFreqCharWord", ",", "Blue", ",", "Bold"}], 
                  "]"}]}], "}"}], "]"}], ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<Generated digram-based words: \>\"", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"Riffle", "[", 
                    RowBox[{"mostDigramGenerated", ",", "\"\<, \>\""}], "]"}],
                     "]"}], ",", 
                   RowBox[{"Darker", "@", "Green"}]}], "]"}]}], "}"}], "]"}], 
              ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<Best word (genetic algorithm): \>\"", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"bestWordGeneticPool", ",", 
                   RowBox[{"Darker", "@", "Red"}], ",", "Bold"}], "]"}]}], 
                "}"}], "]"}], ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<Best word (evolution algorithm): \>\"", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{"bestWord", ",", "Purple", ",", "Bold"}], "]"}]}], 
                "}"}], "]"}], ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<Neural network generated words: \>\"", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"Riffle", "[", 
                    RowBox[{"newAvgWords", ",", "\"\<, \>\""}], "]"}], "]"}], 
                   ",", "Orange", ",", "Bold"}], "]"}]}], "}"}], "]"}], ",", 
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"\"\<Neural network phonetic words: \>\"", ",", 
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"Riffle", "[", 
                    RowBox[{"newAvgWordsPhonetics", ",", "\"\<, \>\""}], 
                    "]"}], "]"}], ",", 
                   RowBox[{"RGBColor", "[", 
                    RowBox[{"0.6", ",", "0.2", ",", "0.8"}], "]"}], ",", 
                   "Bold"}], "]"}]}], "}"}], "]"}]}], "}"}], "]"}], "]"}]}], 
         "]"}], "]"}]}], "}"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.960989221594701*^9, 3.960989221594749*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"499fbc62-9a0c-4a87-ac09-291835adf0f8"],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`keyWord$$ = 
  "sun", $CellContext`mostFreqCharWord$$ = 
  "", $CellContext`mostDigramGenerated$$ = {}, $CellContext`SYLLABLECOUNT$$ = 
  0, $CellContext`bestWordGeneticPool$$ = "", $CellContext`bestWord$$ = 
  "", $CellContext`newAvgWords$$ = {}, $CellContext`newAvgWordsPhonetics$$ = \
{}, $CellContext`progress$$ = 0, $CellContext`progressLabel$$ = 
  "Ready", $CellContext`isRunning$$ = False}, 
  PanelBox[
   TagBox[GridBox[{
      {
       StyleBox["\<\"\[Mu]Lang Lexicon Generator\"\>",
        StripOnInput->False,
        FontSize->14,
        FontWeight->Bold]},
      {
       TemplateBox[{"\"Enter keyword: \"", 
         InputFieldBox[
          Dynamic[$CellContext`keyWord$$], String]},
        "RowDefault"]},
      {
       ButtonBox["\<\"Generate\"\>",
        Appearance->Automatic,
        ButtonFunction:>
         Module[{$CellContext`languages$, $CellContext`rawTranslations$, \
$CellContext`translatedList$, $CellContext`charLists$, $CellContext`avgLen$, \
$CellContext`augmentedLists$, $CellContext`transposed$, \
$CellContext`mostFreqChar$, $CellContext`positionedDigrams$, \
$CellContext`groupedByPosition$, $CellContext`countsByPosition$, \
$CellContext`topDigramsByPosition$, $CellContext`generateWord$, \
$CellContext`populationSize$, $CellContext`generations$, \
$CellContext`mutationRate$, $CellContext`fitnessFunction$, \
$CellContext`population$, $CellContext`randomString$, $CellContext`allBest$, \
$CellContext`words$, $CellContext`charSet$, $CellContext`MAXLENGTH$, \
$CellContext`allPopulations$, $CellContext`avgFitnessPerGen$, \
$CellContext`phoneticDifference$, $CellContext`bestCandidate$, \
$CellContext`fitnesses$, $CellContext`parents$, $CellContext`baseWord$, \
$CellContext`testList$, $CellContext`padChar$, $CellContext`baseWordStates$, \
$CellContext`targetWords$, $CellContext`GENERATIONS$, \
$CellContext`averageLength$, $CellContext`allPossibleChars$, \
$CellContext`rawFrequencies$, $CellContext`charFreqWeights$, \
$CellContext`initialState$, $CellContext`evolutionResults$, \
$CellContext`finalWord$, $CellContext`bestDistance$, \
$CellContext`testPositions$, $CellContext`positionDict$, $CellContext`net$, \
$CellContext`vocabulary$, $CellContext`results$, $CellContext`trainednet$, \
$CellContext`generator$, $CellContext`wordz$, $CellContext`netPhon$, \
$CellContext`symbolMap$, $CellContext`ipaList$, \
$CellContext`convertedTrainList$, $CellContext`vocabularyPhon$, \
$CellContext`resultsPhon$, $CellContext`trainednetPhon$, \
$CellContext`generatorPhon$, $CellContext`wordzPhon$, \
$CellContext`updateProgress$}, $CellContext`isRunning$$ = 
           True; $CellContext`progress$$ = 0; $CellContext`progressLabel$$ = 
           "Starting..."; $CellContext`updateProgress$[
             Pattern[$CellContext`value$, 
              Blank[]], 
             Pattern[$CellContext`label$, 
              
              Blank[]]] := ($CellContext`progress$$ = $CellContext`value$; \
$CellContext`progressLabel$$ = $CellContext`label$; Pause[0.1]; 
            Null); $CellContext`updateProgress$[
           5, "Fetching translations..."]; $CellContext`languages$ = 
           EntityList[
             EntityClass[
             "Language", {
              "TotalSpeakers" -> 
               TakeLargest[100]}]]; $CellContext`rawTranslations$ = 
           KeyValueMap[# -> First[#2]& , 
             
             WordTranslation[$CellContext`keyWord$$, \
$CellContext`languages$]]; $CellContext`translatedList$ = DeleteCases[
             DeleteDuplicates[
              ToLowerCase[
               Select[
                Transliterate[
                 Values[$CellContext`rawTranslations$]], StringMatchQ[#, 
                 Repeated[
                  CharacterRange["A", "z"]]]& ]]], 
             "notavailable"]; $CellContext`updateProgress$[
           15, "Processing character frequencies..."]; \
$CellContext`charLists$ = 
           Map[Characters, $CellContext`translatedList$]; \
$CellContext`avgLen$ = Round[
             Mean[
              Map[
              Length, $CellContext`charLists$]]]; \
$CellContext`augmentedLists$ = Map[
             Function[$CellContext`chars$, 
              If[Length[$CellContext`chars$] > $CellContext`avgLen$, 
               Take[$CellContext`chars$, $CellContext`avgLen$], 
               
               PadRight[$CellContext`chars$, $CellContext`avgLen$, 
                "-"]]], $CellContext`charLists$]; $CellContext`transposed$ = 
           Transpose[$CellContext`augmentedLists$]; \
$CellContext`mostFreqChar$ = Map[If[DeleteCases[#, "-"] === {}, "-", 
              First[
               First[
                SortBy[
                 Tally[
                  DeleteCases[#, "-"]], -
                 Last[#]& ]]]]& , $CellContext`transposed$]; \
$CellContext`mostFreqCharWord$$ = StringJoin[
             
             DeleteCases[$CellContext`mostFreqChar$, 
              "-"]]; $CellContext`SYLLABLECOUNT$$ = Round[
             Mean[
              Map[Length, 
               Map[
               ResourceFunction[
                "WordSyllables"][#]& , $CellContext`translatedList$]]]]; \
$CellContext`updateProgress$[
           25, "Generating digram-based words..."]; \
$CellContext`positionedDigrams$ = Flatten[
             Table[
              If[
              StringLength[$CellContext`word] >= $CellContext`pos + 
                1, {$CellContext`pos, 
                
                StringTake[$CellContext`word, {$CellContext`pos, \
$CellContext`pos + 1}]}, 
               Nothing], {$CellContext`word, $CellContext`translatedList$}, \
{$CellContext`pos, StringLength[$CellContext`word] - 1}], 
             1]; $CellContext`groupedByPosition$ = 
           GroupBy[$CellContext`positionedDigrams$, First -> 
             Last]; $CellContext`countsByPosition$ = AssociationMap[Counts[
              $CellContext`groupedByPosition$[#]]& , 
             
             Keys[$CellContext`groupedByPosition$]]; \
$CellContext`topDigramsByPosition$ = Table[
             Keys[
              TakeLargestBy[
               $CellContext`countsByPosition$[$CellContext`pos], Identity, 
               UpTo[1]]], {$CellContext`pos, 
              Sort[
               
               Keys[$CellContext`countsByPosition$]]}]; \
$CellContext`generateWord$[] := 
           Module[{$CellContext`numSyllables$, $CellContext`selectedLists$, \
$CellContext`syllables$}, $CellContext`numSyllables$ = RandomInteger[{
                 Max[1, $CellContext`SYLLABLECOUNT$$ - 2], 
                 Min[
                  
                  Length[$CellContext`topDigramsByPosition$], \
$CellContext`SYLLABLECOUNT$$ + 2]}]; $CellContext`selectedLists$ = 
              Take[$CellContext`topDigramsByPosition$, \
$CellContext`numSyllables$]; $CellContext`syllables$ = 
              Map[RandomChoice, $CellContext`selectedLists$]; 
             StringJoin[$CellContext`syllables$]]; \
$CellContext`mostDigramGenerated$$ = DeleteDuplicates[
             Table[
              $CellContext`generateWord$[], {
              10}]]; $CellContext`updateProgress$[
           35, "Running genetic algorithm..."]; $CellContext`populationSize$ = 
           100; $CellContext`generations$ = 5; $CellContext`mutationRate$ = 
           0.2; $CellContext`topDigramsByPosition$ = Table[
             Keys[
              TakeLargestBy[
               $CellContext`countsByPosition$[$CellContext`pos], Identity, 
               UpTo[5]]], {$CellContext`pos, 
              Sort[
               
               Keys[$CellContext`countsByPosition$]]}]; $CellContext`allBest$ = \
{}; $CellContext`words$ = $CellContext`translatedList$; $CellContext`charSet$ = 
           Flatten[$CellContext`topDigramsByPosition$]; \
$CellContext`MAXLENGTH$ = Round[
             Mean[
              Map[
              StringLength, $CellContext`words$]]]; \
$CellContext`allPopulations$ = {}; $CellContext`avgFitnessPerGen$ = {}; \
$CellContext`phoneticDifference$[
             Pattern[$CellContext`word1, 
              Blank[String]], 
             Pattern[$CellContext`word2, 
              Blank[String]]] := 
           Module[{$CellContext`soundex1, $CellContext`soundex2}, \
$CellContext`soundex1 = 
              ResourceFunction[
               "Soundex"][$CellContext`word1]; $CellContext`soundex2 = 
              ResourceFunction["Soundex"][$CellContext`word2]; 
             If[$CellContext`soundex1 === $CellContext`soundex2, 0, 
               
               EditDistance[$CellContext`soundex1, $CellContext`soundex2]]]; \
$CellContext`fitnessFunction$[
             Pattern[$CellContext`candidate$, 
              Blank[String]]] := 
           Module[{$CellContext`maxEditDistance$, \
$CellContext`maxPhoneticDistance$, $CellContext`editScore$, \
$CellContext`phoneticScore$}, $CellContext`maxEditDistance$ = Max[
                Map[
                EditDistance[$CellContext`candidate$, #]& , \
$CellContext`words$]]; $CellContext`maxPhoneticDistance$ = Max[
                
                Map[$CellContext`phoneticDifference$[$CellContext`candidate$, \
#]& , $CellContext`words$]]; $CellContext`editScore$ = 
              If[$CellContext`maxEditDistance$ > 0, 1 - N[Mean[
                   Map[
                   EditDistance[$CellContext`candidate$, #]& , \
$CellContext`words$]]/$CellContext`maxEditDistance$], 
                1]; $CellContext`phoneticScore$ = 
              If[$CellContext`maxPhoneticDistance$ > 0, 1 - N[Mean[
                   
                   Map[$CellContext`phoneticDifference$[$CellContext`\
candidate$, #]& , $CellContext`words$]]/$CellContext`maxPhoneticDistance$], 
                1]; 0.5 $CellContext`editScore$ + 
              0.5 $CellContext`phoneticScore$]; $CellContext`randomString$[] := 
           StringJoin[
             RandomChoice[
              Flatten[$CellContext`topDigramsByPosition$], 
              
              RandomInteger[{$CellContext`SYLLABLECOUNT$$, \
$CellContext`SYLLABLECOUNT$$ + 2}]]]; $CellContext`population$ = Table[
             $CellContext`randomString$[], {$CellContext`populationSize$}]; \
$CellContext`lengthVaryTwoPointCrossover[
             Pattern[$CellContext`p1$, 
              Blank[]], 
             Pattern[$CellContext`p2$, 
              Blank[]]] := 
           Module[{$CellContext`len1$, $CellContext`len2$, \
$CellContext`minLen$, $CellContext`pt1$, $CellContext`pt2$, $CellContext`c1$, \
$CellContext`c2$, $CellContext`child$}, $CellContext`len1$ = 
              StringLength[$CellContext`p1$]; $CellContext`len2$ = 
              StringLength[$CellContext`p2$]; $CellContext`minLen$ = 
              Min[$CellContext`len1$, $CellContext`len2$]; \
{$CellContext`pt1$, $CellContext`pt2$} = Sort[
                RandomSample[
                 Range[$CellContext`minLen$], 2]]; $CellContext`c1$ = 
              Characters[$CellContext`p1$]; $CellContext`c2$ = 
              Characters[$CellContext`p2$]; $CellContext`child$ = Join[
                Take[$CellContext`c1$, $CellContext`pt1$ - 1], 
                
                Take[$CellContext`c2$, {$CellContext`pt1$, \
$CellContext`pt2$}], 
                Drop[$CellContext`c1$, $CellContext`pt2$]]; 
             If[Length[$CellContext`child$] > $CellContext`MAXLENGTH$, \
$CellContext`child$ = Take[$CellContext`child$, $CellContext`MAXLENGTH$]]; 
             StringJoin[$CellContext`child$]]; $CellContext`mutate[
             Pattern[$CellContext`str$, 
              Blank[]]] := StringJoin[
             Table[
              If[RandomReal[] < $CellContext`mutationRate$, 
               
               RandomChoice[$CellContext`charSet$], $CellContext`c], \
{$CellContext`c, 
               Characters[$CellContext`str$]}]]; $CellContext`allBest$ = 
           Table[If[Mod[$CellContext`gen, 2] == 0, 
               $CellContext`updateProgress$[
               35 + $CellContext`gen 2, "Genetic algorithm generation " <> 
                ToString[$CellContext`gen] <> "/" <> 
                ToString[$CellContext`generations$]]]; \
$CellContext`fitnesses$ = 
              Map[$CellContext`fitnessFunction$, $CellContext`population$]; \
$CellContext`bestCandidate$ = Part[$CellContext`population$, 
                First[
                 Ordering[$CellContext`fitnesses$, -1]]]; 
             AppendTo[$CellContext`avgFitnessPerGen$, 
               N[
                Mean[$CellContext`fitnesses$]]]; 
             AppendTo[$CellContext`allPopulations$, $CellContext`population$]; \
$CellContext`parents$ = Part[
                TakeLargestBy[
                 
                 Transpose[{$CellContext`population$, \
$CellContext`fitnesses$}], Last, 
                 Ceiling[$CellContext`populationSize$/2]], All, 
                1]; $CellContext`population$ = Table[
                $CellContext`mutate[
                 $CellContext`lengthVaryTwoPointCrossover[
                  RandomChoice[$CellContext`parents$], 
                  
                  RandomChoice[$CellContext`parents$]]], \
{$CellContext`populationSize$}]; $CellContext`bestCandidate$, \
{$CellContext`gen, 1, $CellContext`generations$}]; 
          AppendTo[$CellContext`allPopulations$, $CellContext`population$]; \
$CellContext`bestWordGeneticPool$$ = First[
             
             MaximalBy[$CellContext`allBest$, $CellContext`fitnessFunction$]]; \
$CellContext`updateProgress$[
           50, "Running evolution algorithm..."]; $CellContext`baseWord$ = 
           StringJoin[
             RandomChoice[
              CharacterRange["a", "z"], 
              5]]; $CellContext`testList$ = $CellContext`translatedList$; \
$CellContext`padChar$ = 
           "_"; $CellContext`baseWordStates$ = {$CellContext`baseWord$}; \
$CellContext`targetWords$ = {}; $CellContext`GENERATIONS$ = 
           1000; $CellContext`averageLength$ = Round[
             Mean[
              Map[
              StringLength, $CellContext`testList$]]]; \
$CellContext`getAllChars[
             Pattern[$CellContext`wordList$, 
              Blank[]]] := 
           Module[{$CellContext`maxLen$, $CellContext`paddedWords$, \
$CellContext`allChars$}, $CellContext`maxLen$ = Max[
                Map[
                StringLength, $CellContext`wordList$]]; \
$CellContext`paddedWords$ = 
              Map[StringPadRight[#, $CellContext`maxLen$, \
$CellContext`padChar$]& , $CellContext`wordList$]; $CellContext`allChars$ = 
              Union[
                Flatten[
                 Map[
                 Characters, $CellContext`paddedWords$]]]; \
$CellContext`allChars$]; $CellContext`pad[
             Pattern[$CellContext`w1$, 
              Blank[]], 
             Pattern[$CellContext`w2$, 
              Blank[]]] := 
           Module[{$CellContext`maxLen$, $CellContext`p1$, $CellContext`p2$}, \
$CellContext`maxLen$ = Max[
                StringLength[$CellContext`w1$], 
                StringLength[$CellContext`w2$]]; {
               
               StringPadRight[$CellContext`w1$, $CellContext`maxLen$, \
$CellContext`padChar$], 
               
               StringPadRight[$CellContext`w2$, $CellContext`maxLen$, \
$CellContext`padChar$]}]; $CellContext`mostDifferentWord[
             Pattern[$CellContext`base, 
              Blank[]], 
             Pattern[$CellContext`list, 
              Blank[]]] := 
           Module[{$CellContext`diffs}, $CellContext`diffs = 
              Table[{$CellContext`word, 
                 
                 EditDistance[$CellContext`base, $CellContext`word]}, \
{$CellContext`word, $CellContext`list}]; First[
               
               MaximalBy[$CellContext`diffs, 
                Last]]]; $CellContext`findDifferingIndices[
             Pattern[$CellContext`str1, 
              Blank[]], 
             Pattern[$CellContext`str2, 
              Blank[]]] := 
           Module[{$CellContext`minLen, $CellContext`diffs}, \
$CellContext`minLen = Min[
                StringLength[$CellContext`str1], 
                StringLength[$CellContext`str2]]; $CellContext`diffs = 
              Select[
                Range[$CellContext`minLen], 
                StringTake[$CellContext`str1, {#}] =!= 
                StringTake[$CellContext`str2, {#}]& ]; $CellContext`diffs]; \
$CellContext`layoutTestWords[
             Pattern[$CellContext`baseWord, 
              Blank[]], 
             Pattern[$CellContext`testList, 
              Blank[]]] := 
           Module[{$CellContext`angles, $CellContext`positions}, \
$CellContext`angles = Part[
                Subdivide[0, 2 Pi, 
                 Length[$CellContext`testList]], 
                Span[1, -2]]; $CellContext`positions = Table[
                
                With[{$CellContext`dist = 
                  EditDistance[$CellContext`baseWord, 
                    Part[$CellContext`testList, $CellContext`i]]}, {
                  Part[$CellContext`testList, $CellContext`i], Cos[
                    
                    Part[$CellContext`angles, $CellContext`i]] \
$CellContext`dist, Sin[
                    
                    Part[$CellContext`angles, $CellContext`i]] \
$CellContext`dist}], {$CellContext`i, 1, 
                 
                 Length[$CellContext`testList]}]; $CellContext`positions]; \
$CellContext`calculateCharFrequencies[
             Pattern[$CellContext`wordList$, 
              Blank[]]] := 
           Module[{$CellContext`maxLen$, $CellContext`paddedWords$, \
$CellContext`freqTables$}, $CellContext`maxLen$ = Max[
                Map[
                StringLength, $CellContext`wordList$]]; \
$CellContext`paddedWords$ = 
              Map[StringPadRight[#, $CellContext`maxLen$, \
$CellContext`padChar$]& , $CellContext`wordList$]; $CellContext`freqTables$ = 
              Table[
                Counts[
                 Map[
                 StringTake[#, {$CellContext`pos}]& , \
$CellContext`paddedWords$]], {$CellContext`pos, 
                 1, $CellContext`maxLen$}]; $CellContext`freqTables$]; \
$CellContext`normalizeFrequencies[
             Pattern[$CellContext`freqTable, 
              Blank[]]] := 
           Module[{$CellContext`nonZeroEntries, $CellContext`total}, \
$CellContext`nonZeroEntries = 
              Select[$CellContext`freqTable, # > 0& ]; $CellContext`total = 
              Total[
                Values[$CellContext`nonZeroEntries]]; 
             If[$CellContext`total == 0, $CellContext`freqTable, <|
                Map[# -> If[$CellContext`freqTable[#] > 0, 
                   N[$CellContext`freqTable[#]/$CellContext`total], 0]& , 
                 
                 Keys[$CellContext`freqTable]]|>]]; \
$CellContext`allPossibleChars$ = \
$CellContext`getAllChars[$CellContext`testList$]; \
$CellContext`rawFrequencies$ = \
$CellContext`calculateCharFrequencies[$CellContext`testList$]; \
$CellContext`charFreqWeights$ = Map[$CellContext`normalizeFrequencies[
              AssociationThread[$CellContext`allPossibleChars$, 
               
               Lookup[#, $CellContext`allPossibleChars$, 
                0]]]& , $CellContext`rawFrequencies$]; \
$CellContext`weightedRandomTarget[
             Pattern[$CellContext`base, 
              Blank[]], 
             Pattern[$CellContext`list, 
              Blank[]]] := 
           Module[{$CellContext`diffs, $CellContext`total, \
$CellContext`weights}, $CellContext`diffs = Table[{$CellContext`word, 
                 
                 EditDistance[$CellContext`base, $CellContext`word]}, \
{$CellContext`word, $CellContext`list}]; $CellContext`total = Total[
                Part[$CellContext`diffs, All, 2]]; If[$CellContext`total == 0, 
               
               RandomChoice[$CellContext`list], $CellContext`weights = 
                Part[$CellContext`diffs, All, 2]^3/Total[
                 Part[$CellContext`diffs, All, 2]^3]; 
               RandomChoice[$CellContext`weights -> 
                 Part[$CellContext`diffs, All, 
                   1]]]]; $CellContext`randomMutation[
             Pattern[$CellContext`word$, 
              Blank[]], 
             Optional[
              Pattern[$CellContext`rate$, 
               Blank[]], 0.05]] := 
           Module[{$CellContext`chars$, $CellContext`mutated$}, \
$CellContext`chars$ = Characters[$CellContext`word$]; $CellContext`mutated$ = 
              Map[If[RandomReal[] < $CellContext`rate$, 
                 RandomChoice[
                  Join[
                   CharacterRange[
                   "a", "z"], {$CellContext`padChar$}]], #]& , \
$CellContext`chars$]; 
             StringJoin[$CellContext`mutated$]]; \
$CellContext`evolveTowardWeighted[
             Pattern[$CellContext`base$, 
              Blank[]], 
             Pattern[$CellContext`target$, 
              Blank[]]] := 
           Module[{$CellContext`basePadded$, $CellContext`targetPadded$, \
$CellContext`diffIndices$, $CellContext`i$, $CellContext`targetChar$, \
$CellContext`baseChar$, $CellContext`weight$, $CellContext`chars$, \
$CellContext`weights$, $CellContext`choice$}, {$CellContext`basePadded$, \
$CellContext`targetPadded$} = $CellContext`pad[$CellContext`base$, \
$CellContext`target$]; $CellContext`diffIndices$ = \
$CellContext`findDifferingIndices[$CellContext`basePadded$, \
$CellContext`targetPadded$]; 
             If[$CellContext`diffIndices$ === {}, $CellContext`basePadded$, \
$CellContext`i$ = 
                RandomChoice[$CellContext`diffIndices$]; \
$CellContext`targetChar$ = 
                StringTake[$CellContext`targetPadded$, {$CellContext`i$, \
$CellContext`i$}]; $CellContext`baseChar$ = 
                StringTake[$CellContext`basePadded$, {$CellContext`i$, \
$CellContext`i$}]; $CellContext`weight$ = 
                If[$CellContext`i$ <= 
                  Length[$CellContext`charFreqWeights$], $CellContext`chars$ = 
                   Keys[
                    
                    Part[$CellContext`charFreqWeights$, $CellContext`i$]]; \
$CellContext`weights$ = Values[
                    
                    Part[$CellContext`charFreqWeights$, $CellContext`i$]]; \
$CellContext`choice$ = 
                   RandomChoice[$CellContext`weights$ -> $CellContext`chars$]; 
                  StringReplacePart[$CellContext`basePadded$, \
$CellContext`choice$, {$CellContext`i$, $CellContext`i$}], \
$CellContext`basePadded$]]]; $CellContext`baseWordStates$ = \
{$CellContext`baseWord$}; $CellContext`targetWords$ = {}; \
$CellContext`bestWord$$ = $CellContext`baseWord$; $CellContext`bestDistance$ = 
           Mean[
             Map[
             EditDistance[$CellContext`baseWord$, #]& , \
$CellContext`testList$]]; $CellContext`evolutionStep[{
              Pattern[$CellContext`currentWord$, 
               Blank[]], 
              Pattern[$CellContext`currentBest$, 
               Blank[]], 
              Pattern[$CellContext`bestDist$, 
               Blank[]], 
              Pattern[$CellContext`targetHist$, 
               Blank[]], 
              Pattern[$CellContext`stateHist$, 
               Blank[]]}] := 
           Module[{$CellContext`target$, $CellContext`newWord$, \
$CellContext`newDist$}, $CellContext`target$ = \
$CellContext`weightedRandomTarget[$CellContext`currentWord$, \
$CellContext`testList$]; $CellContext`newWord$ = StringReplace[
                $CellContext`evolveTowardWeighted[$CellContext`currentWord$, \
$CellContext`target$], "_" -> ""]; $CellContext`newDist$ = Mean[
                Map[
                EditDistance[$CellContext`newWord$, #]& , \
$CellContext`testList$]]; 
             If[$CellContext`newDist$ < $CellContext`bestDist$, \
{$CellContext`newWord$, $CellContext`newWord$, $CellContext`newDist$, 
                Append[$CellContext`targetHist$, $CellContext`target$], 
                
                Append[$CellContext`stateHist$, $CellContext`newWord$]}, \
{$CellContext`newWord$, $CellContext`currentBest$, $CellContext`bestDist$, 
                Append[$CellContext`targetHist$, $CellContext`target$], 
                
                Append[$CellContext`stateHist$, $CellContext`newWord$]}]]; \
$CellContext`initialState$ = {$CellContext`baseWord$, $CellContext`baseWord$, 
             
             Mean[
              Map[
              EditDistance[$CellContext`baseWord$, #]& , \
$CellContext`testList$]], {}, {$CellContext`baseWord$}}; \
$CellContext`evolutionResults$ = Table[If[Mod[$CellContext`gen, 100] == 0, 
               $CellContext`updateProgress$[
               50 + ($CellContext`gen/$CellContext`GENERATIONS$) 15, 
                "Evolution step " <> ToString[$CellContext`gen] <> "/" <> 
                ToString[$CellContext`GENERATIONS$]]]; \
$CellContext`evolutionStep[
               If[$CellContext`gen == 1, $CellContext`initialState$, 
                
                Part[$CellContext`evolutionResults$, $CellContext`gen - 
                 1]]], {$CellContext`gen, 
              1, $CellContext`GENERATIONS$}]; {$CellContext`finalWord$, \
$CellContext`bestWord$$, $CellContext`bestDistance$, \
$CellContext`targetWords$, $CellContext`baseWordStates$} = 
           Last[$CellContext`evolutionResults$]; $CellContext`testPositions$ = \
$CellContext`layoutTestWords[
             
             Part[$CellContext`baseWordStates$, 
              1], $CellContext`testList$]; $CellContext`positionDict$ = <|
             Map[Part[#, 1] -> {
                Part[#, 2], 
                
                Part[#, 
                 3]}& , $CellContext`testPositions$]|>; \
$CellContext`bestWord$$ = 
           StringReplace[$CellContext`bestWord$$, "_" -> 
             ""]; $CellContext`updateProgress$[
           70, "Training neural network (standard)..."]; $CellContext`net$ = 
           NetModel[
            "Wolfram English Character-Level Language Model V1", 
             "TrainingNet"]; $CellContext`vocabulary$ = 
           Characters[
            "\t\n !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\
\\]^_`abcdefghijklmnopqrstuvwxyz{}\[EAcute]"]; $CellContext`net$ = 
           NetReplacePart[$CellContext`net$, "Input" -> 
             NetEncoder[{
               "Characters", {$CellContext`vocabulary$, {
                  StartOfString, EndOfString} -> 
                 97}}]]; $CellContext`results$ = 
           NetTrain[$CellContext`net$, <|
             "Input" -> $CellContext`translatedList$|>, All, LossFunction -> 
             "Loss", MaxTrainingRounds -> 500, TrainingProgressFunction -> 
             Function[{$CellContext`assoc$}, 
               $CellContext`updateProgress$[
               70 + ($CellContext`assoc$["Round"]/500) 15, 
                "Training neural network: round " <> ToString[
                  $CellContext`assoc$["Round"]] <> 
                "/500"]]]; $CellContext`trainednet$ = $CellContext`results$[
            "TrainedNet"]; $CellContext`generator$ = NetReplacePart[
             NetExtract[$CellContext`trainednet$, "predict"], {
             "Input" -> NetEncoder[{
                "Characters", {$CellContext`vocabulary$, EndOfString}, 
                 "TargetLength" -> 1}], "Output" -> NetDecoder[{"Class", 
                 
                 Append[$CellContext`vocabulary$, 
                  ""]}]}]; $CellContext`wordz$[] := 
           With[{$CellContext`obj$ = NetStateObject[$CellContext`generator$]}, 
             StringJoin[
              NestWhileList[$CellContext`obj$[
                Last[#], "RandomSample"]& , {
               "", ""}, # =!= {
                ""}& , $CellContext`SYLLABLECOUNT$$, \
$CellContext`SYLLABLECOUNT$$ + 2]]]; $CellContext`newAvgWords$$ = Sort[
             Complement[
              Table[
               $CellContext`wordz$[], 
               15], $CellContext`translatedList$]]; \
$CellContext`updateProgress$[
           85, "Training phonetic neural network..."]; $CellContext`netPhon$ = 
           NetModel[
            "Wolfram English Character-Level Language Model V1", 
             "TrainingNet"]; $CellContext`symbolMap$ = <|
            "\[Theta]" -> "1", "\[Eth]" -> "2", "\:0283" -> "3", "\:0292" -> 
             "4", "\:026a" -> "5", "\:025b" -> "6", "\[AE]" -> "7", "\:0254" -> 
             "8", "\:028a" -> "9", "\:028c" -> "0", "\:0259" -> ".", "\:025c" -> 
             ",", "\:014b" -> ";", "\:0261" -> ":", "\:0251" -> "!", "\:02c8" -> 
             "@", "\:02cc" -> "=", "\:0252" -> "*", "\:025d" -> 
             "["|>; $CellContext`ipaList$ = Map[Part[
              ResourceFunction["WordPhoneticSyllabify"][#], 
              2]& , $CellContext`translatedList$]; \
$CellContext`convertedTrainList$ = Map[StringJoin[
              Map[Lookup[$CellContext`symbolMap$, #, #]& , 
               Characters[#]]]& , 
             
             StringReplace[$CellContext`ipaList$, "\[Bullet]" -> 
              ""]]; $CellContext`vocabularyPhon$ = 
           Characters[
            "\t\n !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\
\\]^_`abcdefghijklmnopqrstuvwxyz{}\[Bullet]"]; $CellContext`netPhon$ = 
           NetReplacePart[$CellContext`netPhon$, "Input" -> 
             NetEncoder[{
               "Characters", {$CellContext`vocabularyPhon$, {
                  StartOfString, EndOfString} -> 
                 97}}]]; $CellContext`resultsPhon$ = 
           NetTrain[$CellContext`netPhon$, <|
             "Input" -> $CellContext`convertedTrainList$|>, All, LossFunction -> 
             "Loss", MaxTrainingRounds -> 500, TrainingProgressFunction -> 
             Function[{$CellContext`assoc$}, 
               $CellContext`updateProgress$[
               85 + ($CellContext`assoc$["Round"]/500) 14, 
                "Training phonetic network: round " <> ToString[
                  $CellContext`assoc$["Round"]] <> 
                "/500"]]]; $CellContext`trainednetPhon$ = \
$CellContext`resultsPhon$["TrainedNet"]; $CellContext`generatorPhon$ = 
           NetReplacePart[
             NetExtract[$CellContext`trainednetPhon$, "predict"], {
             "Input" -> NetEncoder[{
                "Characters", {$CellContext`vocabularyPhon$, EndOfString}, 
                 "TargetLength" -> 1}], "Output" -> NetDecoder[{"Class", 
                 
                 Append[$CellContext`vocabularyPhon$, 
                  ""]}]}]; $CellContext`wordzPhon$[] := 
           With[{$CellContext`obj$ = 
              NetStateObject[$CellContext`generatorPhon$]}, 
             StringJoin[
              NestWhileList[$CellContext`obj$[
                Last[#], "RandomSample"]& , {
               "", ""}, # =!= {
                ""}& , $CellContext`SYLLABLECOUNT$$, \
$CellContext`SYLLABLECOUNT$$ + 2]]]; $CellContext`newAvgWordsPhonetics$$ = 
           Map[StringJoin[
              Map[Lookup[<|
                 Map[Reverse, 
                  Normal[$CellContext`symbolMap$]]|>, #, #]& , 
               Characters[#]]]& , 
             Sort[
              Complement[
               DeleteDuplicates[
                Table[
                 $CellContext`wordzPhon$[], 
                 15]], $CellContext`convertedTrainList$]]]; \
$CellContext`updateProgress$[100, "Complete!"]; $CellContext`isRunning$$ = 
           False; Null],
        Enabled->Dynamic[
          Not[$CellContext`isRunning$$]],
        Evaluator->Automatic,
        Method->"Queued"]},
      {
       DynamicBox[ToBoxes[
         If[
          Or[$CellContext`isRunning$$, $CellContext`progress$$ > 0], 
          Column[{
            ProgressIndicator[
             Dynamic[$CellContext`progress$$/100], {0, 1}], 
            Style[
             Dynamic[$CellContext`progressLabel$$], Gray, 12]}], ""], 
         StandardForm],
        ImageSizeCache->{0., {0., 3.2109375}}]},
      {
       DynamicBox[ToBoxes[
         If[$CellContext`mostFreqCharWord$$ === "", "", 
          Panel[
           Column[{
             Row[{"Most frequent character word: ", 
               Style[$CellContext`mostFreqCharWord$$, Blue, Bold]}], 
             Row[{"Generated digram-based words: ", 
               Style[
                Row[
                 Riffle[$CellContext`mostDigramGenerated$$, ", "]], 
                Darker[Green]]}], 
             Row[{"Best word (genetic algorithm): ", 
               Style[$CellContext`bestWordGeneticPool$$, 
                Darker[Red], Bold]}], 
             Row[{"Best word (evolution algorithm): ", 
               Style[$CellContext`bestWord$$, Purple, Bold]}], 
             Row[{"Neural network generated words: ", 
               Style[
                Row[
                 Riffle[$CellContext`newAvgWords$$, ", "]], Orange, Bold]}], 
             Row[{"Neural network phonetic words: ", 
               Style[
                Row[
                 Riffle[$CellContext`newAvgWordsPhonetics$$, ", "]], 
                RGBColor[0.6, 0.2, 0.8], Bold]}]}]]], StandardForm],
        ImageSizeCache->{0., {0., 3.2109375}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{3.960989222657269*^9},
 CellLabel->
  "Out[188]=",ExpressionUUID->"2a0873e5-b4dc-4613-9229-5d283e18e4dd"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"evolutionResults$535310\\\", \\\
\"\[LeftDoubleBracket]\\\", \\\"1\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"", 2, 189, 5, 26408870535716887731, "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.9609892435639477`*^9},
 CellLabel->"",ExpressionUUID->"c0f32465-a597-49fa-b633-2ef703a4804c"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"evolutionResults$535310\\\", \\\
\"\[LeftDoubleBracket]\\\", \\\"2\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"", 2, 189, 6, 26408870535716887731, "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.960989243616488*^9},
 CellLabel->"",ExpressionUUID->"c6c524a9-0d17-414b-8c61-dd47084b120e"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{\\\"evolutionResults$535310\\\", \\\
\"\[LeftDoubleBracket]\\\", \\\"3\\\", \\\"\[RightDoubleBracket]\\\"}]\\) is \
longer than depth of object.\"", 2, 189, 7, 26408870535716887731, "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.960989243632321*^9},
 CellLabel->"",ExpressionUUID->"c3d3ba19-693d-4dba-9375-1ec035537646"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Part\\\", \\\"::\\\", \
\\\"partd\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 189, 8, 26408870535716887731, "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.9609892436464777`*^9},
 CellLabel->"",ExpressionUUID->"ec669819-d78d-41b8-87ea-a997bfbaefbc"],

Cell[BoxData[
 TemplateBox[{
  "$RecursionLimit", "reclim", 
   "\"Recursion depth of \\!\\(\\*RowBox[{\\\"1024\\\"}]\\) exceeded.\"", 2, 
   189, 9, 26408870535716887731, "Local"},
  "MessageTemplate",
  BaseStyle->"MSG"]], "Message",
 CellChangeTimes->{3.9609892446501017`*^9},
 CellLabel->"",ExpressionUUID->"fe3413ab-c00e-423f-a6e3-2f7b39b26579"]
}, Open  ]]
},
WindowSize->{1080, 625.5},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>0.7 Inherited,
FrontEndVersion->"14.2 for Linux x86 (64-bit) (March 16, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b401335f-f359-41bf-ad23-474323392df8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 68597, 1472, 2588, "Input",ExpressionUUID->"499fbc62-9a0c-4a87-ac09-291835adf0f8"],
Cell[69176, 1496, 33112, 690, 92, "Output",ExpressionUUID->"2a0873e5-b4dc-4613-9229-5d283e18e4dd"],
Cell[102291, 2188, 451, 9, 18, "Message",ExpressionUUID->"c0f32465-a597-49fa-b633-2ef703a4804c"],
Cell[102745, 2199, 449, 9, 18, "Message",ExpressionUUID->"c6c524a9-0d17-414b-8c61-dd47084b120e"],
Cell[103197, 2210, 449, 9, 18, "Message",ExpressionUUID->"c3d3ba19-693d-4dba-9375-1ec035537646"],
Cell[103649, 2221, 431, 9, 18, "Message",ExpressionUUID->"ec669819-d78d-41b8-87ea-a997bfbaefbc"],
Cell[104083, 2232, 350, 8, 18, "Message",ExpressionUUID->"fe3413ab-c00e-423f-a6e3-2f7b39b26579"]
}, Open  ]]
}
]
*)

