(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    688316,      14430]
NotebookOptionsPosition[    674614,      14239]
NotebookOutlinePosition[    675080,      14257]
CellTagsIndexPosition[    675037,      14254]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Analysis of the Completeness and Efficiency of \
Quantum and Classical Gates",
 FontColor->RGBColor[
  0.79145494773785, 0.31950865949492635`, 0.09956511787594415]]], "Section",
 CellChangeTimes->{{3.960903172578684*^9, 3.960903182174656*^9}, {
   3.9609116496696663`*^9, 3.960911705676836*^9}, {3.960928990367964*^9, 
   3.960928996322605*^9}, 3.9609291767015057`*^9, {3.961059785786646*^9, 
   3.9610597968541756`*^9}, {3.9611046636662216`*^9, 
   3.9611046802842827`*^9}},ExpressionUUID->"4441f486-3a6f-dd4a-ad5c-\
8d763e46bea9"],

Cell[CellGroupData[{

Cell[TextData[{
 "Abstract:\n",
 StyleBox["This project begins by exploring classical logic gate structures, \
focusing on two-input one-output (2\[RightArrow]1) and two-input two-output \
(2\[RightArrow]2) gates to identify all functionally distinct pairs of \
classical operations. This analysis lays the foundation for understanding \
complexity and universality in small gate systems. We then extend this \
framework into the quantum regime, classifying all two-qubit quantum gates \
using the Cartan (KAK) decomposition. ", "Text",
  FontSize->15,
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Each quantum gate is mapped to a canonical triple within the Weyl \
chamber, a reduced geometric region that captures non-local behavior up to \
local unitary equivalence. The chamber is discretized at fixed resolution, \
and representative gates are generated for each point. Using Mikhlin \
invariants, we determine which gates are locally equivalent to universal \
entangling gates such as CNOT and the one with the highest efficiency. \
Visualizations include 3D plots of the Weyl chamber and 2D projections of \
quantum state transformations under these gates, offering a geometric and \
algebraic perspective on gate classification and universality across \
classical and quantum systems.",
  FontSize->15,
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n", "Text"],
 StyleBox["Introduction", "Subsection"]
}], "Section",
 CellChangeTimes->{{3.960911711000654*^9, 3.9609117191404953`*^9}, {
   3.9609117607549343`*^9, 3.960911761998638*^9}, {3.9609119032373943`*^9, 
   3.9609119250768967`*^9}, {3.960928980650341*^9, 3.96092898416551*^9}, {
   3.960929698509796*^9, 3.9609297173545647`*^9}, {3.960929758561804*^9, 
   3.9609297859530296`*^9}, {3.9609299589169025`*^9, 3.960929960515623*^9}, {
   3.9609726337758694`*^9, 3.96097264902931*^9}, {3.9609739156801777`*^9, 
   3.9609739188045635`*^9}, {3.9609748713533287`*^9, 
   3.9609748903876476`*^9}, {3.9610592103410473`*^9, 3.9610592227887783`*^9}, 
   3.9610597037788296`*^9, {3.9610598188366127`*^9, 3.9610598211227913`*^9}, 
   3.961078879035019*^9},ExpressionUUID->"7625f585-f566-b64d-be4e-\
90f18ae2128d"],

Cell[TextData[{
 StyleBox["Classical 2\[RightArrow]1 gates take two input bits and produce a \
single output bit, representing Boolean functions over four possible input \t\
combinations. There are ", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "4"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "fe592984-41c5-9842-95a0-5adfd036cb1e"],
 StyleBox[" = 16 ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["such gates, including familiar operations like AND, OR, XOR, and \
NAND. Among these, gates like NAND are universal, meaning they can be \
composed to construct any Boolean function. This classical notion of \
universality serves  as a foundation for understanding universality in \
quantum computation, where certain two-qubit gates, when paired with local \
operations, can generate any unitary transformation.\n", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.34972152285038527`, 0.34972152285038527`, 0.34972152285038527`]],
 StyleBox["Proof of fun", "Subsection",
  FontSize->18,
  FontColor->RGBColor[
   0.9450980392156862, 0.6823529411764706, 0.5529411764705883]],
 StyleBox["ctional Completeness: Constructing All 2\[RightArrow]1 Gates Using \
NAND\n", "Subsection",
  FontSize->20,
  FontColor->RGBColor[
   0.9450980392156862, 0.6823529411764706, 0.5529411764705883]],
 StyleBox["\n", "Subtitle",
  FontSize->20,
  FontColor->RGBColor[1., 0.5019607843137255, 0.5019607843137255]],
 StyleBox["This code highlights the universality of NAND gates by \
constructing and visualizing all other 16 2x1 gates solely from NAND \
operations.", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "CodeText",
 CellChangeTimes->{{3.960911711000654*^9, 3.9609117191404953`*^9}, {
   3.9609117607549343`*^9, 3.960911761998638*^9}, {3.9609119032373943`*^9, 
   3.9609119250768967`*^9}, {3.960928980650341*^9, 3.96092898416551*^9}, {
   3.960929698509796*^9, 3.9609297173545647`*^9}, {3.9609297659993362`*^9, 
   3.960929905663183*^9}, {3.9609299366186657`*^9, 3.960929985001358*^9}, {
   3.96093006531271*^9, 3.960930142358721*^9}, {3.9609302360928917`*^9, 
   3.9609302604129105`*^9}, {3.960930336038515*^9, 3.960930358640999*^9}, {
   3.9609303906000576`*^9, 3.960930454167984*^9}, {3.9609305310176105`*^9, 
   3.9609305530624638`*^9}, 3.960930717898037*^9, {3.960930890704439*^9, 
   3.9609308993571625`*^9}, {3.960931101811157*^9, 3.960931102597151*^9}, {
   3.960932236182781*^9, 3.960932242356518*^9}, {3.9609722166178474`*^9, 
   3.9609722454980946`*^9}, {3.960973113513569*^9, 3.960973123227356*^9}, {
   3.9609731572231674`*^9, 3.9609731588103676`*^9}, {3.960974753657713*^9, 
   3.9609747920534573`*^9}, {3.96097484245726*^9, 3.960974901394575*^9}, {
   3.9609760867218456`*^9, 3.96097610336327*^9}, {3.9610598257218704`*^9, 
   3.9610598380496407`*^9}, {3.9610788952319775`*^9, 3.961078897507698*^9}, {
   3.9610789410012264`*^9, 3.961078942159132*^9}, {3.9611044948828793`*^9, 
   3.9611045377115765`*^9}, 
   3.961105231162075*^9},ExpressionUUID->"896d8f2c-acdd-8d45-b93f-\
a30a0c36f288"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"parseNandArgs", "[", "expr_String", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inside", ",", 
       RowBox[{"level", "=", "0"}], ",", 
       RowBox[{"commaPos", "=", "0"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"inside", "=", 
       RowBox[{"StringTake", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", 
           RowBox[{"-", "2"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"inside", ",", 
            RowBox[{"{", "i", "}"}]}], "]"}], ",", "\"\<(\>\"", ",", 
          RowBox[{"level", "++"}], ",", "\"\<)\>\"", ",", 
          RowBox[{"level", "--"}], ",", "\"\<,\>\"", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"level", "==", "0"}], ",", 
            RowBox[{
             RowBox[{"commaPos", "=", "i"}], ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"StringLength", "[", "inside", "]"}]}], "}"}]}], "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"commaPos", "==", "0"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"StringTrim", "[", 
         RowBox[{"StringTake", "[", 
          RowBox[{"inside", ",", 
           RowBox[{"commaPos", "-", "1"}]}], "]"}], "]"}], ",", 
        RowBox[{"StringTrim", "[", 
         RowBox[{"StringTake", "[", 
          RowBox[{"inside", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"commaPos", "+", "1"}], ",", 
             RowBox[{"StringLength", "[", "inside", "]"}]}], "}"}]}], "]"}], 
         "]"}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.9609031962535934`*^9}, {
   3.9609116708574276`*^9, 3.960911678094612*^9}, {3.9609305530988407`*^9, 
   3.960930572548647*^9}, {3.9609307287699127`*^9, 3.960930746192217*^9}, {
   3.9609307916664505`*^9, 3.960930791920662*^9}, {3.9609310079933243`*^9, 
   3.960931008612793*^9}, 3.9609761077243824`*^9, {3.9610627836183205`*^9, 
   3.9610627843563213`*^9}},
 CellLabel->
  "In[594]:=",ExpressionUUID->"7dc1f08b-337e-0e48-9cb1-613f6d9bfbfd"],

Cell[TextData[StyleBox["Extracts the two arguments from a NAND(...) string \
while correctly handling nested parentheses.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609310227903976`*^9, 3.960931026588005*^9}, {
  3.960968723395159*^9, 3.9609687425582886`*^9}, {3.960972279294445*^9, 
  3.960972284544195*^9}, {3.960976465598215*^9, 
  3.9609764662414474`*^9}},ExpressionUUID->"7489f5c7-3391-8e47-bdef-\
85bc15a70951"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputPairs", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allFuncs", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"NAND", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"1", "-", 
   RowBox[{"a", "*", "b"}]}]}]}], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.9609031962535934`*^9}, {
   3.9609116708574276`*^9, 3.960911678094612*^9}, {3.9609305530988407`*^9, 
   3.960930572548647*^9}, 3.9609307287699127`*^9, {3.9609309248436546`*^9, 
   3.9609309303061504`*^9}, {3.9609310311941223`*^9, 
   3.9609310327900295`*^9}, {3.960976150760231*^9, 3.9609761525507965`*^9}, 
   3.9609764706353817`*^9},
 CellLabel->
  "In[595]:=",ExpressionUUID->"474b0593-cf83-c142-b9b9-d48056fcb144"],

Cell[TextData[StyleBox["Generates all possible 2-bit input pairs, defines all \
2-input Boolean functions, and defines the NAND operation.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609310576153946`*^9, 3.960931084444784*^9}, {
   3.960931138925783*^9, 3.9609311404213963`*^9}, {3.9609687178235836`*^9, 
   3.9609687183292103`*^9}, {3.9609722881557064`*^9, 3.960972303685917*^9}, 
   3.960976255517618*^9, {3.960976482657442*^9, 
   3.9609764869309673`*^9}},ExpressionUUID->"ba1c810e-270d-4b43-90f3-\
bb23d903095e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"evalFunc", "[", 
    RowBox[{"func_", ",", "a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "idx", "}"}], ",", 
     RowBox[{
      RowBox[{"idx", "=", 
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"inputPairs", ",", 
          RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"func", "[", 
       RowBox[{"[", "idx", "]"}], "]"}]}]}], "]"}]}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"applyNandOnFuncs", "[", 
    RowBox[{"f1_", ",", "f2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"NAND", "[", 
       RowBox[{
        RowBox[{"evalFunc", "[", 
         RowBox[{"f1", ",", "a", ",", "b"}], "]"}], ",", 
        RowBox[{"evalFunc", "[", 
         RowBox[{"f2", ",", "a", ",", "b"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", "Flatten"}]}],
   "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toFuncForm", "[", "list_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Partition", "[", 
    RowBox[{"list", ",", "4"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.9609031993067684`*^9}, {
   3.9609312145410805`*^9, 3.9609312160518227`*^9}, 3.9609761770685406`*^9, 
   3.9609765173696384`*^9},
 CellLabel->
  "In[598]:=",ExpressionUUID->"03157078-b1e5-7146-8f3a-4a60e4d8df24"],

Cell[TextData[StyleBox["Evaluates Boolean functions on input pairs, applies \
the NAND gate to two functions over all inputs, and formats the result as a \
4-entry truth table.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.960931223308651*^9, 3.9609312264631214`*^9}, 
   3.960968749098467*^9, {3.9609722915579033`*^9, 3.9609723066247597`*^9}, {
   3.960976505082569*^9, 
   3.960976507647827*^9}},ExpressionUUID->"9e6f7a97-7844-2a43-98fa-\
9701beb2a72f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"expr0", "=", "\"\<NAND(NAND(NAND(a,a),a),NAND(NAND(a,a),a))\>\""}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"expr1", "=", "\"\<NAND(NAND(a,a),a)\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"exprA", "=", "\"\<a\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"exprB", "=", "\"\<b\>\""}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"baseExprs", "=", 
    RowBox[{"Association", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "->", "expr0"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], "->", "expr1"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "->", "exprA"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], "->", "exprB"}]}],
      "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"generated", "=", 
   RowBox[{"Keys", "[", "baseExprs", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"expressions", "=", "baseExprs"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"queue", "=", "generated"}], ";"}]}], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.96090320917774*^9}, 
   3.9609752885555477`*^9, {3.960976194846237*^9, 3.9609762290579643`*^9}, {
   3.9609765330123367`*^9, 3.9609765337319794`*^9}, {3.960995470580723*^9, 
   3.960995478930271*^9}, {3.96099691475774*^9, 3.9609969327015705`*^9}},
 CellLabel->
  "In[601]:=",ExpressionUUID->"1f32e7c3-4db5-7b4c-a115-4ccc40cb5862"],

Cell[TextData[StyleBox["Defines NAND-based expressions for constant and input \
functions, initializes the expression map, and sets up the queue for \
generating all Boolean functions.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609765397954845`*^9, 
  3.9609765432879505`*^9}},ExpressionUUID->"7679ce57-55a6-e24f-8d03-\
8d6631fdffbc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "generated", "]"}], "<", 
     RowBox[{"Length", "[", "allFuncs", "]"}]}], ",", 
    RowBox[{
     RowBox[{"f1", "=", 
      RowBox[{"First", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"queue", "=", 
      RowBox[{"Rest", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"f2", "=", "g"}], ";", "\[IndentingNewLine]", 
        RowBox[{"newFunc", "=", 
         RowBox[{"toFuncForm", "[", 
          RowBox[{"applyNandOnFuncs", "[", 
           RowBox[{"f1", ",", "f2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"generated", ",", "newFunc"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"generated", ",", "newFunc"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"expressions", "[", "newFunc", "]"}], "=", 
            RowBox[{"\"\<NAND(\>\"", "<>", 
             RowBox[{"expressions", "[", "f1", "]"}], "<>", "\"\<, \>\"", "<>", 
             RowBox[{"expressions", "[", "f2", "]"}], "<>", "\"\<)\>\""}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"queue", ",", "newFunc"}], "]"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"newFuncRev", "=", 
         RowBox[{"toFuncForm", "[", 
          RowBox[{"applyNandOnFuncs", "[", 
           RowBox[{"f2", ",", "f1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"generated", ",", "newFuncRev"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"generated", ",", "newFuncRev"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"expressions", "[", "newFuncRev", "]"}], "=", 
            RowBox[{"\"\<NAND(\>\"", "<>", 
             RowBox[{"expressions", "[", "f2", "]"}], "<>", "\"\<, \>\"", "<>", 
             RowBox[{"expressions", "[", "f1", "]"}], "<>", "\"\<)\>\""}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"queue", ",", "newFuncRev"}], "]"}], ";"}]}], "]"}], 
        ";"}], ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", "generated"}], "}"}]}], "]"}]}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.960903211090843*^9}, {
   3.96090333193359*^9, 3.9609033547111607`*^9}, {3.96093129164139*^9, 
   3.960931295939535*^9}, 3.960976222233967*^9, 3.9609763549975643`*^9, 
   3.9609765643561306`*^9, 3.961103728896656*^9},
 CellLabel->
  "In[609]:=",ExpressionUUID->"fc868ea9-29e8-e74d-aa1d-520623f55899"],

Cell[TextData[StyleBox["Builds all 2-input Boolean functions by iteratively \
combining previously generated ones using the NAND operation in all input \
orders.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609765706453533`*^9, 
  3.9609765732568226`*^9}},ExpressionUUID->"fca3da9a-bc47-4046-8d3b-\
8fd4fea268b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"drawCircuit", "[", "exprStr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"id", "=", "1"}], ",", 
       RowBox[{"wires", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"nodes", "=", 
        RowBox[{"{", "}"}]}], ",", "build"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"build", "[", "expr_", "]"}], ":=", 
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"StringMatchQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"\"\<a\>\"", "|", "\"\<b\>\""}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"id", "++"}], ";", 
          RowBox[{"nodes", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"nodes", ",", 
             RowBox[{
              RowBox[{"ToString", "[", "id", "]"}], "->", "expr"}]}], "]"}]}],
           ";", 
          RowBox[{"ToString", "[", "id", "]"}]}], ",", 
         RowBox[{"StringStartsQ", "[", 
          RowBox[{"expr", ",", "\"\<NAND(\>\""}], "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"args", ",", "left", ",", "right", ",", "thisID"}], "}"}],
            ",", 
           RowBox[{
            RowBox[{"args", "=", 
             RowBox[{"parseNandArgs", "[", "expr", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "args", "]"}], "!=", "2"}], ",", 
              RowBox[{
               RowBox[{"id", "++"}], ";", 
               RowBox[{"nodes", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"nodes", ",", 
                  RowBox[{
                   RowBox[{"ToString", "[", "id", "]"}], 
                   "->", "\"\<?\>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Return", "[", 
                RowBox[{"ToString", "[", "id", "]"}], "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"left", "=", 
             RowBox[{"build", "[", 
              RowBox[{"args", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"right", "=", 
             RowBox[{"build", "[", 
              RowBox[{"args", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"thisID", "=", 
             RowBox[{"ToString", "[", 
              RowBox[{"++", "id"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"nodes", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"nodes", ",", 
               RowBox[{"thisID", "->", "\"\<NAND\>\""}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"wires", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"wires", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"left", "->", "thisID"}], ",", 
                 RowBox[{"right", "->", "thisID"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "thisID"}]}], "]"}], ",", "True", ",", 
         RowBox[{
          RowBox[{"id", "++"}], ";", 
          RowBox[{"nodes", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"nodes", ",", 
             RowBox[{
              RowBox[{"ToString", "[", "id", "]"}], "->", "\"\<?\>\""}]}], 
            "]"}]}], ";", 
          RowBox[{"ToString", "[", "id", "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"id", "=", "0"}], ";", 
      RowBox[{"wires", "=", 
       RowBox[{"{", "}"}]}], ";", 
      RowBox[{"nodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"build", "[", "exprStr", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Graph", "[", 
       RowBox[{"wires", ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"nodes", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], "->", 
            RowBox[{"Placed", "[", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"nodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "2"}], "]"}], "]"}], 
                 "===", "\"\<NAND\>\""}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"nodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
                  RowBox[{"FontSize", "->", "12"}]}], "]"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"nodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
                  RowBox[{"FontSize", "->", "16"}], ",", "Bold"}], "]"}]}], 
               "]"}], ",", "Above"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "nodes", "]"}]}], "}"}]}], "]"}]}], ",", 
        RowBox[{"VertexStyle", "->", "LightBlue"}], ",", 
        RowBox[{"VertexSize", "->", "Medium"}], ",", 
        RowBox[{"GraphLayout", "->", "\"\<LayeredDigraphEmbedding\>\""}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.9609762495025196`*^9, {3.9609764087709637`*^9, 3.960976409267872*^9}},
 CellLabel->
  "In[610]:=",ExpressionUUID->"ecc68abe-4c56-3946-9477-15a6fdda0ebd"],

Cell[TextData[StyleBox["Generates a circuit diagram as a graph from a NAND \
expression string",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{
  3.9609766024582653`*^9},ExpressionUUID->"d3638a0d-90d2-9d4e-a40d-\
edc97692ac09"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tableData", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"func", ",", 
        RowBox[{"expressions", "[", "func", "]"}], ",", 
        RowBox[{"drawCircuit", "[", 
         RowBox[{"expressions", "[", "func", "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"func", ",", 
        RowBox[{"Keys", "[", "expressions", "]"}]}], "}"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tableWithDividers", "=", 
    RowBox[{"Riffle", "[", 
     RowBox[{"tableData", ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<----------------\>\"", ",", "\"\<----------------\>\"", 
         ",", "\"\<----------------\>\""}], "}"}], "}"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"tableWithDividers", ",", 
   RowBox[{"TableHeadings", "->", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Truth Table\>\"", ",", "\"\<NAND Expression\>\"", 
        ",", "\"\<Circuit Diagram\>\""}], "}"}]}], "}"}]}]}], 
  "]"}], "\n"}], "Input",
 CellChangeTimes->{
  3.9609762752093697`*^9, {3.961062900713112*^9, 3.961062917163664*^9}},
 CellLabel->
  "In[611]:=",ExpressionUUID->"66f49b63-4c15-5040-91d2-4183f28e1a50"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"\<\"Truth Table\"\>", "\<\"NAND Expression\"\>", "\<\"Circuit Diagram\"\
\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(NAND(a,a),a),NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "6", "8", "7", "10", "9", "11"}, {{{1, 
           2}, {3, 2}, {2, 4}, {5, 4}, {6, 7}, {8, 7}, {7, 9}, {10, 9}, {4, 
           11}, {9, 11}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "11" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(a,a),a)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}}, 
           Null}, {GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {0., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{0., 1.}, {0., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"a\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{}, {}]]}, 
        TagBox[GraphicsGroupBox[{{}, {}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None,
      PlotRange->NCache[{{0, 
          Rational[4, 3]}, {0, 1}}, {{0, 1.3333333333333333`}, {0, 1}}]]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"b\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{}, {}]]}, 
        TagBox[GraphicsGroupBox[{{}, {}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None,
      PlotRange->NCache[{{0, 
          Rational[4, 3]}, {0, 1}}, {{0, 1.3333333333333333`}, {0, 1}}]]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(NAND(a,a),a), a)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 
           4}, {4, 6}, {7, 6}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-1., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(NAND(a,a),a), b)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 
           4}, {4, 6}, {7, 6}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-1., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(a, b)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{"1", "3", "2"}, {{{1, 2}, {3, 2}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 1.}, {1., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(a, NAND(NAND(NAND(a,a),a), b))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
           4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["b", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(b, NAND(NAND(NAND(a,a),a), a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
           4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14",
            "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8,
            9}, {10, 9}, {9, 11}, {12, 11}, {11, 13}, {14, 13}, {6, 15}, {13, 
           15}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "8" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{3., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(a, b), NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "4", "6", "5", "8", "7", "9"}, {{{1, 2}, {3, 2}, {4, 
           5}, {6, 5}, {5, 7}, {8, 7}, {2, 9}, {7, 9}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(a, b), NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b)))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "4", "6", "5", "8", "7", "10", "9", "11", "13", "12",
            "15", "14", "17", "16", "18", "19"}, {{{1, 2}, {3, 2}, {4, 5}, {6,
            5}, {5, 7}, {8, 7}, {7, 9}, {10, 9}, {11, 12}, {13, 12}, {12, 
           14}, {15, 14}, {14, 16}, {17, 16}, {9, 18}, {16, 18}, {2, 19}, {18,
            19}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
               Style["NAND", FontSize -> 12], Above], "17" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "16" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "18" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 5.}, {2., 4.}}, 0.1], 
            ArrowBox[{{2., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{2., 5.}, {2., 4.}}, 0.1], 
            ArrowBox[{{2., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{4., 5.}, {5., 4.}}, 0.1], 
            ArrowBox[{{5., 4.}, {4., 3.}}, 0.1], 
            ArrowBox[{{5., 5.}, {5., 4.}}, 0.1], 
            ArrowBox[{{4., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{4., 4.}, {4., 3.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{4., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {4., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{5., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {5., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{5., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {5., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{4., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {4., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{4., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {4., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), \
NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14",
            "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8,
            9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 
           15}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "13" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{2., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), NAND(b, \
NAND(NAND(NAND(a,a),a), a)))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9", "11", "13", "12", "15",
            "14", "17", "16", "10", "18", "19"}, {{{1, 2}, {3, 2}, {2, 4}, {5,
            4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}, {10, 11}, {12, 11}, {11, 
           13}, {14, 13}, {13, 15}, {16, 15}, {17, 18}, {15, 18}, {9, 19}, {
           18, 19}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "13" -> Placed[
               Style["NAND", FontSize -> 12], Above], "17" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "18" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{3., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(b, NAND(NAND(NAND(a,a),a), a)), \
NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14",
            "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8,
            9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 
           15}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "13" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{2., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b)), NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14",
            "13", "15", "16", "18", "17", "20", "19", "21"}, {{{1, 2}, {3, 
           2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {10, 9}, {9, 11}, {12, 
           11}, {11, 13}, {14, 13}, {6, 15}, {13, 15}, {16, 17}, {18, 17}, {
           17, 19}, {20, 19}, {15, 21}, {19, 21}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "17" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "18" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "8" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "20" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "19" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "21" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            0.02019881556683587], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{2., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{3., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{3., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{2., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{2., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-3., 3.}, {-2., 2.}}, 0.1], 
            ArrowBox[{{-2., 2.}, {-2., 1.}}, 0.1], 
            ArrowBox[{{-2., 3.}, {-2., 2.}}, 0.1], 
            ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-3., 2.}, {-2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]}
   },
   GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  TableForm[{{{0, 0, 0, 0}, "NAND(NAND(NAND(a,a),a),NAND(NAND(a,a),a))", 
     Graph[{
      "1", "3", "2", "5", "4", "6", "8", "7", "10", "9", "11"}, {{{1, 2}, {3, 
       2}, {2, 4}, {5, 4}, {6, 7}, {8, 7}, {7, 9}, {10, 9}, {4, 11}, {9, 11}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "11" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 1, 
     1}, "NAND(NAND(a,a),a)", 
     Graph[{
      "1", "3", "2", "5", "4"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 0, 
     1}, "a", 
     Graph[{}, {}]}, {
    "----------------", "----------------", "----------------"}, {{0, 0, 1, 
     1}, "b", 
     Graph[{}, {}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 1, 
     0}, "NAND(NAND(NAND(a,a),a), a)", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {
       4, 6}, {7, 6}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 0, 
     0}, "NAND(NAND(NAND(a,a),a), b)", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {
       4, 6}, {7, 6}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 1, 
     0}, "NAND(a, b)", 
     Graph[{"1", "3", "2"}, {{{1, 2}, {3, 2}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 1, 
     1}, "NAND(a, NAND(NAND(NAND(a,a),a), b))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
       4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["b", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 0, 
     1}, "NAND(b, NAND(NAND(NAND(a,a),a), a))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
       4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 1, 
     1}, "NAND(NAND(NAND(NAND(a,a),a), a), NAND(NAND(NAND(a,a),a), b))", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14", 
       "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 
       9}, {10, 9}, {9, 11}, {12, 11}, {11, 13}, {14, 13}, {6, 15}, {13, 15}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "8" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 0, 0, 
     1}, "NAND(NAND(a, b), NAND(NAND(a,a),a))", 
     Graph[{
      "1", "3", "2", "4", "6", "5", "8", "7", "9"}, {{{1, 2}, {3, 2}, {4, 
       5}, {6, 5}, {5, 7}, {8, 7}, {2, 9}, {7, 9}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 0, 
     1}, "NAND(NAND(a, b), NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b)))", 
     Graph[{
      "1", "3", "2", "4", "6", "5", "8", "7", "10", "9", "11", "13", "12", 
       "15", "14", "17", "16", "18", "19"}, {{{1, 2}, {3, 2}, {4, 5}, {6, 
       5}, {5, 7}, {8, 7}, {7, 9}, {10, 9}, {11, 12}, {13, 12}, {12, 14}, {15,
        14}, {14, 16}, {17, 16}, {9, 18}, {16, 18}, {2, 19}, {18, 19}}, 
       Null}, {GraphLayout -> "LayeredDigraphEmbedding", 
       VertexLabels -> {"9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
           Style["NAND", FontSize -> 12], Above], "17" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "16" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "18" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 0, 
     0}, "NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), NAND(NAND(a,a),a))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14", 
       "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 
       9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 15}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "13" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 1, 
     0}, "NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), NAND(b, \
NAND(NAND(NAND(a,a),a), a)))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9", "11", "13", "12", "15", 
       "14", "17", "16", "10", "18", "19"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 
       4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 
       13}, {13, 15}, {16, 15}, {17, 18}, {15, 18}, {9, 19}, {18, 19}}, 
       Null}, {GraphLayout -> "LayeredDigraphEmbedding", 
       VertexLabels -> {"9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "13" -> Placed[
           Style["NAND", FontSize -> 12], Above], "17" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "18" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 0, 1, 
     0}, "NAND(NAND(b, NAND(NAND(NAND(a,a),a), a)), NAND(NAND(a,a),a))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14", 
       "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 
       9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 15}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "13" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 0, 
     0}, "NAND(NAND(NAND(NAND(NAND(a,a),a), a), NAND(NAND(NAND(a,a),a), b)), \
NAND(NAND(a,a),a))", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14", 
       "13", "15", "16", "18", "17", "20", "19", "21"}, {{{1, 2}, {3, 2}, {2, 
       4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {10, 9}, {9, 11}, {12, 11}, {11, 
       13}, {14, 13}, {6, 15}, {13, 15}, {16, 17}, {18, 17}, {17, 19}, {20, 
       19}, {15, 21}, {19, 21}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "17" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "18" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "8" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "20" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "19" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "21" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}}, 
   TableHeadings -> {
    None, {"Truth Table", "NAND Expression", "Circuit Diagram"}}]]], "Output",
 CellChangeTimes->{
  3.960976275884245*^9, 3.960976359606251*^9, {3.9609969374687576`*^9, 
   3.9609969622976494`*^9}, {3.9610628304507637`*^9, 3.961062850074505*^9}, 
   3.9610629013470535`*^9, 3.961062935240841*^9, 3.961063705190298*^9, 
   3.961101363823021*^9, 3.961102300101799*^9},
 CellLabel->
  "Out[613]//TableForm=",ExpressionUUID->"da6e3df5-a3cc-1a44-931b-\
aa32c69096fc"]
}, Open  ]],

Cell[TextData[StyleBox["Note: This is not the most minimal route. It is just \
to show completeness.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609971339234905`*^9, 
  3.960997157693533*^9}},ExpressionUUID->"4ec893b7-c916-ec49-8550-\
00b902057af4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Classical 2 to 2 gates", "Subtitle",
 FontSize->20,
 FontColor->RGBColor[
  0.792156862745098, 0.3176470588235294, 0.09803921568627451]]], "Section",
 CellChangeTimes->{
  3.9610790331537895`*^9},ExpressionUUID->"f557071c-692e-7e43-9228-\
cca8a8d11906"],

Cell[TextData[StyleBox["2-to-2 gates extend the concept of 2-input, 1-output \
Boolean functions by producing two output bits from two input bits, enabling \
more complex and nuanced operations. This extension is important because it \
allows us to explore a broader class of logical transformations, including \
reversible gates that preserve information. While 2-to-1 functions span all \
16 Boolean outputs, they are inherently irreversible, once a single bit is \
output, some information is lost and cannot be recovered. In contrast, only a \
subset of the 256 possible 2-to-2 functions are reversible, specifically, the \
bijective ones that map each input pair to a unique output pair. By focusing \
on this smaller, structured subspace of reversible 2-to-2 gates, we can \
investigate how universality and efficient composition play out in settings \
where information preservation is required, which is essential for \
applications like quantum computing and reversible classical logic.", \
"Subtitle",
 FontSize->15,
 FontColor->RGBColor[0., 0., 0.]]], "Text",
 CellChangeTimes->{{3.96093146964822*^9, 3.9609314731497517`*^9}, {
   3.9609315699833736`*^9, 3.9609315840660095`*^9}, {3.960931699843746*^9, 
   3.960931703140068*^9}, {3.9609317631330185`*^9, 3.960931763446905*^9}, {
   3.960932229676901*^9, 3.9609322753311157`*^9}, 3.960932475311823*^9, 
   3.9609725334503345`*^9, 3.9609726180604916`*^9, {3.9609767529425964`*^9, 
   3.9609767551152477`*^9}, 3.9609775662052536`*^9, 3.9610790109196777`*^9, {
   3.9610808229724293`*^9, 3.9610808332880535`*^9}, {3.961104549259926*^9, 
   3.9611045501741886`*^9}},ExpressionUUID->"944d5393-3857-ea41-927e-\
a0746cbfdd89"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9609037020031433`*^9, 3.960903709090307*^9}, {
   3.9609037712528114`*^9, 3.960903793374609*^9}, {3.9609726789457397`*^9, 
   3.9609726993802776`*^9}, {3.9609727874337444`*^9, 3.960972817213991*^9}, 
   3.9609971621900578`*^9, 3.961101589662266*^9},
 CellLabel->
  "In[614]:=",ExpressionUUID->"5670847d-93ef-9d4b-81ec-b057f30a82cf"],

Cell[TextData[StyleBox["Generates all possible 2-to-2 gate output mappings, \
check which are reversible by ensuring outputs are unique , and print all \
reversible gates with their indices",
 FontColor->RGBColor[0., 0., 0.],
 Background->RGBColor[1., 1., 1.]]], "CodeText",
 CellChangeTimes->{
  3.961101604900057*^9},ExpressionUUID->"031a54a4-a1d7-ab45-a423-\
c0ad595cdb11"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<00\>\"", ",", "\"\<01\>\"", ",", "\"\<10\>\"", 
     ",", "\"\<11\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allOutputs", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{"inputs", ",", "4"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isReversible", "[", "func_", "]"}], ":=", 
   RowBox[{"DuplicateFreeQ", "[", "func", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"reversibleGates", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"allOutputs", ",", "isReversible"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9609037020031433`*^9, 3.960903709090307*^9}, {
   3.9609037712528114`*^9, 3.960903793374609*^9}, {3.9609726789457397`*^9, 
   3.9609726993802776`*^9}, {3.9609727874337444`*^9, 3.960972817213991*^9}, 
   3.9609971621900578`*^9, 3.961101589662266*^9},
 CellLabel->
  "In[615]:=",ExpressionUUID->"db3028e5-9c97-724e-b3f8-e7e6bce99e60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Column", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", "=", "#"}], "}"}], ",", 
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"\"\<Gate \>\"", "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<: \>\""}], ",", 
             "Bold", ",", "\"\<Text\>\""}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"reversibleGates", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "Black", 
             ",", "\"\<Text\>\""}], "]"}]}], "}"}], "]"}]}], "]"}], "&"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"Length", "[", "reversibleGates", "]"}], "]"}]}], "]"}], "]"}], 
  "\n"}]], "Input",
 CellChangeTimes->{{3.9609037020031433`*^9, 3.960903745524639*^9}, 
   3.9609037954497375`*^9, 3.9609318734581623`*^9, {3.961058260057604*^9, 
   3.961058263517559*^9}, {3.9611015522778625`*^9, 3.961101560826584*^9}},
 CellLabel->
  "In[619]:=",ExpressionUUID->"b0bd0b48-38b7-2743-8727-b8c47432bff4"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox["\"Gate 1: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"00\"", ",", "\"01\"", ",", "\"10\"", ",", "\"11\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 2: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"00\"", ",", "\"01\"", ",", "\"11\"", ",", "\"10\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 3: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"00\"", ",", "\"10\"", ",", "\"01\"", ",", "\"11\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 4: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"00\"", ",", "\"10\"", ",", "\"11\"", ",", "\"01\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 5: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"00\"", ",", "\"11\"", ",", "\"01\"", ",", "\"10\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 6: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"00\"", ",", "\"11\"", ",", "\"10\"", ",", "\"01\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 7: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"01\"", ",", "\"00\"", ",", "\"10\"", ",", "\"11\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 8: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"01\"", ",", "\"00\"", ",", "\"11\"", ",", "\"10\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 9: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"01\"", ",", "\"10\"", ",", "\"00\"", ",", "\"11\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 10: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"01\"", ",", "\"10\"", ",", "\"11\"", ",", "\"00\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 11: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"01\"", ",", "\"11\"", ",", "\"00\"", ",", "\"10\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 12: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"01\"", ",", "\"11\"", ",", "\"10\"", ",", "\"00\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 13: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"10\"", ",", "\"00\"", ",", "\"01\"", ",", "\"11\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 14: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"10\"", ",", "\"00\"", ",", "\"11\"", ",", "\"01\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 15: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"10\"", ",", "\"01\"", ",", "\"00\"", ",", "\"11\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 16: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"10\"", ",", "\"01\"", ",", "\"11\"", ",", "\"00\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 17: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"10\"", ",", "\"11\"", ",", "\"00\"", ",", "\"01\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 18: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"10\"", ",", "\"11\"", ",", "\"01\"", ",", "\"00\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 19: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"11\"", ",", "\"00\"", ",", "\"01\"", ",", "\"10\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 20: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"11\"", ",", "\"00\"", ",", "\"10\"", ",", "\"01\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 21: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"11\"", ",", "\"01\"", ",", "\"00\"", ",", "\"10\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 22: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"11\"", ",", "\"01\"", ",", "\"10\"", ",", "\"00\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 23: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"11\"", ",", "\"10\"", ",", "\"00\"", ",", "\"01\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox["\"Gate 24: \"", Bold, "Text", StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"\"11\"", ",", "\"10\"", ",", "\"01\"", ",", "\"00\""}], 
          "}"}], 
        GrayLevel[0], "Text", StripOnInput -> False]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.9611015535888824`*^9, 3.9611015614105816`*^9}, 
   3.9611023002867966`*^9},
 CellLabel->
  "Out[619]=",ExpressionUUID->"f08b1d2a-0c1b-184b-a7c3-2b8f148a57ea"]
}, Open  ]],

Cell[TextData[StyleBox["",
 FontColor->RGBColor[0., 0., 0.],
 Background->RGBColor[1., 1., 1.]]], "Text",
 CellChangeTimes->{{3.960931878621706*^9, 3.960931881802574*^9}, {
   3.960931934264889*^9, 3.9609319624099655`*^9}, 3.9609688045333405`*^9, {
   3.961101575891493*^9, 
   3.9611015825395565`*^9}},ExpressionUUID->"d02db296-78ce-2f4f-b307-\
892795b293d7"],

Cell[TextData[{
 StyleBox["Finding the Shortest Composition of Gates using Breadth First \
Search\n", "Subsection",
  FontSize->18],
 StyleBox["In this section, we focus on understanding how to build complex \
reversible gates from simpler building blocks. The inputs are the basic \
two-bit combinations, and the target gate refers to a specific reversible \
2-to-2 gate we aim to construct. The generators are a selected set of \
reversible gates used as fundamental components to compose more complex \
gates. Using these generators, the goal is to find the shortest sequence of \
compositions that equals the target gate. ", "Subsection",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.9609041628214417`*^9, 3.960904169265465*^9}, 
   3.9609321995859795`*^9, {3.9609324909927406`*^9, 3.960932522054676*^9}, {
   3.960933733429779*^9, 3.960933740701889*^9}, 3.9609729808666897`*^9, 
   3.9610791388655148`*^9},ExpressionUUID->"750b82bb-79c3-0243-a566-\
0cbce78ad2e6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<00\>\"", ",", "\"\<01\>\"", ",", "\"\<10\>\"", 
     ",", "\"\<11\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allGates", "=", 
   RowBox[{"Permutations", "[", "inputs", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.960904185446842*^9}, 
   3.9609043129957848`*^9},
 CellLabel->
  "In[620]:=",ExpressionUUID->"aab7b26d-073a-4748-923d-8a02da4312ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalize", "[", "g_", "]"}], " ", ":=", " ", "g"}]], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.960904185446842*^9}, {
  3.9609043129957848`*^9, 3.9609043342719536`*^9}, {3.960932106405264*^9, 
  3.9609321172703476`*^9}},
 CellLabel->
  "In[622]:=",ExpressionUUID->"cbfee207-0af5-c041-9995-61fec95923e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"denormalize", "[", "g_", "]"}], ":=", "g"}]], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.9609041890529995`*^9}, {
  3.960904222151804*^9, 3.9609042333765335`*^9}, {3.96093306797995*^9, 
  3.9609330725033092`*^9}},
 CellLabel->
  "In[623]:=",ExpressionUUID->"c57f47dd-c092-5742-b3f5-43b9e6fef511"],

Cell[TextData[StyleBox["Defines all 2-bit input combinations, generates the \
previous 24 reversible 2-to-2 gates, and has placeholder functions for \
normalization and de-normalization of gates.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609330805051403`*^9, 3.960933113533064*^9}, {
  3.960968841148142*^9, 3.96096884885338*^9}, {3.9609730275905914`*^9, 
  3.9609730279263687`*^9}},ExpressionUUID->"570bee4f-6861-9b45-9193-\
da9a3766a033"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"composeGates", "[", 
    RowBox[{"g1_", ",", "g2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputOrder", "=", "inputs"}], "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"g2", "[", 
        RowBox[{"[", 
         RowBox[{"First", "@", 
          RowBox[{"First", "@", 
           RowBox[{"Position", "[", 
            RowBox[{"inputOrder", ",", 
             RowBox[{"g1", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "g1", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.9609041890529995`*^9}, {
  3.960904222151804*^9, 3.960904234858078*^9}, {3.9609331535313225`*^9, 
  3.960933157293396*^9}},
 CellLabel->
  "In[624]:=",ExpressionUUID->"cc862c4a-f60d-4547-ae07-ab5612ca1400"],

Cell[TextData[StyleBox["This function defines how to compose two 2-to-2 \
gates, meaning it applies gate g1 to the inputs first, then passes the result \
through gate g2, effectively computing the overall transformation g2(g1(x)). \
It does this by finding where each output of g1 appears in the input list and \
then selecting the corresponding output from g2, resulting in a new composed \
gate that represents applying one reversible transformation after another.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609331704905224`*^9, 
  3.9609332537823257`*^9}},ExpressionUUID->"29872bd8-695d-2944-9b3a-\
f3ccaa252ad3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"findShortestComposition", "[", 
    RowBox[{"target_", ",", "generators_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"normTarget", "=", "target"}], ",", 
       RowBox[{"visited", "=", 
        RowBox[{"<|", "|>"}]}], ",", 
       RowBox[{"queue", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"identity", "=", "inputs"}], ",", "currentGate", ",", 
       "currentSeq", ",", "nextGate", ",", "nextSeq"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"visited", "[", "identity", "]"}], "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"queue", "=", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"identity", ",", 
          RowBox[{"{", "}"}]}], "}"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "queue", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"currentGate", ",", "currentSeq"}], "}"}], "=", 
          RowBox[{"First", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"queue", "=", 
          RowBox[{"Rest", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"currentGate", "===", "normTarget"}], ",", 
           RowBox[{
            RowBox[{"Return", "[", "currentSeq", "]"}], ";"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Scan", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f2", "=", "#"}], ";", "\[IndentingNewLine]", 
              RowBox[{"nextGate", "=", 
               RowBox[{"composeGates", "[", 
                RowBox[{"currentGate", ",", "f2"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"KeyExistsQ", "[", 
                  RowBox[{"visited", ",", "nextGate"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"nextSeq", "=", 
                  RowBox[{"Append", "[", 
                   RowBox[{"currentSeq", ",", "f2"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"visited", "[", "nextGate", "]"}], "=", "nextSeq"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"queue", ",", 
                   RowBox[{"{", 
                    RowBox[{"nextGate", ",", "nextSeq"}], "}"}]}], "]"}], 
                 ";"}]}], "]"}]}], ")"}], "&"}], ",", "generators"}], "]"}], 
         ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "pair", "}"}], ",", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Step \>\"", ",", 
        RowBox[{"pair", "[", 
         RowBox[{"[", 
          RowBox[{"2", ",", "1"}], "]"}], "]"}], ",", "\"\<: \>\"", ",", 
        RowBox[{"pair", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{"List", ",", "shortestSeq"}], "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.9609041890529995`*^9}, {
   3.960904222151804*^9, 3.960904280915781*^9}, {3.960911966880308*^9, 
   3.9609119682148647`*^9}, 3.9609325923782005`*^9, 3.960932747565628*^9, {
   3.960932796169632*^9, 3.960932827748884*^9}, {3.9609328790446873`*^9, 
   3.9609329093256645`*^9}, {3.960932954880932*^9, 3.9609329806628895`*^9}, {
   3.960933349434658*^9, 3.960933354660576*^9}, {3.9609733644151382`*^9, 
   3.9609733713333473`*^9}, {3.9609734831190166`*^9, 3.960973501677246*^9}, {
   3.9610792065386047`*^9, 3.961079206817951*^9}, 3.9611016669536495`*^9, 
   3.9611017107414*^9, {3.9611039676238155`*^9, 3.961104056347309*^9}, 
   3.961104147685299*^9},
 CellLabel->
  "In[840]:=",ExpressionUUID->"3b15841c-c238-3d44-9cd6-1bb4c3ddc7f9"],

Cell[TextData[StyleBox["Performs a breadth-first search to find the shortest \
sequence of generator gates that compose to a given target gate.  Starting \
from the identity gate, it explores all possible compositions with the \
generator gates, tracking visited gates to avoid repetition. When the target \
gate is reached, it returns the sequence of generators used to obtain it.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609333627439613`*^9, 3.960933366821993*^9}, {
  3.9609689064530487`*^9, 3.9609689220828514`*^9}, {3.961079214620701*^9, 
  3.9610792155706787`*^9}},ExpressionUUID->"ef19e57a-ac2d-664b-a1ee-\
0bf1909b2e8d"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Step \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Step ", 1, ": ", {"00", "01", "11", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960932975318695*^9},
 CellLabel->
  "During evaluation of \
In[351]:=",ExpressionUUID->"5b99279d-de97-204d-be70-000c27beab64"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Step \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Step ", 2, ": ", {"00", "10", "01", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.9609329753246937`*^9},
 CellLabel->
  "During evaluation of \
In[351]:=",ExpressionUUID->"279719c6-2ee2-a74b-b410-7ecad609070d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Step \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Step ", 3, ": ", {"00", "01", "11", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960932975333519*^9},
 CellLabel->
  "During evaluation of \
In[351]:=",ExpressionUUID->"05957f2a-dddf-8a4b-bdec-11406ed3e94d"]
}, Open  ]],

Cell[TextData[StyleBox["Using the generator set genSet = {{\
\[OpenCurlyDoubleQuote]00\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]01\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]11\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]10\[CloseCurlyDoubleQuote]}, \
{\[OpenCurlyDoubleQuote]00\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]10\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]01\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]11\[CloseCurlyDoubleQuote]}}, the function composes \
these gates step-by-step starting from the identity gate to rearrange the \
inputs. By applying these generators in sequence, the target gate {\
\[OpenCurlyDoubleQuote]00\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]11\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]10\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]01\[CloseCurlyDoubleQuote]} is achieved through a \
minimal amount of successive permutations of the input pairs.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.960933513957611*^9, 3.9609335322058907`*^9}, {
   3.96093372055077*^9, 3.9609337653830376`*^9}, 3.9609340307056637`*^9, 
   3.9609342654474277`*^9, {3.9610792448397007`*^9, 
   3.961079245871464*^9}},ExpressionUUID->"181cff1b-3814-ba4d-8bc4-\
87377cc67db3"],

Cell[TextData[StyleBox["     Efficiency Analysis of Gate Pairs via Group \
Theory and Closure",
 FontSize->17]], "Subsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343985963287`*^9}, 3.961079277478216*^9, {
   3.961079385019684*^9, 
   3.961079390071701*^9}},ExpressionUUID->"f2bb7f75-44be-c642-955a-\
82ef8a998ee8"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["\tEfficiency in reversible gate synthesis refers to how \
effectively a set of generator gates can produce all desired reversible \
transformations with minimal \tcomplexity-typically  measured by the length \
of compositions needed or the size of the generated subgroup. This concept is \
crucial because in reversible computing and quantum circuit design, \
minimizing gate count and operational overhead directly impacts performance, \
resource usage, and error rates. In the study of reversible gates as \
permutations acting on the set of inputs {00,01,10,11}, each gate corresponds \
to an element g of the symmetric group ",
  FontSize->14,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "4"], TraditionalForm]], "Subsection",
  FontSize->14,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "5d94e8dc-5585-a444-9153-c18404098329"],
 StyleBox[". Formally, g:{1,2,3,4}\[RightArrow]{1,2,3,4} is a bijection \
representing how inputs are rearranged. \n",
  FontSize->14,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\t\n",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["Cycle Structure", "Chapter",
  FontSize->17,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n",
  FontSize->17,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Every permutation \|01d454 \[Element]",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    SubscriptBox["S", "4"]}], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "1e564260-1c94-6742-911a-0977f37a720e"],
 StyleBox[" ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["can be decomposed uniquely into disjoint cycles. For example, \
consider the permutation \n\t\n\|01d454 =(1 3 4)(2),\n\t\t\t\nwhich cycles \
element 1 to 3, 3 to 4, and 4 back to 1, while 2 remains fixed. This cycle \
decomposition is visually represented as:\n\t",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n",
  FontSize->18,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["[1\[RightArrow]3]\n[3\[RightArrow]4]\n[4\[RightArrow]1]\n[2\
\[RightArrow]2]\n\t\t",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\:200b\n  ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["The cycle type of \|01d454 is the multiset of cycle lengths. For \
\|01d454 above, the cycle type is (3,1) \[LongDash] one 3-cycle and one fixed \
point. \n",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\t",
  FontSize->18,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n    ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Conjugacy and Cycle Type", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]]
}], "Subsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.960937954332613*^9}, {3.961059707466343*^9, 3.9610597142813683`*^9}, 
   3.961079286834337*^9, {3.961079375583376*^9, 3.9610794769011*^9}, {
   3.9610795362192764`*^9, 3.9610795423700314`*^9}, {3.961079581320801*^9, 
   3.961079584380785*^9}, {3.9610801055224266`*^9, 3.961080166873335*^9}, 
   3.9610802955089226`*^9, {3.9610805166584415`*^9, 3.9610805200443306`*^9}, {
   3.9610812576452026`*^9, 3.9610812595623856`*^9}, {3.961099590694748*^9, 
   3.961099612193718*^9}, {3.9611011203901215`*^9, 3.961101161657963*^9}, {
   3.9611018060182743`*^9, 3.9611018221259193`*^9}, {3.961103105417181*^9, 
   3.961103122808796*^9}, {3.961103526319208*^9, 
   3.9611035303948307`*^9}},ExpressionUUID->"4f41b789-7a84-1140-8f5b-\
7aba652840fa"],

Cell[TextData[{
 StyleBox["Two permutations (\|01d454,\:210e) \[Element] ", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", 
    RowBox[{"4", " "}]], TraditionalForm]],
  FontSize->15,ExpressionUUID->"e07fa6bf-22c8-844a-a6f9-a7206e74bb29"],
 StyleBox["are conjugate if there exists \n\nh= xg", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FontSize->15,ExpressionUUID->"338de6a1-ab1e-8f43-98cd-cb25f9120415"],
 "\n\t\t\t\t\t\t\t\t\t\n",
 StyleBox["such that conjugate permutations share the same cycle type . This \
means the behavior of gates in the same conjugacy class is structurally \
identical up to of inputs . The set of all permutations with the same cycle \
type forms a conjugacy class . For example, all 3-cycles in ", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", 
    RowBox[{"4", " "}]], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "c9667fd0-2848-7e4a-adba-50066398e93b"],
 StyleBox["form a conjugacy class . This classification helps group gates \
with equivalent structural properties, which is critical when analyzing how \
they generate subgroups through composition .\n", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Order of a Gate\n", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["The order of a permutation g is the smallest positive integer k \
satisfying\n\t\n", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox[Cell[BoxData[
  FormBox[
   SuperscriptBox["g", "k"], TraditionalForm]], "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "517c4bb5-58b3-4447-adfc-d95e58493829"], "Text"],
 StyleBox[" = g", "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n\t\n", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["where e is the identity permutation. For instance, if g=(1\
\[NonBreakingSpace]3\[NonBreakingSpace]4), then ", "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox[Cell[BoxData[
  FormBox[
   SuperscriptBox["g", "3"], TraditionalForm]], "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "85c4c05a-abf5-8244-adb8-526acb6cca4c"], "Text"],
 StyleBox[" ", "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["= e, so the order of g is 3. The order represents the number of \
times the \tgate must be  composed with itself to return to the original \
input configuration.\n", "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Application", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n", "Text",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Given a pair of generators (g1,g2) , we study the subgroup they \
generate:", "Text",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]]
}], "Subsubsubsubsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.960937954332613*^9}, {3.961059707466343*^9, 3.9610597142813683`*^9}, 
   3.961079286834337*^9, {3.961079375583376*^9, 3.9610794769011*^9}, {
   3.9610795362192764`*^9, 3.9610795423700314`*^9}, {3.961079581320801*^9, 
   3.961079584380785*^9}, {3.9610801055224266`*^9, 3.961080166873335*^9}, {
   3.9610803034216595`*^9, 3.9610804866592255`*^9}, {3.961080523788622*^9, 
   3.9610806218313503`*^9}, {3.9610808495425644`*^9, 
   3.9610808976289864`*^9}, {3.9610810991958523`*^9, 
   3.9610811161083584`*^9}, {3.9610811837697067`*^9, 
   3.9610812143729954`*^9}, {3.961081270126705*^9, 3.961081279092455*^9}, {
   3.9610996533639183`*^9, 3.961099728644993*^9}, {3.9610998126969337`*^9, 
   3.9610998596208572`*^9}, {3.961100971623289*^9, 3.9611010346199875`*^9}, {
   3.9611010656897697`*^9, 3.9611011654188633`*^9}, {3.9611031035809536`*^9, 
   3.9611031199895267`*^9}},ExpressionUUID->"3a39c164-e5f2-1c49-806b-\
bd8437fcfc6e"],

Cell[TextData[{
 StyleBox["\t\t\t",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["                     ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["   ",
  FontSize->18,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\:27e8g1,g2 \:27e9={g",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "1"], TraditionalForm]],
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "d4b0b660-30d2-d142-8868-e79c0d61666b"],
 StyleBox[",",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["g",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "2"], TraditionalForm]],
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "bcda6654-1fe6-7440-985d-f5a4282ccc42"],
 StyleBox["...",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["g",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "m"], TraditionalForm]],
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "380b5f6d-a813-f047-91c6-343c04a391f0"],
 StyleBox["|",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["g",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "j"], TraditionalForm]],
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "43634ee4-5834-9b4b-822f-eb45c0a3083a"],
 StyleBox[" \[Element] {g1, g2}, m \[Element] N }",
  FontSize->16,
  FontColor->RGBColor[0., 0., 0.]]
}], "Subsubsubsubsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.96093802683103*^9}, {3.96093806280719*^9, 3.9609381644889774`*^9}, {
   3.960938217875839*^9, 3.9609382718334465`*^9}, {3.9609735454127655`*^9, 
   3.9609735459887943`*^9}, {3.9610592862981224`*^9, 
   3.9610592900825195`*^9}},ExpressionUUID->"5da457c2-f3e3-e741-a2de-\
3728af6dc5a9"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["We compute the closure of this subgroup up to a maximum \
composition depth, capturing all permutations reachable by combining g1 and \
g2. The goal \nis to determine if \:27e8\|01d4541,\|01d4542\:27e9 = ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["\|01d446", "4"], TraditionalForm]],
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "78ba71a4-95b1-c641-a64a-6e232f0b2870"],
 StyleBox[", meaning the pair is universal and can generate every reversible \
gate.\n\t",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["By examining the cycle types of \|01d4541 , \|01d4542\:200b, and \
their product \|01d4541 and \|01d4542, along with their orders, we gain \
insight into the algebraic richness of the generated subgroup. A gate pair \
producing a product with low order and generating a large closure typically \
represents a more efficient universal set.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Subsubsubsubsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.96093802683103*^9}, {3.96093806280719*^9, 3.9609381644889774`*^9}, {
   3.960938217875839*^9, 3.9609382660047913`*^9}, {3.960938316459881*^9, 
   3.960938328537018*^9}, {3.960938374402849*^9, 3.960938446421871*^9}, {
   3.9609384801336117`*^9, 3.960938488620077*^9}, {3.960938528157913*^9, 
   3.9609385451896896`*^9}, {3.9610809532373543`*^9, 
   3.9610809602929363`*^9}, {3.9610810040282707`*^9, 
   3.9610810545068817`*^9}, {3.961099709609236*^9, 3.961099726304352*^9}, {
   3.96109984279072*^9, 3.961099909553602*^9}, {3.9611010971845665`*^9, 
   3.961101103918064*^9}},ExpressionUUID->"2cbebcb3-f84c-0243-81ba-\
11ffd7da3ab1"],

Cell[TextData[{
 StyleBox["This block of code evaluates all unordered pairs of reversible \
gates to analyze their generative power: for each pair, it computes the \
closure (all gates they can generate), the order and cycle type of their \
composition, and whether they are universal (able to generate all 24 \
reversible gates), assigning each pair a summary score based on both the \
product\[CloseCurlyQuote]s order and the size of the generated closure. ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[""], "Input",
  CellChangeTimes->{
   3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
    3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
    3.9609386484371433`*^9}, {3.9609391649339733`*^9, 3.960939166233856*^9}},
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "fe06e21f-9624-7b4b-be5f-c911d9f5d0e4"],
 StyleBox["The gates with the summary score of 0.52 have the best efficiency.",
  FontColor->RGBColor[0., 0., 0.]]
}], "CodeText",
 CellChangeTimes->{
  3.9610593326710014`*^9, 3.9610595591356697`*^9, {3.9610809610366783`*^9, 
   3.9610809714813385`*^9}, {3.9610998684308357`*^9, 3.96109988283951*^9}, {
   3.9610999163130665`*^9, 3.9610999265605335`*^9}, {3.9611011063759537`*^9, 
   3.961101107063917*^9}},ExpressionUUID->"0e37dcca-58d6-db44-8334-\
e0a7b713d208"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<00\>\"", ",", "\"\<01\>\"", ",", "\"\<10\>\"", 
     ",", "\"\<11\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allGates", "=", 
    RowBox[{"Permutations", "[", "inputs", "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"composeGates", "[", 
    RowBox[{"g1_", ",", "g2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputOrder", "=", "inputs"}], "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"g2", "[", 
        RowBox[{"[", 
         RowBox[{"First", "@", 
          RowBox[{"First", "@", 
           RowBox[{"Position", "[", 
            RowBox[{"inputOrder", ",", 
             RowBox[{"g1", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "g1", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, 
   3.961064214814802*^9},
 CellLabel->
  "In[627]:=",ExpressionUUID->"ede1138c-0913-e045-b257-86533df6fa6b"],

Cell[TextData[StyleBox["\tCalculates the order of a gate g, which is the \
minimum number of times g must be composed with itself to return to the \
identity gate, or returns \[Infinity] if it does not do so within 100 steps. ",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{
  3.961064221372877*^9, 3.9610811446858807`*^9, {3.961081564771694*^9, 
   3.961081565929575*^9}},ExpressionUUID->"6f1f0c90-a768-db42-b988-\
09624a0c9f6c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"gateOrder", "[", "g_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"powers", ",", "pos"}], "}"}], ",", 
     RowBox[{
      RowBox[{"powers", "=", 
       RowBox[{"Rest", "[", 
        RowBox[{"FoldList", "[", 
         RowBox[{"composeGates", ",", "g", ",", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"g", ",", "100"}], "]"}]}], "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"pos", "=", 
       RowBox[{"FirstPosition", "[", 
        RowBox[{"powers", ",", "inputs", ",", 
         RowBox[{"Missing", "[", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pos", "===", 
         RowBox[{"Missing", "[", "]"}]}], ",", "Infinity", ",", 
        RowBox[{"pos", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findClosure", "[", 
    RowBox[{"generators_", ",", 
     RowBox[{"maxDepth_", ":", "5"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"known", "=", "generators"}], ",", 
       RowBox[{"newSet", "=", "generators"}], ",", "current"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"current", "=", "newSet"}], ";", "\[IndentingNewLine]", 
         RowBox[{"newSet", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"composeGates", "[", 
                RowBox[{"g1", ",", "g2"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"g1", ",", "current"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"g2", ",", "generators"}], "}"}]}], "]"}], ",", "1"}],
             "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"known", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"known", ",", "newSet"}], "]"}]}], ";"}], ",", 
        RowBox[{"{", "maxDepth", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"DeleteDuplicates", "[", "known", "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, {
   3.961064214814802*^9, 3.961064231715557*^9}, {3.961103820149143*^9, 
   3.96110382117696*^9}},
 CellLabel->"",ExpressionUUID->"2f22082e-6508-f74f-9faa-acc1ed196f8a"],

Cell[TextData[StyleBox["\tComputes the closure of a set of generator gates by \
iteratively composing all pairs of known gates up to a specified depth, \
returning the set of all unique gates \t\tthat can be built from the \
generators within that depth.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{
  3.961064237421171*^9, 3.961081141934908*^9, {3.9610815514702263`*^9, 
   3.961081553485697*^9}},ExpressionUUID->"7a669b7f-bec5-044e-b9ee-\
c6e64cf97f3f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"permListFromGate", "[", "g_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"First", "@", 
       RowBox[{"FirstPosition", "[", 
        RowBox[{"inputs", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", "g"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"toPermutation", "[", "g_", "]"}], ":=", 
    RowBox[{"PermutationCycles", "[", 
     RowBox[{"permListFromGate", "[", "g", "]"}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gatePairs", "=", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Subsets", "[", 
      RowBox[{"allGates", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"OrderedQ", "[", "#", "]"}], "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, {
   3.961064214814802*^9, 3.961064231715557*^9}, 3.9610642646667786`*^9, {
   3.9610843560658054`*^9, 3.9610843572226295`*^9}, {3.961084888306898*^9, 
   3.961084892680193*^9}},
 CellLabel->
  "In[632]:=",ExpressionUUID->"e3119324-b2ca-0749-9d0b-69401a59d3f6"],

Cell[TextData[{
 StyleBox["\tConvert a reversible gate into its corresponding permutation in ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "4"], TraditionalForm]],
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "ab7a376d-e94c-8948-839a-10fb35c83d65"],
 StyleBox[", extract its disjoint cycle representation, and return the cycle \
type, a sorted list of the lengths \t\tof its cycles, which characterizes the \
gate\[CloseCurlyQuote]s structure and determines its conjugacy class.",
  FontColor->RGBColor[0., 0., 0.]]
}], "CodeText",
 CellChangeTimes->{
  3.961064271153658*^9, {3.961081148255806*^9, 3.961081175274374*^9}, {
   3.961081556732853*^9, 
   3.9610815606444645`*^9}},ExpressionUUID->"489cfe1b-f0a5-6949-8e12-\
6e044ab4d356"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reachableFromPair", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"closure", "=", 
           RowBox[{"findClosure", "[", 
            RowBox[{"pair", ",", "5"}], "]"}]}], ",", 
          RowBox[{"prod", "=", 
           RowBox[{"composeGates", "[", 
            RowBox[{
             RowBox[{"pair", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"pair", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", "order", ",", 
          "permProd", ",", "cType", ",", "perm1", ",", "perm2", ",", "cType1",
           ",", "cType2", ",", "score"}], "}"}], ",", 
        RowBox[{
         RowBox[{"order", "=", 
          RowBox[{"gateOrder", "[", "prod", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"permProd", "=", 
          RowBox[{"toPermutation", "[", "prod", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cType", "=", 
          RowBox[{"permProd", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"perm1", "=", 
          RowBox[{"toPermutation", "[", 
           RowBox[{"pair", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perm2", "=", 
          RowBox[{"toPermutation", "[", 
           RowBox[{"pair", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cType1", "=", 
          RowBox[{"perm1", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"cType2", "=", " ", 
          RowBox[{"perm2", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"score", "=", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"0.5", "*", 
             RowBox[{"(", 
              RowBox[{"order", "/", "100"}], ")"}]}], "+", 
            RowBox[{"0.5", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", "closure", "]"}], "/", 
               RowBox[{"Length", "[", "allGates", "]"}]}], ")"}]}]}], "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<GeneratorPair\>\"", "->", "pair"}], ",", 
           RowBox[{"\"\<CycleType1\>\"", "->", "cType1"}], ",", 
           RowBox[{"\"\<CycleType2\>\"", "->", "cType2"}], ",", 
           RowBox[{"\"\<ProductCycleType\>\"", "->", "cType"}], ",", 
           RowBox[{"\"\<ProductOrder\>\"", "->", "order"}], ",", 
           RowBox[{"\"\<ReachableCount\>\"", "->", 
            RowBox[{"Length", "[", "closure", "]"}]}], ",", 
           RowBox[{"\"\<IsUniversal\>\"", "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Length", "[", "closure", "]"}], "==", 
              RowBox[{"Length", "[", "allGates", "]"}]}], ")"}]}], ",", 
           RowBox[{"\"\<SummaryScore\>\"", "->", "score"}]}], "|>"}]}]}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"pair", ",", "gatePairs"}], "}"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"universalPairsWithScores", "=", 
    RowBox[{"Select", "[", 
     RowBox[{"reachableFromPair", ",", 
      RowBox[{
       RowBox[{"#IsUniversal", "===", "True"}], "&"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Dataset", "[", 
   RowBox[{"universalPairsWithScores", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<GeneratorPair\>\"", ",", "\"\<CycleType1\>\"", 
        ",", "\"\<CycleType2\>\"", ",", "\"\<ProductCycleType\>\"", 
        ",", "\"\<ProductOrder\>\"", ",", "\"\<ReachableCount\>\"", 
        ",", "\"\<IsUniversal\>\"", ",", "\"\<SummaryScore\>\""}], "}"}]}], 
     "]"}], "]"}], "]"}], "\n"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, {
   3.961064214814802*^9, 3.961064231715557*^9}, 3.9610642646667786`*^9, {
   3.961083917374441*^9, 3.961083918343487*^9}, {3.9610843618619385`*^9, 
   3.96108440425605*^9}, 3.961084532524948*^9, {3.9610847268471527`*^9, 
   3.9610847546005497`*^9}, {3.961084794989729*^9, 3.9610848296010017`*^9}, {
   3.9610849560032234`*^9, 3.961084964737774*^9}, {3.961085031992365*^9, 
   3.9610850755389614`*^9}, {3.96108519884449*^9, 3.961085204690668*^9}, {
   3.961085251402342*^9, 3.961085265698969*^9}, {3.961103138735153*^9, 
   3.961103178379051*^9}, {3.961103232614744*^9, 3.9611032690113354`*^9}, {
   3.9611033005139275`*^9, 3.9611033174219112`*^9}, {3.9611033693951225`*^9, 
   3.9611033710198536`*^9}, {3.961103417036108*^9, 3.9611034810607357`*^9}},
 CellLabel->
  "In[802]:=",ExpressionUUID->"0f6ba934-78bd-3649-abbc-5a469cff47ca"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> {{3, 4}}, 
        "CycleType2" -> {{1, 2, 3, 4}}, "ProductCycleType" -> {{1, 2, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{3, 4}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 2, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{3, 4}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{1, 3, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{3, 4}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 4, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> {{2, 3}}, 
        "CycleType2" -> {{1, 2, 3, 4}}, "ProductCycleType" -> {{1, 2, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{2, 3}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{2, 3}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{2, 3}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 4, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> {{2, 3, 4}}, 
        "CycleType2" -> {{1, 2, 3, 4}}, "ProductCycleType" -> {{1, 2, 4, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{2, 3, 4}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 2}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{2, 3, 4}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{1, 3, 2, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{2, 3, 4}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{2, 3, 4}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{2, 3, 4}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 4, 3, 2}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> {{2, 4, 3}}, 
        "CycleType2" -> {{1, 2, 3, 4}}, "ProductCycleType" -> {{1, 2}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{2, 4, 3}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 2, 3, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{2, 4, 3}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{1, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{2, 4, 3}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 3, 4, 2}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{2, 4, 3}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 4, 2, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{2, 4, 3}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{2, 4}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 2, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{2, 4}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{1, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{2, 4}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 3, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{2, 4}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> {{1, 2}}, 
        "CycleType2" -> {{1, 2, 3, 4}}, "ProductCycleType" -> {{1, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{1, 2}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{1, 2}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{2, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 2}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{2, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> {{1, 2, 3}}, 
        "CycleType2" -> {{1, 2, 3, 4}}, "ProductCycleType" -> {{1, 3, 2, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{1, 2, 3}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 4, 3, 2}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{1, 2, 3}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{2, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 2, 3}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 2, 3}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{3, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 2, 3}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 3, 4, 2}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 2, 4, 3}}, "ProductCycleType" -> {{1, 4, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "01", "11", "10", "00"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 2, 4}}, "ProductCycleType" -> {{1, 4, 2, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "00", "01", "11"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 3, 2}}, "ProductCycleType" -> {{3, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{2, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "01", "11", "00"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 3, 4}}, "ProductCycleType" -> {{1, 2, 4, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 4, 2}}, "ProductCycleType" -> {{2, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 4, 3}}, "ProductCycleType" -> {{1, 2}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "01", "10", "00"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 4}}, "ProductCycleType" -> {{1, 2, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 2, 3, 4}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 3, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "01", "11", "10", "00"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 2, 4}}, "ProductCycleType" -> {{1, 4, 3, 2}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "00", "01", "11"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 3, 2}}, "ProductCycleType" -> {{2, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "01", "00", "11"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 3}}, "ProductCycleType" -> {{1, 2, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "01", "11", "00"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 3, 4}}, "ProductCycleType" -> {{1, 2}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 4, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{2, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 4, 2}}, "ProductCycleType" -> {{3, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 4, 3}}, "ProductCycleType" -> {{1, 2, 3, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 2, 4, 3}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{1, 2, 4}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{3, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 2, 4}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 4, 3, 2}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 2, 4}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{2, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 2, 4}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> {{1, 3, 2}}, 
        "CycleType2" -> {{1, 3, 4, 2}}, "ProductCycleType" -> {{1, 4, 2, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 3, 2}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 2, 3, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 3, 2}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 2, 4, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 3, 2}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{2, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "10", "01", "00", "11"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 3}}, "ProductCycleType" -> {{2, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "10", "01", "11", "00"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 3, 4}}, "ProductCycleType" -> {{1, 4, 2, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 2, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 2, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 4, 2}}, "ProductCycleType" -> {{1, 3, 2, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 4, 3}}, "ProductCycleType" -> {{2, 4}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 3, 4, 2}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{2, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "01", "00", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 3}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 2, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "01", "00", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 3}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{2, 3, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "01", "11", "00"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> {{1, 3, 4}}, 
        "CycleType2" -> {{1, 3, 2, 4}}, "ProductCycleType" -> {{1, 2, 4, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "01", "11", "00"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 3, 4}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 2}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "01", "11", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 3, 4}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{2, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> {{1, 3, 2, 4}}, 
        "CycleType2" -> {{1, 4, 3, 2}}, "ProductCycleType" -> {{1, 2, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> {{1, 3, 2, 4}}, 
        "CycleType2" -> {{1, 4, 2}}, "ProductCycleType" -> {{1, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> {{1, 3, 2, 4}}, 
        "CycleType2" -> {{1, 4, 3}}, "ProductCycleType" -> {{2, 3}}, 
        "ProductOrder" -> 2, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "01", "10", "00"}}, "CycleType1" -> {{1, 3, 2, 4}}, 
        "CycleType2" -> {{1, 4}}, "ProductCycleType" -> {{1, 3, 2}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> {{1, 4, 3, 2}}, 
        "CycleType2" -> {{1, 4, 2}}, "ProductCycleType" -> {{1, 2, 4, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> {{1, 4, 3, 2}}, 
        "CycleType2" -> {{1, 4, 3}}, "ProductCycleType" -> {{1, 3, 2, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "01", "10", "00"}}, "CycleType1" -> {{1, 4, 3, 2}}, 
        "CycleType2" -> {{1, 4}}, "ProductCycleType" -> {{2, 4, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 4, 3, 2}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 2, 4}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"11", "00", "10", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 4, 2}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 2, 4, 3}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "01", "00", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 4, 3}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 2, 3, 4}}, 
        "ProductOrder" -> 4, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "01", "10", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> {{1, 4}}, 
        "CycleType2" -> {{1, 4, 2, 3}}, "ProductCycleType" -> {{1, 2, 3}}, 
        "ProductOrder" -> 3, "ReachableCount" -> 24, "IsUniversal" -> True, 
        "SummaryScore" -> 0.515|>}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "GeneratorPair"} -> 
        5, {All, "CycleType1"} -> 1, {All, "CycleType2"} -> 
        1, {All, "ProductCycleType"} -> 1, {All, "ProductOrder"} -> 
        1, {All, "ReachableCount"} -> 1, {All, "IsUniversal"} -> 
        1, {All, "SummaryScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "GeneratorPair" -> TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[{
                TypeSystem`PackageScope`UnknownShape[False], 
                TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`RowShape[{
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5]}], 
                 DirectedInfinity[1], 4, {All, "GeneratorPair", 2}]}], 
              DirectedInfinity[1], 2, {All, "GeneratorPair"}], "CycleType1" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`UnknownShape[False]], 1, 
              DirectedInfinity[1], {All, "CycleType1"}], "CycleType2" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`UnknownShape[False]], 1, 
              DirectedInfinity[1], {All, "CycleType2"}], "ProductCycleType" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`UnknownShape[False]], 1, 
              DirectedInfinity[1], {All, "ProductCycleType"}], "ProductOrder" -> 
            TypeSystem`PackageScope`AtomShape[34], "ReachableCount" -> 
            TypeSystem`PackageScope`AtomShape[34], "IsUniversal" -> 
            TypeSystem`PackageScope`AtomShape[36], "SummaryScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 8, {All}]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "GeneratorPair", "CycleType1", "CycleType2", "ProductCycleType", 
         "ProductOrder", "ReachableCount", "IsUniversal", "SummaryScore"}, {
         TypeSystem`Tuple[{
           TypeSystem`Vector[
            TypeSystem`Atom[
             TypeSystem`Enumeration["00", "01", "10", "11"]], 4], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[
              TypeSystem`Enumeration["01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]]}]}], 
         TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Atom[Integer], TypeSystem`AnyLength], 1], 
         TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Atom[Integer], TypeSystem`AnyLength], 1], 
         TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Atom[Integer], TypeSystem`AnyLength], 1], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Atom[Real]}], 84], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "GeneratorPair"} -> 
        5, {All, "CycleType1"} -> 1, {All, "CycleType2"} -> 
        1, {All, "ProductCycleType"} -> 1, {All, "ProductOrder"} -> 
        1, {All, "ReachableCount"} -> 1, {All, "IsUniversal"} -> 
        1, {All, "SummaryScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "GeneratorPair" -> TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[{
                TypeSystem`PackageScope`UnknownShape[False], 
                TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`RowShape[{
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5]}], 
                 DirectedInfinity[1], 4, {All, "GeneratorPair", 2}]}], 
              DirectedInfinity[1], 2, {All, "GeneratorPair"}], "CycleType1" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`UnknownShape[False]], 1, 
              DirectedInfinity[1], {All, "CycleType1"}], "CycleType2" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`UnknownShape[False]], 1, 
              DirectedInfinity[1], {All, "CycleType2"}], "ProductCycleType" -> 
            TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`UnknownShape[False]], 1, 
              DirectedInfinity[1], {All, "ProductCycleType"}], "ProductOrder" -> 
            TypeSystem`PackageScope`AtomShape[34], "ReachableCount" -> 
            TypeSystem`PackageScope`AtomShape[34], "IsUniversal" -> 
            TypeSystem`PackageScope`AtomShape[36], "SummaryScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 8, {All}]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "GeneratorPair", "CycleType1", "CycleType2", "ProductCycleType", 
         "ProductOrder", "ReachableCount", "IsUniversal", "SummaryScore"}, {
         TypeSystem`Tuple[{
           TypeSystem`Vector[
            TypeSystem`Atom[
             TypeSystem`Enumeration["00", "01", "10", "11"]], 4], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[
              TypeSystem`Enumeration["01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]]}]}], 
         TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Atom[Integer], TypeSystem`AnyLength], 1], 
         TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Atom[Integer], TypeSystem`AnyLength], 1], 
         TypeSystem`Vector[
          TypeSystem`Vector[
           TypeSystem`Atom[Integer], TypeSystem`AnyLength], 1], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Atom[Real]}], 84], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 8, "DataRowCount" -> 84, "DataColumnCount" -> 
     8, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GeneratorPair", 
                  Style[
                  "GeneratorPair", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GeneratorPair"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GeneratorPair"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CycleType1", 
                  Style[
                  "CycleType1", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "CycleType1"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "CycleType1"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CycleType2", 
                  Style[
                  "CycleType2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "CycleType2"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "CycleType2"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ProductCycleType", 
                  Style[
                  "ProductCycleType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ProductCycleType"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ProductCycleType"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ProductOrder", 
                  Style[
                  "ProductOrder", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ProductOrder"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ProductOrder"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ReachableCount", 
                  Style[
                  "ReachableCount", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ReachableCount"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ReachableCount"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["IsUniversal", 
                  Style[
                  "IsUniversal", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "IsUniversal"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "IsUniversal"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SummaryScore", 
                  Style[
                  "SummaryScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "SummaryScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "SummaryScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{12, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{12, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{12, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{12, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{16, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{16, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 4, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{16, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2, 3, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{16, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{17, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{17, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{17, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{17, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 2, 4}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 3, 4, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{19, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{19, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 3, 2}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{19, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{19, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 4, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 4, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20, 
                    Key["CycleType1"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["CycleType1"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 2, 3}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20, 
                    Key["CycleType2"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["CycleType2"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20, 
                    Key["ProductCycleType"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["ProductCycleType"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 84, 1], {1, 84 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 84, 1], {1, 84 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[84, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[84, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 84, 1], {1, 84 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 84, 1], {1, 84 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       899.3535979652404, {287.25203328722347`, 292.98396671277663`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      899.3535979652404, {287.25203328722347`, 292.98396671277663`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.961063871497278*^9, 3.9610839481238003`*^9, 3.96108437303586*^9, 
   3.9610844083197384`*^9, 3.961084533506653*^9, 3.9610845924174824`*^9, {
   3.9610847380499287`*^9, 3.9610847563261223`*^9}, {3.961084824250847*^9, 
   3.961084830671398*^9}, {3.961085078092098*^9, 3.961085085174698*^9}, 
   3.9610852064447803`*^9, 3.9610852667699356`*^9, 3.9611013645124607`*^9, 
   3.9611023009238033`*^9, 3.961103180828903*^9, 3.9611032345319767`*^9, 
   3.9611032882341576`*^9, 3.9611033202379646`*^9, 3.9611033749709473`*^9, {
   3.9611034185070724`*^9, 3.9611034827111816`*^9}},
 CellLabel->
  "Out[804]=",ExpressionUUID->"8579928d-f8b9-b64c-85ba-540df51ea2cf"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Introduction to the Quantum Framework",
 FontSize->20]], "Section",
 CellChangeTimes->{{3.9610821299938526`*^9, 
  3.961082139577753*^9}},ExpressionUUID->"91d7ff69-407a-1943-84c8-\
80f9e5ab99e3"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Quantum gates are represented by unitary matrices acting on \
vectors in a complex vector space, typically ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["C", 
    SuperscriptBox["2", "n"]], TraditionalForm]],
  FontSize->15,ExpressionUUID->"09d7efb7-cbd3-f44f-a2c0-4d949b9c7352"],
 StyleBox["n-qubit systems. These matrices operate on quantum basis states, \
which for two qubits are {\[Divides]00\:27e9,\[Divides]01\:27e9,\[Divides]10\
\:27e9,\[Divides]11\:27e9}. A matrix is unitary if ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,ExpressionUUID->"e0b5dbe2-9427-bf47-8794-3f4e63811987"],
 StyleBox["U=I, meaning it preserves the total probability (norm) of the \
quantum state. Here, each reversible gate was converted into a 4\[Times]4 \
permutation matrix, which simply reorders the basis states  their amplitudes. \
Since permutation matrices are a special case of unitary matrices, verifying \
their unitarity confirms that classical reversible gates are compatible with \
quantum operations. ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "Subsubsection",
 CellChangeTimes->{
  3.960904172651268*^9, {3.9609120035931664`*^9, 3.960912006278599*^9}, {
   3.960938667731127*^9, 3.960938668798723*^9}, {3.9609690498809834`*^9, 
   3.9609690656020184`*^9}, {3.9609691551916237`*^9, 3.9609691560729847`*^9}, 
   3.9609692516949005`*^9, {3.96096931464497*^9, 3.9609693679939213`*^9}, {
   3.9609694121651344`*^9, 3.960969504798914*^9}, {3.9609695752272015`*^9, 
   3.960969577548582*^9}, 3.9609779523993587`*^9, 3.961081364575617*^9, {
   3.961081572489046*^9, 3.9610816036262264`*^9}, 
   3.961081946850197*^9},ExpressionUUID->"6ac089d5-4e40-8541-83bc-\
5dc04198db67"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"permMatrix", "[", "perm_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", "perm", "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"SparseArray", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{
              RowBox[{"FirstPosition", "[", 
               RowBox[{"inputs", ",", 
                RowBox[{"perm", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "->", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "n"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "n"}], "}"}]}], "]"}], "//", "Normal"}]}], "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{
  3.9609076453030853`*^9, {3.9609120400056458`*^9, 3.9609120620715714`*^9}, {
   3.960969621651991*^9, 3.9609696407167606`*^9}, {3.961057639354147*^9, 
   3.9610576420726757`*^9}},
 CellLabel->
  "In[638]:=",ExpressionUUID->"e4279c24-a3d2-ca46-bbc4-bd10ea6f8a45"],

Cell[TextData[StyleBox["Each gate is converted to a permutation matrix that \
maps basis vectors accordingly",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.960969843130186*^9, 
  3.9609698468277645`*^9}},ExpressionUUID->"56a242f2-c7de-4b43-a424-\
b267d0db28e9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allPermutationMatrices", "=", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"allGates", ",", 
      RowBox[{"permMatrix", "/@", "allGates"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"isUnitary", "[", "m_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Chop", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ConjugateTranspose", "[", "m", "]"}], ".", "m"}], "-", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "m", "]"}], "]"}]}], "]"}], "===", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Length", "[", "m", "]"}], ",", 
        RowBox[{"Length", "[", "m", "]"}]}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"unitaryChecks", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Keys", "[", "allPermutationMatrices", "]"}], ",", 
     RowBox[{"isUnitary", "/@", 
      RowBox[{"Values", "[", "allPermutationMatrices", "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.9609076453030853`*^9, {3.9609120400056458`*^9, 3.9609120620715714`*^9}, {
   3.960969621651991*^9, 3.9609696407167606`*^9}, 3.960969876264408*^9, {
   3.9610576704354153`*^9, 3.9610576871749973`*^9}},
 CellLabel->
  "In[639]:=",ExpressionUUID->"0f675262-3854-f045-a145-eecdc08c0b08"],

Cell[TextData[StyleBox["Verifies if each permutation matrix is unitary, \
confirming that it preserves inner products and is valid in quantum \
computing.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{
  3.9609698821473083`*^9, {3.961081934570921*^9, 
   3.961081934838503*^9}},ExpressionUUID->"5e255d89-7b7d-374e-b6bc-\
8a4927c0c9a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"perm", ",", 
         RowBox[{"MatrixForm", "[", 
          RowBox[{"allPermutationMatrices", "[", "perm", "]"}], "]"}], ",", 
         RowBox[{"unitaryChecks", "[", "perm", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"perm", ",", 
         RowBox[{"Keys", "[", "allPermutationMatrices", "]"}]}], "}"}]}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Permutation\>\"", ",", "\"\<4\[Times]4 Matrix\>\"", 
       ",", "\"\<Is Unitary?\>\""}], "}"}]}], "]"}], ",", 
   RowBox[{"Frame", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.9609076453030853`*^9, {3.9609120400056458`*^9, 3.9609120620715714`*^9}, {
   3.960969621651991*^9, 3.9609696407167606`*^9}, 3.960969876264408*^9},
 CellLabel->
  "In[642]:=",ExpressionUUID->"667a8c06-beb6-a84c-9638-b01026616fab"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Permutation\"\>", "\<\"4\[Times]4 Matrix\"\>", "\<\"Is \
Unitary?\"\>"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"11\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"11\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"00\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"00\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"10\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"11\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"11\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"00\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"00\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"01\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"00\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"00\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"01\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"01\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"10\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.961057498779373*^9, 3.961057576039301*^9, 
  3.9610576462749157`*^9, 3.96105769112821*^9, 3.961062962198391*^9, 
  3.961063705981615*^9, 3.961101365154499*^9, 3.961102301600033*^9},
 CellLabel->
  "Out[642]=",ExpressionUUID->"1422ccd9-2488-9f44-8891-c4e7bc856c29"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.960912045404972*^9, 3.960912057792761*^9}, {
  3.9609695255310097`*^9, 3.960969527060171*^9}, {3.9609701024904423`*^9, 
  3.960970102941675*^9}},ExpressionUUID->"f64ed77f-63fa-c44f-b535-\
9c9a9d5f2d88"]
}, Open  ]],

Cell["\<\
Why unitarity alone is not enough in quantum gate design (EXPLAIN WHY Q GATES \
ITS UNITARY)\
\>", "Subsection",
 CellChangeTimes->{{3.9609701351013813`*^9, 3.9609701364962997`*^9}, {
  3.9609704475560627`*^9, 3.9609704488126125`*^9}, {3.9609704938053303`*^9, 
  3.9609705239169044`*^9}, {3.9609737812477303`*^9, 
  3.9609737906054993`*^9}},ExpressionUUID->"4125cf57-aa06-be48-8e22-\
a2c8c159850a"],

Cell[TextData[{
 StyleBox["While unitarity is a necessary condition for any quantum gate, it \
is not sufficient on its own to guarantee that a gate contributes \
meaningfully to quantum universality. All quantum gates must be unitary to \
preserve the norm of quantum states, and all classical reversible \
gates-represented as permutation matrices satisfy this condition by \
construction. However, not all unitary gates are equally powerful. Some \
unitary operations, like simple swaps or identity, do not generate \
entanglement or explore enough of the state space to enable universal quantum \
computation. This distinction is important because our goal is not just to \
verify reversibility, but to understand which gates or gate sets can generate \
the full space of quantum operations. The following proof shows how all \
unitarity gates are reversible. \n",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["Let U be a unitary matrix, meaning it satisfies the condition:\n\t\
\n",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["(1) ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "a0631e82-e5e3-5141-ae5b-f1096e849d05"],
 StyleBox[" U=U",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "e2c2587b-8a30-0749-8b3c-b71ea7fd198c"],
 StyleBox[" = I,\n\t\t\t\t\t\t\nwhere ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "a13e8c56-2b30-4945-84ad-7ce64ab4e837"],
 StyleBox["U   is the conjugate transpose of \|01d448",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "d04b936e-3c15-8d46-abb3-20bdcce25d46"],
 StyleBox[", and I is the identity matrix. To show that U is reversible, we \
must prove that there exists a matrix V such that:\n\t\n(2) VU = UV = I\n\t\t\
\t\t\t\t\nBut this is exactly what (1) gives us: the inverse of U exists and \
is equal to ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "76fda94c-4024-a84f-9ae4-def261e74b00"],
 StyleBox["U",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" , i.e.,\n\t\n(3) V=",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    SuperscriptBox["U", 
     RowBox[{"-", "1", " "}]]}], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "258dfe60-c011-314d-8d3b-06ca31541045"],
 StyleBox["=",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "f295df9b-30ff-bd4a-af24-780637f76717"],
 StyleBox["\n\t\t\t\t\t\t\nTherefore, applying ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "02542820-41c2-ee44-8165-d436a9c736c6"],
 StyleBox[" after U (or vice versa) gives the identity operation. This proves \
that every unitary operator has a well-defined inverse and is thus \
reversible.",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "Subsection",
 CellChangeTimes->{{3.9609701351013813`*^9, 3.9609701364962997`*^9}, {
   3.9609704475560627`*^9, 3.9609704488126125`*^9}, 3.9609704938053303`*^9, {
   3.9609705677423267`*^9, 3.9609706211127033`*^9}, {3.960970692829935*^9, 
   3.9609707802618847`*^9}, {3.960970811473015*^9, 3.9609708119918633`*^9}, {
   3.960970884050539*^9, 3.9609711675855465`*^9}, {3.960971200653204*^9, 
   3.960971233185835*^9}, 3.9609713319464645`*^9, {3.960971615452978*^9, 
   3.960971630051468*^9}, {3.960971947622801*^9, 3.9609719514161987`*^9}, {
   3.9609721302732315`*^9, 3.9609721823963776`*^9}, {3.9609737073707047`*^9, 
   3.9609737193921757`*^9}, {3.96097381681629*^9, 3.960973824773609*^9}, {
   3.960973965816452*^9, 3.9609739825549946`*^9}, {3.960974012883827*^9, 
   3.9609740212362823`*^9}, {3.9609776126932564`*^9, 3.960977636338703*^9}, {
   3.960978569783249*^9, 3.9609785702530594`*^9}, {3.9610835182795753`*^9, 
   3.961083518677719*^9}, {3.9610835593974323`*^9, 3.9610836002609177`*^9}, {
   3.9610837065803013`*^9, 
   3.9610837370407505`*^9}},ExpressionUUID->"68cff275-9baa-0442-95bd-\
801e4a144b4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Discretizing Two-Qubit Gates Using Canonical \
Coordinates and the Weyl Chamber", "Subsection"]], "Section",
 CellChangeTimes->{{3.9609713826668816`*^9, 3.960971390224619*^9}, {
  3.960971599109377*^9, 3.960971599962921*^9}, {3.960971640913126*^9, 
  3.960971641924719*^9}},ExpressionUUID->"37cb895c-d343-6e43-9bf0-\
078dbce33db3"],

Cell[TextData[StyleBox["In the study of two-qubit quantum gates, one of the \
main challenges is the infinite dimensionality of the unitary group SU(4), \
which contains all possible two-qubit operations. Directly analyzing or \
searching through this continuous, uncountably infinite set to find universal \
gates or to classify gate behaviors is computationally infeasible. Therefore, \
a key step is to reduce this infinite space to a finite, manageable set of \
representatives that preserves the essential structure of two-qubit \
operations, especially their entangling properties. For now, we define \
universality as the ability of a gate or set of gates to generate all other \
gates in this finite representative set, rather than the entire infinite \
group, enabling a practical approach to study and synthesis. This finite \
approximation is still highly valuable because any physically implementable \
quantum circuit can only approximate continuous operations to finite \
precision. By focusing on the ability to generate all gates within this \
discrete representative set, we ensure coverage of all essential classes of \
two-qubit operations up to a chosen precision.",
 FontSize->15,
 FontColor->RGBColor[0., 0., 0.],
 Background->RGBColor[1., 1., 1.]]], "Text",
 CellChangeTimes->{{3.96097164846509*^9, 3.960971659380581*^9}, {
  3.960978554752775*^9, 
  3.960978626609209*^9}},ExpressionUUID->"97852299-77c3-644d-979e-\
8fb7c8f52d5a"],

Cell[TextData[{
 StyleBox["Unlike simply checking if a gate is unitary (which all valid \
quantum gates must be) this approach goes deeper by isolating the nonlocal \
characteristics of the gate that determine its ability to generate \
entanglement and achieve universality. The space of two-qubit gates, \
described by the group SU(4), has 15 real degrees of freedom, corresponding \
to the complex structure of 4\[Times]4 unitary matrices with determinant 1. \
However, the canonical KAK decomposition allows us to factor out local \
single-qubit unitaries, each with 3 parameters for a total of 12 degrees of \
freedom, which do not affect entanglement. This reduces the problem to \
focusing on just three parameters (c1, c2, c3)\:200b that uniquely describe \
the nonlocal entangling part of the gate. These parameters lie within a \
bounded, convex geometric region called the Weyl chamber:\n", "Subsection",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n", "Subsection",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["0 \[LessEqual] c3 \[LessEqual] c2 \[LessEqual] c1 \[LessEqual]", 
  "Subsection",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   FractionBox["\[Pi]", "4"], TraditionalForm]],
  FontSize->15,ExpressionUUID->"f148ceb3-0a8a-ed41-aeef-537b46f063cc"],
 StyleBox["\n\t\t\t\t\t\t\t\t\nBy restricting attention to this \
three-dimensional region in ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "3"], TraditionalForm]],
  FontSize->15,ExpressionUUID->"a700d18e-a0bf-f741-8f38-f5f4c1dab7f0"],
 StyleBox[", the infinite, high-dimensional space of two-qubit unitaries is \
transformed into a finite and tractable geometric object, enabling efficient \
classification and analysis of gates based on their entangling power.\n\nBy \
discretizing the Weyl chamber, we obtain a finite lattice of points that \
serve as canonical representatives of all two-qubit gates up to local \
equivalence. This finite set retains all the essential information about gate \
nonlocality and entangling power, allowing efficient classification and \
comparison without loss of generality. It also provides a structured way to \
systematically search for and analyze universal gates, those that, combined \
with local operations, can approximate any two-qubit gate.\n\nMathematically, \
the canonical form of any two-qubit unitary U \[Element] SU(4) can be \
expressed as\n\nU=(k1\[CircleTimes]k2)exp(i(c1 X \[CircleTimes] X+ c2 Y \
\[CircleTimes] Y + c3 Z \[CircleTimes] Z)) (k3\[CircleTimes]k4)\n\t\t\t\t\n\
where ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "i"], TraditionalForm]],
  FontSize->15,ExpressionUUID->"ba6fa096-4fe3-744a-8232-2a4c756fc107"],
 StyleBox[" \[Element] \|01d446\|01d448(2) are local unitaries, and the \
triple (\|01d4501,\|01d4502,\|01d4503) lies in the Weyl chamber. This \
decomposition isolates the nonlocal entangling component of U, which is \
invariant under local operations and fully determines the gate\
\[CloseCurlyQuote]s capacity to generate entanglement.\n\nTo discretize, we \
select a step size \[CapitalDelta] =",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   FractionBox["\[Pi]", 
    RowBox[{"4", 
     RowBox[{"(", 
      RowBox[{"steps", "-", "1"}], ")"}]}]], TraditionalForm]],
  FontSize->15,ExpressionUUID->"c3d9f1f0-714d-804e-95df-ffedc7631e51"],
 StyleBox[" and generate all triples (\|01d4501,\|01d4502,\|01d4503) with ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],
  FontSize->15,ExpressionUUID->"63633113-a201-fe40-a0c2-f3fb5e8e59b1"],
 StyleBox[" multiples of \n\[CapitalDelta] that satisfy the chamber \
inequalities, producing a finite grid. The universality of a gate depends on \
its canonical coordinates: those closer to the interior of the Weyl chamber \
typically correspond to stronger entangling gates, capable of producing a \
wider range of operations through composition with local unitaries. \
Conversely, gates near the boundaries usually have limited entangling power \
and generate smaller subsets.  The follow represents the finite grid:",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.9609713826668816`*^9, 3.960971390224619*^9}, {
   3.960971599109377*^9, 3.960971599962921*^9}, 3.960971640913126*^9, 
   3.9609716847078133`*^9, {3.960971756826088*^9, 3.9609718223690968`*^9}, {
   3.960977647729454*^9, 3.9609776644283695`*^9}, {3.9609779792606487`*^9, 
   3.9609779849429836`*^9}, {3.9609780366252937`*^9, 
   3.9609780970677357`*^9}, {3.960978155919771*^9, 3.960978177855076*^9}, {
   3.960978236577286*^9, 3.9609782978630695`*^9}, 3.9609783440307293`*^9, 
   3.960978437678297*^9, {3.960978684727476*^9, 3.960978918757532*^9}, {
   3.960978983742655*^9, 3.960979010404104*^9}, {3.960979071187731*^9, 
   3.960979170107538*^9}, {3.9609792091015797`*^9, 3.9609792116655083`*^9}, {
   3.96099157850457*^9, 3.9609915998745193`*^9}, {3.961100038699251*^9, 
   3.9611000497978153`*^9}},ExpressionUUID->"e9038587-8e3b-b940-b6ef-\
c5615b7c7bbf"],

Cell["Define Example Local Single Qubit Matrices: Pauli x,y,z", "CodeText",
 CellChangeTimes->{{3.9609794328218975`*^9, 
  3.960979469754835*^9}},ExpressionUUID->"6b4cab5a-f9f2-fd4b-ab65-\
9c097eca27f0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Sigma]x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]y", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "I"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]z", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"-", "1"}]}], "}"}]}], "}"}], "u"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"id", "=", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.9609794032904243`*^9}, {3.961101358162277*^9, 
   3.9611013590337753`*^9}, 
   3.961102891383873*^9},ExpressionUUID->"4ee76737-f9f8-0741-a61b-\
b6c2555ea2d1"],

Cell["Perform the Canonical KAK Transformation Setup", "CodeText",
 CellChangeTimes->{{3.9609892966221943`*^9, 
  3.9609893111506615`*^9}},ExpressionUUID->"fcc121df-e70a-cc47-b6b2-\
d28058db6df9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"K", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}], "*", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "I"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "I", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "I", ",", 
        RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", 
        RowBox[{"-", "I"}]}], "}"}]}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Kdag", "=", 
   RowBox[{"ConjugateTranspose", "[", "K", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}},
 CellLabel->
  "In[647]:=",ExpressionUUID->"caff2e88-e08f-c14f-91a4-3e738088b83a"],

Cell[TextData[{
 "Defines a scaled 4\[Times]4 unitary matrix K and its conjugate transpose ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["K", "T"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "55934c0b-e1de-2640-929c-d545c818fea0"],
 "K."
}], "CodeText",
 CellChangeTimes->{{3.9609896123840504`*^9, 
  3.96098965595076*^9}},ExpressionUUID->"693feb77-36d8-7045-871c-\
63d86d518c80"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getCanonicalCoordinates", "[", "U_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"W", ",", "m", ",", "eigPhases", ",", "canonAngles"}], "}"}], ",", 
     RowBox[{
      RowBox[{"W", "=", 
       RowBox[{"Kdag", ".", "U", ".", "K"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"m", "=", 
       RowBox[{
        RowBox[{"Transpose", "[", "W", "]"}], ".", "W"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eigPhases", "=", 
       RowBox[{
        RowBox[{"Arg", "[", 
         RowBox[{"Eigenvalues", "[", "m", "]"}], "]"}], "/", "2"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"canonAngles", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"eigPhases", ",", "Pi"}], "]"}], ",", "Greater"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Take", "[", 
       RowBox[{"canonAngles", ",", "3"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, 
   3.9609897167844105`*^9},
 CellLabel->
  "In[649]:=",ExpressionUUID->"bc11c7b8-0dc7-7041-a970-f5444eb16eed"],

Cell["\<\
Calculates three sorted canonical angles of unitary matrix U using a basis \
change by K and eigenphase extraction\
\>", "CodeText",
 CellChangeTimes->{{3.9609897233799763`*^9, 
  3.9609897369118595`*^9}},ExpressionUUID->"6654f8fe-2487-6f45-b574-\
e1cbf09929dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"steps", "=", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"stepSize", "=", 
   RowBox[{"Pi", "/", 
    RowBox[{"(", 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{"steps", "-", "1"}], ")"}]}], ")"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}},
 CellLabel->
  "In[650]:=",ExpressionUUID->"c4efd8ee-69c6-f644-982a-cfa195392265"],

Cell["Defines Discretization Parameters", "CodeText",
 CellChangeTimes->{{3.9609899039714165`*^9, 3.960989914559143*^9}, 
   3.960989993692093*^9},ExpressionUUID->"a74ca785-b0dc-444f-ab27-\
472757a3676b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allTriples", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c1", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c2", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c3", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}]}], "]"}], ",", 
     "2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 3.9609900062525253`*^9}},
 CellLabel->
  "In[652]:=",ExpressionUUID->"62d5ab74-464c-a147-a50e-f95d54c219e5"],

Cell["Generates a flattened list of all triples ", "CodeText",
 CellChangeTimes->{{3.9609900132811413`*^9, 3.9609900144063854`*^9}, {
  3.9609900486697273`*^9, 
  3.960990056154396*^9}},ExpressionUUID->"1131d6db-91b7-0948-a436-\
d615316397a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"discreteWeylChamber", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"allTriples", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609900715964413`*^9}},
 CellLabel->
  "In[653]:=",ExpressionUUID->"028d92ca-8a68-254e-b643-1f2db082acd8"],

Cell["Plots the points in 3d", "Text",
 CellChangeTimes->{{3.960990076882551*^9, 
  3.960990080357069*^9}},ExpressionUUID->"32d46792-285d-5748-9b94-\
771e41ad745f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{"discreteWeylChamber", ",", 
   RowBox[{"Boxed", "->", "True"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<c\:2081\>\"", ",", "\"\<c\:2082\>\"", 
      ",", "\"\<c\:2083\>\""}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{"Blue", ",", 
      RowBox[{"PointSize", "[", "Medium", "]"}]}], "}"}]}], ",", 
   RowBox[{"AxesOrigin", "->", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Pi", "/", "4"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Pi", "/", "4"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Pi", "/", "4"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{
   "PlotLabel", "->", "\"\<Discrete Weyl Chamber (Steps = 10)\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.960990083114691*^9}, {
   3.9610572821399307`*^9, 3.9610572831944504`*^9}},
 CellLabel->
  "In[654]:=",ExpressionUUID->"24e516d3-e698-4f49-a216-33500f29a592"],

Cell[BoxData[
 Graphics3DBox[{{
    {RGBColor[0, 0, 1], PointSize[Medium], Point3DBox[CompressedData["
1:eJx1lrFqllEMhn/sNQhdewEdC24/wj91LAUHcRHs6uBFCNKb6NgbcHc5c6cs
SgkIEaFzly665PvJk7yFEni+NHlPTpKes4+frz692u12v/7/nuz0z9fDn8vT
d9/3ivM7ebVLxFkizpJxGI9c+ae9+XL+5urHQ9OTnHrI01a+hP+S/tRDXeSM
w3jk9buJ+puov4n6m6i/ifqTr43zvOSMM9fP5Hl5bvJZJ/WayE9/29+/vvvw
+PSz1Tk560yetvIl/Jf0T5ucdSZnHNaZPG3Na0KnCZ3W4rPOs/+xzqw3OfOy
TuTMy/zk9e9c7BMX+8TbvVfOfeLt3me+Nj7vExf7hLzHqdbbvZPPOq3Fn+eY
/rZx3js58/LeyZl37keX9877J5/r7KLOrDf9rXGlJ+3z+29vL25/t/5Mzv4k
T1v5Ev5L+qdNzv4kZxz2J3namteEThM6rcVnf87+tnH2Jznzsj/JmZf9SZ62
1sdFnV3U2UWdvelhf5IrPexP9ik5dbK/yKmT90ZOndRLXuOFeF+FeF9Fm6/K
+b6KNl8zXxuf31fR5mvmPU79HlsdZ518X5GvxlX8aqPNFznzzu+jaPM1+/e8
9Xu0+SKf68z/29Hma/a3xpWe+nfR5oucOuf9HW2+Zn9rnDrn/RFyvjhn5HO/
cT4CdWK/se+OnPrn+wlRD8aP/en54frl7G/bG8m5N8jTVr6E/5L+aZNzb5Az
DvcGedqa14ROEzqtxefemP1t49wb5MzLvUHOvNwb5GlrfVzU2UWdXdTZmx7u
DXKlJ21y7g1y6uTeIKdO7g1y6uTeIE9b+yFEv4XotxD9FqLfounn3pjjeONK
P/cG9wc5z8W5J+e5OE/kPBf7iJzn4vnI0/4De5tf4w==
      "]]}, {}, {}}, {}},
  Axes->True,
  AxesLabel->{
    FormBox[
     TagBox["\"c\:2081\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"c\:2082\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"c\:2083\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0, 0},
  BoxRatios->{1, 1, 0.4},
  Boxed->True,
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Lighting->{{"Ambient", 
     GrayLevel[0.5]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{0, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 0, 2}]}},
  PlotLabel->FormBox[
   "\"Discrete Weyl Chamber (Steps = 10)\"", TraditionalForm],
  PlotRange->{{0., 0.7853981633974483}, {0., 0.7853981633974483}, {0., 
   0.7853981633974483}},
  PlotRangePadding->{{0, 0}, {0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.960991010696886*^9, 3.961057284746065*^9, 3.961063706589714*^9, {
   3.9611013548924866`*^9, 3.961101365313442*^9}, 3.9611023018807106`*^9},
 CellLabel->"Out[654]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJysvQu4XVV1NryacyUIBNCgImQDAS2KpCJCAesuIhQQCJeggJDNLYQYMBEw
IEJ2VUoQNEKLFtSeSqm2FBv1q4jXYy3esWi1FUQ8alurIuRr1Vq8nX+NMd4x
5xhzjbV2+j3/eZ6TnL32WnPNOe63OeYJ516++sJLzr384vPP7R3z6nPXrb74
/Mt6R7/q1fWlsd+qqgUvr6rf+kmvGq//nq+q+J8zq+p/ceHH/OdYb/HixZtv
uOEG/rSm+f2yH/7wh49ccsklje//jf+cGLz3ve99/+te97q5+p6PXXnllUd9
9rOfrcbys3PRs//Kf06tu/322+dXrVq16aabblp+7733zvzhH/4hfT7koYce
qhaMGOMv5Pt1VXVL/eVty6rqmuqFck3H5E8yzuRd1157bVpH/UPjPnzppZe+
0gz5bnl8eb24rVU1PU+XF/C/Y1uq6jB9tPpduY+WSq/a5bzzzsOSJ2lYWsrO
q1evJnCs+MAHPvBg/Bp9hbxA/l2ucKWfQ+W+VXfccQe9Rl4g15busMMOH7nq
qqt4RXbsP+c/xwdVdY+OPX/ood8eC1aB4WmGNDzNuJqSa4vqGRNiG0CX4adX
VNXX54855nPzg8HV8xdcsHr+vPPWzh944HfpLQ9U1ZLDAMgaEDQ0vUJpYnjz
zTcnervUDP1n/OfCte94xzs+esUVV/zPhReu+s3ZZ98wf+SRD8wfdtjX5leu
XD+/fPmfzu+yyxO0usP59qk7N27cSGjsf+lLX6JZ62r4Fa8yw7+D/3zSc3/w
gx/cWH9XD38h/dLfS3bbbbdNVXUxI4RW8bKXXTN/yilvnj/66HuPkFkTl9x2
3XXXPXbxxRfXJEHYGKPPCZh2JbfxnxO0kodq/NBraEX0uRoXLPaq6smbli/v
bT3zzKtuWb36n79ej3jkhz70ISbgBfS2V5sB3yYP/d6Xv/zld9QsUs5dkDZ5
8Be/+EUa5+m77LLLLTVHfqQGB/39fjPSn8RTO5twvVCGedbc3BwNQ//T4zTM
G+u32mFu7p7QkwQ39DSNRBOjCyfVb/lcDUD+vMUMtznP6of197+ph/r7V7/6
1Sd85CMfqXYSBOxwwgkn0Fg0hooGWuTd9X30nupvzXjC+NP0/F31PTq9191y
yy1b1q9fP/Oa17yGxlsk00zD4kcXffZtt93mhn2TTJOG+UE9TRqShico6JQI
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
u9nm1bspEt16yil3kNNtXZZk4kkqFcJpgmLo8/itbxNvFFUyGmFZjjdwvH0B
+TBjj/Jt9Cd5WbTyKH6edN+/ZVQXW3um3NwqseyScYy1z9msZqTqZe1SKUTe
NwWbXvCCB6PdQ9jZIdtqUpHxsViFltOZQCyHOIl5lmEErXH7GK93WGl+3pn9
Ftmwi51Ykp0tbHirwLWqFDQ/bBoLjVS3KulttRsQPkv6xcSmqigKud4CjCNx
M/oVLCGKcKfaQuFqDt3Q9QcBOHm/y3j/qv697fWvfz3JBwEMAfM1SiBzWrqP
6s1BwAADVev0w4w8mQ3aFNCpf9TkB0FFOo4Fn/4IQU3M2UgW1Vkdc8yHFEgk
j0ogiRBOxcy2ptXVhIvXOt6rJCpEQKLIn4jTqbIQ7/K3v/3tydJcIY/24S8S
hHrZKHYRy45dbZHx7NgEgAqoacJaNqlGFPePtHAEsFOpWIx+n/3s78+vWDHU
LWzV5Q6YLkMFYLqaZiFopjiiTM37YdNEW0kAaJc4J2mQU+WRMtOtIsoQmAfW
IRlYpRnoWK/d0A39S9LihbE1h3AnoR+Vo1Mu5Eq/L37xJ4ijN//O7xy5DbBU
YmUK2i7NkK+tMLPuq9vOE5J/Q2MCIRm1S04ytZWDgIed6d7L70r3weF8JHAF
5hrlLhCcBK9ZOH4K4p6NEVXZ8YNo6pmQJxUEzq5Zczlx3P8Sggs9BJk0RK5s
Nyyk21BTydWIzUlwHR3TAiqu+lTeE7rrM0EkwDJhyKwApiopwp5a864kCvTv
wneXObANKiP9ADZNTjHYUAVNwf+H9fWoTBg2leDEn61Z83CD8FbK/bNNh99r
tF5CUcPfdDr60AzOYWEZazCT72AXjD1O7INw3uWrHSBUcu1tAOFoKpcasDFS
mfsG9j4GDiibt26ddtpfkavy6/PPX63Ec2567h4PENi8vSLKP4vEgPHikvKA
Z+F8TwDIRUL9ckko16QopiOWQWbBA8VyFSxLzX1Du1ypvpnuq2CgAL5W/558
8pb5ww77Fl0/P6Msxe0jW2Fpvi9dW59XmNI7QKgLhjiDaIpWRtYwicq9sdLE
+CIKKSnGKyZI1CtwOyM2p8VpjfGG35x//sV2i9iCwECRhSYzoIbVa2gxUlLs
fW1sB3dEKQ6qdQIeqbIjwGIf/kSvEkOOkwgLGB9jmyrzg20S0V6Ft5xxxh4T
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\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"4d1b9598-2b83-8c46-8458-efdad620f913"]
}, Open  ]],

Cell["Distance Matching to Nearest Discrete Triple", "Text",
 CellChangeTimes->{{3.960990087866741*^9, 
  3.9609901000504055`*^9}},ExpressionUUID->"9cf9cc2b-1df5-b743-8b5f-\
68370d88f49f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nearestDiscretePoint", "[", "coord_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "distances", "}"}], ",", 
      RowBox[{
       RowBox[{"distances", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Norm", "[", 
           RowBox[{"coord", "-", "#"}], "]"}], "&"}], "/@", 
         "discreteWeylChamber"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"discreteWeylChamber", "[", 
        RowBox[{"[", 
         RowBox[{"First", "@", 
          RowBox[{"Ordering", "[", "distances", "]"}]}], "]"}], "]"}]}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CNOT", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SWAP", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"cnotCoords", "=", 
   RowBox[{"getCanonicalCoordinates", "[", "CNOT", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"swapCoords", "=", 
    RowBox[{"getCanonicalCoordinates", "[", "SWAP", "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cnotDiscrete", "=", 
   RowBox[{"nearestDiscretePoint", "[", "cnotCoords", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"swapDiscrete", "=", 
    RowBox[{"nearestDiscretePoint", "[", "swapCoords", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Column", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<CNOT canonical coordinates: \>\"", ",", "Bold", 
         ",", "\"\<Text\>\""}], "]"}], ",", 
       RowBox[{"Style", "[", 
        RowBox[{"cnotCoords", ",", "Blue", ",", "\"\<Text\>\""}], "]"}]}], 
      "}"}], "]"}], ",", 
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<CNOT nearest discrete point: \>\"", ",", "Bold", 
         ",", "\"\<Text\>\""}], "]"}], ",", 
       RowBox[{"Style", "[", 
        RowBox[{"cnotDiscrete", ",", 
         RowBox[{"Darker", "@", "Green"}], ",", "\"\<Text\>\""}], "]"}]}], 
      "}"}], "]"}], ",", 
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<SWAP canonical coordinates: \>\"", ",", "Bold", 
         ",", "\"\<Text\>\""}], "]"}], ",", 
       RowBox[{"Style", "[", 
        RowBox[{"swapCoords", ",", "Blue", ",", "\"\<Text\>\""}], "]"}]}], 
      "}"}], "]"}], ",", 
    RowBox[{"Row", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"\"\<SWAP nearest discrete point: \>\"", ",", "Bold", 
         ",", "\"\<Text\>\""}], "]"}], ",", 
       RowBox[{"Style", "[", 
        RowBox[{"swapDiscrete", ",", 
         RowBox[{"Darker", "@", "Green"}], ",", "\"\<Text\>\""}], "]"}]}], 
      "}"}], "]"}]}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, {3.9611013400757313`*^9, 3.9611013408187885`*^9}, {
   3.961101766771412*^9, 3.961101778821148*^9}},
 CellLabel->
  "In[655]:=",ExpressionUUID->"9c87dab6-4312-bb49-9500-4543b0f7fd9b"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox[
       "\"CNOT canonical coordinates: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{
            FractionBox["\[Pi]", "2"], ",", 
            FractionBox["\[Pi]", "2"], ",", "0"}], "}"}], 
        RGBColor[0, 0, 1], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"CNOT nearest discrete point: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{
            FractionBox[
             RowBox[{"2", " ", "\[Pi]"}], "9"], ",", 
            FractionBox[
             RowBox[{"7", " ", "\[Pi]"}], "36"], ",", 
            FractionBox["\[Pi]", "18"]}], "}"}], 
        RGBColor[0, 
         Rational[2, 3], 0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"SWAP canonical coordinates: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], 
        RGBColor[0, 0, 1], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"SWAP nearest discrete point: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], 
        RGBColor[0, 
         Rational[2, 3], 0], "Text", StripOnInput -> False]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.961102284501766*^9, 3.961102301946701*^9}},
 CellLabel->
  "Out[662]=",ExpressionUUID->"a3a3b66a-0271-c64d-8093-4b8025283f5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox[
       "\"CNOT canonical coordinates: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{
            FractionBox["\[Pi]", "2"], ",", 
            FractionBox["\[Pi]", "2"], ",", "0"}], "}"}], 
        RGBColor[0, 0, 1], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"CNOT nearest discrete point: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{
            FractionBox[
             RowBox[{"2", " ", "\[Pi]"}], "9"], ",", 
            FractionBox[
             RowBox[{"7", " ", "\[Pi]"}], "36"], ",", 
            FractionBox["\[Pi]", "18"]}], "}"}], 
        RGBColor[0, 
         Rational[2, 3], 0], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"SWAP canonical coordinates: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], 
        RGBColor[0, 0, 1], "Text", StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"SWAP nearest discrete point: \"", Bold, "Text", StripOnInput -> 
        False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], 
        RGBColor[0, 
         Rational[2, 3], 0], "Text", StripOnInput -> False]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Input",
 CellChangeTimes->{3.9611022834177856`*^9},
 CellLabel->
  "In[663]:=",ExpressionUUID->"eaccaa66-6c66-4f48-842a-4a4b0cc91f1d"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox[
       "\"CNOT canonical coordinates: \"", "Text", FontWeight -> Bold, 
        StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{
            FractionBox["\[Pi]", "2"], ",", 
            FractionBox["\[Pi]", "2"], ",", "0"}], "}"}], "Text", LineColor -> 
        RGBColor[0, 0, 1], FrontFaceColor -> RGBColor[0, 0, 1], BackFaceColor -> 
        RGBColor[0, 0, 1], GraphicsColor -> RGBColor[0, 0, 1], FontColor -> 
        RGBColor[0, 0, 1], StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"CNOT nearest discrete point: \"", "Text", FontWeight -> Bold, 
        StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{
            FractionBox[
             RowBox[{"2", " ", "\[Pi]"}], "9"], ",", 
            FractionBox[
             RowBox[{"7", " ", "\[Pi]"}], "36"], ",", 
            FractionBox["\[Pi]", "18"]}], "}"}], "Text", LineColor -> 
        RGBColor[0, 
          Rational[2, 3], 0], FrontFaceColor -> RGBColor[0, 
          Rational[2, 3], 0], BackFaceColor -> RGBColor[0, 
          Rational[2, 3], 0], GraphicsColor -> RGBColor[0, 
          Rational[2, 3], 0], FontColor -> RGBColor[0, 
          Rational[2, 3], 0], StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"SWAP canonical coordinates: \"", "Text", FontWeight -> Bold, 
        StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], "Text", LineColor -> 
        RGBColor[0, 0, 1], FrontFaceColor -> RGBColor[0, 0, 1], BackFaceColor -> 
        RGBColor[0, 0, 1], GraphicsColor -> RGBColor[0, 0, 1], FontColor -> 
        RGBColor[0, 0, 1], StripOnInput -> False]},
      "RowDefault"]},
    {
     TemplateBox[{
       StyleBox[
       "\"SWAP nearest discrete point: \"", "Text", FontWeight -> Bold, 
        StripOnInput -> False], 
       StyleBox[
        RowBox[{"{", 
          RowBox[{"0", ",", "0", ",", "0"}], "}"}], "Text", LineColor -> 
        RGBColor[0, 
          Rational[2, 3], 0], FrontFaceColor -> RGBColor[0, 
          Rational[2, 3], 0], BackFaceColor -> RGBColor[0, 
          Rational[2, 3], 0], GraphicsColor -> RGBColor[0, 
          Rational[2, 3], 0], FontColor -> RGBColor[0, 
          Rational[2, 3], 0], StripOnInput -> False]},
      "RowDefault"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.961102283523781*^9, 3.961102302007696*^9}},
 CellLabel->
  "Out[663]=",ExpressionUUID->"b7d7df98-ff96-3044-bc41-28aa9093dba5"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Defines entangling gate filter where at least one ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "42c79e8d-a737-cb4a-b511-6ec54c076356"],
 StyleBox[" does not equal 0",
  FontColor->RGBColor[0., 0., 0.]]
}], "CodeText",
 CellChangeTimes->{{3.9609908032361183`*^9, 3.96099080438834*^9}, {
   3.9609908554399548`*^9, 3.960990856952486*^9}, {3.9609910427313004`*^9, 
   3.960991092076723*^9}, 
   3.960991616316263*^9},ExpressionUUID->"5ee0d1ee-2e21-2240-928d-\
aa9b51e956d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"isEntangling", "[", 
    RowBox[{"{", 
     RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Norm", "[", 
     RowBox[{"{", 
      RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], "]"}], ">", "0.0001"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, 3.9609909148867817`*^9, 3.960990974326208*^9, 
   3.9609910391045113`*^9, 3.960991619723076*^9},
 CellLabel->
  "In[664]:=",ExpressionUUID->"3f378f47-0c5f-674e-9c86-afc8786b1f6a"],

Cell[TextData[StyleBox["Filters for entangling gates",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.960991625848448*^9, 
  3.9609916307341537`*^9}},ExpressionUUID->"de35c66b-6456-844e-a84a-\
b60eea954a64"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"universalTriples", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"discreteWeylChamber", ",", "isEntangling"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"universalGates", "=", 
    RowBox[{"buildRepresentativeGate", "/@", "universalTriples"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"Row", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Style", "[", 
     RowBox[{"\"\<Number of universal (entangling) gates: \>\"", 
      ",", "\"\<Text\>\""}], "]"}], ",", 
    RowBox[{"Style", "[", 
     RowBox[{
      RowBox[{"Length", "[", "universalGates", "]"}], ",", "Black", 
      ",", "\"\<Text\>\""}], "]"}]}], "}"}], "]"}], "\n"}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, 3.9609909148867817`*^9, 3.960990974326208*^9, 
   3.9609910391045113`*^9, 3.960991619723076*^9, {3.9609916507291126`*^9, 
   3.960991659451498*^9}, {3.9611018523359165`*^9, 3.9611018601384773`*^9}, 
   3.961102287516098*^9},
 CellLabel->
  "In[729]:=",ExpressionUUID->"d4f18cea-3d3c-e243-987a-13453742791f"],

Cell[BoxData[
 TemplateBox[{
   StyleBox[
   "\"Number of universal (entangling) gates: \"", "Text", StripOnInput -> 
    False], 
   StyleBox["219", 
    GrayLevel[0], "Text", StripOnInput -> False]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.9611018563255672`*^9, 3.9611018613357563`*^9}, {
   3.9611022899259396`*^9, 3.9611023026623516`*^9}, 3.9611023526477566`*^9},
 CellLabel->
  "Out[731]=",ExpressionUUID->"6dc66a0e-b8de-474e-8fea-969897051b5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TableForm", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NumberForm", "[", 
         RowBox[{
          RowBox[{"universalTriples", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"MatrixForm", "[", 
         RowBox[{"universalGates", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Min", "[", 
         RowBox[{"5", ",", 
          RowBox[{"Length", "[", "universalGates", "]"}]}], "]"}]}], "}"}]}], 
     "]"}], ",", 
    RowBox[{"TableHeadings", "->", 
     RowBox[{"{", 
      RowBox[{"None", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Canonical triple (c1,c2,c3)\>\"", 
         ",", "\"\<Universal Gate Matrix\>\""}], "}"}]}], "}"}]}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, 3.9609909148867817`*^9, 3.960990974326208*^9, 
   3.9609910391045113`*^9, 3.960991619723076*^9, {3.9609916507291126`*^9, 
   3.9609916692204895`*^9}},
 CellLabel->
  "In[742]:=",ExpressionUUID->"80df8654-36d5-0440-8873-50d88c3c9bb9"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"Canonical triple (c1,c2,c3)\"\>",
       HoldForm], 
      TagBox["\<\"Universal Gate Matrix\"\>",
       HoldForm]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], "0", "0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}]},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], "0"},
          {
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], "0", "0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1", "0", "0", "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], "0"},
          {"0", "0", "0", "1"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           SuperscriptBox["\[ExponentialE]", 
            FractionBox[
             RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "36"]], "0", "0", "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], "0"},
          {"0", "0", "0", 
           SuperscriptBox["\[ExponentialE]", 
            FractionBox[
             RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "36"]]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"18\"\>",
            ShowStringCharacters->False],
           18,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], "0", "0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}]},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], "0"},
          {
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}], "0", "0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "18"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"17", "/", "18"}]]}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"18\"\>",
            ShowStringCharacters->False],
           18,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], "0", "0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}]},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "12"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "12"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], "0"},
          {"0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "12"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "12"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"11", "/", "12"}]]}]}], "0"},
          {
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "+", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}], "0", "0", 
           RowBox[{
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"1", "/", "36"}]]}], "-", 
            RowBox[{
             FractionBox["1", "2"], " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"-", "1"}], ")"}], 
              RowBox[{"35", "/", "36"}]]}]}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {"Canonical triple (c1,c2,c3)", 
       "Universal Gate Matrix"}}]]]], "Output",
 CellChangeTimes->{
  3.9609916705801315`*^9, 3.9610637069407597`*^9, 3.961101365436432*^9, 
   3.96110142861578*^9, 3.9611020790964108`*^9, 3.9611021487211914`*^9, {
   3.9611022915153255`*^9, 3.96110230275334*^9}, 3.961102347396103*^9, 
   3.9611025752986965`*^9},
 CellLabel->
  "Out[742]//TableForm=",ExpressionUUID->"7dbc6893-3e7a-f34e-a1e7-\
a2599eb5c774"]
}, Open  ]],

Cell[TextData[{
 "What makes these gates universal is their  ability to create entanglement \
and to generate a wide range of two-qubit operations through repeated \
application and composition with simpler, local gates. The complex \
off-diagonal elements of the matrix mix the computational basis states in a \
way that produces quantum correlations that cannot be achieved by local \
operations alone. Additionally, the presence of complex phases within \
exponential factors across the main diagonal, such as ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"i\[Pi]", "/", "36"}]], TraditionalForm]],ExpressionUUID->
  "9084a689-1970-1b43-84c0-2decdc113590"],
 ", introduces interference effects essential for reaching diverse regions of \
the two-qubit unitary space. Because these gates correspond to canonical \
triples positioned away from the boundaries of the Weyl chamber, they possess \
sufficient degrees of freedom to generate all other representative gates when \
combined properly.\n"
}], "Text",
 CellChangeTimes->{{3.9609917012156887`*^9, 3.960991775967123*^9}, {
  3.9609918112194786`*^9, 3.9609918554720573`*^9}, {3.9609918916012897`*^9, 
  3.960991903842516*^9}, {3.9609919508691597`*^9, 3.960992069891754*^9}, {
  3.961100738752329*^9, 
  3.961100742053404*^9}},ExpressionUUID->"6e401287-f53d-9c42-8e6d-\
789bfab05040"],

Cell[TextData[StyleBox["Parameterized Plotting of Quantum State Projections", \
"Subsection"]], "Text",
 CellChangeTimes->{{3.9609121192929287`*^9, 3.9609121881406555`*^9}, 
   3.960997462903885*^9, 
   3.9609979243839417`*^9},ExpressionUUID->"f5872037-3aff-d54c-8cc4-\
58f8e4873cae"],

Cell[TextData[StyleBox["While standard 2D plots can illustrate data points or \
function curves, they often fall short when visualizing quantum state \
evolution, especially in the context of multi-component complex vectors. This \
visualization method, powered by the myPlot function, is purpose-built to \
display individual quantum state components in the complex plane, emphasizing \
their real and imaginary structure, relative phases, and label identity. \
Unlike traditional subplots that show aggregated behavior, this approach \
distinctly tracks how each basis state transforms under different quantum \
gates, offering a granular and annotated snapshot of gate action on \
amplitude-level detail. The use of color, marker, and labeling not only \
enhances interpretability but also supports pattern recognition across gate \
families, which is vital when comparing permutations, Pauli gates, and \
entangling transformations. Thus, this method supplements conventional plots \
with a component-wise, vector-level lens, making it a necessary analytical \
tool for precise and visual quantum behavior tracing.",
 FontColor->RGBColor[0., 0., 0.],
 Background->RGBColor[1., 1., 1.]]], "Text",
 CellChangeTimes->{
  3.961019865070093*^9},ExpressionUUID->"3dd408c6-6253-2e49-ae65-\
d90db765e661"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myPlot", "[", 
   RowBox[{"v_", ",", "label_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"colors", "=", 
       RowBox[{"{", 
        RowBox[{"Red", ",", "Blue", ",", "Green", ",", "Purple"}], "}"}]}], ",", 
      RowBox[{"markers", "=", 
       RowBox[{"{", 
        RowBox[{"\"\<\[FilledCircle]\>\"", ",", "\"\<\[EmptyCircle]\>\"", 
         ",", "\"\<\[Times]\>\"", ",", "\"\<\[Diamond]\>\""}], "}"}]}], ",", 
      RowBox[{"points", "=", 
       RowBox[{"ReIm", "/@", "v"}]}], ",", 
      RowBox[{"axisLabels", "=", 
       RowBox[{"{", 
        RowBox[{"\"\<Re\>\"", ",", "\"\<Im\>\""}], "}"}]}]}], "}"}], ",", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"Graphics", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"PointSize", "[", "Large", "]"}], ",", 
             RowBox[{"colors", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{"\"\<z\>\"", "<>", 
                RowBox[{"ToString", "[", "i", "]"}]}], ",", 
               RowBox[{"FontSize", "->", "12"}], ",", "Black"}], "]"}], ",", 
             RowBox[{
              RowBox[{"points", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "+", 
              RowBox[{"{", 
               RowBox[{"0.1", ",", "0.1"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"markers", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"points", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"colors", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"FontSize", "->", "18"}]}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "v", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
      RowBox[{"Axes", "->", "True"}], ",", 
      RowBox[{"AxesOrigin", "->", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "->", "axisLabels"}], ",", 
      RowBox[{"GridLines", "->", "Automatic"}], ",", 
      RowBox[{"PlotLabel", "->", 
       RowBox[{"Style", "[", 
        RowBox[{"label", ",", "Bold", ",", "14"}], "]"}]}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, 
   3.9610200829736366`*^9},
 CellLabel->
  "In[672]:=",ExpressionUUID->"037bd5c1-5cb7-9344-896d-d87516491316"],

Cell[TextData[StyleBox["Visualizes each quantum state component in the \
complex plane with labels and styles, revealing structure standard plots \
miss.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9610200408393326`*^9, 3.9610200421847267`*^9}, {
   3.9610200772489758`*^9, 3.961020086983341*^9}, {3.961020129156889*^9, 
   3.961020129549349*^9}, 
   3.961102160034231*^9},ExpressionUUID->"81757233-9504-2846-8772-\
59f4f576c5ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testVectors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "I", ",", "0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", 
        RowBox[{"-", "1"}], ",", 
        RowBox[{"-", "1"}]}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"-", "1"}], ",", "I", ",", 
        RowBox[{"-", "I"}]}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]y", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "I"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]z", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"id", "=", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}},
 CellLabel->
  "In[673]:=",ExpressionUUID->"79976157-6831-3f4e-bda6-72c666b3eaee"],

Cell[TextData[StyleBox["Defines gates",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.961020121152569*^9, 
  3.9610201269861393`*^9}},ExpressionUUID->"913d6498-2ca9-a84a-bdff-\
4100403c41a1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pauliGates", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"\[Sigma]x", ",", "id"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"id", ",", "\[Sigma]x"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"\[Sigma]y", ",", "id"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"id", ",", "\[Sigma]y"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"\[Sigma]z", ",", "id"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"id", ",", "\[Sigma]z"}], "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pauliLabels", "=", 
    RowBox[{"{", 
     RowBox[{"\"\<X\[CircleTimes]I\>\"", ",", "\"\<I\[CircleTimes]X\>\"", 
      ",", "\"\<Y\[CircleTimes]I\>\"", ",", "\"\<I\[CircleTimes]Y\>\"", 
      ",", "\"\<Z\[CircleTimes]I\>\"", ",", "\"\<I\[CircleTimes]Z\>\""}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"permLabels", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<CNOT\>\"", ",", "\"\<SWAP\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"permGates", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"XX", "=", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"\[Sigma]x", ",", "\[Sigma]x"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"YY", "=", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"\[Sigma]y", ",", "\[Sigma]y"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ZZ", "=", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"\[Sigma]z", ",", "\[Sigma]z"}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"steps", "=", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"stepSize", "=", 
   RowBox[{"Pi", "/", 
    RowBox[{"(", 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{"steps", "-", "1"}], ")"}]}], ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allTriples", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c1", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c2", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c3", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}]}], "]"}], ",", 
     "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"discreteWeylChamber", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"allTriples", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildRepresentativeGate", "[", 
    RowBox[{"{", 
     RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
   RowBox[{"MatrixExp", "[", 
    RowBox[{"I", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"c1", " ", "XX"}], "+", 
       RowBox[{"c2", " ", "YY"}], "+", 
       RowBox[{"c3", " ", "ZZ"}]}], ")"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"isEntangling", "[", 
     RowBox[{"{", 
      RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{"{", 
       RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], "]"}], ">", "0.0001"}]}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"universalTriples", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"discreteWeylChamber", ",", "isEntangling"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"universalGates", "=", 
   RowBox[{"buildRepresentativeGate", "/@", "universalTriples"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"universalLabels", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\"\<U\>\"", "<>", 
      RowBox[{"ToString", "[", "i", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "universalGates", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"someUniversalGates", "=", 
   RowBox[{"Take", "[", 
    RowBox[{"universalGates", ",", "3"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"someUniversalLabels", "=", 
   RowBox[{"Take", "[", 
    RowBox[{"universalLabels", ",", "3"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}, {3.9610201375505314`*^9, 
   3.9610201380182457`*^9}, 3.9610201710512905`*^9, {3.9610598836572895`*^9, 
   3.9610598846491203`*^9}},
 CellLabel->
  "In[678]:=",ExpressionUUID->"9009233d-59b9-d64e-b3e6-9793565ac87c"],

Cell[TextData[StyleBox["Generates a discrete sample of two-qubit gates from \
the Weyl chamber by constructing matrix exponentials of weighted Pauli tensor \
products,",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9610201786405296`*^9, 3.9610201881855583`*^9}, {
  3.961100894293955*^9, 
  3.9611008950455227`*^9}},ExpressionUUID->"c0afbd85-e5ff-2342-a22c-\
182456af995d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"generatePlots", "[", 
     RowBox[{"gates_", ",", "labels_", ",", "tag_"}], "]"}], ":=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"myPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gates", "[", 
           RowBox[{"[", "g", "]"}], "]"}], ".", 
          RowBox[{"testVectors", "[", 
           RowBox[{"[", "v", "]"}], "]"}]}], ",", 
         RowBox[{"tag", "<>", "\"\<: \>\"", "<>", 
          RowBox[{"labels", "[", 
           RowBox[{"[", "g", "]"}], "]"}], "<>", "\"\< on v\>\"", "<>", 
          RowBox[{"ToString", "[", "v", "]"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", 
         RowBox[{"Length", "[", "gates", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{"Length", "[", "testVectors", "]"}]}], "}"}]}], "]"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"pauliPlots", "=", 
   RowBox[{"generatePlots", "[", 
    RowBox[{"pauliGates", ",", "pauliLabels", ",", "\"\<Pauli\>\""}], "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"permPlots", "=", 
   RowBox[{"generatePlots", "[", 
    RowBox[{"permGates", ",", "permLabels", ",", "\"\<Permutation\>\""}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"universalPlots", "=", 
   RowBox[{"generatePlots", "[", 
    RowBox[{
    "someUniversalGates", ",", "someUniversalLabels", 
     ",", "\"\<Universal\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allPlots", "=", 
    RowBox[{"Join", "[", 
     RowBox[{"pauliPlots", ",", "permPlots", ",", "universalPlots"}], "]"}]}],
    ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"GraphicsGrid", "[", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"allPlots", ",", "6"}], "]"}], ",", "3"}], "]"}], "]"}], 
  "  "}]}], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}, {3.9610201375505314`*^9, 
   3.9610201380182457`*^9}, {3.9610201710512905`*^9, 3.961020196330372*^9}, {
   3.9610202488195553`*^9, 3.961020257179861*^9}},
 CellLabel->
  "In[696]:=",ExpressionUUID->"660f4448-c9eb-0447-b9eb-bdf0576e23ee"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[1, 0, 0], 
          StyleBox[InsetBox["\<\"\[FilledCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0, 0, 1], 
          StyleBox[InsetBox["\<\"\[EmptyCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {1.1, 0.1}], 
         {RGBColor[0, 1, 0], 
          StyleBox[InsetBox["\<\"\[Times]\"\>", {1, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          StyleBox[InsetBox["\<\"\[Diamond]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v1\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {193.5, -196.0070607248942}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[1, 0, 0], 
          StyleBox[InsetBox["\<\"\[FilledCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0, 0, 1], 
          StyleBox[InsetBox["\<\"\[EmptyCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.8071067811865474, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", 
            NCache[{2^Rational[-1, 2], 0}, {0.7071067811865475, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.8071067811865474}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{0, 2^Rational[-1, 2]}, {0, 0.7071067811865475}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v2\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {580.5, -196.0070607248942}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {-0.4, 0.1}], 
         {RGBColor[1, 0, 0], 
          
          StyleBox[
           InsetBox["\<\"\[FilledCircle]\"\>", 
            NCache[{Rational[-1, 2], 0}, {-0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {-0.4, 0.1}], 
         {RGBColor[0, 0, 1], 
          
          StyleBox[
           InsetBox["\<\"\[EmptyCircle]\"\>", 
            NCache[{Rational[-1, 2], 0}, {-0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v3\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {967.5, -196.0070607248942}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}]}, {
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.6}], 
         {RGBColor[1, 0, 0], 
          
          StyleBox[
           InsetBox["\<\"\[FilledCircle]\"\>", 
            NCache[{0, Rational[1, 2]}, {0, 0.5}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, -0.4}], 
         {RGBColor[0, 0, 1], 
          
          StyleBox[
           InsetBox["\<\"\[EmptyCircle]\"\>", 
            NCache[{0, Rational[-1, 2]}, {0, -0.5}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {-0.4, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{Rational[-1, 2], 0}, {-0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v4\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {193.5, -588.0211821746825}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[1, 0, 0], 
          
          StyleBox[
           InsetBox["\<\"\[FilledCircle]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 0, 1], 
          
          StyleBox[
           InsetBox["\<\"\[EmptyCircle]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v5\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {580.5, -588.0211821746825}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[1, 0, 0], 
          StyleBox[InsetBox["\<\"\[FilledCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {1.1, 0.1}], 
         {RGBColor[0, 0, 1], 
          StyleBox[InsetBox["\<\"\[EmptyCircle]\"\>", {1, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0, 1, 0], 
          StyleBox[InsetBox["\<\"\[Times]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          StyleBox[InsetBox["\<\"\[Diamond]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: I\[CircleTimes]X on v1\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {967.5, -588.0211821746825}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}]}}, {}},
  ImageSize->{
    UpTo[600], 
    UpTo[700]},
  Method->{"IgnoreImageSizeAutomaticLimit" -> True},
  PlotRangePadding->Automatic]], "Output",
 CellChangeTimes->{3.9610572207630177`*^9, 3.9610637084991703`*^9, 
  3.9611013671108685`*^9, 3.961102303909422*^9},
 CellLabel->
  "Out[701]=",ExpressionUUID->"dc6896e6-f640-8043-ad0d-d4bf3fc796bb"]
}, Open  ]],

Cell["\<\
Generates labeled visualizations of how each gate transforms multiple test \
vectors, then organizes selected plots into a grid for comparative analysis\
\>", "CodeText",
 CellChangeTimes->{
  3.96102026580044*^9},ExpressionUUID->"1e0d05b9-2b92-614c-9524-eb5342b8b3da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Classifying Two-Qubit Gates Using Makhlin Invariant", \
"Subsection"]], "Section",
 CellChangeTimes->{{3.9611008107785816`*^9, 
  3.961100811668873*^9}},ExpressionUUID->"d959d633-0c68-5a4d-b338-\
43ebefc5f765"],

Cell[TextData[StyleBox["The Need for Makhlin Invariants", "Code",
 FontFamily->"Source Sans Pro"]], "Text",
 CellChangeTimes->{{3.9610271014373417`*^9, 3.9610271277087*^9}, {
   3.9610274062130413`*^9, 3.961027407915289*^9}, 
   3.9611007746051273`*^9},ExpressionUUID->"7834b066-c758-4747-9f72-\
4cfab410dae3"],

Cell[TextData[{
 "In quantum computing, two-qubit gates are central to generating \
entanglement, which is the key resource for universality. However, a deep \
complication arises: many two-qubit gates that appear different are \
functionally identical when viewed through the lens of local equivalence\
\[LongDash]transformations of the form (U 1\[CircleTimes]U2)\:22c5V\:22c5(U3\
\[CircleTimes]U4) , where the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["U", "i"], TraditionalForm]],ExpressionUUID->
  "5b0a7334-70ce-074e-956c-0fb467d149f2"],
 " are single-qubit unitaries. These local gates do not change the entangling \
power or computational class of V, but they do change its matrix \
representation. Therefore, to classify truly distinct entangling operations, \
we need a tool that is invariant under local unitaries. This is where Makhlin \
invariants come into play: a trio of scalar quantities that remain unchanged \
under all local SU(2) \[CircleTimes] SU(2) conjugations and thus fully \
characterize the nonlocal content of a two-qubit gate."
}], "Text",
 CellChangeTimes->{
  3.96102713810236*^9, {3.9610272570206947`*^9, 3.9610273353543777`*^9}, 
   3.961027367154293*^9, {3.9610274350815163`*^9, 
   3.961027439141449*^9}},ExpressionUUID->"7251daaa-4a93-844f-82fb-\
e422a21fe65f"],

Cell[TextData[{
 StyleBox["The Mathemathical Framework", "Code",
  FontFamily->"Source Sans Pro"],
 StyleBox["\n\n", "Code"],
 StyleBox["The Makhlin invariants (\|01d4541,\|01d4542,\|01d4543)are computed \
by transforming the unitary gate U into a canonical form via the magic basis \
transformation K, yielding M=", "Code",
  FontFamily->"Source Sans Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["K", "T"], TraditionalForm]],
  FontFamily->"Source Sans Pro",
  FontVariations->{"Underline"->False},
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "f55374e1-805a-6846-a6c4-8e21c4bb4c3c"],
 StyleBox["KU.",
  FontFamily->"Source Sans Pro",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["This basis diagonalizes certain Bell states and simplifies \
entanglement analysis. From M, we define m = ", "Code",
  FontFamily->"Source Sans Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["M", "T"], TraditionalForm]],
  FontFamily->"Source Sans Pro",
  FontVariations->{"Underline"->False},
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "e2bcadb9-3b9b-fa4f-bcdf-148b268cca8b"],
 StyleBox["M",
  FontFamily->"Source Sans Pro",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" and compute:\n\t\t\t\t\t\t`\t\t\t\tg1 = ", "Code",
  FontFamily->"Source Sans Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   FractionBox[
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"Tr", " ", "m"}], ")"}], "2"], 
    RowBox[{"det", " ", "m"}]], TraditionalForm]],
  FontVariations->{"Underline"->False},
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "e7c9b98a-aed6-8041-9ba9-b70dae910eee"],
 StyleBox["                      g2 = ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"Tr", "(", " ", 
     SuperscriptBox["m", "2"], ")"}], 
    RowBox[{"det", " ", "m"}]], TraditionalForm]],
  FontVariations->{"Underline"->False},
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "e431141d-cd63-0d47-87fd-11921eabf607"],
 StyleBox["                  g3 = det m\nThese invariants are designed such \
that if two gates have identical Makhlin invariants, they are locally \
equivalent. Conversely, distinct invariants imply distinct nonlocal actions. \
Importantly, Makhlin invariants compress a 4\[Times]4 unitary down to just \
three numbers\[LongDash]serving as a hash function for quantum gate identity \
modulo local noise.\n\n\t\t\t\t\t\t\t\
d(U)=\[DoubleVerticalBar]MakhlinInvariants(U)\[Minus]MakhlinInvariants(CNOT)\
\[DoubleVerticalBar]\n\t\t\t\t\t\t\t\nand filter for gates with \|01d451(\
\|01d448)<\|01d716, where \|01d716 is a small tolerance to account for \
numerical imprecision. This ensures we retain only gates that are \
functionally equivalent to CNOT, a canonical universal entangler.\n\nFrom a \
computer science perspective, this filtering process is essential for \
avoiding representation blowup and search inefficiency. Without Makhlin \
invariants, we\[CloseCurlyQuote]d be forced to test for local equivalence by \
brute-force optimization over local unitaries\[LongDash]a problem with a \
continuous search space and no closed-form solution. Makhlin invariants \
provide a constant-time fingerprint for local equivalence, enabling us to \
hash and group gates efficiently. In effect, they act as a \
collision-resistant function for quantum operations under local unitary \
equivalence, much like cryptographic hashes in classical computing. This \
transforms our infinite gate sampling process into a tractable and structured \
classification task. ",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.9610274421654816`*^9, 3.961027632730423*^9}, 
   3.9610276792006264`*^9, {3.9610277576161575`*^9, 3.9610279024624443`*^9}, {
   3.9610280868674545`*^9, 3.961028164389847*^9}, {3.9610289168727245`*^9, 
   3.961028949819813*^9}, {3.9610290954326553`*^9, 3.9610290985464745`*^9}, {
   3.9610291392263756`*^9, 3.9610291601698017`*^9}, {3.9610568021530266`*^9, 
   3.9610568050847855`*^9}, {3.9611008680987854`*^9, 
   3.961100876538084*^9}},ExpressionUUID->"48d609f7-86b8-844e-a8e0-\
d85a1effb8e1"],

Cell[BoxData[
 RowBox[{"\n", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"representativeTriples", "=", "discreteWeylChamber"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"XX", "=", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"YY", "=", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "I"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "I"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"ZZ", "=", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"buildRepresentativeGate", "[", 
      RowBox[{"{", 
       RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
     RowBox[{"N", "[", 
      RowBox[{
       RowBox[{"MatrixExp", "[", 
        RowBox[{"I", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"c1", " ", "XX"}], "+", 
           RowBox[{"c2", " ", "YY"}], "+", 
           RowBox[{"c3", " ", "ZZ"}]}], ")"}]}], "]"}], ",", "20"}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"representativeGates", "=", 
     RowBox[{"buildRepresentativeGate", "/@", "representativeTriples"}]}], 
    ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"K", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}], "*", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "I"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "I", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "I", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", 
          RowBox[{"-", "I"}]}], "}"}]}], "}"}]}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Kdag", "=", 
     RowBox[{"ConjugateTranspose", "[", "K", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"makhlinInvariants", "[", "U_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"M", ",", "m", ",", "g1", ",", "g2", ",", "g3"}], "}"}], ",", 
       RowBox[{
        RowBox[{"M", "=", 
         RowBox[{"Kdag", ".", "U", ".", "K"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"m", "=", 
         RowBox[{
          RowBox[{"Transpose", "[", "M", "]"}], ".", "M"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"g1", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Tr", "[", "m", "]"}], "^", "2"}], "/", 
          RowBox[{"Det", "[", "m", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g2", "=", 
         RowBox[{
          RowBox[{"Tr", "[", 
           RowBox[{"m", ".", "m"}], "]"}], "/", 
          RowBox[{"Det", "[", "m", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g3", "=", 
         RowBox[{"Det", "[", "m", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"g1", ",", "g2", ",", "g3"}], "}"}], "//", "Chop"}]}]}], 
      "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"cnot", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"targetInvariants", "=", 
     RowBox[{"makhlinInvariants", "[", "cnot", "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"invariantDistance", "[", "u_", "]"}], ":=", 
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{"makhlinInvariants", "[", "u", "]"}], "-", 
       "targetInvariants"}], "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"universalGates", "=", 
     RowBox[{"Select", "[", 
      RowBox[{"representativeGates", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"invariantDistance", "[", "#", "]"}], "<", "1"}], "&"}]}], 
      "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.961057857922859*^9, 3.9610578579258556`*^9}, {
  3.9610579772126236`*^9, 3.9610579850251102`*^9}, {3.9610580479460297`*^9, 
  3.9610580586853657`*^9}, {3.9610580945161476`*^9, 3.961058123105503*^9}, {
  3.961058228660185*^9, 3.961058237338505*^9}},
 CellLabel->
  "In[702]:=",ExpressionUUID->"9168825d-5a11-7949-b022-dbbc4c0710fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "universalGates", "]"}]], "Input",
 CellChangeTimes->{{3.9609080942182903`*^9, 3.9609081099664135`*^9}, {
   3.960908160086067*^9, 3.9609081614631443`*^9}, 3.961029368390171*^9, {
   3.9610572489377193`*^9, 3.961057255855007*^9}, 3.9610573801873245`*^9},
 CellLabel->
  "In[715]:=",ExpressionUUID->"5072c60a-ca67-5d4d-bba3-054329be9e5d"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{
  3.9609081660896473`*^9, {3.961057223716797*^9, 3.961057225684618*^9}, 
   3.9610578413926353`*^9, {3.9610581098845367`*^9, 3.9610581430103436`*^9}, 
   3.9610637094424953`*^9, 3.9611013681256657`*^9, 3.9611023048164177`*^9},
 CellLabel->
  "Out[715]=",ExpressionUUID->"f1f99bb7-b52b-3b41-90b6-18aef52e2ed8"]
}, Open  ]],

Cell["\<\
The results show that there are 7 gates in our set that are universal. Since \
our earlier focus was on identifying whether a gate is universal by comparing \
its Makhlin invariants to those of CNOT, we can now refine our perspective to \
consider efficiency \[LongDash] how close a universal gate is to a \
\[OpenCurlyDoubleQuote]minimal\[CloseCurlyDoubleQuote] entangling gate in the \
Cartan space. Traditionally, researchers group gates by conjugacy classes, \
treating any pair of gates equivalent under local operations as functionally \
identical. However, for practical quantum circuit design, conjugacy class \
membership is not enough, we need to evaluate how close a gate lies to CNOT \
in Cartan coordinates, because this affects how easily and efficiently we can \
approximate it using native gates. To measure this, we use a Cartan distance \
metric:\
\>", "Text",
 CellChangeTimes->{{3.9609122585096607`*^9, 3.9609122589080563`*^9}, {
   3.9609293961506977`*^9, 3.9609294032952805`*^9}, 3.9610202813356133`*^9, {
   3.961056812688362*^9, 3.961056831101532*^9}, 3.961056975024412*^9, {
   3.9610584561684246`*^9, 
   3.9610585127264442`*^9}},ExpressionUUID->"9130c7de-3235-0140-a60c-\
17e15d5ddf6f"],

Cell[TextData[StyleBox["Measures how far a triple lies from the canonical \
CNOT location in the Weyl chamber",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9610585356097603`*^9, 3.9610585479381504`*^9}, {
  3.9610648814989014`*^9, 
  3.9610648822444077`*^9}},ExpressionUUID->"6d94d006-ac04-9b4c-a697-\
6f0c3ab6f525"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"buildRepresentativeGate", "[", 
     RowBox[{"{", 
      RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
    RowBox[{"MatrixExp", "[", 
     RowBox[{"I", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "XX"}], "+", 
        RowBox[{"c2", " ", "YY"}], "+", 
        RowBox[{"c3", " ", "ZZ"}]}], ")"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cartanDistance", "[", 
     RowBox[{"{", 
      RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
    RowBox[{"Norm", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c1", "-", 
        RowBox[{"Pi", "/", "4"}]}], ",", "c2", ",", "c3"}], "}"}], "]"}]}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"shortestTriple", "=", 
    RowBox[{
     RowBox[{"MinimalBy", "[", 
      RowBox[{"universalTriples", ",", "cartanDistance"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mostEfficientGate", "=", 
    RowBox[{"buildRepresentativeGate", "[", "shortestTriple", "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MatrixForm", "[", "mostEfficientGate", "]"}], 
  "  "}], "\n"}], "Input",
 CellChangeTimes->{
  3.96105697974082*^9, {3.9610584412592583`*^9, 3.9610584443700485`*^9}, {
   3.9610585150482025`*^9, 3.9610585161064568`*^9}, {3.9610585661002216`*^9, 
   3.9610585668304386`*^9}, {3.961064331604109*^9, 3.9610643607199783`*^9}, {
   3.9610644640596027`*^9, 3.961064474769396*^9}, 3.9610646003652363`*^9, 
   3.961064722289196*^9, 3.961064754549185*^9, {3.961064884178858*^9, 
   3.961064935665846*^9}},
 CellLabel->
  "In[716]:=",ExpressionUUID->"a3e36c64-ee02-d248-b55f-2e5d6ea51c1e"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["1", 
       SqrtBox["2"]], "0", "0", 
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]]},
     {"0", 
      FractionBox["1", 
       SqrtBox["2"]], 
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]], "0"},
     {"0", 
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]], 
      FractionBox["1", 
       SqrtBox["2"]], "0"},
     {
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]], "0", "0", 
      FractionBox["1", 
       SqrtBox["2"]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.96106472625358*^9, 3.961064755241247*^9}, 
   3.9610649089844093`*^9, 3.961101368153658*^9, 3.9611023048534203`*^9},
 CellLabel->
  "Out[720]//MatrixForm=",ExpressionUUID->"31fa32de-dde6-d547-b868-\
0ca5b89d609d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Section",
 CellChangeTimes->{{3.9611043765829697`*^9, 3.961104402861004*^9}, 
   3.9611044334272614`*^9},ExpressionUUID->"b7aae941-de73-744b-9c55-\
aef18592b260"],

Cell["\<\
The project shows that the  matrix returned, also known as the B gate is the \
most powerful and efficient universal two-qubit gate in the set studied. It \
is the closest gate to the canonical CNOT point in Cartan coordinates, which \
means it needs the least amount of entangling resources to achieve \
universality. This makes it highly practical for implementing any two-qubit \
operation with minimal overhead.The B gate\[CloseCurlyQuote]s matrix includes \
complex i terms in its off-diagonal elements, which give it strong entangling \
capabilities. These terms allow the gate to create maximal entanglement from \
certain input states. Maximal entanglement is essential for quantum \
algorithms and processes that rely on quantum correlations.

When decomposed into basic gates like CNOT and single-qubit rotations, the B \
gate typically requires fewer total gates and results in shallower circuits. \
This reduction in gate count and circuit depth improves performance on real \
quantum devices by lowering noise and error accumulation during execution.

This gate can be used as a native gate on quantum hardware to optimize \
circuit compilation. Implementing the B gate directly can lead to faster \
quantum computations since it closely approximates the ideal entangling gate \
needed for universal control over two qubits.

In conclusion, the B gate stands out as the most efficient universal \
two-qubit gate, combining strong entangling power with minimal resource \
requirements. It offers a clear advantage for building practical, \
high-fidelity quantum circuits and advancing the development of scalable \
quantum computing.\
\>", "Text",
 CellChangeTimes->{{3.9610587058871975`*^9, 3.9610587083303185`*^9}, {
  3.9610588112791023`*^9, 3.9610588332060833`*^9}, {3.9610600082119846`*^9, 
  3.961060046065508*^9}, {3.9610643831509495`*^9, 3.961064397153097*^9}, {
  3.961104321565983*^9, 
  3.961104322007061*^9}},ExpressionUUID->"749322e7-ce60-4140-9286-\
64d2fc3f7011"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Future Work", "Section",
 CellChangeTimes->{{3.9611044162052*^9, 
  3.9611044177416267`*^9}},ExpressionUUID->"b6ae082b-ca27-0f42-9d7a-\
0979e2af4c91"],

Cell["\<\
This project establishes a foundation for analyzing universal quantum gates \
and their efficiencies, but there is ample room for expansion. One important \
direction is to explore larger gate sets and multi-qubit systems, moving \
beyond two-qubit gates to tackle the scalability challenges essential for \
practical quantum computing. Additionally, incorporating noise models and \
error correction into gate synthesis and optimization would bring the work \
closer to real-world conditions by accounting for decoherence and operational \
imperfections. Another promising avenue is the development of automated \
synthesis algorithms that leverage machine learning or advanced heuristics to \
minimize gate depth, error rates, and resource overhead, improving gate \
compilation processes. Finally, investigating alternative universal gate sets \
beyond the Weyl chamber parametrization could identify more hardware-friendly \
or specialized gates, which, when combined with circuit-level optimizations, \
would enhance both theoretical understanding and experimental feasibility. \
Bridging the gap between mathematical universality, physical efficiency, and \
fault tolerance remains a rich field for continued research.\
\>", "Text",
 CellChangeTimes->{{3.9610587058871975`*^9, 3.9610587083303185`*^9}, {
   3.9610588112791023`*^9, 3.9610588332060833`*^9}, {3.9610600082119846`*^9, 
   3.961060046065508*^9}, {3.9610643831509495`*^9, 3.9610643954741364`*^9}, {
   3.961104473708956*^9, 3.9611044754854507`*^9}, 
   3.96110471132897*^9},ExpressionUUID->"78b964ab-54d4-9c4a-8e23-\
ccc459bb56fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Acknowledgements", "Section",
 CellChangeTimes->{{3.9611047038301907`*^9, 3.9611047256157455`*^9}, 
   3.961104862438919*^9},ExpressionUUID->"82bce88c-f469-f44c-9317-\
8d8a04f226fc"],

Cell["\<\
I would like to sincerely thank my mentor, Adam Millar, for his invaluable \
guidance and support throughout this project. I am also grateful to the \
Wolfram directors and teaching assistants, whose insights and feedback played \
a crucial role in shaping my work.\
\>", "Text",
 CellChangeTimes->{{3.961104774012951*^9, 3.961104778432869*^9}, {
  3.9611048607755947`*^9, 
  3.961104883108652*^9}},ExpressionUUID->"4d1f1020-d1a3-1f47-875e-\
bd7eb775e772"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Works Cited", "Section",
 CellChangeTimes->{{3.9611048988789577`*^9, 
  3.9611049108291225`*^9}},ExpressionUUID->"5ed42df6-b65c-444d-894a-\
3b1cb60d7869"],

Cell["\<\
Barenco, Adriano, et al. \[OpenCurlyDoubleQuote]Elementary gates for quantum \
computation.\[CloseCurlyDoubleQuote] Physical Review A, vol. 52, no. 5, 1995, \
pp. 3457\[Dash]3467. https://doi.org/10.1103/PhysRevA.52.3457

Bennett, Charles H., and David P. DiVincenzo. \[OpenCurlyDoubleQuote]Quantum \
information and computation.\[CloseCurlyDoubleQuote] Nature, vol. 404, 2000, \
pp. 247\[Dash]255. https://doi.org/10.1038/35005001

Nielsen, Michael A., and Isaac L. Chuang. Quantum Computation and Quantum \
Information. Cambridge University Press, 2010.

Kitaev, Alexei Y. \[OpenCurlyDoubleQuote]Quantum computations: algorithms and \
error correction.\[CloseCurlyDoubleQuote] Russian Mathematical Surveys, vol. \
52, no. 6, 1997, pp. 1191\[Dash]1249. \
https://doi.org/10.1070/RM1997v052n06ABEH002155

Preskill, John. \[OpenCurlyDoubleQuote]Quantum computing in the NISQ era and \
beyond.\[CloseCurlyDoubleQuote] Quantum, vol. 2, 2018, Article 79. \
https://doi.org/10.22331/q-2018-08-06-79

Deutsch, David. \[OpenCurlyDoubleQuote]Quantum theory, the \
Church\[Dash]Turing principle and the universal quantum computer.\
\[CloseCurlyDoubleQuote] Proceedings of the Royal Society A, vol. 400, no. \
1818, 1985, pp. 97\[Dash]117. https://doi.org/10.1098/rspa.1985.0070

Makhlin, Yuri. \[OpenCurlyDoubleQuote]Nonlocal properties of two-qubit gates \
and mixed states, and the optimization of quantum computations.\
\[CloseCurlyDoubleQuote] Quantum Information Processing, vol. 1, no. 4, 2002, \
pp. 243\[Dash]252. https://doi.org/10.1023/A:1022144002391

Shor, Peter W. \[OpenCurlyDoubleQuote]Algorithms for quantum computation: \
Discrete logarithms and factoring.\[CloseCurlyDoubleQuote] Proceedings 35th \
Annual Symposium on Foundations of Computer Science, IEEE, 1994, pp. 124\
\[Dash]134. https://doi.org/10.1109/SFCS.1994.365700

Bravyi, Sergey, and Alexei Kitaev. \[OpenCurlyDoubleQuote]Universal quantum \
computation with ideal Clifford gates and noisy ancillas.\
\[CloseCurlyDoubleQuote] Physical Review A, vol. 71, 2005, 022316. \
https://doi.org/10.1103/PhysRevA.71.022316

Morozov, A. \[OpenCurlyDoubleQuote]Hall Thruster Geometry.\
\[CloseCurlyDoubleQuote] Journal of Applied Physics, 2000. \
https://www.researchgate.net/publication/337085936_Thomson_scattering_\
investigations_of_a_low-power_Hall_thruster_in_standard_and_magnetically-\
shielded_configurations

\
\>", "Text",
 CellChangeTimes->{{3.961105069257166*^9, 
  3.961105074337635*^9}},ExpressionUUID->"fcb52644-5249-9545-9ed3-\
f080a1366348"]
}, Open  ]],

Cell["", "Section",
 CellChangeTimes->{{3.9611048988789577`*^9, 
  3.961104907055372*^9}},ExpressionUUID->"4c4ab7f5-20f2-7640-ba05-\
29467cf2a310"]
},
WindowSize->{1152, 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
Magnification:>1. Inherited,
FrontEndVersion->"14.2 for Microsoft Windows (64-bit) (March 14, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7e293665-62df-7e4b-8691-a95ab7286108"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 556, 9, 66, "Section",ExpressionUUID->"4441f486-3a6f-dd4a-ad5c-8d763e46bea9"],
Cell[CellGroupData[{
Cell[1135, 33, 2215, 38, 228, "Section",ExpressionUUID->"7625f585-f566-b64d-be4e-90f18ae2128d"],
Cell[3353, 73, 3234, 64, 192, "CodeText",ExpressionUUID->"896d8f2c-acdd-8d45-b93f-a30a0c36f288"],
Cell[6590, 139, 2498, 62, 104, "Input",ExpressionUUID->"7dc1f08b-337e-0e48-9cb1-613f6d9bfbfd"],
Cell[9091, 203, 447, 7, 36, "CodeText",ExpressionUUID->"7489f5c7-3391-8e47-bdef-85bc15a70951"],
Cell[9541, 212, 961, 25, 66, "Input",ExpressionUUID->"474b0593-cf83-c142-b9b9-d48056fcb144"],
Cell[10505, 239, 545, 8, 36, "CodeText",ExpressionUUID->"ba1c810e-270d-4b43-90f3-bb23d903095e"],
Cell[11053, 249, 1683, 47, 123, "Input",ExpressionUUID->"03157078-b1e5-7146-8f3a-4a60e4d8df24"],
Cell[12739, 298, 481, 8, 36, "CodeText",ExpressionUUID->"9e6f7a97-7844-2a43-98fa-9701beb2a72f"],
Cell[13223, 308, 1596, 41, 199, "Input",ExpressionUUID->"1f32e7c3-4db5-7b4c-a115-4ccc40cb5862"],
Cell[14822, 351, 364, 6, 36, "CodeText",ExpressionUUID->"7679ce57-55a6-e24f-8d03-8d6631fdffbc"],
Cell[15189, 359, 2979, 70, 218, "Input",ExpressionUUID->"fc868ea9-29e8-e74d-aa1d-520623f55899"],
Cell[18171, 431, 341, 6, 36, "CodeText",ExpressionUUID->"fca3da9a-bc47-4046-8d3b-8fd4fea268b4"],
Cell[18515, 439, 5596, 139, 332, "Input",ExpressionUUID->"ecc68abe-4c56-3946-9477-15a6fdda0ebd"],
Cell[24114, 580, 248, 5, 36, "CodeText",ExpressionUUID->"d3638a0d-90d2-9d4e-a40d-edc97692ac09"],
Cell[CellGroupData[{
Cell[24387, 589, 1335, 37, 123, "Input",ExpressionUUID->"66f49b63-4c15-5040-91d2-4183f28e1a50"],
Cell[25725, 628, 100816, 1947, 3509, "Output",ExpressionUUID->"da6e3df5-a3cc-1a44-931b-aa32c69096fc"]
}, Open  ]],
Cell[126556, 2578, 278, 5, 36, "CodeText",ExpressionUUID->"4ec893b7-c916-ec49-8550-00b902057af4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126871, 2588, 277, 6, 56, "Section",ExpressionUUID->"f557071c-692e-7e43-9228-cca8a8d11906"],
Cell[127151, 2596, 1680, 24, 143, "Text",ExpressionUUID->"944d5393-3857-ea41-927e-a0746cbfdd89"],
Cell[128834, 2622, 381, 6, 28, "Input",ExpressionUUID->"5670847d-93ef-9d4b-81ec-b057f30a82cf"],
Cell[129218, 2630, 376, 7, 36, "CodeText",ExpressionUUID->"031a54a4-a1d7-ab45-a423-c0ad595cdb11"],
Cell[129597, 2639, 983, 23, 85, "Input",ExpressionUUID->"db3028e5-9c97-724e-b3f8-e7e6bce99e60"],
Cell[CellGroupData[{
Cell[130605, 2666, 1191, 30, 66, "Input",ExpressionUUID->"b0bd0b48-38b7-2743-8727-b8c47432bff4"],
Cell[131799, 2698, 7753, 226, 451, "Output",ExpressionUUID->"f08b1d2a-0c1b-184b-a7c3-2b8f148a57ea"]
}, Open  ]],
Cell[139567, 2927, 360, 7, 33, "Text",ExpressionUUID->"d02db296-78ce-2f4f-b307-892795b293d7"],
Cell[139930, 2936, 1008, 18, 103, "Text",ExpressionUUID->"750b82bb-79c3-0243-a566-0cbce78ad2e6"],
Cell[140941, 2956, 465, 12, 47, "Input",ExpressionUUID->"aab7b26d-073a-4748-923d-8a02da4312ae"],
Cell[141409, 2970, 350, 7, 28, "Input",ExpressionUUID->"cbfee207-0af5-c041-9995-61fec95923e9"],
Cell[141762, 2979, 341, 7, 28, "Input",ExpressionUUID->"c57f47dd-c092-5742-b3f5-43b9e6fef511"],
Cell[142106, 2988, 471, 7, 36, "CodeText",ExpressionUUID->"570bee4f-6861-9b45-9193-da9a3766a033"],
Cell[142580, 2997, 970, 27, 28, "Input",ExpressionUUID->"cc862c4a-f60d-4547-ae07-ab5612ca1400"],
Cell[143553, 3026, 646, 9, 76, "CodeText",ExpressionUUID->"29872bd8-695d-2944-9b3a-f3ccaa252ad3"],
Cell[144202, 3037, 4229, 99, 256, "Input",ExpressionUUID->"3b15841c-c238-3d44-9cd6-1bb4c3ddc7f9"],
Cell[148434, 3138, 660, 9, 76, "CodeText",ExpressionUUID->"ef19e57a-ac2d-664b-a1ee-0bf1909b2e8d"],
Cell[CellGroupData[{
Cell[149119, 3151, 502, 12, 22, "Print",ExpressionUUID->"5b99279d-de97-204d-be70-000c27beab64"],
Cell[149624, 3165, 504, 12, 22, "Print",ExpressionUUID->"279719c6-2ee2-a74b-b410-7ecad609070d"],
Cell[150131, 3179, 502, 12, 22, "Print",ExpressionUUID->"05957f2a-dddf-8a4b-bdec-11406ed3e94d"]
}, Open  ]],
Cell[150648, 3194, 1275, 18, 76, "CodeText",ExpressionUUID->"181cff1b-3814-ba4d-8bc4-87377cc67db3"],
Cell[151926, 3214, 383, 7, 49, "Subsection",ExpressionUUID->"f2bb7f75-44be-c642-955a-82ef8a998ee8"],
Cell[CellGroupData[{
Cell[152334, 3225, 5640, 121, 427, "Subsection",ExpressionUUID->"4f41b789-7a84-1140-8f5b-7aba652840fa"],
Cell[157977, 3348, 6057, 131, 342, "Subsubsubsubsection",ExpressionUUID->"3a39c164-e5f2-1c49-806b-bd8437fcfc6e"],
Cell[164037, 3481, 3649, 91, 28, "Subsubsubsubsection",ExpressionUUID->"5da457c2-f3e3-e741-a2de-3728af6dc5a9"],
Cell[CellGroupData[{
Cell[167711, 3576, 3136, 51, 97, "Subsubsubsubsection",ExpressionUUID->"2cbebcb3-f84c-0243-81ba-11ffd7da3ab1"],
Cell[170850, 3629, 1336, 23, 76, "CodeText",ExpressionUUID->"0e37dcca-58d6-db44-8334-e0a7b713d208"],
Cell[172189, 3654, 1457, 39, 85, "Input",ExpressionUUID->"ede1138c-0913-e045-b257-86533df6fa6b"],
Cell[173649, 3695, 452, 7, 56, "CodeText",ExpressionUUID->"6f1f0c90-a768-db42-b988-09624a0c9f6c"],
Cell[174104, 3704, 2774, 69, 161, "Input",ExpressionUUID->"2f22082e-6508-f74f-9faa-acc1ed196f8a"],
Cell[176881, 3775, 480, 8, 56, "CodeText",ExpressionUUID->"7a669b7f-bec5-044e-b9ee-c6e64cf97f3f"],
Cell[177364, 3785, 1380, 35, 85, "Input",ExpressionUUID->"e3119324-b2ca-0749-9d0b-69401a59d3f6"],
Cell[178747, 3822, 783, 17, 56, "CodeText",ExpressionUUID->"489cfe1b-f0a5-6949-8e12-6e044ab4d356"],
Cell[CellGroupData[{
Cell[179555, 3843, 5159, 113, 389, "Input",ExpressionUUID->"0f6ba934-78bd-3649-abbc-5a469cff47ca"],
Cell[184717, 3958, 297261, 5621, 597, "Output",ExpressionUUID->"8579928d-f8b9-b64c-85ba-540df51ea2cf"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[482051, 9587, 219, 4, 56, "Section",ExpressionUUID->"91d7ff69-407a-1943-84c8-80f9e5ab99e3"],
Cell[CellGroupData[{
Cell[482295, 9595, 1859, 37, 98, "Subsubsection",ExpressionUUID->"6ac089d5-4e40-8541-83bc-5dc04198db67"],
Cell[484157, 9634, 1189, 33, 28, "Input",ExpressionUUID->"e4279c24-a3d2-ca46-bbc4-bd10ea6f8a45"],
Cell[485349, 9669, 286, 5, 36, "CodeText",ExpressionUUID->"56a242f2-c7de-4b43-a424-b267d0db28e9"],
Cell[485638, 9676, 1378, 36, 85, "Input",ExpressionUUID->"0f675262-3854-f045-a145-eecdc08c0b08"],
Cell[487019, 9714, 358, 7, 36, "CodeText",ExpressionUUID->"5e255d89-7b7d-374e-b6bc-8a4927c0c9a7"],
Cell[CellGroupData[{
Cell[487402, 9725, 968, 24, 47, "Input",ExpressionUUID->"667a8c06-beb6-a84c-9638-b01026616fab"],
Cell[488373, 9751, 18275, 517, 1673, "Output",ExpressionUUID->"1422ccd9-2488-9f44-8891-c4e7bc856c29"]
}, Open  ]],
Cell[506663, 10271, 241, 4, 33, "Text",ExpressionUUID->"f64ed77f-63fa-c44f-b535-9c9a9d5f2d88"]
}, Open  ]],
Cell[506919, 10278, 408, 8, 53, "Subsection",ExpressionUUID->"4125cf57-aa06-be48-8e22-a2c8c159850a"],
Cell[507330, 10288, 5208, 130, 392, "Subsection",ExpressionUUID->"68cff275-9baa-0442-95bd-801e4a144b4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512575, 10423, 355, 5, 56, "Section",ExpressionUUID->"37cb895c-d343-6e43-9bf0-078dbce33db3"],
Cell[512933, 10430, 1454, 22, 164, "Text",ExpressionUUID->"97852299-77c3-644d-979e-8fb7c8f52d5a"],
Cell[514390, 10454, 5303, 99, 614, "Text",ExpressionUUID->"e9038587-8e3b-b940-b6ef-c5615b7c7bbf"],
Cell[519696, 10555, 203, 3, 36, "CodeText",ExpressionUUID->"6b4cab5a-f9f2-fd4b-ab65-9c097eca27f0"],
Cell[519902, 10560, 1201, 37, 85, "Input",ExpressionUUID->"4ee76737-f9f8-0741-a61b-b6c2555ea2d1"],
Cell[521106, 10599, 196, 3, 36, "CodeText",ExpressionUUID->"fcc121df-e70a-cc47-b6b2-d28058db6df9"],
Cell[521305, 10604, 1100, 28, 47, "Input",ExpressionUUID->"caff2e88-e08f-c14f-91a4-3e738088b83a"],
Cell[522408, 10634, 406, 11, 36, "CodeText",ExpressionUUID->"693feb77-36d8-7045-871c-63d86d518c80"],
Cell[522817, 10647, 1436, 35, 104, "Input",ExpressionUUID->"bc11c7b8-0dc7-7041-a970-f5444eb16eed"],
Cell[524256, 10684, 272, 6, 36, "CodeText",ExpressionUUID->"6654f8fe-2487-6f45-b574-e1cbf09929dd"],
Cell[524531, 10692, 774, 18, 47, "Input",ExpressionUUID->"c4efd8ee-69c6-f644-982a-cfa195392265"],
Cell[525308, 10712, 204, 3, 36, "CodeText",ExpressionUUID->"a74ca785-b0dc-444f-ab27-472757a3676b"],
Cell[525515, 10717, 1199, 27, 28, "Input",ExpressionUUID->"62d5ab74-464c-a147-a50e-f95d54c219e5"],
Cell[526717, 10746, 243, 4, 36, "CodeText",ExpressionUUID->"1131d6db-91b7-0948-a436-d615316397a6"],
Cell[526963, 10752, 1047, 24, 28, "Input",ExpressionUUID->"028d92ca-8a68-254e-b643-1f2db082acd8"],
Cell[528013, 10778, 164, 3, 33, "Text",ExpressionUUID->"32d46792-285d-5748-9b94-771e41ad745f"],
Cell[CellGroupData[{
Cell[528202, 10785, 1654, 40, 47, "Input",ExpressionUUID->"24e516d3-e698-4f49-a216-33500f29a592"],
Cell[529859, 10827, 46612, 779, 316, 1951, 46, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"4d1b9598-2b83-8c46-8458-efdad620f913"]
}, Open  ]],
Cell[576486, 11609, 188, 3, 33, "Text",ExpressionUUID->"9cf9cc2b-1df5-b743-8b5f-68370d88f49f"],
Cell[CellGroupData[{
Cell[576699, 11616, 4345, 113, 313, "Input",ExpressionUUID->"9c87dab6-4312-bb49-9500-4543b0f7fd9b"],
Cell[581047, 11731, 1883, 58, 101, "Output",ExpressionUUID->"a3a3b66a-0271-c64d-8093-4b8025283f5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[582967, 11794, 1860, 58, 103, "Input",ExpressionUUID->"eaccaa66-6c66-4f48-842a-4a4b0cc91f1d"],
Cell[584830, 11854, 2785, 70, 101, "Output",ExpressionUUID->"b7d7df98-ff96-3044-bc41-28aa9093dba5"]
}, Open  ]],
Cell[587630, 11927, 617, 15, 36, "CodeText",ExpressionUUID->"5ee0d1ee-2e21-2240-928d-aa9b51e956d0"],
Cell[588250, 11944, 1041, 22, 28, "Input",ExpressionUUID->"3f378f47-0c5f-674e-9c86-afc8786b1f6a"],
Cell[589294, 11968, 230, 4, 36, "CodeText",ExpressionUUID->"de35c66b-6456-844e-a84a-b60eea954a64"],
Cell[CellGroupData[{
Cell[589549, 11976, 1562, 33, 104, "Input",ExpressionUUID->"d4f18cea-3d3c-e243-987a-13453742791f"],
Cell[591114, 12011, 460, 11, 32, "Output",ExpressionUUID->"6dc66a0e-b8de-474e-8fea-969897051b5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[591611, 12027, 1784, 42, 66, "Input",ExpressionUUID->"80df8654-36d5-0440-8873-50d88c3c9bb9"],
Cell[593398, 12071, 21552, 649, 523, "Output",ExpressionUUID->"7dbc6893-3e7a-f34e-a1e7-a2599eb5c774"]
}, Open  ]],
Cell[614965, 12723, 1357, 24, 164, "Text",ExpressionUUID->"6e401287-f53d-9c42-8e6d-789bfab05040"],
Cell[616325, 12749, 284, 5, 40, "Text",ExpressionUUID->"f5872037-3aff-d54c-8cc4-58f8e4873cae"],
Cell[616612, 12756, 1301, 19, 164, "Text",ExpressionUUID->"3dd408c6-6253-2e49-ae65-d90db765e661"],
Cell[617916, 12777, 3140, 81, 104, "Input",ExpressionUUID->"037bd5c1-5cb7-9344-896d-d87516491316"],
Cell[621059, 12860, 458, 8, 36, "CodeText",ExpressionUUID->"81757233-9504-2846-8772-59f4f576c5ee"],
Cell[621520, 12870, 1904, 58, 104, "Input",ExpressionUUID->"79976157-6831-3f4e-bda6-72c666b3eaee"],
Cell[623427, 12930, 215, 4, 36, "CodeText",ExpressionUUID->"913d6498-2ca9-a84a-bdff-4100403c41a1"],
Cell[623645, 12936, 5823, 162, 446, "Input",ExpressionUUID->"9009233d-59b9-d64e-b3e6-9793565ac87c"],
Cell[629471, 13100, 398, 7, 36, "CodeText",ExpressionUUID->"c0afbd85-e5ff-2342-a22c-182456af995d"],
Cell[CellGroupData[{
Cell[629894, 13111, 2349, 62, 180, "Input",ExpressionUUID->"660f4448-c9eb-0447-b9eb-bdf0576e23ee"],
Cell[632246, 13175, 17124, 450, 419, "Output",ExpressionUUID->"dc6896e6-f640-8043-ad0d-d4bf3fc796bb"]
}, Open  ]],
Cell[649385, 13628, 279, 5, 36, "CodeText",ExpressionUUID->"1e0d05b9-2b92-614c-9524-eb5342b8b3da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[649701, 13638, 234, 4, 56, "Section",ExpressionUUID->"d959d633-0c68-5a4d-b338-43ebefc5f765"],
Cell[649938, 13644, 310, 5, 33, "Text",ExpressionUUID->"7834b066-c758-4747-9f72-4cfab410dae3"],
Cell[650251, 13651, 1300, 23, 143, "Text",ExpressionUUID->"7251daaa-4a93-844f-82fb-e422a21fe65f"],
Cell[651554, 13676, 4251, 91, 435, "Text",ExpressionUUID->"48d609f7-86b8-844e-a8e0-d85a1effb8e1"],
Cell[655808, 13769, 5778, 163, 503, "Input",ExpressionUUID->"9168825d-5a11-7949-b022-dbbc4c0710fb"],
Cell[CellGroupData[{
Cell[661611, 13936, 375, 6, 28, "Input",ExpressionUUID->"5072c60a-ca67-5d4d-bba3-054329be9e5d"],
Cell[661989, 13944, 358, 6, 32, "Output",ExpressionUUID->"f1f99bb7-b52b-3b41-90b6-18aef52e2ed8"]
}, Open  ]],
Cell[662362, 13953, 1223, 19, 121, "Text",ExpressionUUID->"9130c7de-3235-0140-a60c-17e15d5ddf6f"],
Cell[663588, 13974, 342, 6, 36, "CodeText",ExpressionUUID->"6d94d006-ac04-9b4c-a697-6f0c3ab6f525"],
Cell[CellGroupData[{
Cell[663955, 13984, 1853, 50, 199, "Input",ExpressionUUID->"a3e36c64-ee02-d248-b55f-2e5d6ea51c1e"],
Cell[665811, 14036, 1176, 38, 131, "Output",ExpressionUUID->"31fa32de-dde6-d547-b868-0ca5b89d609d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[667036, 14080, 182, 3, 66, "Section",ExpressionUUID->"b7aae941-de73-744b-9c55-aef18592b260"],
Cell[667221, 14085, 2000, 33, 317, "Text",ExpressionUUID->"749322e7-ce60-4140-9286-64d2fc3f7011"]
}, Open  ]],
Cell[CellGroupData[{
Cell[669258, 14123, 156, 3, 66, "Section",ExpressionUUID->"b6ae082b-ca27-0f42-9d7a-0979e2af4c91"],
Cell[669417, 14128, 1608, 23, 186, "Text",ExpressionUUID->"78b964ab-54d4-9c4a-8e23-ccc459bb56fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671062, 14156, 188, 3, 66, "Section",ExpressionUUID->"82bce88c-f469-f44c-9317-8d8a04f226fc"],
Cell[671253, 14161, 466, 9, 55, "Text",ExpressionUUID->"4d1f1020-d1a3-1f47-875e-bd7eb775e772"]
}, Open  ]],
Cell[CellGroupData[{
Cell[671756, 14175, 160, 3, 66, "Section",ExpressionUUID->"5ed42df6-b65c-444d-894a-3b1cb60d7869"],
Cell[671919, 14180, 2529, 51, 623, "Text",ExpressionUUID->"fcb52644-5249-9545-9ed3-f080a1366348"]
}, Open  ]],
Cell[674463, 14234, 147, 3, 66, "Section",ExpressionUUID->"4c4ab7f5-20f2-7640-ba05-29467cf2a310"]
}
]
*)

