(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[    649392,      13751]
NotebookOptionsPosition[    632724,      13533]
NotebookOutlinePosition[    633147,      13550]
CellTagsIndexPosition[    633104,      13547]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Analysis of the Completeness ",
 FontColor->RGBColor[
  0.79145494773785, 0.31950865949492635`, 0.09956511787594415]]], "Section",
 CellChangeTimes->{{3.960903172578684*^9, 3.960903182174656*^9}, {
   3.9609116496696663`*^9, 3.960911705676836*^9}, {3.960928990367964*^9, 
   3.960928996322605*^9}, 3.9609291767015057`*^9, {3.961059785786646*^9, 
   3.9610597968541756`*^9}},ExpressionUUID->"4441f486-3a6f-dd4a-ad5c-\
8d763e46bea9"],

Cell[CellGroupData[{

Cell[TextData[{
 "Abstract:\n",
 StyleBox["This project begins by exploring classical logic gate structures, \
focusing on two-input one-output (2\[RightArrow]1) and two-input two-output \
(2\[RightArrow]2) gates to identify all functionally distinct pairs of \
classical operations. This analysis lays the foundation for understanding \
complexity and universality in small gate systems. We then extend this \
framework into the quantum regime, classifying all two-qubit quantum gates \
using the Cartan (KAK) decomposition. ", "Text",
  FontSize->15,
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Each quantum gate is mapped to a canonical triple within the Weyl \
chamber, a reduced geometric region that captures non-local behavior up to \
local unitary equivalence. The chamber is discretized at fixed resolution, \
and representative gates are generated for each point. Using Mikhlin \
invariants, we determine which gates are locally equivalent to universal \
entangling gates such as CNOT and the one with the highest efficiency. \
Visualizations include 3D plots of the Weyl chamber and 2D projections of \
quantum state transformations under these gates, offering a geometric and \
algebraic perspective on gate classification and universality across \
classical and quantum systems.",
  FontSize->15,
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n", "Text"],
 StyleBox["Introduction", "Subsection"]
}], "Section",
 CellChangeTimes->{{3.960911711000654*^9, 3.9609117191404953`*^9}, {
   3.9609117607549343`*^9, 3.960911761998638*^9}, {3.9609119032373943`*^9, 
   3.9609119250768967`*^9}, {3.960928980650341*^9, 3.96092898416551*^9}, {
   3.960929698509796*^9, 3.9609297173545647`*^9}, {3.960929758561804*^9, 
   3.9609297859530296`*^9}, {3.9609299589169025`*^9, 3.960929960515623*^9}, {
   3.9609726337758694`*^9, 3.96097264902931*^9}, {3.9609739156801777`*^9, 
   3.9609739188045635`*^9}, {3.9609748713533287`*^9, 
   3.9609748903876476`*^9}, {3.9610592103410473`*^9, 3.9610592227887783`*^9}, 
   3.9610597037788296`*^9, {3.9610598188366127`*^9, 3.9610598211227913`*^9}, 
   3.961078879035019*^9},ExpressionUUID->"7625f585-f566-b64d-be4e-\
90f18ae2128d"],

Cell[TextData[{
 StyleBox["Classical 2\[RightArrow]1 gates take two input bits and produce a \
single output bit, representing Boolean functions over four possible input \t\
combinations. There are ", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["2", "4"], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "fe592984-41c5-9842-95a0-5adfd036cb1e"],
 StyleBox[" = 16 ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["such gates, including familiar operations like AND, OR, XOR, and \
NAND. Among these, gates like NAND are universal, meaning they can be \
composed to construct any Boolean function. This classical notion of \
universality serves  as a foundation for understanding universality in \
quantum computation, where certain two-qubit gates, when paired with local \
operations, can generate any unitary transformation.\n", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.34972152285038527`, 0.34972152285038527`, 0.34972152285038527`]],
 StyleBox["Proof of Functional Completeness: Constructing All 2\[RightArrow]1 \
Gates Using NAND", "Subtitle",
  FontSize->20,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451]],
 StyleBox["\n", "Subtitle",
  FontSize->20],
 StyleBox["This code highlights the universality of NAND gates by \
constructing and visualizing all other 16 2x1 gates solely from NAND \
operations.", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "CodeText",
 CellChangeTimes->{{3.960911711000654*^9, 3.9609117191404953`*^9}, {
   3.9609117607549343`*^9, 3.960911761998638*^9}, {3.9609119032373943`*^9, 
   3.9609119250768967`*^9}, {3.960928980650341*^9, 3.96092898416551*^9}, {
   3.960929698509796*^9, 3.9609297173545647`*^9}, {3.9609297659993362`*^9, 
   3.960929905663183*^9}, {3.9609299366186657`*^9, 3.960929985001358*^9}, {
   3.96093006531271*^9, 3.960930142358721*^9}, {3.9609302360928917`*^9, 
   3.9609302604129105`*^9}, {3.960930336038515*^9, 3.960930358640999*^9}, {
   3.9609303906000576`*^9, 3.960930454167984*^9}, {3.9609305310176105`*^9, 
   3.9609305530624638`*^9}, 3.960930717898037*^9, {3.960930890704439*^9, 
   3.9609308993571625`*^9}, {3.960931101811157*^9, 3.960931102597151*^9}, {
   3.960932236182781*^9, 3.960932242356518*^9}, {3.9609722166178474`*^9, 
   3.9609722454980946`*^9}, {3.960973113513569*^9, 3.960973123227356*^9}, {
   3.9609731572231674`*^9, 3.9609731588103676`*^9}, {3.960974753657713*^9, 
   3.9609747920534573`*^9}, {3.96097484245726*^9, 3.960974901394575*^9}, {
   3.9609760867218456`*^9, 3.96097610336327*^9}, {3.9610598257218704`*^9, 
   3.9610598380496407`*^9}, {3.9610788952319775`*^9, 3.961078897507698*^9}, {
   3.9610789410012264`*^9, 
   3.961078942159132*^9}},ExpressionUUID->"896d8f2c-acdd-8d45-b93f-\
a30a0c36f288"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"parseNandArgs", "[", "expr_String", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inside", ",", 
       RowBox[{"level", "=", "0"}], ",", 
       RowBox[{"commaPos", "=", "0"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"inside", "=", 
       RowBox[{"StringTake", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"{", 
          RowBox[{"6", ",", 
           RowBox[{"-", "2"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"inside", ",", 
            RowBox[{"{", "i", "}"}]}], "]"}], ",", "\"\<(\>\"", ",", 
          RowBox[{"level", "++"}], ",", "\"\<)\>\"", ",", 
          RowBox[{"level", "--"}], ",", "\"\<,\>\"", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"level", "==", "0"}], ",", 
            RowBox[{
             RowBox[{"commaPos", "=", "i"}], ";", 
             RowBox[{"Break", "[", "]"}]}]}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"StringLength", "[", "inside", "]"}]}], "}"}]}], "]"}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"commaPos", "==", "0"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"StringTrim", "[", 
         RowBox[{"StringTake", "[", 
          RowBox[{"inside", ",", 
           RowBox[{"commaPos", "-", "1"}]}], "]"}], "]"}], ",", 
        RowBox[{"StringTrim", "[", 
         RowBox[{"StringTake", "[", 
          RowBox[{"inside", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"commaPos", "+", "1"}], ",", 
             RowBox[{"StringLength", "[", "inside", "]"}]}], "}"}]}], "]"}], 
         "]"}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.9609031962535934`*^9}, {
   3.9609116708574276`*^9, 3.960911678094612*^9}, {3.9609305530988407`*^9, 
   3.960930572548647*^9}, {3.9609307287699127`*^9, 3.960930746192217*^9}, {
   3.9609307916664505`*^9, 3.960930791920662*^9}, {3.9609310079933243`*^9, 
   3.960931008612793*^9}, 3.9609761077243824`*^9, {3.9610627836183205`*^9, 
   3.9610627843563213`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"7dc1f08b-337e-0e48-9cb1-613f6d9bfbfd"],

Cell[TextData[StyleBox["Extracts the two arguments from a NAND(...) string \
while correctly handling nested parentheses.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609310227903976`*^9, 3.960931026588005*^9}, {
  3.960968723395159*^9, 3.9609687425582886`*^9}, {3.960972279294445*^9, 
  3.960972284544195*^9}, {3.960976465598215*^9, 
  3.9609764662414474`*^9}},ExpressionUUID->"7489f5c7-3391-8e47-bdef-\
85bc15a70951"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputPairs", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allFuncs", "=", 
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"NAND", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"1", "-", 
   RowBox[{"a", "*", "b"}]}]}]}], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.9609031962535934`*^9}, {
   3.9609116708574276`*^9, 3.960911678094612*^9}, {3.9609305530988407`*^9, 
   3.960930572548647*^9}, 3.9609307287699127`*^9, {3.9609309248436546`*^9, 
   3.9609309303061504`*^9}, {3.9609310311941223`*^9, 
   3.9609310327900295`*^9}, {3.960976150760231*^9, 3.9609761525507965`*^9}, 
   3.9609764706353817`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"474b0593-cf83-c142-b9b9-d48056fcb144"],

Cell[TextData[StyleBox["Generates all possible 2-bit input pairs, defines all \
2-input Boolean functions, and defines the NAND operation.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609310576153946`*^9, 3.960931084444784*^9}, {
   3.960931138925783*^9, 3.9609311404213963`*^9}, {3.9609687178235836`*^9, 
   3.9609687183292103`*^9}, {3.9609722881557064`*^9, 3.960972303685917*^9}, 
   3.960976255517618*^9, {3.960976482657442*^9, 
   3.9609764869309673`*^9}},ExpressionUUID->"ba1c810e-270d-4b43-90f3-\
bb23d903095e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"evalFunc", "[", 
    RowBox[{"func_", ",", "a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "idx", "}"}], ",", 
     RowBox[{
      RowBox[{"idx", "=", 
       RowBox[{
        RowBox[{"Position", "[", 
         RowBox[{"inputPairs", ",", 
          RowBox[{"{", 
           RowBox[{"a", ",", "b"}], "}"}]}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"func", "[", 
       RowBox[{"[", "idx", "]"}], "]"}]}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"applyNandOnFuncs", "[", 
    RowBox[{"f1_", ",", "f2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"NAND", "[", 
       RowBox[{
        RowBox[{"evalFunc", "[", 
         RowBox[{"f1", ",", "a", ",", "b"}], "]"}], ",", 
        RowBox[{"evalFunc", "[", 
         RowBox[{"f2", ",", "a", ",", "b"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"a", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"b", ",", "0", ",", "1"}], "}"}]}], "]"}], "//", "Flatten"}]}],
   "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"toFuncForm", "[", "list_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Partition", "[", 
    RowBox[{"list", ",", "4"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.9609031993067684`*^9}, {
   3.9609312145410805`*^9, 3.9609312160518227`*^9}, 3.9609761770685406`*^9, 
   3.9609765173696384`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"03157078-b1e5-7146-8f3a-4a60e4d8df24"],

Cell[TextData[StyleBox["Evaluates Boolean functions on input pairs, applies \
the NAND gate to two functions over all inputs, and formats the result as a \
4-entry truth table.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.960931223308651*^9, 3.9609312264631214`*^9}, 
   3.960968749098467*^9, {3.9609722915579033`*^9, 3.9609723066247597`*^9}, {
   3.960976505082569*^9, 
   3.960976507647827*^9}},ExpressionUUID->"9e6f7a97-7844-2a43-98fa-\
9701beb2a72f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"expr0", "=", "\"\<NAND(NAND(NAND(a,a),a),NAND(NAND(a,a),a))\>\""}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"expr1", "=", "\"\<NAND(NAND(a,a),a)\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"exprA", "=", "\"\<a\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"exprB", "=", "\"\<b\>\""}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"baseExprs", "=", 
    RowBox[{"Association", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], "->", "expr0"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], "->", "expr1"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], "->", "exprA"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "1"}], "}"}], "->", "exprB"}]}],
      "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"generated", "=", 
   RowBox[{"Keys", "[", "baseExprs", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"expressions", "=", "baseExprs"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"queue", "=", "generated"}], ";"}]}], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.96090320917774*^9}, 
   3.9609752885555477`*^9, {3.960976194846237*^9, 3.9609762290579643`*^9}, {
   3.9609765330123367`*^9, 3.9609765337319794`*^9}, {3.960995470580723*^9, 
   3.960995478930271*^9}, {3.96099691475774*^9, 3.9609969327015705`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"1f32e7c3-4db5-7b4c-a115-4ccc40cb5862"],

Cell[TextData[StyleBox["Defines NAND-based expressions for constant and input \
functions, initializes the expression map, and sets up the queue for \
generating all Boolean functions.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609765397954845`*^9, 
  3.9609765432879505`*^9}},ExpressionUUID->"7679ce57-55a6-e24f-8d03-\
8d6631fdffbc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"While", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "generated", "]"}], "<", 
     RowBox[{"Length", "[", "allFuncs", "]"}]}], ",", 
    RowBox[{
     RowBox[{"f1", "=", 
      RowBox[{"First", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"queue", "=", 
      RowBox[{"Rest", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"f2", "=", "g"}], ";", "\[IndentingNewLine]", 
        RowBox[{"newFunc", "=", 
         RowBox[{"toFuncForm", "[", 
          RowBox[{"applyNandOnFuncs", "[", 
           RowBox[{"f1", ",", "f2"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"generated", ",", "newFunc"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"generated", ",", "newFunc"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"expressions", "[", "newFunc", "]"}], "=", 
            RowBox[{"\"\<NAND(\>\"", "<>", 
             RowBox[{"expressions", "[", "f1", "]"}], "<>", "\"\<, \>\"", "<>", 
             RowBox[{"expressions", "[", "f2", "]"}], "<>", "\"\<)\>\""}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"queue", ",", "newFunc"}], "]"}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"newFuncRev", "=", 
         RowBox[{"toFuncForm", "[", 
          RowBox[{"applyNandOnFuncs", "[", 
           RowBox[{"f2", ",", "f1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"generated", ",", "newFuncRev"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"generated", ",", "newFuncRev"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"expressions", "[", "newFuncRev", "]"}], "=", 
            RowBox[{"\"\<NAND(\>\"", "<>", 
             RowBox[{"expressions", "[", "f2", "]"}], "<>", "\"\<, \>\"", "<>", 
             RowBox[{"expressions", "[", "f1", "]"}], "<>", "\"\<)\>\""}]}], ";",
            "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"queue", ",", "newFuncRev"}], "]"}], ";"}]}], "]"}], 
        ";"}], ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", "generated"}], "}"}]}], "]"}]}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.960903172578684*^9, 3.960903211090843*^9}, {
   3.96090333193359*^9, 3.9609033547111607`*^9}, {3.96093129164139*^9, 
   3.960931295939535*^9}, 3.960976222233967*^9, 3.9609763549975643`*^9, 
   3.9609765643561306`*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"fc868ea9-29e8-e74d-aa1d-520623f55899"],

Cell[TextData[StyleBox["Builds all 2-input Boolean functions by iteratively \
combining previously generated ones using the NAND operation in all input \
orders.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609765706453533`*^9, 
  3.9609765732568226`*^9}},ExpressionUUID->"fca3da9a-bc47-4046-8d3b-\
8fd4fea268b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"drawCircuit", "[", "exprStr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"id", "=", "1"}], ",", 
       RowBox[{"wires", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"nodes", "=", 
        RowBox[{"{", "}"}]}], ",", "build"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"build", "[", "expr_", "]"}], ":=", 
       RowBox[{"Which", "[", 
        RowBox[{
         RowBox[{"StringMatchQ", "[", 
          RowBox[{"expr", ",", 
           RowBox[{"\"\<a\>\"", "|", "\"\<b\>\""}]}], "]"}], ",", 
         RowBox[{
          RowBox[{"id", "++"}], ";", 
          RowBox[{"nodes", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"nodes", ",", 
             RowBox[{
              RowBox[{"ToString", "[", "id", "]"}], "->", "expr"}]}], "]"}]}],
           ";", 
          RowBox[{"ToString", "[", "id", "]"}]}], ",", 
         RowBox[{"StringStartsQ", "[", 
          RowBox[{"expr", ",", "\"\<NAND(\>\""}], "]"}], ",", 
         RowBox[{"Module", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"args", ",", "left", ",", "right", ",", "thisID"}], "}"}],
            ",", 
           RowBox[{
            RowBox[{"args", "=", 
             RowBox[{"parseNandArgs", "[", "expr", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "args", "]"}], "!=", "2"}], ",", 
              RowBox[{
               RowBox[{"id", "++"}], ";", 
               RowBox[{"nodes", "=", 
                RowBox[{"Append", "[", 
                 RowBox[{"nodes", ",", 
                  RowBox[{
                   RowBox[{"ToString", "[", "id", "]"}], 
                   "->", "\"\<?\>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"Return", "[", 
                RowBox[{"ToString", "[", "id", "]"}], "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"left", "=", 
             RowBox[{"build", "[", 
              RowBox[{"args", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"right", "=", 
             RowBox[{"build", "[", 
              RowBox[{"args", "[", 
               RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"thisID", "=", 
             RowBox[{"ToString", "[", 
              RowBox[{"++", "id"}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"nodes", "=", 
             RowBox[{"Append", "[", 
              RowBox[{"nodes", ",", 
               RowBox[{"thisID", "->", "\"\<NAND\>\""}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"wires", "=", 
             RowBox[{"Join", "[", 
              RowBox[{"wires", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"left", "->", "thisID"}], ",", 
                 RowBox[{"right", "->", "thisID"}]}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", "thisID"}]}], "]"}], ",", "True", ",", 
         RowBox[{
          RowBox[{"id", "++"}], ";", 
          RowBox[{"nodes", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"nodes", ",", 
             RowBox[{
              RowBox[{"ToString", "[", "id", "]"}], "->", "\"\<?\>\""}]}], 
            "]"}]}], ";", 
          RowBox[{"ToString", "[", "id", "]"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"id", "=", "0"}], ";", 
      RowBox[{"wires", "=", 
       RowBox[{"{", "}"}]}], ";", 
      RowBox[{"nodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"build", "[", "exprStr", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Graph", "[", 
       RowBox[{"wires", ",", 
        RowBox[{"VertexLabels", "->", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"nodes", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", "1"}], "]"}], "]"}], "->", 
            RowBox[{"Placed", "[", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"nodes", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", "2"}], "]"}], "]"}], 
                 "===", "\"\<NAND\>\""}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"nodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
                  RowBox[{"FontSize", "->", "12"}]}], "]"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"nodes", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
                  RowBox[{"FontSize", "->", "16"}], ",", "Bold"}], "]"}]}], 
               "]"}], ",", "Above"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{"Length", "[", "nodes", "]"}]}], "}"}]}], "]"}]}], ",", 
        RowBox[{"VertexStyle", "->", "LightBlue"}], ",", 
        RowBox[{"VertexSize", "->", "Medium"}], ",", 
        RowBox[{"GraphLayout", "->", "\"\<LayeredDigraphEmbedding\>\""}]}], 
       "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.9609762495025196`*^9, {3.9609764087709637`*^9, 3.960976409267872*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"ecc68abe-4c56-3946-9477-15a6fdda0ebd"],

Cell[TextData[StyleBox["Generates a circuit diagram as a graph from a NAND \
expression string",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{
  3.9609766024582653`*^9},ExpressionUUID->"d3638a0d-90d2-9d4e-a40d-\
edc97692ac09"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tableData", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"func", ",", 
        RowBox[{"expressions", "[", "func", "]"}], ",", 
        RowBox[{"drawCircuit", "[", 
         RowBox[{"expressions", "[", "func", "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"func", ",", 
        RowBox[{"Keys", "[", "expressions", "]"}]}], "}"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tableWithDividers", "=", 
    RowBox[{"Riffle", "[", 
     RowBox[{"tableData", ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"\"\<----------------\>\"", ",", "\"\<----------------\>\"", 
         ",", "\"\<----------------\>\""}], "}"}], "}"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"TableForm", "[", 
  RowBox[{"tableWithDividers", ",", 
   RowBox[{"TableHeadings", "->", 
    RowBox[{"{", 
     RowBox[{"None", ",", 
      RowBox[{"{", 
       RowBox[{"\"\<Truth Table\>\"", ",", "\"\<NAND Expression\>\"", 
        ",", "\"\<Circuit Diagram\>\""}], "}"}]}], "}"}]}]}], 
  "]"}], "\n"}], "Input",
 CellChangeTimes->{
  3.9609762752093697`*^9, {3.961062900713112*^9, 3.961062917163664*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"66f49b63-4c15-5040-91d2-4183f28e1a50"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"\<\"Truth Table\"\>", "\<\"NAND Expression\"\>", "\<\"Circuit Diagram\"\
\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(NAND(a,a),a),NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "6", "8", "7", "10", "9", "11"}, {{{1, 
           2}, {3, 2}, {2, 4}, {5, 4}, {6, 7}, {8, 7}, {7, 9}, {10, 9}, {4, 
           11}, {9, 11}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "11" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(a,a),a)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}}, 
           Null}, {GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {0., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{0., 1.}, {0., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"a\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{}, {}]]}, 
        TagBox[GraphicsGroupBox[{{}, {}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None,
      PlotRange->NCache[{{0, 
          Rational[4, 3]}, {0, 1}}, {{0, 1.3333333333333333`}, {0, 1}}]]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"b\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{}, {}]]}, 
        TagBox[GraphicsGroupBox[{{}, {}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None,
      PlotRange->NCache[{{0, 
          Rational[4, 3]}, {0, 1}}, {{0, 1.3333333333333333`}, {0, 1}}]]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(NAND(a,a),a), a)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 
           4}, {4, 6}, {7, 6}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-1., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(NAND(a,a),a), b)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 
           4}, {4, 6}, {7, 6}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 1.}, {-1., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-1., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(a, b)\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{"1", "3", "2"}, {{{1, 2}, {3, 2}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 1.}, {1., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(a, NAND(NAND(NAND(a,a),a), b))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
           4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["b", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"1"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(b, NAND(NAND(NAND(a,a),a), a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
           4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {-1., 1.}}, 0.1], 
            ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"1"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14",
            "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8,
            9}, {10, 9}, {9, 11}, {12, 11}, {11, 13}, {14, 13}, {6, 15}, {13, 
           15}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "8" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{3., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[0.2]}}], "\<\"NAND(NAND(a, b), NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "4", "6", "5", "8", "7", "9"}, {{{1, 2}, {3, 2}, {4, 
           5}, {6, 5}, {5, 7}, {8, 7}, {2, 9}, {7, 9}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"0"},
       {"1"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(a, b), NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b)))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "4", "6", "5", "8", "7", "10", "9", "11", "13", "12",
            "15", "14", "17", "16", "18", "19"}, {{{1, 2}, {3, 2}, {4, 5}, {6,
            5}, {5, 7}, {8, 7}, {7, 9}, {10, 9}, {11, 12}, {13, 12}, {12, 
           14}, {15, 14}, {14, 16}, {17, 16}, {9, 18}, {16, 18}, {2, 19}, {18,
            19}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
               Style["NAND", FontSize -> 12], Above], "17" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "16" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "18" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 5.}, {2., 4.}}, 0.1], 
            ArrowBox[{{2., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{2., 5.}, {2., 4.}}, 0.1], 
            ArrowBox[{{2., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{1., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{4., 5.}, {5., 4.}}, 0.1], 
            ArrowBox[{{5., 4.}, {4., 3.}}, 0.1], 
            ArrowBox[{{5., 5.}, {5., 4.}}, 0.1], 
            ArrowBox[{{4., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{4., 4.}, {4., 3.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{4., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {4., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{5., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {5., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{5., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {5., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{4., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {4., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{4., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {4., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), \
NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14",
            "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8,
            9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 
           15}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "13" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{2., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"1"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), NAND(b, \
NAND(NAND(NAND(a,a),a), a)))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9", "11", "13", "12", "15",
            "14", "17", "16", "10", "18", "19"}, {{{1, 2}, {3, 2}, {2, 4}, {5,
            4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}, {10, 11}, {12, 11}, {11, 
           13}, {14, 13}, {13, 15}, {16, 15}, {17, 18}, {15, 18}, {9, 19}, {
           18, 19}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "13" -> Placed[
               Style["NAND", FontSize -> 12], Above], "17" -> Placed[
               Style["NAND", FontSize -> 12], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "18" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["a", FontSize -> 16, Bold], Above]}, 
           VertexSize -> {Medium}, VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {1., 3.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{0., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{1., 1.}, {2., 0.}}, 0.1], 
            ArrowBox[{{2., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{3., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{3., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 4.}, {3., 3.}}, 0.1], 
            ArrowBox[{{3., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {3., 2.}}, 0.1], 
            ArrowBox[{{2., 2.}, {2., 1.}}, 0.1], 
            ArrowBox[{{2., 1.}, {2., 0.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"0"},
       {"0"},
       {"1"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(b, NAND(NAND(NAND(a,a),a), a)), \
NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14",
            "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8,
            9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 
           15}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["NAND", FontSize -> 12], Above], "13" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["NAND", FontSize -> 12], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            Medium], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{-1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{0., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{2., 2.}, {1., 1.}}, 0.1], 
            ArrowBox[{{2., 3.}, {2., 2.}}, 0.1], 
            ArrowBox[{{1., 1.}, {1., 0.}}, 0.1], 
            ArrowBox[{{1., 2.}, {1., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]},
    {"\<\"----------------\"\>", "\<\"----------------\"\>", \
"\<\"----------------\"\>"},
    {GridBox[{
       {"1"},
       {"0"},
       {"0"},
       {"0"}
      },
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.1]}, 
          Offset[
          0.2]}}], "\<\"NAND(NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b)), NAND(NAND(a,a),a))\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{
          "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14",
            "13", "15", "16", "18", "17", "20", "19", "21"}, {{{1, 2}, {3, 
           2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {10, 9}, {9, 11}, {12, 
           11}, {11, 13}, {14, 13}, {6, 15}, {13, 15}, {16, 17}, {18, 17}, {
           17, 19}, {20, 19}, {15, 21}, {19, 21}}, Null}, {
          GraphLayout -> "LayeredDigraphEmbedding", 
           VertexLabels -> {"9" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
               Style["b", FontSize -> 16, Bold], Above], "17" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
               Style["NAND", FontSize -> 12], Above], "10" -> Placed[
               Style["NAND", FontSize -> 12], Above], "6" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "18" -> Placed[
               Style["NAND", FontSize -> 12], Above], "15" -> Placed[
               Style["NAND", FontSize -> 12], Above], "11" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
               Style["NAND", FontSize -> 12], Above], "5" -> Placed[
               Style["NAND", FontSize -> 12], Above], "8" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "20" -> Placed[
               Style["NAND", FontSize -> 12], Above], "14" -> Placed[
               Style["NAND", FontSize -> 12], Above], "19" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "21" -> Placed[
               Style["NAND", FontSize -> 12], Above], "1" -> Placed[
               Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
               Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium},
            VertexStyle -> {
             RGBColor[0.87, 0.94, 1]}}]]}, 
        TagBox[GraphicsGroupBox[{
           {Hue[0.6, 0.7, 0.7], Opacity[0.7], CapForm["Round"], Arrowheads[
            0.02019881556683587], ArrowBox[{{0., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{1., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{1., 5.}, {1., 4.}}, 0.1], 
            ArrowBox[{{0., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{0., 4.}, {0., 3.}}, 0.1], 
            ArrowBox[{{0., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{-1., 3.}, {0., 2.}}, 0.1], 
            ArrowBox[{{2., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{3., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{3., 5.}, {3., 4.}}, 0.1], 
            ArrowBox[{{2., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{2., 4.}, {2., 3.}}, 0.1], 
            ArrowBox[{{1., 2.}, {0., 1.}}, 0.1], 
            ArrowBox[{{1., 3.}, {1., 2.}}, 0.1], 
            ArrowBox[{{0., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-3., 3.}, {-2., 2.}}, 0.1], 
            ArrowBox[{{-2., 2.}, {-2., 1.}}, 0.1], 
            ArrowBox[{{-2., 3.}, {-2., 2.}}, 0.1], 
            ArrowBox[{{-2., 1.}, {-2., 0.}}, 0.1], 
            ArrowBox[{{-3., 2.}, {-2., 1.}}, 0.1]}, 
           {RGBColor[0.87, 0.94, 1], EdgeForm[{GrayLevel[0], Opacity[
            0.7]}], {DiskBox[{0., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {0., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 4.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {3., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{3., 5.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {3., 5.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{2., 4.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {2., 4.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {1., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{1., 3.}, 0.1], InsetBox[
              StyleBox["\<\"b\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {1., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {0., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-3., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-3., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 2.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 3.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-2., 3.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 1.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 1.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-3., 2.}, 0.1], InsetBox[
              StyleBox["\<\"a\"\>",
               StripOnInput->False,
               FontSize->16,
               FontWeight->Bold], Offset[{0, 2}, {-3., 2.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}, {DiskBox[{-2., 0.}, 0.1], InsetBox[
              StyleBox["\<\"NAND\"\>",
               StripOnInput->False,
               FontSize->12], Offset[{0, 2}, {-2., 0.1}], ImageScaled[{0.5, 0}],
              BaseStyle->"Graphics"]}}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False]],
      DefaultBaseStyle->"NetworkGraphics",
      FormatType->TraditionalForm,
      FrameTicks->None]}
   },
   GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  TableForm[{{{0, 0, 0, 0}, "NAND(NAND(NAND(a,a),a),NAND(NAND(a,a),a))", 
     Graph[{
      "1", "3", "2", "5", "4", "6", "8", "7", "10", "9", "11"}, {{{1, 2}, {3, 
       2}, {2, 4}, {5, 4}, {6, 7}, {8, 7}, {7, 9}, {10, 9}, {4, 11}, {9, 11}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "11" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 1, 
     1}, "NAND(NAND(a,a),a)", 
     Graph[{
      "1", "3", "2", "5", "4"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 0, 
     1}, "a", 
     Graph[{}, {}]}, {
    "----------------", "----------------", "----------------"}, {{0, 0, 1, 
     1}, "b", 
     Graph[{}, {}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 1, 
     0}, "NAND(NAND(NAND(a,a),a), a)", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {
       4, 6}, {7, 6}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 0, 
     0}, "NAND(NAND(NAND(a,a),a), b)", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {
       4, 6}, {7, 6}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 1, 
     0}, "NAND(a, b)", 
     Graph[{"1", "3", "2"}, {{{1, 2}, {3, 2}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 1, 
     1}, "NAND(a, NAND(NAND(NAND(a,a),a), b))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
       4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["b", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 1, 0, 
     1}, "NAND(b, NAND(NAND(NAND(a,a),a), a))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9"}, {{{1, 2}, {3, 2}, {2, 
       4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 1, 
     1}, "NAND(NAND(NAND(NAND(a,a),a), a), NAND(NAND(NAND(a,a),a), b))", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14", 
       "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 
       9}, {10, 9}, {9, 11}, {12, 11}, {11, 13}, {14, 13}, {6, 15}, {13, 15}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "8" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 0, 0, 
     1}, "NAND(NAND(a, b), NAND(NAND(a,a),a))", 
     Graph[{
      "1", "3", "2", "4", "6", "5", "8", "7", "9"}, {{{1, 2}, {3, 2}, {4, 
       5}, {6, 5}, {5, 7}, {8, 7}, {2, 9}, {7, 9}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 0, 
     1}, "NAND(NAND(a, b), NAND(NAND(NAND(NAND(a,a),a), a), \
NAND(NAND(NAND(a,a),a), b)))", 
     Graph[{
      "1", "3", "2", "4", "6", "5", "8", "7", "10", "9", "11", "13", "12", 
       "15", "14", "17", "16", "18", "19"}, {{{1, 2}, {3, 2}, {4, 5}, {6, 
       5}, {5, 7}, {8, 7}, {7, 9}, {10, 9}, {11, 12}, {13, 12}, {12, 14}, {15,
        14}, {14, 16}, {17, 16}, {9, 18}, {16, 18}, {2, 19}, {18, 19}}, 
       Null}, {GraphLayout -> "LayeredDigraphEmbedding", 
       VertexLabels -> {"9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
           Style["NAND", FontSize -> 12], Above], "17" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "16" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "18" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 0, 
     0}, "NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), NAND(NAND(a,a),a))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14", 
       "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 
       9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 15}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "13" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 1, 1, 
     0}, "NAND(NAND(a, NAND(NAND(NAND(a,a),a), b)), NAND(b, \
NAND(NAND(NAND(a,a),a), a)))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9", "11", "13", "12", "15", 
       "14", "17", "16", "10", "18", "19"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 
       4}, {4, 6}, {7, 6}, {8, 9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 
       13}, {13, 15}, {16, 15}, {17, 18}, {15, 18}, {9, 19}, {18, 19}}, 
       Null}, {GraphLayout -> "LayeredDigraphEmbedding", 
       VertexLabels -> {"9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "13" -> Placed[
           Style["NAND", FontSize -> 12], Above], "17" -> Placed[
           Style["NAND", FontSize -> 12], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "18" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "19" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["a", FontSize -> 16, Bold], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{0, 0, 1, 
     0}, "NAND(NAND(b, NAND(NAND(NAND(a,a),a), a)), NAND(NAND(a,a),a))", 
     Graph[{
      "2", "4", "3", "6", "5", "8", "7", "1", "9", "10", "12", "11", "14", 
       "13", "15"}, {{{1, 2}, {3, 2}, {2, 4}, {5, 4}, {4, 6}, {7, 6}, {8, 
       9}, {6, 9}, {10, 11}, {12, 11}, {11, 13}, {14, 13}, {9, 15}, {13, 15}},
        Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["NAND", FontSize -> 12], Above], "13" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["NAND", FontSize -> 12], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "10" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "6" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "5" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "8" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}, {
    "----------------", "----------------", "----------------"}, {{1, 0, 0, 
     0}, "NAND(NAND(NAND(NAND(NAND(a,a),a), a), NAND(NAND(NAND(a,a),a), b)), \
NAND(NAND(a,a),a))", 
     Graph[{
      "1", "3", "2", "5", "4", "7", "6", "8", "10", "9", "12", "11", "14", 
       "13", "15", "16", "18", "17", "20", "19", "21"}, {{{1, 2}, {3, 2}, {2, 
       4}, {5, 4}, {4, 6}, {7, 6}, {8, 9}, {10, 9}, {9, 11}, {12, 11}, {11, 
       13}, {14, 13}, {6, 15}, {13, 15}, {16, 17}, {18, 17}, {17, 19}, {20, 
       19}, {15, 21}, {19, 21}}, Null}, {
      GraphLayout -> "LayeredDigraphEmbedding", VertexLabels -> {"9" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "13" -> Placed[
           Style["b", FontSize -> 16, Bold], Above], "17" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "4" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "2" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "16" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "7" -> Placed[
           Style["NAND", FontSize -> 12], Above], "10" -> Placed[
           Style["NAND", FontSize -> 12], Above], "6" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "18" -> Placed[
           Style["NAND", FontSize -> 12], Above], "15" -> Placed[
           Style["NAND", FontSize -> 12], Above], "11" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "3" -> Placed[
           Style["NAND", FontSize -> 12], Above], "5" -> Placed[
           Style["NAND", FontSize -> 12], Above], "8" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "20" -> Placed[
           Style["NAND", FontSize -> 12], Above], "14" -> Placed[
           Style["NAND", FontSize -> 12], Above], "19" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "21" -> Placed[
           Style["NAND", FontSize -> 12], Above], "1" -> Placed[
           Style["a", FontSize -> 16, Bold], Above], "12" -> Placed[
           Style["NAND", FontSize -> 12], Above]}, VertexSize -> {Medium}, 
       VertexStyle -> {
         RGBColor[0.87, 0.94, 1]}}]}}, 
   TableHeadings -> {
    None, {"Truth Table", "NAND Expression", "Circuit Diagram"}}]]], "Output",
 CellChangeTimes->{
  3.960976275884245*^9, 3.960976359606251*^9, {3.9609969374687576`*^9, 
   3.9609969622976494`*^9}, {3.9610628304507637`*^9, 3.961062850074505*^9}, 
   3.9610629013470535`*^9, 3.961062935240841*^9, 3.961063705190298*^9},
 CellLabel->
  "Out[20]//TableForm=",ExpressionUUID->"78639079-2c36-5e45-9edc-\
33fd547131c9"]
}, Open  ]],

Cell[TextData[StyleBox["Note: This is not the most minimal route. It is just \
to show completeness.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609971339234905`*^9, 
  3.960997157693533*^9}},ExpressionUUID->"4ec893b7-c916-ec49-8550-\
00b902057af4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Classical 2 to 2 gates", "Subtitle",
 FontSize->20,
 FontColor->RGBColor[
  0.792156862745098, 0.3176470588235294, 0.09803921568627451]]], "Section",
 CellChangeTimes->{
  3.9610790331537895`*^9},ExpressionUUID->"f557071c-692e-7e43-9228-\
cca8a8d11906"],

Cell[TextData[StyleBox["\t2-to-2 gates extend the concept of 2-input, \
1-output Boolean functions by producing two output bits from two input bits, \
enabling more complex and nuanced operations. This extension is important \
because it allows us to explore a broader class of logical transformations, \
including reversible gates that preserve information. While 2-to-1 functions \
span all 16 Boolean outputs, they are inherently irreversible\[LongDash]once \
a single bit is output, some information is lost and cannot be recovered. In \
contrast, only a subset of the 256 possible 2-to-2 functions are reversible\
\[LongDash]specifically, the bijective ones that map each input pair to a \
unique output pair. By focusing on this smaller, structured subspace of \
reversible 2-to-2 gates, we can investigate how universality and efficient \
composition play out in settings where information preservation is required, \
which is essential for applications like quantum computing and reversible \
classical logic.", "Subtitle",
 FontSize->15,
 FontColor->RGBColor[0., 0., 0.]]], "Text",
 CellChangeTimes->{{3.96093146964822*^9, 3.9609314731497517`*^9}, {
   3.9609315699833736`*^9, 3.9609315840660095`*^9}, {3.960931699843746*^9, 
   3.960931703140068*^9}, {3.9609317631330185`*^9, 3.960931763446905*^9}, {
   3.960932229676901*^9, 3.9609322753311157`*^9}, 3.960932475311823*^9, 
   3.9609725334503345`*^9, 3.9609726180604916`*^9, {3.9609767529425964`*^9, 
   3.9609767551152477`*^9}, 3.9609775662052536`*^9, 
   3.9610790109196777`*^9},ExpressionUUID->"944d5393-3857-ea41-927e-\
a0746cbfdd89"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"inputs", "=", 
     RowBox[{"{", 
      RowBox[{"\"\<00\>\"", ",", "\"\<01\>\"", ",", "\"\<10\>\"", 
       ",", "\"\<11\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"allOutputs", "=", 
     RowBox[{"Tuples", "[", 
      RowBox[{"inputs", ",", "4"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"isReversible", "[", "func_", "]"}], ":=", 
     RowBox[{"DuplicateFreeQ", "[", "func", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"reversibleGates", "=", 
     RowBox[{"Select", "[", 
      RowBox[{"allOutputs", ",", "isReversible"}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.9609037020031433`*^9, 3.960903709090307*^9}, {
   3.9609037712528114`*^9, 3.960903793374609*^9}, {3.9609726789457397`*^9, 
   3.9609726993802776`*^9}, {3.9609727874337444`*^9, 3.960972817213991*^9}, 
   3.9609971621900578`*^9},
 CellLabel->"In[21]:=",ExpressionUUID->"5670847d-93ef-9d4b-81ec-b057f30a82cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"With", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", "=", "#"}], "}"}], ",", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Gate \>\"", ",", "i", ",", "\"\<: \>\"", ",", 
         RowBox[{"reversibleGates", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "]"}], "&"}], ",", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "reversibleGates", "]"}], "]"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.9609037020031433`*^9, 3.960903745524639*^9}, 
   3.9609037954497375`*^9, 3.9609318734581623`*^9, {3.961058260057604*^9, 
   3.961058263517559*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"b0bd0b48-38b7-2743-8727-b8c47432bff4"],

Cell[TextData[StyleBox["Generate all possible 2-to-2 gate output mappings, \
check which are reversible by ensuring outputs are unique , and print all \
reversible gates with their indices",
 FontColor->RGBColor[0., 0., 0.],
 Background->RGBColor[1., 1., 1.]]], "Text",
 CellChangeTimes->{{3.960931878621706*^9, 3.960931881802574*^9}, {
   3.960931934264889*^9, 3.9609319624099655`*^9}, 
   3.9609688045333405`*^9},ExpressionUUID->"d02db296-78ce-2f4f-b307-\
892795b293d7"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"10\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Gate ", 1, ": ", {"00", "01", "10", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974087963`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"1ee8d1ba-548b-7346-9aa1-c36655ce6e7c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Gate ", 2, ": ", {"00", "01", "11", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797412796*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"81a9462e-22c1-f547-8d34-91daf92ae664"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Gate ", 3, ": ", {"00", "10", "01", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974188023`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"3ad0100b-70f5-f946-bdb5-2b7d8c152b7d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "4", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"01\"\>"}], "}"}]}],
  SequenceForm["Gate ", 4, ": ", {"00", "10", "11", "01"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797421795*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"45d9e004-d894-854b-b048-fc3d4811e482"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "5", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"11\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Gate ", 5, ": ", {"00", "11", "01", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797424795*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"2eba8131-5a12-2542-a673-63d7b0c536c2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "6", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"11\"\>", ",", "\<\"10\"\>", 
     ",", "\<\"01\"\>"}], "}"}]}],
  SequenceForm["Gate ", 6, ": ", {"00", "11", "10", "01"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797427805*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"67a371e4-96cf-9d48-b131-ddd2245eda11"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "7", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"01\"\>", ",", "\<\"00\"\>", ",", "\<\"10\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Gate ", 7, ": ", {"01", "00", "10", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974307976`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"76c79b36-93df-8c48-b5c5-d9e0c47a30c5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "8", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"01\"\>", ",", "\<\"00\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Gate ", 8, ": ", {"01", "00", "11", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797434799*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"353980d0-b46c-674d-8dff-8d6e045aef51"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "9", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"01\"\>", ",", "\<\"10\"\>", ",", "\<\"00\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Gate ", 9, ": ", {"01", "10", "00", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974377975`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"8448820f-8140-d64b-8c04-e28fda78c133"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "10", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"01\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"00\"\>"}], "}"}]}],
  SequenceForm["Gate ", 10, ": ", {"01", "10", "11", "00"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797440796*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"06e6dddc-b824-bf45-80ee-bdf9f4d0998b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "11", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"01\"\>", ",", "\<\"11\"\>", ",", "\<\"00\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Gate ", 11, ": ", {"01", "11", "00", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797443796*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"24cdbe73-c346-c048-88ab-c4d630010643"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "12", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"01\"\>", ",", "\<\"11\"\>", ",", "\<\"10\"\>", 
     ",", "\<\"00\"\>"}], "}"}]}],
  SequenceForm["Gate ", 12, ": ", {"01", "11", "10", "00"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974467983`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"da7380e4-cc30-5c48-a5a4-42598f145475"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "13", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"10\"\>", ",", "\<\"00\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Gate ", 13, ": ", {"10", "00", "01", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797450798*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"6ac562fe-5722-2d43-8767-9d5539af2be7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "14", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"10\"\>", ",", "\<\"00\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"01\"\>"}], "}"}]}],
  SequenceForm["Gate ", 14, ": ", {"10", "00", "11", "01"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974537964`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"698fa8e5-20e5-cb4f-b4f5-f306f9015ff4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "15", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"10\"\>", ",", "\<\"01\"\>", ",", "\<\"00\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Gate ", 15, ": ", {"10", "01", "00", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797456793*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"786391e3-6b11-4949-aae5-6f3d91f38ef1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "16", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"10\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"00\"\>"}], "}"}]}],
  SequenceForm["Gate ", 16, ": ", {"10", "01", "11", "00"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797459797*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"43f71dc8-6cd0-194c-83ea-d0dde02d2e7f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "17", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"00\"\>", 
     ",", "\<\"01\"\>"}], "}"}]}],
  SequenceForm["Gate ", 17, ": ", {"10", "11", "00", "01"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797462797*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"6c3a2486-cc7a-6c4a-b30e-49ea3a196c79"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "18", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"00\"\>"}], "}"}]}],
  SequenceForm["Gate ", 18, ": ", {"10", "11", "01", "00"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797464796*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"f1ad824f-6b3f-4a4a-822d-b233cc270dea"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "19", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"11\"\>", ",", "\<\"00\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Gate ", 19, ": ", {"11", "00", "01", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797468794*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"7b58df49-b041-fb43-81d3-43d428ad5725"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "20", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"11\"\>", ",", "\<\"00\"\>", ",", "\<\"10\"\>", 
     ",", "\<\"01\"\>"}], "}"}]}],
  SequenceForm["Gate ", 20, ": ", {"11", "00", "10", "01"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797471792*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"fec772c3-07fc-8649-91a5-72218efa9455"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "21", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"11\"\>", ",", "\<\"01\"\>", ",", "\<\"00\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Gate ", 21, ": ", {"11", "01", "00", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974747963`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"fe0db9b9-22d5-524e-98fb-c3738a2c5c0b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "22", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"11\"\>", ",", "\<\"01\"\>", ",", "\<\"10\"\>", 
     ",", "\<\"00\"\>"}], "}"}]}],
  SequenceForm["Gate ", 22, ": ", {"11", "01", "10", "00"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974777985`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"ab4663f4-132f-d64a-b5df-1c95554cac11"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "23", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"11\"\>", ",", "\<\"10\"\>", ",", "\<\"00\"\>", 
     ",", "\<\"01\"\>"}], "}"}]}],
  SequenceForm["Gate ", 23, ": ", {"11", "10", "00", "01"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.960903797480797*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"469360dd-34b2-ff44-8772-bf91385739d4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Gate \"\>", "\[InvisibleSpace]", "24", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"11\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"00\"\>"}], "}"}]}],
  SequenceForm["Gate ", 24, ": ", {"11", "10", "01", "00"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960903759307955*^9, 3.9609037974837933`*^9},
 CellLabel->
  "During evaluation of \
In[30]:=",ExpressionUUID->"f501e682-80fb-2a4c-b843-1cc4b2aa9aaf"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Finding the Shortest Composition of Gates using Breadth First \
Search\n", "Subsection",
  FontSize->18],
 StyleBox["In this section, we focus on understanding how to build complex \
reversible gates from simpler building blocks. The inputs are the basic \
two-bit combinations, and the target gate refers to a specific reversible \
2-to-2 gate we aim to construct. The generators are a selected set of \
reversible gates used as fundamental components to compose more complex \
gates. Using these generators, the goal is to find the shortest sequence of \
compositions that equals the target gate. ", "Subsection",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.9609041628214417`*^9, 3.960904169265465*^9}, 
   3.9609321995859795`*^9, {3.9609324909927406`*^9, 3.960932522054676*^9}, {
   3.960933733429779*^9, 3.960933740701889*^9}, 3.9609729808666897`*^9, 
   3.9610791388655148`*^9},ExpressionUUID->"750b82bb-79c3-0243-a566-\
0cbce78ad2e6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<00\>\"", ",", "\"\<01\>\"", ",", "\"\<10\>\"", 
     ",", "\"\<11\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allGates", "=", 
   RowBox[{"Permutations", "[", "inputs", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.960904185446842*^9}, 
   3.9609043129957848`*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"aab7b26d-073a-4748-923d-8a02da4312ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalize", "[", "g_", "]"}], " ", ":=", " ", "g"}]], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.960904185446842*^9}, {
  3.9609043129957848`*^9, 3.9609043342719536`*^9}, {3.960932106405264*^9, 
  3.9609321172703476`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"cbfee207-0af5-c041-9995-61fec95923e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"denormalize", "[", "g_", "]"}], ":=", "g"}]], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.9609041890529995`*^9}, {
  3.960904222151804*^9, 3.9609042333765335`*^9}, {3.96093306797995*^9, 
  3.9609330725033092`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"c57f47dd-c092-5742-b3f5-43b9e6fef511"],

Cell[TextData[StyleBox["Defines all 2-bit input combinations, generates the \
previous 24 reversible 2-to-2 gates, and has placeholder functions for \
normalization and de-normalization of gates.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609330805051403`*^9, 3.960933113533064*^9}, {
  3.960968841148142*^9, 3.96096884885338*^9}, {3.9609730275905914`*^9, 
  3.9609730279263687`*^9}},ExpressionUUID->"570bee4f-6861-9b45-9193-\
da9a3766a033"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"composeGates", "[", 
    RowBox[{"g1_", ",", "g2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputOrder", "=", "inputs"}], "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"g2", "[", 
        RowBox[{"[", 
         RowBox[{"First", "@", 
          RowBox[{"First", "@", 
           RowBox[{"Position", "[", 
            RowBox[{"inputOrder", ",", 
             RowBox[{"g1", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "g1", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.9609041890529995`*^9}, {
  3.960904222151804*^9, 3.960904234858078*^9}, {3.9609331535313225`*^9, 
  3.960933157293396*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"cc862c4a-f60d-4547-ae07-ab5612ca1400"],

Cell[TextData[StyleBox["This function defines how to compose two 2-to-2 \
gates, meaning it applies gate g1 to the inputs first, then passes the result \
through gate g2, effectively computing the overall transformation g2(g1(x)). \
It does this by finding where each output of g1 appears in the input list and \
then selecting the corresponding output from g2, resulting in a new composed \
gate that represents applying one reversible transformation after another.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609331704905224`*^9, 
  3.9609332537823257`*^9}},ExpressionUUID->"29872bd8-695d-2944-9b3a-\
f3ccaa252ad3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"findShortestComposition", "[", 
    RowBox[{"target_", ",", "generators_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"normTarget", "=", "target"}], ",", 
       RowBox[{"visited", "=", 
        RowBox[{"<|", "|>"}]}], ",", 
       RowBox[{"queue", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"identity", "=", "inputs"}], ",", "currentGate", ",", 
       "currentSeq", ",", "nextGate", ",", "nextSeq"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"visited", "[", "identity", "]"}], "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"queue", "=", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"identity", ",", 
          RowBox[{"{", "}"}]}], "}"}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "queue", "]"}], ">", "0"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"currentGate", ",", "currentSeq"}], "}"}], "=", 
          RowBox[{"First", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"queue", "=", 
          RowBox[{"Rest", "[", "queue", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"currentGate", "===", "normTarget"}], ",", 
           RowBox[{
            RowBox[{"Return", "[", "currentSeq", "]"}], ";"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Scan", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"f2", "=", "#"}], ";", "\[IndentingNewLine]", 
              RowBox[{"nextGate", "=", 
               RowBox[{"composeGates", "[", 
                RowBox[{"currentGate", ",", "f2"}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"KeyExistsQ", "[", 
                  RowBox[{"visited", ",", "nextGate"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"nextSeq", "=", 
                  RowBox[{"Append", "[", 
                   RowBox[{"currentSeq", ",", "f2"}], "]"}]}], ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"visited", "[", "nextGate", "]"}], "=", "nextSeq"}],
                  ";", "\[IndentingNewLine]", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"queue", ",", 
                   RowBox[{"{", 
                    RowBox[{"nextGate", ",", "nextSeq"}], "}"}]}], "]"}], 
                 ";"}]}], "]"}]}], ")"}], "&"}], ",", "generators"}], "]"}], 
         ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ";"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "pair", "}"}], ",", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Step \>\"", ",", 
        RowBox[{"pair", "[", 
         RowBox[{"[", 
          RowBox[{"2", ",", "1"}], "]"}], "]"}], ",", "\"\<: \>\"", ",", 
        RowBox[{"pair", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "]"}], ",", 
    RowBox[{"MapIndexed", "[", 
     RowBox[{"List", ",", "shortestSeq"}], "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.960904176626278*^9, 3.9609041890529995`*^9}, {
   3.960904222151804*^9, 3.960904280915781*^9}, {3.960911966880308*^9, 
   3.9609119682148647`*^9}, 3.9609325923782005`*^9, 3.960932747565628*^9, {
   3.960932796169632*^9, 3.960932827748884*^9}, {3.9609328790446873`*^9, 
   3.9609329093256645`*^9}, {3.960932954880932*^9, 3.9609329806628895`*^9}, {
   3.960933349434658*^9, 3.960933354660576*^9}, {3.9609733644151382`*^9, 
   3.9609733713333473`*^9}, {3.9609734831190166`*^9, 3.960973501677246*^9}, {
   3.9610792065386047`*^9, 
   3.961079206817951*^9}},ExpressionUUID->"3b15841c-c238-3d44-9cd6-\
1bb4c3ddc7f9"],

Cell[TextData[StyleBox["Performs a breadth-first search to find the shortest \
sequence of generator gates that compose to a given target gate.  Starting \
from the identity gate, it explores all possible compositions with the \
generator gates, tracking visited gates to avoid repetition. When the target \
gate is reached, it returns the sequence of generators used to obtain it.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.9609333627439613`*^9, 3.960933366821993*^9}, {
  3.9609689064530487`*^9, 3.9609689220828514`*^9}, {3.961079214620701*^9, 
  3.9610792155706787`*^9}},ExpressionUUID->"ef19e57a-ac2d-664b-a1ee-\
0bf1909b2e8d"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Step \"\>", "\[InvisibleSpace]", "1", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Step ", 1, ": ", {"00", "01", "11", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960932975318695*^9},
 CellLabel->
  "During evaluation of \
In[351]:=",ExpressionUUID->"5b99279d-de97-204d-be70-000c27beab64"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Step \"\>", "\[InvisibleSpace]", "2", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
     ",", "\<\"11\"\>"}], "}"}]}],
  SequenceForm["Step ", 2, ": ", {"00", "10", "01", "11"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.9609329753246937`*^9},
 CellLabel->
  "During evaluation of \
In[351]:=",ExpressionUUID->"279719c6-2ee2-a74b-b410-7ecad609070d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Step \"\>", "\[InvisibleSpace]", "3", 
   "\[InvisibleSpace]", "\<\": \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
     ",", "\<\"10\"\>"}], "}"}]}],
  SequenceForm["Step ", 3, ": ", {"00", "01", "11", "10"}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960932975333519*^9},
 CellLabel->
  "During evaluation of \
In[351]:=",ExpressionUUID->"05957f2a-dddf-8a4b-bdec-11406ed3e94d"]
}, Open  ]],

Cell[TextData[StyleBox["Using the generator set genSet = {{\
\[OpenCurlyDoubleQuote]00\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]01\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]11\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]10\[CloseCurlyDoubleQuote]}, \
{\[OpenCurlyDoubleQuote]00\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]10\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]01\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]11\[CloseCurlyDoubleQuote]}}, the function composes \
these gates step-by-step starting from the identity gate to rearrange the \
inputs. By applying these generators in sequence, the target gate {\
\[OpenCurlyDoubleQuote]00\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]11\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]10\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]01\[CloseCurlyDoubleQuote]} is achieved through a \
minimal amount of successive permutations of the input pairs.",
 FontColor->RGBColor[0., 0., 0.]]], "CodeText",
 CellChangeTimes->{{3.960933513957611*^9, 3.9609335322058907`*^9}, {
   3.96093372055077*^9, 3.9609337653830376`*^9}, 3.9609340307056637`*^9, 
   3.9609342654474277`*^9, {3.9610792448397007`*^9, 
   3.961079245871464*^9}},ExpressionUUID->"181cff1b-3814-ba4d-8bc4-\
87377cc67db3"],

Cell[TextData[StyleBox["     Efficiency Analysis of Gate Pairs via Group \
Theory and Closure",
 FontSize->17]], "Subsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343985963287`*^9}, 3.961079277478216*^9, {
   3.961079385019684*^9, 
   3.961079390071701*^9}},ExpressionUUID->"f2bb7f75-44be-c642-955a-\
82ef8a998ee8"],

Cell[TextData[{
 StyleBox["\tEfficiency in reversible gate synthesis refers to how \
effectively a set of generator gates can produce all desired reversible \
transformations with minimal complexity-typically   \n     measured by the \
length of compositions needed or the size of the generated subgroup. This \
concept is crucial because in reversible computing and quantum circuit \
design,    \n     minimizing gate count and operational overhead directly \
impacts performance, resource usage, and error rates. In the study of \
reversible gates as permutations acting on the set \n     of inputs \
{00,01,10,11}, each gate corresponds to an element g of the symmetric group ",
  FontSize->14,
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "4"], TraditionalForm]], "Subsection",
  FontSize->14,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "5d94e8dc-5585-a444-9153-c18404098329"],
 StyleBox[". Formally, g:{1,2,3,4}\[RightArrow]{1,2,3,4} is a bijection \
representing how inputs are rearranged. \n",
  FontSize->14,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\t\n\t",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["Cycle Structure", "Chapter",
  FontSize->17,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n\t",
  FontSize->17,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Every permutation \|01d454 \[Element]",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    SubscriptBox["S", "4"]}], TraditionalForm]],
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],ExpressionUUID->
  "1e564260-1c94-6742-911a-0977f37a720e"],
 StyleBox[" ",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["can be decomposed uniquely into disjoint cycles. For example, \
consider the permutation \n\t\n\t\t\t\t\t\t\t\t\|01d454 =(1 3 4)(2),\n\t\t\t\n\
\t which cycles element 1 to 3, 3 to 4, and 4 back to 1, while 2 remains \
fixed. This cycle decomposition is visually represented as:\n\t",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n\t\t\t\t\t\t\t",
  FontSize->18,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\t[1\[RightArrow]3]\n\t\t\t\t\t\t\t\t\t[3\[RightArrow]4]\n\t\t\t\t\
\t\t\t\t\t[4\[RightArrow]1]\n\t\t\t\t\t\t\t\t\t[2\[RightArrow]2]\n\t\t",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\:200b\n",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\t",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["The cycle type of \|01d454 is the multiset of cycle lengths. For \
\|01d454 above, the cycle type is (3,1) \[LongDash] one 3-cycle and one fixed \
point. \n",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\t",
  FontSize->18,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n                ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Conjugacy and Cycle Type", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]]
}], "Subsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.960937954332613*^9}, {3.961059707466343*^9, 3.9610597142813683`*^9}, 
   3.961079286834337*^9, {3.961079375583376*^9, 3.9610794769011*^9}, {
   3.9610795362192764`*^9, 3.9610795423700314`*^9}, {3.961079581320801*^9, 
   3.961079584380785*^9}, {3.9610801055224266`*^9, 3.961080166873335*^9}, 
   3.9610802955089226`*^9, {3.9610805166584415`*^9, 
   3.9610805200443306`*^9}},ExpressionUUID->"4f41b789-7a84-1140-8f5b-\
7aba652840fa"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["\tTwo permutations (\|01d454,\:210e) \[Element] ", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", 
    RowBox[{"4", " "}]], TraditionalForm]],
  FontSize->15,ExpressionUUID->"e07fa6bf-22c8-844a-a6f9-a7206e74bb29"],
 StyleBox["are conjugate if there exists \n\t\t\t\t\t\t\t\t\th= xg", 
  "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", 
    RowBox[{"-", "1"}]], TraditionalForm]],
  FontSize->15,ExpressionUUID->"338de6a1-ab1e-8f43-98cd-cb25f9120415"],
 StyleBox["\n\tsuch that conjugate permutations share the same cycle type . \
This means the behavior of gates in the same conjugacy class is structurally \
identical up to \n\trelabeling of inputs . The set of all permutations with \
the same cycle type forms a conjugacy class . For example, all 3-cycles in ", 
  "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", 
    RowBox[{"4", " "}]], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "c9667fd0-2848-7e4a-adba-50066398e93b"],
 StyleBox["form a \t\t\t\n\tconjugacy class . This classification helps group \
gates with equivalent structural properties, which is critical when analyzing \
how they generate subgroups \t\tthrough composition .\n", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[0., 0., 0.],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\t", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\t", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["Order of a Gate\n\t", "Subtitle",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["The order of a permutation g is the smallest positive integer k \
satisfying\n\t\t\t\t\t\t\t\t\t", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["g", "k"], TraditionalForm]],
  FontSize->15,ExpressionUUID->"0dc95c23-632c-7a46-9bd7-074ca2066066"],
 StyleBox["=e",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["\n\t", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n\t", "Subtitle",
  FontSize->15,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["where e is the identity permutation. For instance, if g=(1\
\[NonBreakingSpace]3\[NonBreakingSpace]4), then ", "Text",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox[Cell[BoxData[
  FormBox[
   SuperscriptBox["g", "3"], TraditionalForm]], "Text",
  FontSize->15,ExpressionUUID->"85c4c05a-abf5-8244-adb8-526acb6cca4c"], 
  "Text"],
 StyleBox[" ", "Text",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["= e, so the order of g is 3. The order represents the number of \t\
times the gate must be composed with itself to return to the original input \
configuration.\n\t", "Text",
  FontSize->15,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\n\t", "Text",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Application", " ", "to", " ", "Efficiency", " ", "Analysis"}],
    Background->RGBColor[1., 1., 1.]], TraditionalForm]],ExpressionUUID->
  "99830259-c940-ae42-ba45-3c5d91a296ea"],
 StyleBox["\n\tGiven a pair of generators (g1,g2) , we study the subgroup \
they generate:", "Text",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]]
}], "Subsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.960937954332613*^9}, {3.961059707466343*^9, 3.9610597142813683`*^9}, 
   3.961079286834337*^9, {3.961079375583376*^9, 3.9610794769011*^9}, {
   3.9610795362192764`*^9, 3.9610795423700314`*^9}, {3.961079581320801*^9, 
   3.961079584380785*^9}, {3.9610801055224266`*^9, 3.961080166873335*^9}, {
   3.9610803034216595`*^9, 3.9610804866592255`*^9}, {3.961080523788622*^9, 
   3.9610806218313503`*^9}},ExpressionUUID->"3a39c164-e5f2-1c49-806b-\
bd8437fcfc6e"],

Cell[TextData[{
 StyleBox["\t\t\t",
  FontSize->18,
  FontColor->RGBColor[
   0.792156862745098, 0.3176470588235294, 0.09803921568627451],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["                        ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 StyleBox["\:27e8g1,g2 \:27e9={g",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "1"], TraditionalForm]],
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "d4b0b660-30d2-d142-8868-e79c0d61666b"],
 StyleBox[",",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["g",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "2"], TraditionalForm]],
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "bcda6654-1fe6-7440-985d-f5a4282ccc42"],
 StyleBox["...",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["g",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "m"], TraditionalForm]],
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "380b5f6d-a813-f047-91c6-343c04a391f0"],
 StyleBox["|",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["g",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["i", "j"], TraditionalForm]],
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "43634ee4-5834-9b4b-822f-eb45c0a3083a"],
 StyleBox[" \[Element] {g1, g2}, m \[Element] N }",
  FontSize->22,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]]
}], "Subsubsubsubsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.96093802683103*^9}, {3.96093806280719*^9, 3.9609381644889774`*^9}, {
   3.960938217875839*^9, 3.9609382718334465`*^9}, {3.9609735454127655`*^9, 
   3.9609735459887943`*^9}, {3.9610592862981224`*^9, 
   3.9610592900825195`*^9}},ExpressionUUID->"5da457c2-f3e3-e741-a2de-\
3728af6dc5a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["We compute the closure of this subgroup up to a maximum \
composition depth, capturing all permutations reachable by combining g1 and \
g2. The goal is to determine if \:27e8\|01d4541,\|01d4542\:27e9 = ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["\|01d446", "4"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "78ba71a4-95b1-c641-a64a-6e232f0b2870"],
 StyleBox[", meaning the pair is universal and can generate every reversible \
gate.\n\nBy examining the cycle types of \|01d4541 , \|01d4542\:200b, and \
their product \|01d4541 and \|01d4542, along with their orders, we gain \
insight into the algebraic richness of the generated subgroup. A gate pair \
producing a product with low order and generating a large closure typically \
represents a more efficient universal set.",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]]
}], "Subsection",
 CellChangeTimes->{{3.9609342733737907`*^9, 3.9609342747439823`*^9}, {
   3.9609343767178917`*^9, 3.9609343966094475`*^9}, {3.960934689484871*^9, 
   3.960934707482853*^9}, {3.9609347567698326`*^9, 3.960934780466797*^9}, {
   3.9609349076728764`*^9, 3.9609349423155117`*^9}, {3.9609350420554943`*^9, 
   3.9609351333800087`*^9}, {3.9609352967320156`*^9, 
   3.9609353328059998`*^9}, {3.9609353671699104`*^9, 3.960935411973543*^9}, {
   3.960935518938511*^9, 3.96093553754126*^9}, 3.960935581673212*^9, {
   3.9609357868790836`*^9, 3.9609358127025757`*^9}, {3.960935857193247*^9, 
   3.960935957050604*^9}, {3.960936003234932*^9, 3.960936003906193*^9}, {
   3.9609360401709595`*^9, 3.9609360607836304`*^9}, {3.9609361721663837`*^9, 
   3.9609362623386936`*^9}, {3.9609363501737328`*^9, 3.960936377154846*^9}, {
   3.9609365158623734`*^9, 3.9609365884320965`*^9}, {3.9609366375564613`*^9, 
   3.960936645602865*^9}, {3.9609367204080105`*^9, 3.9609367818650417`*^9}, {
   3.9609368355365353`*^9, 3.960936938656006*^9}, {3.960936976215975*^9, 
   3.9609369865200787`*^9}, {3.960937027323946*^9, 3.960937064225971*^9}, {
   3.960937132172537*^9, 3.960937139540951*^9}, {3.960937173312544*^9, 
   3.960937184819359*^9}, {3.960937284881773*^9, 3.960937298087509*^9}, {
   3.960937374468113*^9, 3.9609374578358765`*^9}, 3.9609375039578075`*^9, {
   3.9609377870379257`*^9, 3.960937818132*^9}, {3.9609379134829674`*^9, 
   3.96093802683103*^9}, {3.96093806280719*^9, 3.9609381644889774`*^9}, {
   3.960938217875839*^9, 3.9609382660047913`*^9}, {3.960938316459881*^9, 
   3.960938328537018*^9}, {3.960938374402849*^9, 3.960938446421871*^9}, {
   3.9609384801336117`*^9, 3.960938488620077*^9}, {3.960938528157913*^9, 
   3.9609385451896896`*^9}},ExpressionUUID->"2cbebcb3-f84c-0243-81ba-\
11ffd7da3ab1"],

Cell[TextData[{
 "This block of code evaluates all unordered pairs of reversible gates to \
analyze their generative power: for each pair, it computes the closure (all \
gates they can generate), the order and cycle type of their composition, and \
whether they are universal (able to generate all 24 reversible gates), \
assigning each pair a summary score based on both the product\
\[CloseCurlyQuote]s order and the size of the generated closure. ",
 Cell[BoxData[""], "Input",
  CellChangeTimes->{
   3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
    3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
    3.9609386484371433`*^9}, {3.9609391649339733`*^9, 3.960939166233856*^9}},
  ExpressionUUID->"fe06e21f-9624-7b4b-be5f-c911d9f5d0e4"],
 "The gates with the summary score of 0.52 have the best efficiency."
}], "CodeText",
 CellChangeTimes->{3.9610593326710014`*^9, 
  3.9610595591356697`*^9},ExpressionUUID->"0e37dcca-58d6-db44-8334-\
e0a7b713d208"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"inputs", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<00\>\"", ",", "\"\<01\>\"", ",", "\"\<10\>\"", 
     ",", "\"\<11\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allGates", "=", 
    RowBox[{"Permutations", "[", "inputs", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"composeGates", "[", 
    RowBox[{"g1_", ",", "g2_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"inputOrder", "=", "inputs"}], "}"}], ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"g2", "[", 
        RowBox[{"[", 
         RowBox[{"First", "@", 
          RowBox[{"First", "@", 
           RowBox[{"Position", "[", 
            RowBox[{"inputOrder", ",", 
             RowBox[{"g1", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "g1", "]"}]}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, 
   3.961064214814802*^9},ExpressionUUID->"ede1138c-0913-e045-b257-\
86533df6fa6b"],

Cell["\<\
This function calculates the order of a gate g, which is the minimum number \
of times g must be composed with itself to return to the identity gate, or \
returns \[Infinity] if it does not do so within 100 steps. \
\>", "CodeText",
 CellChangeTimes->{
  3.961064221372877*^9},ExpressionUUID->"6f1f0c90-a768-db42-b988-\
09624a0c9f6c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"gateOrder", "[", "g_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"prod", "=", "g"}], ",", 
        RowBox[{"count", "=", "1"}]}], "}"}], ",", 
      RowBox[{
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"prod", "=!=", "inputs"}], ",", 
         RowBox[{
          RowBox[{"prod", "=", 
           RowBox[{"composeGates", "[", 
            RowBox[{"prod", ",", "g"}], "]"}]}], ";", 
          RowBox[{"count", "++"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"count", ">", "100"}], ",", 
            RowBox[{"Return", "[", "Infinity", "]"}]}], "]"}]}]}], "]"}], ";",
        "count"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findClosure", "[", 
    RowBox[{"generators_", ",", 
     RowBox[{"maxDepth_", ":", "5"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"known", "=", "generators"}], ",", 
       RowBox[{"newSet", "=", "generators"}], ",", "current"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"current", "=", "newSet"}], ";", "\[IndentingNewLine]", 
         RowBox[{"newSet", "=", 
          RowBox[{"DeleteDuplicates", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"composeGates", "[", 
                RowBox[{"g1", ",", "g2"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"g1", ",", "current"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"g2", ",", "generators"}], "}"}]}], "]"}], ",", "1"}],
             "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"known", "=", 
          RowBox[{"Union", "[", 
           RowBox[{"known", ",", "newSet"}], "]"}]}], ";"}], ",", 
        RowBox[{"{", "maxDepth", "}"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"DeleteDuplicates", "[", "known", "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, {
   3.961064214814802*^9, 
   3.961064231715557*^9}},ExpressionUUID->"2f22082e-6508-f74f-9faa-\
acc1ed196f8a"],

Cell["\<\
This function computes the closure of a set of generator gates by iteratively \
composing all pairs of known gates up to a specified depth, returning the set \
of all unique gates that can be built from the generators within that depth.\
\>", "CodeText",
 CellChangeTimes->{
  3.961064237421171*^9},ExpressionUUID->"7a669b7f-bec5-044e-b9ee-\
c6e64cf97f3f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"permListFromGate", "[", "g_", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"First", "@", 
       RowBox[{"FirstPosition", "[", 
        RowBox[{"inputs", ",", "#"}], "]"}]}], ")"}], "&"}], "/@", "g"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"toPermutation", "[", "g_", "]"}], ":=", 
   RowBox[{"PermutationCycles", "[", 
    RowBox[{"permListFromGate", "[", "g", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cycleType", "[", "p_PermutationCycles", "]"}], ":=", 
    RowBox[{"Reverse", "@", 
     RowBox[{"Sort", "[", 
      RowBox[{"Length", "/@", 
       RowBox[{"(", 
        RowBox[{"List", "@@@", 
         RowBox[{"p", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ")"}]}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"gatePairs", "=", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Subsets", "[", 
      RowBox[{"allGates", ",", 
       RowBox[{"{", "2", "}"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"OrderedQ", "[", "#", "]"}], "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, {
   3.961064214814802*^9, 3.961064231715557*^9}, 
   3.9610642646667786`*^9},ExpressionUUID->"e3119324-b2ca-0749-9d0b-\
69401a59d3f6"],

Cell[TextData[{
 "These functions convert a reversible gate into its corresponding \
permutation in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "4"], TraditionalForm]],ExpressionUUID->
  "ab7a376d-e94c-8948-839a-10fb35c83d65"],
 ", extract its disjoint cycle representation, and return the cycle type\
\[LongDash]a sorted list of the lengths of its cycles\[LongDash]which \
characterizes the gate\[CloseCurlyQuote]s structure and determines its \
conjugacy class."
}], "CodeText",
 CellChangeTimes->{
  3.961064271153658*^9},ExpressionUUID->"489cfe1b-f0a5-6949-8e12-\
6e044ab4d356"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reachableFromPair", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"closure", "=", 
           RowBox[{"findClosure", "[", 
            RowBox[{"pair", ",", "5"}], "]"}]}], ",", 
          RowBox[{"prod", "=", 
           RowBox[{"composeGates", "[", 
            RowBox[{
             RowBox[{"pair", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"pair", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", "order", ",", 
          "permProd", ",", "cType", ",", "perm1", ",", "perm2", ",", "cType1",
           ",", "cType2", ",", "score"}], "}"}], ",", 
        RowBox[{
         RowBox[{"order", "=", 
          RowBox[{"gateOrder", "[", "prod", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"permProd", "=", 
          RowBox[{"toPermutation", "[", "prod", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cType", "=", 
          RowBox[{"cycleType", "[", "permProd", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perm1", "=", 
          RowBox[{"toPermutation", "[", 
           RowBox[{"pair", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"perm2", "=", 
          RowBox[{"toPermutation", "[", 
           RowBox[{"pair", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cType1", "=", 
          RowBox[{"cycleType", "[", "perm1", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"cType2", "=", 
          RowBox[{"cycleType", "[", "perm2", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"score", "=", 
          RowBox[{"N", "[", 
           RowBox[{
            RowBox[{"0.5", "*", 
             RowBox[{"(", 
              RowBox[{"order", "/", "100"}], ")"}]}], "+", 
            RowBox[{"0.5", "*", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", "closure", "]"}], "/", 
               RowBox[{"Length", "[", "allGates", "]"}]}], ")"}]}]}], "]"}]}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<GeneratorPair\>\"", "->", "pair"}], ",", 
           RowBox[{"\"\<CycleType1\>\"", "->", "cType1"}], ",", 
           RowBox[{"\"\<CycleType2\>\"", "->", "cType2"}], ",", 
           RowBox[{"\"\<ProductCycleType\>\"", "->", "cType"}], ",", 
           RowBox[{"\"\<ProductOrder\>\"", "->", "order"}], ",", 
           RowBox[{"\"\<ReachableCount\>\"", "->", 
            RowBox[{"Length", "[", "closure", "]"}]}], ",", 
           RowBox[{"\"\<IsUniversal\>\"", "->", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Length", "[", "closure", "]"}], "==", 
              RowBox[{"Length", "[", "allGates", "]"}]}], ")"}]}], ",", 
           RowBox[{"\"\<SummaryScore\>\"", "->", "score"}]}], "|>"}]}]}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"pair", ",", "gatePairs"}], "}"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"universalPairsWithScores", "=", 
    RowBox[{"Select", "[", 
     RowBox[{"reachableFromPair", ",", 
      RowBox[{
       RowBox[{"#IsUniversal", "===", "True"}], "&"}]}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Dataset", "[", 
  RowBox[{"universalPairsWithScores", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<GeneratorPair\>\"", ",", "\"\<CycleType1\>\"", 
       ",", "\"\<CycleType2\>\"", ",", "\"\<ProductCycleType\>\"", 
       ",", "\"\<ProductOrder\>\"", ",", "\"\<ReachableCount\>\"", 
       ",", "\"\<IsUniversal\>\"", ",", "\"\<SummaryScore\>\""}], "}"}]}], 
    "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{
  3.960904696916092*^9, 3.9609047323097134`*^9, {3.9609342544682293`*^9, 
   3.9609342554168243`*^9}, 3.960935792840925*^9, {3.9609386367275944`*^9, 
   3.9609386404970856`*^9}, {3.960938816142103*^9, 3.960938817352665*^9}, {
   3.961060483835808*^9, 3.9610605113054466`*^9}, 3.961063870285919*^9, {
   3.961064214814802*^9, 3.961064231715557*^9}, 
   3.9610642646667786`*^9},ExpressionUUID->"0f6ba934-78bd-3649-abbc-\
5a469cff47ca"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "01", "11", "10"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "01", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "10", "11", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"00", "11", "01", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"00", "11", "10", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "00", "10", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "01", "10", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "00", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "01", "11", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "01", "11", "10", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "00", "01", "11"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "01", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "01", "10", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "10", "11", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "01", "11", "10", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "00", "01", "11"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "01", "00", "11"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "01", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "11", "00", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{3, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"01", "11", "10", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "10", "00", "11", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "01", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "10", "01", "00", "11"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "10", "01", "11", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "00", "11", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "01", "00", "11"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "01", "00", "11"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "01", "11", "00"}, {
          "10", "11", "01", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"10", "01", "11", "00"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "01", "11", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "00", "01", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 3}}]], "ProductOrder" -> 2, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.51|>, <|
       "GeneratorPair" -> {{"10", "11", "01", "00"}, {
          "11", "01", "10", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "00", "10", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "01", "00", "10"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 3, 2, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "01", "10", "00"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{2, 4, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"11", "00", "01", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>, <|
       "GeneratorPair" -> {{"11", "00", "10", "01"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 4, 3}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "01", "00", "10"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4, 3}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3, 4}}]], "ProductOrder" -> 4, "ReachableCount" -> 
        24, "IsUniversal" -> True, "SummaryScore" -> 0.52|>, <|
       "GeneratorPair" -> {{"11", "01", "10", "00"}, {
          "11", "10", "00", "01"}}, "CycleType1" -> $CellContext`cycleType[
          Cycles[{{1, 4}}]], "CycleType2" -> $CellContext`cycleType[
          Cycles[{{1, 4, 2, 3}}]], 
        "ProductCycleType" -> $CellContext`cycleType[
          Cycles[{{1, 2, 3}}]], "ProductOrder" -> 3, "ReachableCount" -> 24, 
        "IsUniversal" -> True, "SummaryScore" -> 0.515|>}, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "GeneratorPair"} -> 
        5, {All, "CycleType1"} -> 1, {All, "CycleType2"} -> 
        1, {All, "ProductCycleType"} -> 1, {All, "ProductOrder"} -> 
        1, {All, "ReachableCount"} -> 1, {All, "IsUniversal"} -> 
        1, {All, "SummaryScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "GeneratorPair" -> TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[{
                TypeSystem`PackageScope`UnknownShape[False], 
                TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`RowShape[{
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5]}], 
                 DirectedInfinity[1], 4, {All, "GeneratorPair", 2}]}], 
              DirectedInfinity[1], 2, {All, "GeneratorPair"}], "CycleType1" -> 
            TypeSystem`PackageScope`UnknownShape[False], "CycleType2" -> 
            TypeSystem`PackageScope`UnknownShape[False], "ProductCycleType" -> 
            TypeSystem`PackageScope`UnknownShape[False], "ProductOrder" -> 
            TypeSystem`PackageScope`AtomShape[34], "ReachableCount" -> 
            TypeSystem`PackageScope`AtomShape[34], "IsUniversal" -> 
            TypeSystem`PackageScope`AtomShape[36], "SummaryScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 8, {All}]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "GeneratorPair", "CycleType1", "CycleType2", "ProductCycleType", 
         "ProductOrder", "ReachableCount", "IsUniversal", "SummaryScore"}, {
         TypeSystem`Tuple[{
           TypeSystem`Vector[
            TypeSystem`Atom[
             TypeSystem`Enumeration["00", "01", "10", "11"]], 4], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[
              TypeSystem`Enumeration["01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]]}]}], 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Atom[Real]}], 84], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "GeneratorPair"} -> 
        5, {All, "CycleType1"} -> 1, {All, "CycleType2"} -> 
        1, {All, "ProductCycleType"} -> 1, {All, "ProductOrder"} -> 
        1, {All, "ReachableCount"} -> 1, {All, "IsUniversal"} -> 
        1, {All, "SummaryScore"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "GeneratorPair" -> TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`RowShape[{
                TypeSystem`PackageScope`UnknownShape[False], 
                TypeSystem`PackageScope`Limited[
                 TypeSystem`PackageScope`RowShape[{
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5], 
                   TypeSystem`PackageScope`AtomShape[31.5]}], 
                 DirectedInfinity[1], 4, {All, "GeneratorPair", 2}]}], 
              DirectedInfinity[1], 2, {All, "GeneratorPair"}], "CycleType1" -> 
            TypeSystem`PackageScope`UnknownShape[False], "CycleType2" -> 
            TypeSystem`PackageScope`UnknownShape[False], "ProductCycleType" -> 
            TypeSystem`PackageScope`UnknownShape[False], "ProductOrder" -> 
            TypeSystem`PackageScope`AtomShape[34], "ReachableCount" -> 
            TypeSystem`PackageScope`AtomShape[34], "IsUniversal" -> 
            TypeSystem`PackageScope`AtomShape[36], "SummaryScore" -> 
            TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 8, {All}]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "GeneratorPair", "CycleType1", "CycleType2", "ProductCycleType", 
         "ProductOrder", "ReachableCount", "IsUniversal", "SummaryScore"}, {
         TypeSystem`Tuple[{
           TypeSystem`Vector[
            TypeSystem`Atom[
             TypeSystem`Enumeration["00", "01", "10", "11"]], 4], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[
              TypeSystem`Enumeration["01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["00", "01", "10", "11"]]}]}], 
         TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Atom[Real]}], 84], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 8, "DataRowCount" -> 84, "DataColumnCount" -> 
     8, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["GeneratorPair", 
                  Style[
                  "GeneratorPair", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "GeneratorPair"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "GeneratorPair"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CycleType1", 
                  Style[
                  "CycleType1", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "CycleType1"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "CycleType1"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["CycleType2", 
                  Style[
                  "CycleType2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "CycleType2"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "CycleType2"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ProductCycleType", 
                  Style[
                  "ProductCycleType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ProductCycleType"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ProductCycleType"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ProductOrder", 
                  Style[
                  "ProductOrder", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ProductOrder"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ProductOrder"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ReachableCount", 
                  Style[
                  "ReachableCount", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ReachableCount"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ReachableCount"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["IsUniversal", 
                  Style[
                  "IsUniversal", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "IsUniversal"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "IsUniversal"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["SummaryScore", 
                  Style[
                  "SummaryScore", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "SummaryScore"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "SummaryScore"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "4"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "4"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "4"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "01", "11", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "4"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "2"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "01", "11"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "2"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.515"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{10, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{12, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "10", "11", "01"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3", ",", "4"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{16, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "4", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{17, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "2", ",", "4"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "4", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{19, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "3", ",", "2"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.52"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"00", "11", "01", "10"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20, 
                    Key["GeneratorPair"], 1}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 1}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation["11", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 1}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 2}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["00", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 3}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["GeneratorPair"], 2, 4}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "3"}], "}"}], "}"}], "]"}], 
                   "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["CycleType1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "2", ",", "3"}], "}"}], "}"}],
                     "]"}], "]"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["CycleType2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"cycleType", "[", 
                   RowBox[{"Cycles", "[", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "4"}], "}"}], "}"}], "]"}], "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["ProductCycleType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["ProductOrder"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["24"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["ReachableCount"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["IsUniversal"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.51"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["SummaryScore"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 84, 1], {1, 84 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 84, 1], {1, 84 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[84, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[84, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 84, 1], {1, 84 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 84, 1], {1, 84 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       1389.2123054504398`, {287.25203328722347`, 292.98396671277663`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      1389.2123054504398`, {287.25203328722347`, 292.98396671277663`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.961063871497278*^9},
 CellLabel->
  "Out[134]=",ExpressionUUID->"b8c789d4-c05e-824d-bd51-e01927a9a8d2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Permutation matrices and introduction to unitarity in reversible and \
quantum gates\n\t",
 StyleBox["Quantum gates are represented by unitary matrices acting on \
vectors in a complex vector space, typically ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["C", 
    SuperscriptBox["2", "n"]], TraditionalForm]],
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "09d7efb7-cbd3-f44f-a2c0-4d949b9c7352"],
 StyleBox["n-qubit systems. These matrices operate on quantum basis states, \
which for two qubits are {\[Divides]00\:27e9,\[Divides]01\:27e9,\[Divides]10\
\:27e9,\[Divides]11\:27e9}. A matrix is unitary if ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "e0b5dbe2-9427-bf47-8794-3f4e63811987"],
 StyleBox["U=I, meaning it preserves the total probability (norm) of the \
quantum state. Here, each reversible gate was converted into a 4\[Times]4 \
permutation matrix, which simply reorders the basis states  their amplitudes. \
Since permutation matrices are a special case of unitary matrices, verifying \
their unitarity confirms that classical reversible gates are compatible with \
quantum operations. ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]]
}], "Subsection",
 CellChangeTimes->{
  3.960904172651268*^9, {3.9609120035931664`*^9, 3.960912006278599*^9}, {
   3.960938667731127*^9, 3.960938668798723*^9}, {3.9609690498809834`*^9, 
   3.9609690656020184`*^9}, {3.9609691551916237`*^9, 3.9609691560729847`*^9}, 
   3.9609692516949005`*^9, {3.96096931464497*^9, 3.9609693679939213`*^9}, {
   3.9609694121651344`*^9, 3.960969504798914*^9}, {3.9609695752272015`*^9, 
   3.960969577548582*^9}, 
   3.9609779523993587`*^9},ExpressionUUID->"6ac089d5-4e40-8541-83bc-\
5dc04198db67"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"permMatrix", "[", "perm_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", "=", 
       RowBox[{"Length", "[", "perm", "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"SparseArray", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", 
             RowBox[{
              RowBox[{"FirstPosition", "[", 
               RowBox[{"inputs", ",", 
                RowBox[{"perm", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "->", "1"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "n"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"n", ",", "n"}], "}"}]}], "]"}], "//", "Normal"}]}], "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{
  3.9609076453030853`*^9, {3.9609120400056458`*^9, 3.9609120620715714`*^9}, {
   3.960969621651991*^9, 3.9609696407167606`*^9}, {3.961057639354147*^9, 
   3.9610576420726757`*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"e4279c24-a3d2-ca46-bbc4-bd10ea6f8a45"],

Cell["\<\
Each gate is converted to a permutation matrix that maps basis vectors \
accordingly\
\>", "CodeText",
 CellChangeTimes->{{3.960969843130186*^9, 
  3.9609698468277645`*^9}},ExpressionUUID->"56a242f2-c7de-4b43-a424-\
b267d0db28e9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"allPermutationMatrices", "=", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"allGates", ",", 
      RowBox[{"permMatrix", "/@", "allGates"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isUnitary", "[", "m_", "]"}], ":=", 
   RowBox[{
    RowBox[{"Chop", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ConjugateTranspose", "[", "m", "]"}], ".", "m"}], "-", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "m", "]"}], "]"}]}], "]"}], "===", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Length", "[", "m", "]"}], ",", 
        RowBox[{"Length", "[", "m", "]"}]}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"unitaryChecks", "=", 
   RowBox[{"AssociationThread", "[", 
    RowBox[{
     RowBox[{"Keys", "[", "allPermutationMatrices", "]"}], ",", 
     RowBox[{"isUnitary", "/@", 
      RowBox[{"Values", "[", "allPermutationMatrices", "]"}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{
  3.9609076453030853`*^9, {3.9609120400056458`*^9, 3.9609120620715714`*^9}, {
   3.960969621651991*^9, 3.9609696407167606`*^9}, 3.960969876264408*^9, {
   3.9610576704354153`*^9, 3.9610576871749973`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"0f675262-3854-f045-a145-eecdc08c0b08"],

Cell["\<\
verifies if each permutation matrix is unitary, confirming that it preserves \
inner products and is valid in quantum computing.\
\>", "CodeText",
 CellChangeTimes->{
  3.9609698821473083`*^9},ExpressionUUID->"5e255d89-7b7d-374e-b6bc-\
8a4927c0c9a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"perm", ",", 
         RowBox[{"MatrixForm", "[", 
          RowBox[{"allPermutationMatrices", "[", "perm", "]"}], "]"}], ",", 
         RowBox[{"unitaryChecks", "[", "perm", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"perm", ",", 
         RowBox[{"Keys", "[", "allPermutationMatrices", "]"}]}], "}"}]}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Permutation\>\"", ",", "\"\<4\[Times]4 Matrix\>\"", 
       ",", "\"\<Is Unitary?\>\""}], "}"}]}], "]"}], ",", 
   RowBox[{"Frame", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.9609076453030853`*^9, {3.9609120400056458`*^9, 3.9609120620715714`*^9}, {
   3.960969621651991*^9, 3.9609696407167606`*^9}, 3.960969876264408*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"667a8c06-beb6-a84c-9638-b01026616fab"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Permutation\"\>", "\<\"4\[Times]4 Matrix\"\>", "\<\"Is \
Unitary?\"\>"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"11\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"00\"\>", ",", "\<\"11\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"00\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"00\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"10\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"10\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"11\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01\"\>", ",", "\<\"11\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"00\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"00\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"01\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"11\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"01\"\>", ",", "\<\"11\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"10\"\>", ",", "\<\"11\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"00\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"00\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"01\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"10\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"},
         {"0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"01\"\>", ",", "\<\"10\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"10\"\>", ",", "\<\"00\"\>", 
       ",", "\<\"01\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"1", "0", "0", "0"},
         {"0", "1", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"11\"\>", ",", "\<\"10\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"00\"\>"}], "}"}], 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "1"},
         {"0", "0", "1", "0"},
         {"0", "1", "0", "0"},
         {"1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], "True"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.961057498779373*^9, 3.961057576039301*^9, 
  3.9610576462749157`*^9, 3.96105769112821*^9, 3.961062962198391*^9, 
  3.961063705981615*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"63e0ab66-616a-d545-b54f-4123b2a14681"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{{3.960912045404972*^9, 3.960912057792761*^9}, {
  3.9609695255310097`*^9, 3.960969527060171*^9}, {3.9609701024904423`*^9, 
  3.960970102941675*^9}},ExpressionUUID->"f64ed77f-63fa-c44f-b535-\
9c9a9d5f2d88"]
}, Open  ]],

Cell["\<\
Why unitarity alone is not enough in quantum gate design (EXPLAIN WHY Q GATES \
ITS UNITARY)\
\>", "Subsection",
 CellChangeTimes->{{3.9609701351013813`*^9, 3.9609701364962997`*^9}, {
  3.9609704475560627`*^9, 3.9609704488126125`*^9}, {3.9609704938053303`*^9, 
  3.9609705239169044`*^9}, {3.9609737812477303`*^9, 
  3.9609737906054993`*^9}},ExpressionUUID->"4125cf57-aa06-be48-8e22-\
a2c8c159850a"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["While unitarity is a necessary condition for any quantum gate, it \
is not sufficient on its own to guarantee that a gate contributes \
meaningfully to quantum universality. All quantum gates must be unitary to \
preserve the norm of quantum states, and all classical reversible \
gates-represented as permutation matrices satisfy this condition by \
construction. However, not all unitary gates are equally powerful. Some \
unitary operations, like simple swaps or identity, do not generate \
entanglement or explore enough of the state space to enable universal quantum \
computation. This distinction is important because our goal is not just to \
verify reversibility, but to understand which gates or gate sets can generate \
the full space of quantum operations. The following proof shows how all \
unitarity gates are reversible. \n\n\tLet U be a unitary matrix, meaning it \
satisfies the condition:\n\t\n",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["\t\t\t\t\t\t(1) ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  Background->RGBColor[1., 1., 1.],ExpressionUUID->
  "a0631e82-e5e3-5141-ae5b-f1096e849d05"],
 StyleBox[" U=U",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  Background->RGBColor[1., 1., 1.],ExpressionUUID->
  "e2c2587b-8a30-0749-8b3c-b71ea7fd198c"],
 StyleBox[" =I,\n\t\t\t\t\t\t\n\twhere ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "a13e8c56-2b30-4945-84ad-7ce64ab4e837"],
 StyleBox["U   is the conjugate transpose of \|01d448",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "d04b936e-3c15-8d46-abb3-20bdcce25d46"],
 StyleBox[", and I is the identity matrix. To show that U is reversible, we \
must prove that there exists a matrix V such that:\n\t\n\t\t\t\t\t\t(2) VU = \
UV = I\n\t\t\t\t\t\t\n\tBut this is exactly what (1) gives us: the inverse of \
U exists and is equal to ",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "76fda94c-4024-a84f-9ae4-def261e74b00"],
 StyleBox["U",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox[" , i.e.,\n\t\n\t\t\t\t\t\t(3) V=",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
  Background->RGBColor[1., 1., 1.]],
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    SuperscriptBox["U", 
     RowBox[{"-", "1", " "}]]}], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "258dfe60-c011-314d-8d3b-06ca31541045"],
 StyleBox["=",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "f295df9b-30ff-bd4a-af24-780637f76717"],
 "\n\t\t\t\t\t\t",
 StyleBox["\n              Therefore, applying ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["U", "T"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "02542820-41c2-ee44-8165-d436a9c736c6"],
 StyleBox[" after U (or vice versa) gives the identity operation. This proves \
\t   \t\t\n              that every unitary operator has a well-defined \
inverse and is thus reversible.",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]]
}], "Subsection",
 CellChangeTimes->{{3.9609701351013813`*^9, 3.9609701364962997`*^9}, {
   3.9609704475560627`*^9, 3.9609704488126125`*^9}, 3.9609704938053303`*^9, {
   3.9609705677423267`*^9, 3.9609706211127033`*^9}, {3.960970692829935*^9, 
   3.9609707802618847`*^9}, {3.960970811473015*^9, 3.9609708119918633`*^9}, {
   3.960970884050539*^9, 3.9609711675855465`*^9}, {3.960971200653204*^9, 
   3.960971233185835*^9}, 3.9609713319464645`*^9, {3.960971615452978*^9, 
   3.960971630051468*^9}, {3.960971947622801*^9, 3.9609719514161987`*^9}, {
   3.9609721302732315`*^9, 3.9609721823963776`*^9}, {3.9609737073707047`*^9, 
   3.9609737193921757`*^9}, {3.96097381681629*^9, 3.960973824773609*^9}, {
   3.960973965816452*^9, 3.9609739825549946`*^9}, {3.960974012883827*^9, 
   3.9609740212362823`*^9}, {3.9609776126932564`*^9, 3.960977636338703*^9}, {
   3.960978569783249*^9, 
   3.9609785702530594`*^9}},ExpressionUUID->"68cff275-9baa-0442-95bd-\
801e4a144b4d"],

Cell[TextData[StyleBox["Discretizing Two-Qubit Gates Using Canonical \
Coordinates and the Weyl Chamber", "Subsection"]], "Text",
 CellChangeTimes->{{3.9609713826668816`*^9, 3.960971390224619*^9}, {
  3.960971599109377*^9, 3.960971599962921*^9}, {3.960971640913126*^9, 
  3.960971641924719*^9}},ExpressionUUID->"37cb895c-d343-6e43-9bf0-\
078dbce33db3"],

Cell[TextData[StyleBox["In the study of two-qubit quantum gates, one of the \
main challenges is the infinite dimensionality of the unitary group SU(4), \
which contains all possible two-qubit operations. Directly analyzing or \
searching through this continuous, uncountably infinite set to find universal \
gates or to classify gate behaviors is computationally infeasible. Therefore, \
a key step is to reduce this infinite space to a finite, manageable set of \
representatives that preserves the essential structure of two-qubit \
operations, especially their entangling properties. For now, we define \
universality as the ability of a gate or set of gates to generate all other \
gates in this finite representative set, rather than the entire infinite \
group, enabling a practical approach to study and synthesis. This finite \
approximation is still highly valuable because any physically implementable \
quantum circuit can only approximate continuous operations to finite \
precision. By focusing on the ability to generate all gates within this \
discrete representative set, we ensure coverage of all essential classes of \
two-qubit operations up to a chosen precision.",
 FontSize->18,
 FontColor->RGBColor[
  0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
 Background->RGBColor[1., 1., 1.]]], "Text",
 CellChangeTimes->{{3.96097164846509*^9, 3.960971659380581*^9}, {
  3.960978554752775*^9, 
  3.960978626609209*^9}},ExpressionUUID->"97852299-77c3-644d-979e-\
8fb7c8f52d5a"],

Cell[TextData[{
 StyleBox["Unlike simply checking if a gate is unitary (which all valid \
quantum gates must be) this approach goes deeper by isolating the nonlocal \
characteristics of the gate that determine its ability to generate \
entanglement and achieve universality. The space of two-qubit gates, \
described by the group SU(4), has 15 real degrees of freedom, corresponding \
to the complex structure of 4\[Times]4 unitary matrices with determinant 1. \
However, the canonical KAK decomposition allows us to factor out local \
single-qubit unitaries, each with 3 parameters for a total of 12 degrees of \
freedom, which do not affect entanglement. This reduces the problem to \
focusing on just three parameters (c1, c2, c3)\:200b that uniquely describe \
the nonlocal entangling part of the gate. These parameters lie within a \
bounded, convex geometric region called the Weyl chamber:\n\n\t\t\t\t\t\t\t\t\
0 \[LessEqual] c3 \[LessEqual] c2 \[LessEqual] c1 \[LessEqual]", "Subsection",
  FontSize->18,
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   FractionBox["\[Pi]", "4"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "f148ceb3-0a8a-ed41-aeef-537b46f063cc"],
 "\n\t\t\t\t\t\t\t\t\n",
 StyleBox["By restricting attention to this three-dimensional region in ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["R", "3"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "a700d18e-a0bf-f741-8f38-f5f4c1dab7f0"],
 StyleBox[", the infinite, high-dimensional space of two-qubit unitaries is \
transformed into a finite and tractable geometric object, enabling efficient \
classification and analysis of gates based on their entangling power.\n\nBy \
discretizing the Weyl chamber, we obtain a finite lattice of points that \
serve as canonical representatives of all two-qubit gates up to local \
equivalence. This finite set retains all the essential information about gate \
nonlocality and entangling power, allowing efficient classification and \
comparison without loss of generality. It also provides a structured way to \
systematically search for and analyze universal gates, those that, combined \
with local operations, can approximate any two-qubit gate.\n\nMathematically, \
the canonical form of any two-qubit unitary U \[Element] SU(4) can be \
expressed as\n\n\t\t\t\t\t\t\tU=(k1\[CircleTimes]k2)exp(i(c1 X \[CircleTimes] \
X+ c2 Y \[CircleTimes] Y + c3 Z \[CircleTimes] Z)) (k3\[CircleTimes]k4)\n\t\t\
\t\t\nwhere ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "i"], TraditionalForm]],
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "ba6fa096-4fe3-744a-8232-2a4c756fc107"],
 StyleBox[" \[Element] \|01d446\|01d448(2) are local unitaries, and the \
triple (\|01d4501,\|01d4502,\|01d4503) lies in the Weyl chamber. This \
decomposition isolates the nonlocal entangling component of U, which is \
invariant under local operations and fully determines the gate\
\[CloseCurlyQuote]s capacity to generate entanglement.\n\nTo discretize, we \
select a step size \[CapitalDelta] =",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   FractionBox["\[Pi]", 
    RowBox[{"4", 
     RowBox[{"(", 
      RowBox[{"steps", "-", "1"}], ")"}]}]], TraditionalForm]],
  FontVariations->{"Underline"->False},
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "c3d9f1f0-714d-804e-95df-ffedc7631e51"],
 StyleBox[" and generate all triples (\|01d4501,\|01d4502,\|01d4503) with ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],
  FontVariations->{"Underline"->False},
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255],ExpressionUUID->
  "63633113-a201-fe40-a0c2-f3fb5e8e59b1"],
 StyleBox[" multiples of \n\[CapitalDelta] that satisfy the chamber \
inequalities, producing a finite grid. The universality of a gate depends on \
its canonical coordinates: those closer to the interior of the Weyl chamber \
typically correspond to stronger entangling gates, capable of producing a \
wider range of operations through composition with local unitaries. \
Conversely, gates near the boundaries usually have limited entangling power \
and generate smaller subsets.  The follow represents the finite grid:",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]]
}], "Text",
 CellChangeTimes->{{3.9609713826668816`*^9, 3.960971390224619*^9}, {
   3.960971599109377*^9, 3.960971599962921*^9}, 3.960971640913126*^9, 
   3.9609716847078133`*^9, {3.960971756826088*^9, 3.9609718223690968`*^9}, {
   3.960977647729454*^9, 3.9609776644283695`*^9}, {3.9609779792606487`*^9, 
   3.9609779849429836`*^9}, {3.9609780366252937`*^9, 
   3.9609780970677357`*^9}, {3.960978155919771*^9, 3.960978177855076*^9}, {
   3.960978236577286*^9, 3.9609782978630695`*^9}, 3.9609783440307293`*^9, 
   3.960978437678297*^9, {3.960978684727476*^9, 3.960978918757532*^9}, {
   3.960978983742655*^9, 3.960979010404104*^9}, {3.960979071187731*^9, 
   3.960979170107538*^9}, {3.9609792091015797`*^9, 3.9609792116655083`*^9}, {
   3.96099157850457*^9, 
   3.9609915998745193`*^9}},ExpressionUUID->"e9038587-8e3b-b940-b6ef-\
c5615b7c7bbf"],

Cell["Define Example Local Single Qubit Matrices: Pauli x,y,z", "CodeText",
 CellChangeTimes->{{3.9609794328218975`*^9, 
  3.960979469754835*^9}},ExpressionUUID->"6b4cab5a-f9f2-fd4b-ab65-\
9c097eca27f0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Sigma]x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]y", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "I"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]z", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"id", "=", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.9609794032904243`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"4ee76737-f9f8-0741-a61b-b6c2555ea2d1"],

Cell["Perform the Canonical KAK Transformation Setup", "CodeText",
 CellChangeTimes->{{3.9609892966221943`*^9, 
  3.9609893111506615`*^9}},ExpressionUUID->"fcc121df-e70a-cc47-b6b2-\
d28058db6df9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"K", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", 
      RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}], "*", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "I"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "I", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "I", ",", 
        RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", 
        RowBox[{"-", "I"}]}], "}"}]}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Kdag", "=", 
   RowBox[{"ConjugateTranspose", "[", "K", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"caff2e88-e08f-c14f-91a4-3e738088b83a"],

Cell[TextData[{
 "Defines a scaled 4\[Times]4 unitary matrix K and its conjugate transpose ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["K", "T"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "55934c0b-e1de-2640-929c-d545c818fea0"],
 "K."
}], "CodeText",
 CellChangeTimes->{{3.9609896123840504`*^9, 
  3.96098965595076*^9}},ExpressionUUID->"693feb77-36d8-7045-871c-\
63d86d518c80"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getCanonicalCoordinates", "[", "U_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"W", ",", "m", ",", "eigPhases", ",", "canonAngles"}], "}"}], ",", 
     RowBox[{
      RowBox[{"W", "=", 
       RowBox[{"Kdag", ".", "U", ".", "K"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"m", "=", 
       RowBox[{
        RowBox[{"Transpose", "[", "W", "]"}], ".", "W"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"eigPhases", "=", 
       RowBox[{
        RowBox[{"Arg", "[", 
         RowBox[{"Eigenvalues", "[", "m", "]"}], "]"}], "/", "2"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"canonAngles", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"eigPhases", ",", "Pi"}], "]"}], ",", "Greater"}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Take", "[", 
       RowBox[{"canonAngles", ",", "3"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, 
   3.9609897167844105`*^9},
 CellLabel->"In[47]:=",ExpressionUUID->"bc11c7b8-0dc7-7041-a970-f5444eb16eed"],

Cell["\<\
Calculates three sorted canonical angles of unitary matrix U using a basis \
change by K and eigenphase extraction\
\>", "CodeText",
 CellChangeTimes->{{3.9609897233799763`*^9, 
  3.9609897369118595`*^9}},ExpressionUUID->"6654f8fe-2487-6f45-b574-\
e1cbf09929dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"steps", "=", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"stepSize", "=", 
   RowBox[{"Pi", "/", 
    RowBox[{"(", 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{"steps", "-", "1"}], ")"}]}], ")"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"c4efd8ee-69c6-f644-982a-cfa195392265"],

Cell["Defines Discretization Parameters", "CodeText",
 CellChangeTimes->{{3.9609899039714165`*^9, 3.960989914559143*^9}, 
   3.960989993692093*^9},ExpressionUUID->"a74ca785-b0dc-444f-ab27-\
472757a3676b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allTriples", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c1", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c2", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c3", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}]}], "]"}], ",", 
     "2"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 3.9609900062525253`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"62d5ab74-464c-a147-a50e-f95d54c219e5"],

Cell["Generates a flattened list of all triples ", "CodeText",
 CellChangeTimes->{{3.9609900132811413`*^9, 3.9609900144063854`*^9}, {
  3.9609900486697273`*^9, 
  3.960990056154396*^9}},ExpressionUUID->"1131d6db-91b7-0948-a436-\
d615316397a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"discreteWeylChamber", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"allTriples", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609900715964413`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"028d92ca-8a68-254e-b643-1f2db082acd8"],

Cell["Plots the points in 3d", "Text",
 CellChangeTimes->{{3.960990076882551*^9, 
  3.960990080357069*^9}},ExpressionUUID->"32d46792-285d-5748-9b94-\
771e41ad745f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPointPlot3D", "[", 
  RowBox[{"discreteWeylChamber", ",", 
   RowBox[{"Boxed", "->", "True"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<c\:2081\>\"", ",", "\"\<c\:2082\>\"", 
      ",", "\"\<c\:2083\>\""}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{"Blue", ",", 
      RowBox[{"PointSize", "[", "Medium", "]"}]}], "}"}]}], ",", 
   RowBox[{"AxesOrigin", "->", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Pi", "/", "4"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Pi", "/", "4"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"Pi", "/", "4"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{
   "PlotLabel", "->", "\"\<Discrete Weyl Chamber (Steps = 10)\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.960990083114691*^9}, {
   3.9610572821399307`*^9, 3.9610572831944504`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"24e516d3-e698-4f49-a216-33500f29a592"],

Cell[BoxData[
 Graphics3DBox[{{
    {RGBColor[0, 0, 1], PointSize[Medium], Point3DBox[CompressedData["
1:eJx1lrFqllEMhn/sNQhdewEdC24/wj91LAUHcRHs6uBFCNKb6NgbcHc5c6cs
SgkIEaFzly665PvJk7yFEni+NHlPTpKes4+frz692u12v/7/nuz0z9fDn8vT
d9/3ivM7ebVLxFkizpJxGI9c+ae9+XL+5urHQ9OTnHrI01a+hP+S/tRDXeSM
w3jk9buJ+puov4n6m6i/ifqTr43zvOSMM9fP5Hl5bvJZJ/WayE9/29+/vvvw
+PSz1Tk560yetvIl/Jf0T5ucdSZnHNaZPG3Na0KnCZ3W4rPOs/+xzqw3OfOy
TuTMy/zk9e9c7BMX+8TbvVfOfeLt3me+Nj7vExf7hLzHqdbbvZPPOq3Fn+eY
/rZx3js58/LeyZl37keX9877J5/r7KLOrDf9rXGlJ+3z+29vL25/t/5Mzv4k
T1v5Ev5L+qdNzv4kZxz2J3namteEThM6rcVnf87+tnH2Jznzsj/JmZf9SZ62
1sdFnV3U2UWdvelhf5IrPexP9ik5dbK/yKmT90ZOndRLXuOFeF+FeF9Fm6/K
+b6KNl8zXxuf31fR5mvmPU79HlsdZ518X5GvxlX8aqPNFznzzu+jaPM1+/e8
9Xu0+SKf68z/29Hma/a3xpWe+nfR5oucOuf9HW2+Zn9rnDrn/RFyvjhn5HO/
cT4CdWK/se+OnPrn+wlRD8aP/en54frl7G/bG8m5N8jTVr6E/5L+aZNzb5Az
DvcGedqa14ROEzqtxefemP1t49wb5MzLvUHOvNwb5GlrfVzU2UWdXdTZmx7u
DXKlJ21y7g1y6uTeIKdO7g1y6uTeIE9b+yFEv4XotxD9FqLfounn3pjjeONK
P/cG9wc5z8W5J+e5OE/kPBf7iJzn4vnI0/4De5tf4w==
      "]]}, {}, {}}, {}},
  Axes->True,
  AxesLabel->{
    FormBox[
     TagBox["\"c\:2081\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"c\:2082\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"c\:2083\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0, 0},
  BoxRatios->{1, 1, 0.4},
  Boxed->True,
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  Lighting->{{"Ambient", 
     GrayLevel[0.5]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{0, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 0, 2}]}},
  PlotLabel->FormBox[
   "\"Discrete Weyl Chamber (Steps = 10)\"", TraditionalForm],
  PlotRange->{{0., 0.7853981633974483}, {0., 0.7853981633974483}, {0., 
   0.7853981633974483}},
  PlotRangePadding->{{0, 0}, {0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.960991010696886*^9, 3.961057284746065*^9, 
  3.961063706589714*^9},
 CellLabel->"Out[52]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJylfQmYZVV17rH61tANtN2oiMhwQQQRlUZQUPBxVcI8FEPLDJdmbmlpZGiU
oUuQMAi2QBARTSnxOfDExgmnaPEUZyImIRFEUjEfiSIKiUmcotY7/xr2Xmuf
dU51Xu733ap7zz1nD2utvea99qGnXnj2GatOvfCc007t7//mU1effc5pF/T3
O+/N9aUFz6iqkS2r6hlf7Ve9+vNcVcV/tq6q/8mFL9HHBUve9KY3LXviiSfo
2ynN36duuummNe9+97sbv3+GPvbOvPPOOz+0du3a26+++urtFi9evABXR/DE
0Nz8Fm6sX1XPXlJVb6Rve9DfscdWrVo1d+aZZ+KRtTfffPND55133h6PPPLI
SNjQJfRxdF1VnVp/n8N7tqqeNVlVj1ev4E6Wf/KTn0SD9G2EO7n4tttum607
quS1anp6umx6DT9um65G6O+Cmap6iT5a7cb33XXFFVd86ZJLLrHdAJCD7373
u9tvsskm76hfuKelG4yaunnta79fLeBuaogckbp5Od+nsOV5Cxg322yz+y+6
6CLgprJtX0wfJ17zwAMP/PGww+6dW7Hi3LnTTz+H/u+887+gl2dX1T/tzs3c
fO2116J5/sboBDnoCPD5VNP6hfRx4Rvf+973/l3903/UMH5sOLxjbu+9fzC3
554PzZ188gVzk5Pvme33e4qLyc9//vNPrly5kiiMgbRg/aWXXvrABRdcQN9O
M+2fTx83xug/etlll6F9vK+rX1tvvvnmIJzpqjp4bvfdH5075pjLnzz22Lev
W7Pm1lcy7Kff9ra3PVwPC7MC3EECS88+++zTTQ/nMRTfWpPZP59zzjloHT0d
Uo9SYDt65B13fO2h+vrymq7x/3Wf/exnK+6iB/oGvYM8AZwzTNPn8ijQlB08
unrmGWecMc4/v+I73/kOWt1i0003vbm+7Qt1K/j856allc1BvufKK68EWKpF
3MyLZmdn0Qz+43E08/Z6/raZs/hWYOtzF198MZoB1vAdA9qYfh7H02gJA8OF
wz/ykY98s+6Vpv1+0xyDcfxlP/3pT4EQnd/19Wt9vbCOrhdYtZgRvMmhhx6a
QCdIt5Ot3mfaXcGztUSF4eK7PntADfJP12Pa/tFHH6028X1gvHqfQmLlu971
LtcHs60xQBCQLAlLVtVVb33rW+84/3ymQukmdYGXdKMgIpDdYbo5KZ7KCR/9
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
1ZtHcOli05gpE9m8UD3j/wFDa7Q0\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"49251a6a-66cd-5849-889a-1c6e667d46af"]
}, Open  ]],

Cell["Distance Matching to Nearest Discrete Triple", "Text",
 CellChangeTimes->{{3.960990087866741*^9, 
  3.9609901000504055`*^9}},ExpressionUUID->"9cf9cc2b-1df5-b743-8b5f-\
68370d88f49f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nearestDiscretePoint", "[", "coord_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "distances", "}"}], ",", 
      RowBox[{
       RowBox[{"distances", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"Norm", "[", 
           RowBox[{"coord", "-", "#"}], "]"}], "&"}], "/@", 
         "discreteWeylChamber"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"discreteWeylChamber", "[", 
        RowBox[{"[", 
         RowBox[{"First", "@", 
          RowBox[{"Ordering", "[", "distances", "]"}]}], "]"}], "]"}]}]}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CNOT", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SWAP", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"cnotCoords", "=", 
   RowBox[{"getCanonicalCoordinates", "[", "CNOT", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"swapCoords", "=", 
    RowBox[{"getCanonicalCoordinates", "[", "SWAP", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"cnotDiscrete", "=", 
   RowBox[{"nearestDiscretePoint", "[", "cnotCoords", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"swapDiscrete", "=", 
    RowBox[{"nearestDiscretePoint", "[", "swapCoords", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<CNOT canonical coordinates: \>\"", ",", "cnotCoords"}], "]"}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<CNOT nearest discrete point: \>\"", ",", "cnotDiscrete"}], 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<SWAP canonical coordinates: \>\"", ",", "swapCoords"}], "]"}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<SWAP nearest discrete point: \>\"", ",", "swapDiscrete"}], 
   "]"}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"9c87dab6-4312-bb49-9500-4543b0f7fd9b"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"CNOT canonical coordinates: \"\>", "\[InvisibleSpace]", 
   RowBox[{"getCanonicalCoordinates", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], "]"}]}],
  SequenceForm["CNOT canonical coordinates: ", 
   $CellContext`getCanonicalCoordinates[{{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 0,
     1}, {0, 0, 1, 0}}]],
  Editable->False]], "Print",
 CellChangeTimes->{3.960990995703039*^9, 3.961057408437639*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"d17a6331-b1be-8a4b-a7ca-ea08fb4ce8ef"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"CNOT nearest discrete point: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}],
  SequenceForm["CNOT nearest discrete point: ", {0, 0, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960990995703039*^9, 3.9610574084456177`*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"645e23ff-7227-4145-b1fa-ea61e9650d10"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SWAP canonical coordinates: \"\>", "\[InvisibleSpace]", 
   RowBox[{"getCanonicalCoordinates", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], "]"}]}],
  SequenceForm["SWAP canonical coordinates: ", 
   $CellContext`getCanonicalCoordinates[{{1, 0, 0, 0}, {0, 0, 1, 0}, {0, 1, 0,
     0}, {0, 0, 0, 1}}]],
  Editable->False]], "Print",
 CellChangeTimes->{3.960990995703039*^9, 3.9610574084566135`*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"e98d0f85-4783-bc45-acab-c7959b5b0ef6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SWAP nearest discrete point: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}],
  SequenceForm["SWAP nearest discrete point: ", {0, 0, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960990995703039*^9, 3.961057408460617*^9},
 CellLabel->
  "During evaluation of \
In[72]:=",ExpressionUUID->"f07ac293-f066-8b4a-92f8-80bfac92fd4b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"CNOT canonical coordinates: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[Pi]", "2"], ",", 
     FractionBox["\[Pi]", "2"], ",", "0"}], "}"}]}],
  SequenceForm[
  "CNOT canonical coordinates: ", {Rational[1, 2] Pi, Rational[1, 2] Pi, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.961063706852726*^9},
 CellLabel->
  "During evaluation of \
In[53]:=",ExpressionUUID->"74ede426-fbf8-1d4f-9570-c4fed92028cf"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"CNOT nearest discrete point: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"2", " ", "\[Pi]"}], "9"], ",", 
     FractionBox[
      RowBox[{"7", " ", "\[Pi]"}], "36"], ",", 
     FractionBox["\[Pi]", "18"]}], "}"}]}],
  SequenceForm[
  "CNOT nearest discrete point: ", {
   Rational[2, 9] Pi, Rational[7, 36] Pi, Rational[1, 18] Pi}],
  Editable->False]], "Print",
 CellChangeTimes->{3.961063706867737*^9},
 CellLabel->
  "During evaluation of \
In[53]:=",ExpressionUUID->"3c969945-a8aa-6243-82f5-b00ec04694ec"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SWAP canonical coordinates: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}],
  SequenceForm["SWAP canonical coordinates: ", {0, 0, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.9610637068697433`*^9},
 CellLabel->
  "During evaluation of \
In[53]:=",ExpressionUUID->"ff92ac87-e091-6346-8449-2ba5a9c00a07"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SWAP nearest discrete point: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}],
  SequenceForm["SWAP nearest discrete point: ", {0, 0, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.961063706872736*^9},
 CellLabel->
  "During evaluation of \
In[53]:=",ExpressionUUID->"97ad76ce-729a-d04a-b81a-d5a84ba241de"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"CNOT nearest discrete point: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"2", " ", "\[Pi]"}], "9"], ",", 
     FractionBox[
      RowBox[{"7", " ", "\[Pi]"}], "36"], ",", 
     FractionBox["\[Pi]", "18"]}], "}"}]}],
  SequenceForm[
  "CNOT nearest discrete point: ", {
   Rational[2, 9] Pi, Rational[7, 36] Pi, Rational[1, 18] Pi}],
  Editable->False]], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.960990995709038*^9, {3.9610202976096516`*^9, 
   3.9610203090018063`*^9}},ExpressionUUID->"ee2bc49b-0b87-cb44-95ee-\
18481f3eb4f0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SWAP canonical coordinates: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}],
  SequenceForm["SWAP canonical coordinates: ", {0, 0, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.9609909957180386`*^9},
 CellLabel->
  "During evaluation of \
In[711]:=",ExpressionUUID->"47b201a2-e19d-6348-add0-9c6b0f325c62"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"SWAP nearest discrete point: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}],
  SequenceForm["SWAP nearest discrete point: ", {0, 0, 0}],
  Editable->False]], "Print",
 CellChangeTimes->{3.960990995722042*^9},
 CellLabel->
  "During evaluation of \
In[711]:=",ExpressionUUID->"61ad3338-c1cc-de4b-b2e0-0f31c6db3f59"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Defines entangling gate filter where at least one ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "42c79e8d-a737-cb4a-b511-6ec54c076356"],
 " does not equal 0"
}], "CodeText",
 CellChangeTimes->{{3.9609908032361183`*^9, 3.96099080438834*^9}, {
   3.9609908554399548`*^9, 3.960990856952486*^9}, {3.9609910427313004`*^9, 
   3.960991092076723*^9}, 
   3.960991616316263*^9},ExpressionUUID->"5ee0d1ee-2e21-2240-928d-\
aa9b51e956d0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"isEntangling", "[", 
    RowBox[{"{", 
     RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Norm", "[", 
     RowBox[{"{", 
      RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], "]"}], ">", "0.0001"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, 3.9609909148867817`*^9, 3.960990974326208*^9, 
   3.9609910391045113`*^9, 3.960991619723076*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"3f378f47-0c5f-674e-9c86-afc8786b1f6a"],

Cell["Filters for entangling gates", "CodeText",
 CellChangeTimes->{{3.960991625848448*^9, 
  3.9609916307341537`*^9}},ExpressionUUID->"de35c66b-6456-844e-a84a-\
b60eea954a64"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"universalTriples", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"discreteWeylChamber", ",", "isEntangling"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"universalGates", "=", 
    RowBox[{"buildRepresentativeGate", "/@", "universalTriples"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Number of universal (entangling) gates: \>\"", ",", 
    RowBox[{"Length", "[", "universalGates", "]"}]}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, 3.9609909148867817`*^9, 3.960990974326208*^9, 
   3.9609910391045113`*^9, 3.960991619723076*^9, {3.9609916507291126`*^9, 
   3.960991659451498*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"d4f18cea-3d3c-e243-987a-13453742791f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Number of universal (entangling) gates: \"\>", "\[InvisibleSpace]",
    "219"}],
  SequenceForm["Number of universal (entangling) gates: ", 219],
  Editable->False]], "Print",
 CellChangeTimes->{3.9610637069067307`*^9},
 CellLabel->
  "During evaluation of \
In[65]:=",ExpressionUUID->"084306e5-cfa3-ae47-897c-b01d3e2e7d47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TableForm", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"NumberForm", "[", 
         RowBox[{
          RowBox[{"universalTriples", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "3"}], "}"}]}], "]"}], ",", 
        RowBox[{"MatrixForm", "[", 
         RowBox[{"universalGates", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Min", "[", 
         RowBox[{"5", ",", 
          RowBox[{"Length", "[", "universalGates", "]"}]}], "]"}]}], "}"}]}], 
     "]"}], ",", 
    RowBox[{"TableHeadings", "->", 
     RowBox[{"{", 
      RowBox[{"None", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Canonical triple (c1,c2,c3)\>\"", 
         ",", "\"\<Universal Gate Matrix\>\""}], "}"}]}], "}"}]}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{
  3.960907970439865*^9, 3.9609083895570507`*^9, {3.9609690293200703`*^9, 
   3.9609690300380383`*^9}, {3.960979346556492*^9, 3.9609793544872456`*^9}, {
   3.960979389189415*^9, 3.960979396913994*^9}, {3.9609892186705456`*^9, 
   3.960989219723568*^9}, {3.960989404935892*^9, 3.960989409599684*^9}, {
   3.9609897167844105`*^9, 3.9609897331134567`*^9}, {3.96098989720648*^9, 
   3.9609898988334236`*^9}, {3.9609899825117893`*^9, 
   3.9609900062525253`*^9}, {3.9609900682753296`*^9, 3.9609901087652874`*^9}, 
   3.9609901536905384`*^9, 3.9609909148867817`*^9, 3.960990974326208*^9, 
   3.9609910391045113`*^9, 3.960991619723076*^9, {3.9609916507291126`*^9, 
   3.9609916692204895`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"80df8654-36d5-0440-8873-50d88c3c9bb9"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"Canonical triple (c1,c2,c3)\"\>",
       HoldForm], 
      TagBox["\<\"Universal Gate Matrix\"\>",
       HoldForm]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"buildRepresentativeGate", "[", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["\[Pi]", "36"], ",", "0", ",", "0"}], "}"}], "]"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"buildRepresentativeGate", "[", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["\[Pi]", "36"], ",", 
          FractionBox["\[Pi]", "36"], ",", "0"}], "}"}], "]"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"buildRepresentativeGate", "[", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["\[Pi]", "36"], ",", 
          FractionBox["\[Pi]", "36"], ",", 
          FractionBox["\[Pi]", "36"]}], "}"}], "]"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"18\"\>",
            ShowStringCharacters->False],
           18,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"buildRepresentativeGate", "[", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["\[Pi]", "18"], ",", "0", ",", "0"}], "}"}], "]"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]},
     {
      TagBox[
       RowBox[{"{", 
        RowBox[{
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"18\"\>",
            ShowStringCharacters->False],
           18,
           Editable->False]], ",", 
         FractionBox["\[Pi]", 
          InterpretationBox[
           StyleBox["\<\"36\"\>",
            ShowStringCharacters->False],
           36,
           Editable->False]], ",", 
         InterpretationBox[
          StyleBox["\<\"0\"\>",
           ShowStringCharacters->False],
          0,
          Editable->False]}], "}"}],
       NumberForm[#, {4, 3}]& ], 
      TagBox[
       RowBox[{"buildRepresentativeGate", "[", 
        RowBox[{"{", 
         RowBox[{
          FractionBox["\[Pi]", "18"], ",", 
          FractionBox["\[Pi]", "36"], ",", "0"}], "}"}], "]"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {"Canonical triple (c1,c2,c3)", 
       "Universal Gate Matrix"}}]]]], "Output",
 CellChangeTimes->{3.9609916705801315`*^9, 3.9610637069407597`*^9},
 CellLabel->
  "Out[68]//TableForm=",ExpressionUUID->"1256d20d-5b64-994d-a6dd-\
cb1326489b7c"]
}, Open  ]],

Cell[TextData[{
 "What makes these gates universal is their  ability to create entanglement \
and to generate a wide range of two-qubit operations through repeated \
application and composition with simpler, local gates. The complex \
off-diagonal elements of the matrix mix the computational basis states in a \
way that produces quantum correlations that cannot be achieved by local \
operations alone. Additionally, the presence of complex phases within \
exponential factors across the main diagonal, such as ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["e", 
    RowBox[{"i\[Pi]", "/", "36"}]], TraditionalForm]],ExpressionUUID->
  "9084a689-1970-1b43-84c0-2decdc113590"],
 ", introduces interference effects essential for reaching diverse regions of \
the two-qubit unitary space. Because these gates correspond to canonical \
triples positioned away from the boundaries of the Weyl chamber, they possess \
sufficient degrees of freedom to generate all other representative gates when \
combined properly.\n"
}], "Text",
 CellChangeTimes->{{3.9609917012156887`*^9, 3.960991775967123*^9}, {
  3.9609918112194786`*^9, 3.9609918554720573`*^9}, {3.9609918916012897`*^9, 
  3.960991903842516*^9}, {3.9609919508691597`*^9, 
  3.960992069891754*^9}},ExpressionUUID->"6e401287-f53d-9c42-8e6d-\
789bfab05040"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizing gates through 2d projections", "Subsection",
 CellChangeTimes->{{3.96099266594022*^9, 3.9609926730388584`*^9}, {
  3.960992773226164*^9, 
  3.9609927795697346`*^9}},ExpressionUUID->"0ef8370e-0d21-8042-bf15-\
9af374517491"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["A visualization of the gates is necessary because \
directly interpreting transformations in four-dimensional space is \
challenging. By projecting onto 2D planes, it becomes possible to intuitively \
understand how the quantum gate affects the vector components and to observe \
the nature of the gate\[CloseCurlyQuote]s action, such as rotations or \
reflections, in lower dimensions. This helps to build intuition about the \
gate\[CloseCurlyQuote]s behavior and its role in manipulating quantum states, \
which is crucial for analyzing and designing universal quantum gates.",
 FontColor->RGBColor[
  0.5019607843137255, 0.5019607843137255, 
   0.5019607843137255]]], "Subsubsection",
 CellChangeTimes->{{3.96099266594022*^9, 3.9609926730388584`*^9}, {
  3.960992773226164*^9, 3.9609927852262573`*^9}, {3.960992820593006*^9, 
  3.960992827621752*^9}},ExpressionUUID->"f0fba59b-1c79-5549-a8c5-\
d73a2e31fc1e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"projectAndPlot", "[", 
   RowBox[{"matrix_", ",", "v_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "rotatedV", ",", "axisLabels", ",", "projections", ",", "pairs"}], "}"}],
     ",", 
    RowBox[{
     RowBox[{"rotatedV", "=", 
      RowBox[{"Re", "[", 
       RowBox[{"matrix", ".", "v"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"axisLabels", "=", 
      RowBox[{"{", 
       RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\"", 
        ",", "\"\<w\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pairs", "=", 
      RowBox[{"Subsets", "[", 
       RowBox[{
        RowBox[{"Range", "[", "4", "]"}], ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"projections", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"i", "=", 
             RowBox[{"pair", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{"j", "=", 
             RowBox[{"pair", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"Graphics", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Thick", ",", 
              RowBox[{"Arrow", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rotatedV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                   RowBox[{"rotatedV", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "}"}]}], "}"}], "]"}], ",",
               "Blue", ",", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"axisLabels", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", "Small"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rotatedV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                   RowBox[{"rotatedV", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "}"}], "+", "0.1"}]}], 
               "]"}], ",", 
              RowBox[{"Text", "[", 
               RowBox[{
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"axisLabels", "[", 
                   RowBox[{"[", "j", "]"}], "]"}], ",", "Small"}], "]"}], ",", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"rotatedV", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                   RowBox[{"rotatedV", "[", 
                    RowBox[{"[", "j", "]"}], "]"}]}], "}"}], "-", "0.1"}]}], 
               "]"}]}], "}"}], ",", 
            RowBox[{"Axes", "->", "True"}], ",", 
            RowBox[{"AxesLabel", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"axisLabels", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"axisLabels", "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], "}"}]}], ",", 
            RowBox[{"PlotRange", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}]}], "]"}]}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"pair", ",", "pairs"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"GraphicsGrid", "[", 
      RowBox[{"Partition", "[", 
       RowBox[{"projections", ",", "1"}], "]"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"projectAndPlot", "/@", 
   RowBox[{"Take", "[", 
    RowBox[{"universalGates", ",", "1"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\n"}], "Input",
 CellChangeTimes->{
  3.9609079210369225`*^9, {3.9609080064497337`*^9, 3.960908014158993*^9}, {
   3.96091211323711*^9, 3.9609121144564514`*^9}, 3.9609913777267494`*^9, {
   3.960991420062647*^9, 3.9609914297438107`*^9}, {3.960992096662836*^9, 
   3.9609920970437756`*^9}, {3.96099213603932*^9, 3.9609921629319706`*^9}, 
   3.9609927804936905`*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"7b72d64d-aef2-f74c-a654-e9f879f5dcf3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"projectAndPlot", "[", 
   RowBox[{"buildRepresentativeGate", "[", 
    RowBox[{"{", 
     RowBox[{
      FractionBox["\[Pi]", "36"], ",", "0", ",", "0"}], "}"}], "]"}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9610637069767723`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"68c98c6c-65a6-9446-ab79-96192202103d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  GraphicsBox[{{}, {InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, 0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"x\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, 1.0961946980917456}], 
         InsetBox[
          StyleBox["\<\"y\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, 0.8961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"x\"", TraditionalForm], 
         FormBox["\"y\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -197.50540054563493}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"x\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"z\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"x\"", TraditionalForm], 
         FormBox["\"z\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -592.5162016369047}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"x\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"w\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"x\"", TraditionalForm], 
         FormBox["\"w\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -987.5270027281745}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"y\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"z\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"y\"", TraditionalForm], 
         FormBox["\"z\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -1382.5378038194444}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"y\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"w\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"y\"", TraditionalForm], 
         FormBox["\"w\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -1777.5486049107144}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 
           0}, {-Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 
           0}, {-0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"z\"\>",
           StripOnInput->False,
           FontSize->Small], {-0.8961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"w\"\>",
           StripOnInput->False,
           FontSize->Small], {-1.0961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"z\"", TraditionalForm], 
         FormBox["\"w\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -2172.5594060019844}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}]}, {}},
   ImageSize->{
     UpTo[600], 
     UpTo[700]},
   Method->{"IgnoreImageSizeAutomaticLimit" -> True},
   PlotRangePadding->Automatic], "}"}]], "Input",
 CellChangeTimes->{{3.9609930242902584`*^9, 3.960993028672447*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"517b1747-4052-a74c-9d77-f0defe09d95e"],

Cell[BoxData[
 RowBox[{"{", 
  GraphicsBox[{{}, {InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, 0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"x\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, 1.0961946980917456}], 
         InsetBox[
          StyleBox["\<\"y\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, 0.8961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"x\"", TraditionalForm], 
         FormBox["\"y\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -197.50540054563493}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"x\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"z\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"x\"", TraditionalForm], 
         FormBox["\"z\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -592.5162016369047}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"x\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"w\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"x\"", TraditionalForm], 
         FormBox["\"w\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -987.5270027281745}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"y\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"z\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"y\"", TraditionalForm], 
         FormBox["\"z\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -1382.5378038194444}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 0}, {
           Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 0}, {
           0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"y\"\>",
           StripOnInput->False,
           FontSize->Small], {1.0961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"w\"\>",
           StripOnInput->False,
           FontSize->Small], {0.8961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"y\"", TraditionalForm], 
         FormBox["\"w\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -1777.5486049107144}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[
       {Thickness[Large], 
        ArrowBox[
         NCache[{{0, 
           0}, {-Cos[Rational[1, 36] Pi], -Cos[Rational[1, 36] Pi]}}, {{0, 
           0}, {-0.9961946980917455, -0.9961946980917455}}]], 
        {RGBColor[0, 0, 1], InsetBox[
          StyleBox["\<\"z\"\>",
           StripOnInput->False,
           FontSize->Small], {-0.8961946980917456, -0.8961946980917456}], 
         InsetBox[
          StyleBox["\<\"w\"\>",
           StripOnInput->False,
           FontSize->Small], {-1.0961946980917456, -1.0961946980917456}]}},
       Axes->True,
       AxesLabel->{
         FormBox["\"z\"", TraditionalForm], 
         FormBox["\"w\"", TraditionalForm]},
       PlotRange->{{-2, 2}, {-2, 2}}], {189., -2172.5594060019844}, 
      ImageScaled[{0.5, 0.5}], {360., 363.82573784722223},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}]}, {}},
   ImageSize->{
     UpTo[600], 
     UpTo[700]},
   Method->{"IgnoreImageSizeAutomaticLimit" -> True},
   PlotRangePadding->Automatic], "}"}]], "Output",
 CellChangeTimes->{3.9610637071406784`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"31469b54-b49e-9547-83a7-95e29afcb37c"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9609930242902584`*^9, 3.960993031448265*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"a77ea4d6-5f4c-e347-bfce-80a98babf157"],

Cell["\<\
This represents Gate Matrix 1 (gate shown above). Here, the vector v \
represents a quantum state or a direction in the four-dimensional space \
associated with the two-qubit system. When we apply the gate matrix m to v, \
the resulting vector rotatedV shows how that state or direction is \
transformed by the gate. So, the coordinates like (1, 1) represent the \
components of this transformed vector rotatedV projected onto the x and y \
axes, essentially showing how much the gate mixes or shifts those specific \
components of the state.\
\>", "CodeText",
 CellChangeTimes->{{3.960993037413761*^9, 3.9609931032016983`*^9}, {
  3.9609931869993305`*^9, 3.9609932141943665`*^9}, {3.9610198556138954`*^9, 
  3.9610198610520153`*^9}},ExpressionUUID->"1949f63b-eb8a-504a-beff-\
533eabbb2cf6"],

Cell[TextData[StyleBox["Parameterized Plotting of Quantum State Projections", \
"Subsection"]], "Text",
 CellChangeTimes->{{3.9609121192929287`*^9, 3.9609121881406555`*^9}, 
   3.960997462903885*^9, 
   3.9609979243839417`*^9},ExpressionUUID->"f5872037-3aff-d54c-8cc4-\
58f8e4873cae"],

Cell[TextData[StyleBox["While standard 2D plots can illustrate data points or \
function curves, they often fall short when visualizing quantum state \
evolution, especially in the context of multi-component complex vectors. This \
visualization method, powered by the myPlot function, is purpose-built to \
display individual quantum state components in the complex plane, emphasizing \
their real and imaginary structure, relative phases, and label identity. \
Unlike traditional subplots that show aggregated behavior, this approach \
distinctly tracks how each basis state transforms under different quantum \
gates, offering a granular and annotated snapshot of gate action on \
amplitude-level detail. The use of color, marker, and labeling not only \
enhances interpretability but also supports pattern recognition across gate \
families, which is vital when comparing permutations, Pauli gates, and \
entangling transformations. Thus, this method supplements conventional plots \
with a component-wise, vector-level lens, making it a necessary analytical \
tool for precise and visual quantum behavior tracing.",
 FontColor->RGBColor[
  0.5019607843137255, 0.5019607843137255, 0.5019607843137255],
 Background->RGBColor[1., 1., 1.]]], "Text",
 CellChangeTimes->{
  3.961019865070093*^9},ExpressionUUID->"3dd408c6-6253-2e49-ae65-\
d90db765e661"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myPlot", "[", 
   RowBox[{"v_", ",", "label_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"colors", "=", 
       RowBox[{"{", 
        RowBox[{"Red", ",", "Blue", ",", "Green", ",", "Purple"}], "}"}]}], ",", 
      RowBox[{"markers", "=", 
       RowBox[{"{", 
        RowBox[{"\"\<\[FilledCircle]\>\"", ",", "\"\<\[EmptyCircle]\>\"", 
         ",", "\"\<\[Times]\>\"", ",", "\"\<\[Diamond]\>\""}], "}"}]}], ",", 
      RowBox[{"points", "=", 
       RowBox[{"ReIm", "/@", "v"}]}], ",", 
      RowBox[{"axisLabels", "=", 
       RowBox[{"{", 
        RowBox[{"\"\<Re\>\"", ",", "\"\<Im\>\""}], "}"}]}]}], "}"}], ",", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"Graphics", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"PointSize", "[", "Large", "]"}], ",", 
             RowBox[{"colors", "[", 
              RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{"\"\<z\>\"", "<>", 
                RowBox[{"ToString", "[", "i", "]"}]}], ",", 
               RowBox[{"FontSize", "->", "12"}], ",", "Black"}], "]"}], ",", 
             RowBox[{
              RowBox[{"points", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "+", 
              RowBox[{"{", 
               RowBox[{"0.1", ",", "0.1"}], "}"}]}]}], "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"Text", "[", 
              RowBox[{
               RowBox[{"markers", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"points", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"colors", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"FontSize", "->", "18"}]}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "v", "]"}]}], "}"}]}], "]"}], "]"}], ",", 
      RowBox[{"Axes", "->", "True"}], ",", 
      RowBox[{"AxesOrigin", "->", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1.5"}], ",", "1.5"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "->", "axisLabels"}], ",", 
      RowBox[{"GridLines", "->", "Automatic"}], ",", 
      RowBox[{"PlotLabel", "->", 
       RowBox[{"Style", "[", 
        RowBox[{"label", ",", "Bold", ",", "14"}], "]"}]}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, 
   3.9610200829736366`*^9},
 CellLabel->"In[73]:=",ExpressionUUID->"037bd5c1-5cb7-9344-896d-d87516491316"],

Cell["\<\
Visualizes each quantum state component in the complex plane with labels and \
styles, revealing structure standard plots miss.\
\>", "CodeText",
 CellChangeTimes->{{3.9610200408393326`*^9, 3.9610200421847267`*^9}, {
  3.9610200772489758`*^9, 3.961020086983341*^9}, {3.961020129156889*^9, 
  3.961020129549349*^9}},ExpressionUUID->"81757233-9504-2846-8772-\
59f4f576c5ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"testVectors", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "I", ",", "0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", 
        RowBox[{"-", "1"}], ",", 
        RowBox[{"-", "1"}]}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", 
        RowBox[{"-", "1"}], ",", "I", ",", 
        RowBox[{"-", "I"}]}], "}"}], "]"}], ",", 
     RowBox[{"Normalize", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], "]"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]x", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]y", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "I"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"\[Sigma]z", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"id", "=", 
   RowBox[{"IdentityMatrix", "[", "2", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"79976157-6831-3f4e-bda6-72c666b3eaee"],

Cell["Defines gates", "CodeText",
 CellChangeTimes->{{3.961020121152569*^9, 
  3.9610201269861393`*^9}},ExpressionUUID->"913d6498-2ca9-a84a-bdff-\
4100403c41a1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pauliGates", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"\[Sigma]x", ",", "id"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"id", ",", "\[Sigma]x"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"\[Sigma]y", ",", "id"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"id", ",", "\[Sigma]y"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"\[Sigma]z", ",", "id"}], "]"}], ",", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{"id", ",", "\[Sigma]z"}], "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pauliLabels", "=", 
    RowBox[{"{", 
     RowBox[{"\"\<X\[CircleTimes]I\>\"", ",", "\"\<I\[CircleTimes]X\>\"", 
      ",", "\"\<Y\[CircleTimes]I\>\"", ",", "\"\<I\[CircleTimes]Y\>\"", 
      ",", "\"\<Z\[CircleTimes]I\>\"", ",", "\"\<I\[CircleTimes]Z\>\""}], 
     "}"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"permLabels", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<CNOT\>\"", ",", "\"\<SWAP\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"permGates", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
     "}"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"XX", "=", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"\[Sigma]x", ",", "\[Sigma]x"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"YY", "=", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"\[Sigma]y", ",", "\[Sigma]y"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ZZ", "=", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"\[Sigma]z", ",", "\[Sigma]z"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"steps", "=", "10"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"stepSize", "=", 
   RowBox[{"Pi", "/", 
    RowBox[{"(", 
     RowBox[{"4", " ", 
      RowBox[{"(", 
       RowBox[{"steps", "-", "1"}], ")"}]}], ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"allTriples", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c1", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c2", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"c3", ",", "0", ",", 
         RowBox[{"Pi", "/", "4"}], ",", "stepSize"}], "}"}]}], "]"}], ",", 
     "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"discreteWeylChamber", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"allTriples", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "3", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "<=", 
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildRepresentativeGate", "[", 
    RowBox[{"{", 
     RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
   RowBox[{"MatrixExp", "[", 
    RowBox[{"I", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"c1", " ", "XX"}], "+", 
       RowBox[{"c2", " ", "YY"}], "+", 
       RowBox[{"c3", " ", "ZZ"}]}], ")"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"isEntangling", "[", 
     RowBox[{"{", 
      RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
    RowBox[{
     RowBox[{"Norm", "[", 
      RowBox[{"{", 
       RowBox[{"c1", ",", "c2", ",", "c3"}], "}"}], "]"}], ">", "0.0001"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"universalTriples", "=", 
   RowBox[{"Select", "[", 
    RowBox[{"discreteWeylChamber", ",", "isEntangling"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"universalGates", "=", 
   RowBox[{"buildRepresentativeGate", "/@", "universalTriples"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"universalLabels", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\"\<U\>\"", "<>", 
      RowBox[{"ToString", "[", "i", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "universalGates", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"someUniversalGates", "=", 
   RowBox[{"Take", "[", 
    RowBox[{"universalGates", ",", "3"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"someUniversalLabels", "=", 
   RowBox[{"Take", "[", 
    RowBox[{"universalLabels", ",", "3"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}, {3.9610201375505314`*^9, 
   3.9610201380182457`*^9}, 3.9610201710512905`*^9, {3.9610598836572895`*^9, 
   3.9610598846491203`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"9009233d-59b9-d64e-b3e6-9793565ac87c"],

Cell["\<\
generates a discrete sample of two-qubit gates from the Weyl chamber by \
constructing matrix exponentials of weighted Pauli tensor products,\
\>", "CodeText",
 CellChangeTimes->{{3.9610201786405296`*^9, 
  3.9610201881855583`*^9}},ExpressionUUID->"c0afbd85-e5ff-2342-a22c-\
182456af995d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"generatePlots", "[", 
     RowBox[{"gates_", ",", "labels_", ",", "tag_"}], "]"}], ":=", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"myPlot", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"gates", "[", 
           RowBox[{"[", "g", "]"}], "]"}], ".", 
          RowBox[{"testVectors", "[", 
           RowBox[{"[", "v", "]"}], "]"}]}], ",", 
         RowBox[{"tag", "<>", "\"\<: \>\"", "<>", 
          RowBox[{"labels", "[", 
           RowBox[{"[", "g", "]"}], "]"}], "<>", "\"\< on v\>\"", "<>", 
          RowBox[{"ToString", "[", "v", "]"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"g", ",", 
         RowBox[{"Length", "[", "gates", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"v", ",", 
         RowBox[{"Length", "[", "testVectors", "]"}]}], "}"}]}], "]"}], 
     "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pauliPlots", "=", 
   RowBox[{"generatePlots", "[", 
    RowBox[{"pauliGates", ",", "pauliLabels", ",", "\"\<Pauli\>\""}], "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{"permPlots", "=", 
   RowBox[{"generatePlots", "[", 
    RowBox[{"permGates", ",", "permLabels", ",", "\"\<Permutation\>\""}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"universalPlots", "=", 
   RowBox[{"generatePlots", "[", 
    RowBox[{
    "someUniversalGates", ",", "someUniversalLabels", 
     ",", "\"\<Universal\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"allPlots", "=", 
    RowBox[{"Join", "[", 
     RowBox[{"pauliPlots", ",", "permPlots", ",", "universalPlots"}], "]"}]}],
    ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GraphicsGrid", "[", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"allPlots", ",", "6"}], "]"}], ",", "3"}], "]"}], "]"}], 
  "  "}]}], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}, {3.9610201375505314`*^9, 
   3.9610201380182457`*^9}, {3.9610201710512905`*^9, 3.961020196330372*^9}, {
   3.9610202488195553`*^9, 3.961020257179861*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"660f4448-c9eb-0447-b9eb-bdf0576e23ee"],

Cell[BoxData[
 GraphicsBox[{{}, {{InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[1, 0, 0], 
          StyleBox[InsetBox["\<\"\[FilledCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0, 0, 1], 
          StyleBox[InsetBox["\<\"\[EmptyCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {1.1, 0.1}], 
         {RGBColor[0, 1, 0], 
          StyleBox[InsetBox["\<\"\[Times]\"\>", {1, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          StyleBox[InsetBox["\<\"\[Diamond]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v1\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {193.5, -196.0070607248942}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[1, 0, 0], 
          StyleBox[InsetBox["\<\"\[FilledCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0, 0, 1], 
          StyleBox[InsetBox["\<\"\[EmptyCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.8071067811865474, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", 
            NCache[{2^Rational[-1, 2], 0}, {0.7071067811865475, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.8071067811865474}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{0, 2^Rational[-1, 2]}, {0, 0.7071067811865475}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v2\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {580.5, -196.0070607248942}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {-0.4, 0.1}], 
         {RGBColor[1, 0, 0], 
          
          StyleBox[
           InsetBox["\<\"\[FilledCircle]\"\>", 
            NCache[{Rational[-1, 2], 0}, {-0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {-0.4, 0.1}], 
         {RGBColor[0, 0, 1], 
          
          StyleBox[
           InsetBox["\<\"\[EmptyCircle]\"\>", 
            NCache[{Rational[-1, 2], 0}, {-0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v3\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {967.5, -196.0070607248942}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}]}, {
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.6}], 
         {RGBColor[1, 0, 0], 
          
          StyleBox[
           InsetBox["\<\"\[FilledCircle]\"\>", 
            NCache[{0, Rational[1, 2]}, {0, 0.5}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, -0.4}], 
         {RGBColor[0, 0, 1], 
          
          StyleBox[
           InsetBox["\<\"\[EmptyCircle]\"\>", 
            NCache[{0, Rational[-1, 2]}, {0, -0.5}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {-0.4, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{Rational[-1, 2], 0}, {-0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v4\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {193.5, -588.0211821746825}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[1, 0, 0], 
          
          StyleBox[
           InsetBox["\<\"\[FilledCircle]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 0, 1], 
          
          StyleBox[
           InsetBox["\<\"\[EmptyCircle]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0, 1, 0], 
          
          StyleBox[
           InsetBox["\<\"\[Times]\"\>", NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.6, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          
          StyleBox[
           InsetBox["\<\"\[Diamond]\"\>", 
            NCache[{Rational[1, 2], 0}, {0.5, 0}]],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: X\[CircleTimes]I on v5\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {580.5, -588.0211821746825}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}], 
     InsetBox[
      GraphicsBox[{{
         {RGBColor[1, 0, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z1\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[1, 0, 0], 
          StyleBox[InsetBox["\<\"\[FilledCircle]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 0, 1], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z2\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {1.1, 0.1}], 
         {RGBColor[0, 0, 1], 
          StyleBox[InsetBox["\<\"\[EmptyCircle]\"\>", {1, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0, 1, 0], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z3\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0, 1, 0], 
          StyleBox[InsetBox["\<\"\[Times]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}, {
         {RGBColor[0.5, 0, 0.5], PointSize[Large]}, InsetBox[
          StyleBox["\<\"z4\"\>",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->12,
           FontColor->GrayLevel[0]], {0.1, 0.1}], 
         {RGBColor[0.5, 0, 0.5], 
          StyleBox[InsetBox["\<\"\[Diamond]\"\>", {0, 0}],
           StripOnInput->False,
           FontSize->18]}}},
       Axes->True,
       AxesLabel->{
         FormBox["\"Re\"", TraditionalForm], 
         FormBox["\"Im\"", TraditionalForm]},
       AxesOrigin->{0, 0},
       GridLines->Automatic,
       PlotLabel->FormBox[
         StyleBox[
         "\"Pauli: I\[CircleTimes]X on v1\"", Bold, 14, StripOnInput -> 
          False], TraditionalForm],
       PlotRange->{{-1.5, 1.5}, {-1.5, 1.5}}], {967.5, -588.0211821746825}, 
      ImageScaled[{0.5, 0.5}], {360., 367.5132388591766},
      BaseStyle->{Graphics3DBoxOptions -> {SphericalRegion -> False}}]}}, {}},
  ImageSize->{
    UpTo[600], 
    UpTo[700]},
  Method->{"IgnoreImageSizeAutomaticLimit" -> True},
  PlotRangePadding->Automatic]], "Output",
 CellChangeTimes->{3.9610572207630177`*^9, 3.9610637084991703`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"7bb9448c-eba7-3846-9c96-0de17f3fafb0"]
}, Open  ]],

Cell["\<\
Generates labeled visualizations of how each gate transforms multiple test \
vectors, then organizes selected plots into a grid for comparative analysis\
\>", "CodeText",
 CellChangeTimes->{
  3.96102026580044*^9},ExpressionUUID->"1e0d05b9-2b92-614c-9524-eb5342b8b3da"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.96090782656188*^9, 3.9609078461668606`*^9}, 
   3.960998165775097*^9, {3.9610199574455338`*^9, 3.961019958715105*^9}, {
   3.9610200912772007`*^9, 3.9610200959896317`*^9}, {3.9610201375505314`*^9, 
   3.9610201380182457`*^9}, {3.9610201710512905`*^9, 3.961020196330372*^9}, {
   3.9610202488195553`*^9, 3.961020257179861*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"ac3a046c-4964-654e-91ca-2f84e62a06ee"],

Cell[TextData[{
 StyleBox["Classifying Two-Qubit Gates Using Makhlin Invariant\n", "Subtitle"],
 StyleBox["\n", "Subsection"],
 StyleBox["The Need for Makhlin Invariants", "Code"]
}], "Text",
 CellChangeTimes->{{3.9610271014373417`*^9, 3.9610271277087*^9}, {
  3.9610274062130413`*^9, 
  3.961027407915289*^9}},ExpressionUUID->"299009d4-a7a4-0c41-9b0d-\
1200d8a501e6"],

Cell[TextData[{
 "In quantum computing, two-qubit gates are central to generating \
entanglement, which is the key resource for universality. However, a deep \
complication arises: many two-qubit gates that appear different are \
functionally identical when viewed through the lens of local equivalence\
\[LongDash]transformations of the form (U 1\[CircleTimes]U2)\:22c5V\:22c5(U3\
\[CircleTimes]U4) , where the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["U", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5b0a7334-70ce-074e-956c-0fb467d149f2"],
 " are single-qubit unitaries. These local gates do not change the entangling \
power or computational class of V, but they do change its matrix \
representation. Therefore, to classify truly distinct entangling operations, \
we need a tool that is invariant under local unitaries. This is where Makhlin \
invariants come into play: a trio of scalar quantities that remain unchanged \
under all local SU(2) \[CircleTimes] SU(2) conjugations and thus fully \
characterize the nonlocal content of a two-qubit gate."
}], "Text",
 CellChangeTimes->{
  3.96102713810236*^9, {3.9610272570206947`*^9, 3.9610273353543777`*^9}, 
   3.961027367154293*^9, {3.9610274350815163`*^9, 
   3.961027439141449*^9}},ExpressionUUID->"7251daaa-4a93-844f-82fb-\
e422a21fe65f"],

Cell[TextData[{
 StyleBox["The Mathemathical Framework\n\n", "Code"],
 StyleBox["The Makhlin invariants (\|01d4541,\|01d4542,\|01d4543)are computed \
by transforming the unitary gate U into a canonical form via the magic basis \
transformation K, yielding M=", "Code",
  FontFamily->"Source Sans Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["K", "T"], TraditionalForm]],
  FontFamily->"Source Sans Pro",
  FontVariations->{"Underline"->False},ExpressionUUID->
  "f55374e1-805a-6846-a6c4-8e21c4bb4c3c"],
 StyleBox["KU.",
  FontFamily->"Source Sans Pro",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox["This basis diagonalizes certain Bell states and simplifies \
entanglement analysis. From M, we define m = ", "Code",
  FontFamily->"Source Sans Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   SuperscriptBox["M", "T"], TraditionalForm]],
  FontFamily->"Source Sans Pro",
  FontVariations->{"Underline"->False},ExpressionUUID->
  "e2bcadb9-3b9b-fa4f-bcdf-148b268cca8b"],
 StyleBox["M",
  FontFamily->"Source Sans Pro",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 StyleBox[" and compute:\n\t\t\t\t\t\t`\t\t\t\tg1 = ", "Code",
  FontFamily->"Source Sans Pro",
  FontWeight->"Plain",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   FractionBox[
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"Tr", " ", "m"}], ")"}], "2"], 
    RowBox[{"det", " ", "m"}]], TraditionalForm]],
  FormatType->TraditionalForm,
  FontVariations->{"Underline"->False},ExpressionUUID->
  "e7c9b98a-aed6-8041-9ba9-b70dae910eee"],
 StyleBox["                      g2 = ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]],
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"Tr", "(", " ", 
     SuperscriptBox["m", "2"], ")"}], 
    RowBox[{"det", " ", "m"}]], TraditionalForm]],
  FormatType->TraditionalForm,
  FontVariations->{"Underline"->False},ExpressionUUID->
  "e431141d-cd63-0d47-87fd-11921eabf607"],
 StyleBox["                  g3 = det m\nThese invariants are designed such \
that if two gates have identical Makhlin invariants, they are locally \
equivalent. Conversely, distinct invariants imply distinct nonlocal actions. \
Importantly, Makhlin invariants compress a 4\[Times]4 unitary down to just \
three numbers\[LongDash]serving as a hash function for quantum gate identity \
modulo local noise.\n\n\t\t\t\t\t\t\t\
d(U)=\[DoubleVerticalBar]MakhlinInvariants(U)\[Minus]MakhlinInvariants(CNOT)\
\[DoubleVerticalBar]\n\t\t\t\t\t\t\t\nand filter for gates with \|01d451(\
\|01d448)<\|01d716, where \|01d716 is a small tolerance to account for \
numerical imprecision. This ensures we retain only gates that are \
functionally equivalent to CNOT, a canonical universal entangler.\n\nFrom a \
computer science perspective, this filtering process is essential for \
avoiding representation blowup and search inefficiency. Without Makhlin \
invariants, we\[CloseCurlyQuote]d be forced to test for local equivalence by \
brute-force optimization over local unitaries\[LongDash]a problem with a \
continuous search space and no closed-form solution. Makhlin invariants \
provide a constant-time fingerprint for local equivalence, enabling us to \
hash and group gates efficiently. In effect, they act as a \
collision-resistant function for quantum operations under local unitary \
equivalence, much like cryptographic hashes in classical computing. This \
transforms our infinite gate sampling process into a tractable and structured \
classification task. ",
  FontColor->RGBColor[
   0.5019607843137255, 0.5019607843137255, 0.5019607843137255]]
}], "Text",
 CellChangeTimes->{{3.9610274421654816`*^9, 3.961027632730423*^9}, 
   3.9610276792006264`*^9, {3.9610277576161575`*^9, 3.9610279024624443`*^9}, {
   3.9610280868674545`*^9, 3.961028164389847*^9}, {3.9610289168727245`*^9, 
   3.961028949819813*^9}, {3.9610290954326553`*^9, 3.9610290985464745`*^9}, {
   3.9610291392263756`*^9, 3.9610291601698017`*^9}, {3.9610568021530266`*^9, 
   3.9610568050847855`*^9}},ExpressionUUID->"48d609f7-86b8-844e-a8e0-\
d85a1effb8e1"],

Cell[BoxData[
 RowBox[{"\n", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"representativeTriples", "=", "discreteWeylChamber"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"XX", "=", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"YY", "=", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "I"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"I", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "I"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"ZZ", "=", 
     RowBox[{"KroneckerProduct", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"buildRepresentativeGate", "[", 
      RowBox[{"{", 
       RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
     RowBox[{"N", "[", 
      RowBox[{
       RowBox[{"MatrixExp", "[", 
        RowBox[{"I", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"c1", " ", "XX"}], "+", 
           RowBox[{"c2", " ", "YY"}], "+", 
           RowBox[{"c3", " ", "ZZ"}]}], ")"}]}], "]"}], ",", "20"}], "]"}]}], 
    ";"}], "\n", 
   RowBox[{
    RowBox[{"representativeGates", "=", 
     RowBox[{"buildRepresentativeGate", "/@", "representativeTriples"}]}], 
    ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"K", "=", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "/", 
        RowBox[{"Sqrt", "[", "2", "]"}]}], ")"}], "*", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", "I"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "I", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "I", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0", ",", "0", ",", 
          RowBox[{"-", "I"}]}], "}"}]}], "}"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"Kdag", "=", 
     RowBox[{"ConjugateTranspose", "[", "K", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"makhlinInvariants", "[", "U_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"M", ",", "m", ",", "g1", ",", "g2", ",", "g3"}], "}"}], ",", 
       RowBox[{
        RowBox[{"M", "=", 
         RowBox[{"Kdag", ".", "U", ".", "K"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"m", "=", 
         RowBox[{
          RowBox[{"Transpose", "[", "M", "]"}], ".", "M"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"g1", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Tr", "[", "m", "]"}], "^", "2"}], "/", 
          RowBox[{"Det", "[", "m", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g2", "=", 
         RowBox[{
          RowBox[{"Tr", "[", 
           RowBox[{"m", ".", "m"}], "]"}], "/", 
          RowBox[{"Det", "[", "m", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"g3", "=", 
         RowBox[{"Det", "[", "m", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"g1", ",", "g2", ",", "g3"}], "}"}], "//", "Chop"}]}]}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"cnot", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"targetInvariants", "=", 
     RowBox[{"makhlinInvariants", "[", "cnot", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"invariantDistance", "[", "u_", "]"}], ":=", 
     RowBox[{"Norm", "[", 
      RowBox[{
       RowBox[{"makhlinInvariants", "[", "u", "]"}], "-", 
       "targetInvariants"}], "]"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"universalGates", "=", 
     RowBox[{"Select", "[", 
      RowBox[{"representativeGates", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"invariantDistance", "[", "#", "]"}], "<", "1"}], "&"}]}], 
      "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.961057857922859*^9, 3.9610578579258556`*^9}, {
  3.9610579772126236`*^9, 3.9610579850251102`*^9}, {3.9610580479460297`*^9, 
  3.9610580586853657`*^9}, {3.9610580945161476`*^9, 3.961058123105503*^9}, {
  3.961058228660185*^9, 3.961058237338505*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"9168825d-5a11-7949-b022-dbbc4c0710fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "universalGates", "]"}]], "Input",
 CellChangeTimes->{{3.9609080942182903`*^9, 3.9609081099664135`*^9}, {
   3.960908160086067*^9, 3.9609081614631443`*^9}, 3.961029368390171*^9, {
   3.9610572489377193`*^9, 3.961057255855007*^9}, 3.9610573801873245`*^9},
 CellLabel->
  "In[117]:=",ExpressionUUID->"5072c60a-ca67-5d4d-bba3-054329be9e5d"],

Cell[BoxData["7"], "Output",
 CellChangeTimes->{
  3.9609081660896473`*^9, {3.961057223716797*^9, 3.961057225684618*^9}, 
   3.9610578413926353`*^9, {3.9610581098845367`*^9, 3.9610581430103436`*^9}, 
   3.9610637094424953`*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"4aceb18f-42f3-9c49-b0bb-730de78eba81"]
}, Open  ]],

Cell["\<\
The results show that there are 7 gates in our set that are universal. Since \
our earlier focus was on identifying whether a gate is universal by comparing \
its Makhlin invariants to those of CNOT, we can now refine our perspective to \
consider efficiency \[LongDash] how close a universal gate is to a \
\[OpenCurlyDoubleQuote]minimal\[CloseCurlyDoubleQuote] entangling gate in the \
Cartan space. Traditionally, researchers group gates by conjugacy classes, \
treating any pair of gates equivalent under local operations as functionally \
identical. However, for practical quantum circuit design, conjugacy class \
membership is not enough, we need to evaluate how close a gate lies to CNOT \
in Cartan coordinates, because this affects how easily and efficiently we can \
approximate it using native gates. To measure this, we use a Cartan distance \
metric:\
\>", "Text",
 CellChangeTimes->{{3.9609122585096607`*^9, 3.9609122589080563`*^9}, {
   3.9609293961506977`*^9, 3.9609294032952805`*^9}, 3.9610202813356133`*^9, {
   3.961056812688362*^9, 3.961056831101532*^9}, 3.961056975024412*^9, {
   3.9610584561684246`*^9, 
   3.9610585127264442`*^9}},ExpressionUUID->"9130c7de-3235-0140-a60c-\
17e15d5ddf6f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.96105697974082*^9, {3.9610584412592583`*^9, 3.9610584443700485`*^9}, {
   3.9610585150482025`*^9, 3.9610585161064568`*^9}, 
   3.9610647246809177`*^9},ExpressionUUID->"c9d31dd4-2648-7340-b958-\
7bc574cf9374"],

Cell["\<\
Measures how far a triple lies from the canonical CNOT location in the Weyl \
chamber\
\>", "CodeText",
 CellChangeTimes->{{3.9610585356097603`*^9, 3.9610585479381504`*^9}, {
  3.9610648814989014`*^9, 
  3.9610648822444077`*^9}},ExpressionUUID->"6d94d006-ac04-9b4c-a697-\
6f0c3ab6f525"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"buildRepresentativeGate", "[", 
     RowBox[{"{", 
      RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
    RowBox[{"MatrixExp", "[", 
     RowBox[{"I", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"c1", " ", "XX"}], "+", 
        RowBox[{"c2", " ", "YY"}], "+", 
        RowBox[{"c3", " ", "ZZ"}]}], ")"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"cartanDistance", "[", 
     RowBox[{"{", 
      RowBox[{"c1_", ",", "c2_", ",", "c3_"}], "}"}], "]"}], ":=", 
    RowBox[{"Norm", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"c1", "-", 
        RowBox[{"Pi", "/", "4"}]}], ",", "c2", ",", "c3"}], "}"}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"shortestTriple", "=", 
    RowBox[{
     RowBox[{"MinimalBy", "[", 
      RowBox[{"universalTriples", ",", "cartanDistance"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"mostEfficientGate", "=", 
    RowBox[{"buildRepresentativeGate", "[", "shortestTriple", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"MatrixForm", "[", "mostEfficientGate", "]"}], 
  "  "}], "\n"}], "Input",
 CellChangeTimes->{
  3.96105697974082*^9, {3.9610584412592583`*^9, 3.9610584443700485`*^9}, {
   3.9610585150482025`*^9, 3.9610585161064568`*^9}, {3.9610585661002216`*^9, 
   3.9610585668304386`*^9}, {3.961064331604109*^9, 3.9610643607199783`*^9}, {
   3.9610644640596027`*^9, 3.961064474769396*^9}, 3.9610646003652363`*^9, 
   3.961064722289196*^9, 3.961064754549185*^9, {3.961064884178858*^9, 
   3.961064935665846*^9}},ExpressionUUID->"a3e36c64-ee02-d248-b55f-\
2e5d6ea51c1e"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox["1", 
       SqrtBox["2"]], "0", "0", 
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]]},
     {"0", 
      FractionBox["1", 
       SqrtBox["2"]], 
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]], "0"},
     {"0", 
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]], 
      FractionBox["1", 
       SqrtBox["2"]], "0"},
     {
      FractionBox["\[ImaginaryI]", 
       SqrtBox["2"]], "0", "0", 
      FractionBox["1", 
       SqrtBox["2"]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.96106472625358*^9, 3.961064755241247*^9}, 
   3.9610649089844093`*^9},
 CellLabel->
  "Out[163]//MatrixForm=",ExpressionUUID->"66b4195c-77e8-2b45-9e3f-\
8dbe4c306812"]
}, Open  ]],

Cell["", "Text",
 CellChangeTimes->{
  3.961058452664583*^9},ExpressionUUID->"4c485526-0fda-d441-b45f-\
378d839d30e1"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{
  3.96105697974082*^9, {3.9610584412592583`*^9, 3.9610584427877254`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"1fcd877e-f43a-9e4f-8c75-f716c507bc23"],

Cell["\<\
The project shows that the  matrix returned, also known as the B gate is the \
most powerful and efficient universal two-qubit gate in the set studied. It \
is the closest gate to the canonical CNOT point in Cartan coordinates, which \
means it needs the least amount of entangling resources to achieve \
universality. This makes it highly practical for implementing any two-qubit \
operation with minimal overhead.The B gate\[CloseCurlyQuote]s matrix includes \
complex i terms in its off-diagonal elements, which give it strong entangling \
capabilities. These terms allow the gate to create maximal entanglement from \
certain input states. Maximal entanglement is essential for quantum \
algorithms and processes that rely on quantum correlations.

When decomposed into basic gates like CNOT and single-qubit rotations, the B \
gate typically requires fewer total gates and results in shallower circuits. \
This reduction in gate count and circuit depth improves performance on real \
quantum devices by lowering noise and error accumulation during execution.

This gate can be used as a native gate on quantum hardware to optimize \
circuit compilation. Implementing the B gate directly can lead to faster \
quantum computations since it closely approximates the ideal entangling gate \
needed for universal control over two qubits.

In conclusion, the B gate stands out as the most efficient universal \
two-qubit gate, combining strong entangling power with minimal resource \
requirements. It offers a clear advantage for building practical, \
high-fidelity quantum circuits and advancing the development of scalable \
quantum computing.\
\>", "Text",
 CellChangeTimes->{{3.9610587058871975`*^9, 3.9610587083303185`*^9}, {
  3.9610588112791023`*^9, 3.9610588332060833`*^9}, {3.9610600082119846`*^9, 
  3.961060046065508*^9}, {3.9610643831509495`*^9, 
  3.961064397153097*^9}},ExpressionUUID->"749322e7-ce60-4140-9286-\
64d2fc3f7011"],

Cell["", "Text",
 CellChangeTimes->{{3.9610587058871975`*^9, 3.9610587083303185`*^9}, {
  3.9610588112791023`*^9, 3.9610588332060833`*^9}, {3.9610600082119846`*^9, 
  3.961060046065508*^9}, {3.9610643831509495`*^9, 
  3.9610643954741364`*^9}},ExpressionUUID->"78b964ab-54d4-9c4a-8e23-\
ccc459bb56fd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1080, 579.75},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>0.8 Inherited,
FrontEndVersion->"14.2 for Linux x86 (64-bit) (March 16, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"8207e191-06d1-1445-a516-24e4f54ed40e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 455, 7, 52, "Section",ExpressionUUID->"4441f486-3a6f-dd4a-ad5c-8d763e46bea9"],
Cell[CellGroupData[{
Cell[1034, 31, 2215, 38, 182, "Section",ExpressionUUID->"7625f585-f566-b64d-be4e-90f18ae2128d"],
Cell[3252, 71, 2955, 58, 133, "CodeText",ExpressionUUID->"896d8f2c-acdd-8d45-b93f-a30a0c36f288"],
Cell[6210, 131, 2493, 61, 87, "Input",ExpressionUUID->"7dc1f08b-337e-0e48-9cb1-613f6d9bfbfd"],
Cell[8706, 194, 447, 7, 29, "CodeText",ExpressionUUID->"7489f5c7-3391-8e47-bdef-85bc15a70951"],
Cell[9156, 203, 956, 24, 55, "Input",ExpressionUUID->"474b0593-cf83-c142-b9b9-d48056fcb144"],
Cell[10115, 229, 545, 8, 29, "CodeText",ExpressionUUID->"ba1c810e-270d-4b43-90f3-bb23d903095e"],
Cell[10663, 239, 1681, 47, 103, "Input",ExpressionUUID->"03157078-b1e5-7146-8f3a-4a60e4d8df24"],
Cell[12347, 288, 481, 8, 29, "CodeText",ExpressionUUID->"9e6f7a97-7844-2a43-98fa-9701beb2a72f"],
Cell[12831, 298, 1591, 40, 167, "Input",ExpressionUUID->"1f32e7c3-4db5-7b4c-a115-4ccc40cb5862"],
Cell[14425, 340, 364, 6, 45, "CodeText",ExpressionUUID->"7679ce57-55a6-e24f-8d03-8d6631fdffbc"],
Cell[14792, 348, 2953, 69, 194, "Input",ExpressionUUID->"fc868ea9-29e8-e74d-aa1d-520623f55899"],
Cell[17748, 419, 341, 6, 29, "CodeText",ExpressionUUID->"fca3da9a-bc47-4046-8d3b-8fd4fea268b4"],
Cell[18092, 427, 5592, 138, 271, "Input",ExpressionUUID->"ecc68abe-4c56-3946-9477-15a6fdda0ebd"],
Cell[23687, 567, 248, 5, 29, "CodeText",ExpressionUUID->"d3638a0d-90d2-9d4e-a40d-edc97692ac09"],
Cell[CellGroupData[{
Cell[23960, 576, 1331, 36, 108, "Input",ExpressionUUID->"66f49b63-4c15-5040-91d2-4183f28e1a50"],
Cell[25294, 614, 100767, 1946, 2816, "Output",ExpressionUUID->"78639079-2c36-5e45-9edc-33fd547131c9"]
}, Open  ]],
Cell[126076, 2563, 278, 5, 29, "CodeText",ExpressionUUID->"4ec893b7-c916-ec49-8550-00b902057af4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126391, 2573, 277, 6, 44, "Section",ExpressionUUID->"f557071c-692e-7e43-9228-cca8a8d11906"],
Cell[126671, 2581, 1598, 23, 97, "Text",ExpressionUUID->"944d5393-3857-ea41-927e-a0746cbfdd89"],
Cell[128272, 2606, 1042, 25, 89, "Input",ExpressionUUID->"5670847d-93ef-9d4b-81ec-b057f30a82cf"],
Cell[129317, 2633, 760, 19, 25, "Input",ExpressionUUID->"b0bd0b48-38b7-2743-8727-b8c47432bff4"],
Cell[130080, 2654, 472, 8, 27, "Text",ExpressionUUID->"d02db296-78ce-2f4f-b307-892795b293d7"],
Cell[CellGroupData[{
Cell[130577, 2666, 525, 12, 18, "Print",ExpressionUUID->"1ee8d1ba-548b-7346-9aa1-c36655ce6e7c"],
Cell[131105, 2680, 523, 12, 18, "Print",ExpressionUUID->"81a9462e-22c1-f547-8d34-91daf92ae664"],
Cell[131631, 2694, 525, 12, 18, "Print",ExpressionUUID->"3ad0100b-70f5-f946-bdb5-2b7d8c152b7d"],
Cell[132159, 2708, 523, 12, 18, "Print",ExpressionUUID->"45d9e004-d894-854b-b048-fc3d4811e482"],
Cell[132685, 2722, 523, 12, 18, "Print",ExpressionUUID->"2eba8131-5a12-2542-a673-63d7b0c536c2"],
Cell[133211, 2736, 523, 12, 18, "Print",ExpressionUUID->"67a371e4-96cf-9d48-b131-ddd2245eda11"],
Cell[133737, 2750, 525, 12, 18, "Print",ExpressionUUID->"76c79b36-93df-8c48-b5c5-d9e0c47a30c5"],
Cell[134265, 2764, 523, 12, 18, "Print",ExpressionUUID->"353980d0-b46c-674d-8dff-8d6e045aef51"],
Cell[134791, 2778, 525, 12, 18, "Print",ExpressionUUID->"8448820f-8140-d64b-8c04-e28fda78c133"],
Cell[135319, 2792, 525, 12, 18, "Print",ExpressionUUID->"06e6dddc-b824-bf45-80ee-bdf9f4d0998b"],
Cell[135847, 2806, 525, 12, 18, "Print",ExpressionUUID->"24cdbe73-c346-c048-88ab-c4d630010643"],
Cell[136375, 2820, 527, 12, 18, "Print",ExpressionUUID->"da7380e4-cc30-5c48-a5a4-42598f145475"],
Cell[136905, 2834, 525, 12, 18, "Print",ExpressionUUID->"6ac562fe-5722-2d43-8767-9d5539af2be7"],
Cell[137433, 2848, 527, 12, 18, "Print",ExpressionUUID->"698fa8e5-20e5-cb4f-b4f5-f306f9015ff4"],
Cell[137963, 2862, 525, 12, 18, "Print",ExpressionUUID->"786391e3-6b11-4949-aae5-6f3d91f38ef1"],
Cell[138491, 2876, 525, 12, 18, "Print",ExpressionUUID->"43f71dc8-6cd0-194c-83ea-d0dde02d2e7f"],
Cell[139019, 2890, 525, 12, 18, "Print",ExpressionUUID->"6c3a2486-cc7a-6c4a-b30e-49ea3a196c79"],
Cell[139547, 2904, 525, 12, 18, "Print",ExpressionUUID->"f1ad824f-6b3f-4a4a-822d-b233cc270dea"],
Cell[140075, 2918, 525, 12, 18, "Print",ExpressionUUID->"7b58df49-b041-fb43-81d3-43d428ad5725"],
Cell[140603, 2932, 525, 12, 18, "Print",ExpressionUUID->"fec772c3-07fc-8649-91a5-72218efa9455"],
Cell[141131, 2946, 527, 12, 18, "Print",ExpressionUUID->"fe0db9b9-22d5-524e-98fb-c3738a2c5c0b"],
Cell[141661, 2960, 527, 12, 18, "Print",ExpressionUUID->"ab4663f4-132f-d64a-b5df-1c95554cac11"],
Cell[142191, 2974, 525, 12, 18, "Print",ExpressionUUID->"469360dd-34b2-ff44-8772-bf91385739d4"],
Cell[142719, 2988, 527, 12, 18, "Print",ExpressionUUID->"f501e682-80fb-2a4c-b843-1cc4b2aa9aaf"]
}, Open  ]],
Cell[143261, 3003, 1008, 18, 82, "Text",ExpressionUUID->"750b82bb-79c3-0243-a566-0cbce78ad2e6"],
Cell[144272, 3023, 461, 11, 40, "Input",ExpressionUUID->"aab7b26d-073a-4748-923d-8a02da4312ae"],
Cell[144736, 3036, 346, 6, 23, "Input",ExpressionUUID->"cbfee207-0af5-c041-9995-61fec95923e9"],
Cell[145085, 3044, 337, 6, 23, "Input",ExpressionUUID->"c57f47dd-c092-5742-b3f5-43b9e6fef511"],
Cell[145425, 3052, 471, 7, 29, "CodeText",ExpressionUUID->"570bee4f-6861-9b45-9193-da9a3766a033"],
Cell[145899, 3061, 966, 26, 23, "Input",ExpressionUUID->"cc862c4a-f60d-4547-ae07-ab5612ca1400"],
Cell[146868, 3089, 646, 9, 61, "CodeText",ExpressionUUID->"29872bd8-695d-2944-9b3a-f3ccaa252ad3"],
Cell[147517, 3100, 4085, 97, 223, "Input",ExpressionUUID->"3b15841c-c238-3d44-9cd6-1bb4c3ddc7f9"],
Cell[151605, 3199, 660, 9, 45, "CodeText",ExpressionUUID->"ef19e57a-ac2d-664b-a1ee-0bf1909b2e8d"],
Cell[CellGroupData[{
Cell[152290, 3212, 502, 12, 18, "Print",ExpressionUUID->"5b99279d-de97-204d-be70-000c27beab64"],
Cell[152795, 3226, 504, 12, 18, "Print",ExpressionUUID->"279719c6-2ee2-a74b-b410-7ecad609070d"],
Cell[153302, 3240, 502, 12, 18, "Print",ExpressionUUID->"05957f2a-dddf-8a4b-bdec-11406ed3e94d"]
}, Open  ]],
Cell[153819, 3255, 1275, 18, 45, "CodeText",ExpressionUUID->"181cff1b-3814-ba4d-8bc4-87377cc67db3"],
Cell[155097, 3275, 383, 7, 39, "Subsection",ExpressionUUID->"f2bb7f75-44be-c642-955a-82ef8a998ee8"],
Cell[155483, 3284, 5618, 122, 344, "Subsection",ExpressionUUID->"4f41b789-7a84-1140-8f5b-7aba652840fa"],
Cell[CellGroupData[{
Cell[161126, 3410, 6409, 144, 273, "Subsection",ExpressionUUID->"3a39c164-e5f2-1c49-806b-bd8437fcfc6e"],
Cell[167538, 3556, 4171, 99, 32, "Subsubsubsubsection",ExpressionUUID->"5da457c2-f3e3-e741-a2de-3728af6dc5a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171746, 3660, 2871, 45, 167, "Subsection",ExpressionUUID->"2cbebcb3-f84c-0243-81ba-11ffd7da3ab1"],
Cell[174620, 3707, 1004, 17, 60, "CodeText",ExpressionUUID->"0e37dcca-58d6-db44-8334-e0a7b713d208"],
Cell[175627, 3726, 1434, 39, 68, "Input",ExpressionUUID->"ede1138c-0913-e045-b257-86533df6fa6b"],
Cell[177064, 3767, 344, 7, 44, "CodeText",ExpressionUUID->"6f1f0c90-a768-db42-b988-09624a0c9f6c"],
Cell[177411, 3776, 2606, 67, 113, "Input",ExpressionUUID->"2f22082e-6508-f74f-9faa-acc1ed196f8a"],
Cell[180020, 3845, 366, 7, 44, "CodeText",ExpressionUUID->"7a669b7f-bec5-044e-b9ee-c6e64cf97f3f"],
Cell[180389, 3854, 1588, 44, 83, "Input",ExpressionUUID->"e3119324-b2ca-0749-9d0b-69401a59d3f6"],
Cell[181980, 3900, 588, 14, 44, "CodeText",ExpressionUUID->"489cfe1b-f0a5-6949-8e12-6e044ab4d356"],
Cell[CellGroupData[{
Cell[182593, 3918, 4361, 103, 265, "Input",ExpressionUUID->"0f6ba934-78bd-3649-abbc-5a469cff47ca"],
Cell[186957, 4023, 261337, 5101, 477, "Output",ExpressionUUID->"b8c789d4-c05e-824d-bd51-e01927a9a8d2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[448343, 9130, 2189, 47, 138, "Subsection",ExpressionUUID->"6ac089d5-4e40-8541-83bc-5dc04198db67"],
Cell[450535, 9179, 1185, 32, 22, "Input",ExpressionUUID->"e4279c24-a3d2-ca46-bbc4-bd10ea6f8a45"],
Cell[451723, 9213, 240, 6, 28, "CodeText",ExpressionUUID->"56a242f2-c7de-4b43-a424-b267d0db28e9"],
Cell[451966, 9221, 1377, 36, 68, "Input",ExpressionUUID->"0f675262-3854-f045-a145-eecdc08c0b08"],
Cell[453346, 9259, 260, 6, 28, "CodeText",ExpressionUUID->"5e255d89-7b7d-374e-b6bc-8a4927c0c9a7"],
Cell[CellGroupData[{
Cell[453631, 9269, 964, 23, 37, "Input",ExpressionUUID->"667a8c06-beb6-a84c-9638-b01026616fab"],
Cell[454598, 9294, 18227, 516, 1338, "Output",ExpressionUUID->"63e0ab66-616a-d545-b54f-4123b2a14681"]
}, Open  ]],
Cell[472840, 9813, 241, 4, 26, "Text",ExpressionUUID->"f64ed77f-63fa-c44f-b535-9c9a9d5f2d88"]
}, Open  ]],
Cell[473096, 9820, 408, 8, 42, "Subsection",ExpressionUUID->"4125cf57-aa06-be48-8e22-a2c8c159850a"],
Cell[CellGroupData[{
Cell[473529, 9832, 5647, 127, 438, "Subsection",ExpressionUUID->"68cff275-9baa-0442-95bd-801e4a144b4d"],
Cell[479179, 9961, 352, 5, 32, "Text",ExpressionUUID->"37cb895c-d343-6e43-9bf0-078dbce33db3"],
Cell[479534, 9968, 1505, 23, 193, "Text",ExpressionUUID->"97852299-77c3-644d-979e-8fb7c8f52d5a"],
Cell[481042, 9993, 5757, 105, 549, "Text",ExpressionUUID->"e9038587-8e3b-b940-b6ef-c5615b7c7bbf"],
Cell[486802, 10100, 203, 3, 28, "CodeText",ExpressionUUID->"6b4cab5a-f9f2-fd4b-ab65-9c097eca27f0"],
Cell[487008, 10105, 1102, 34, 68, "Input",ExpressionUUID->"4ee76737-f9f8-0741-a61b-b6c2555ea2d1"],
Cell[488113, 10141, 196, 3, 28, "CodeText",ExpressionUUID->"fcc121df-e70a-cc47-b6b2-d28058db6df9"],
Cell[488312, 10146, 1096, 27, 37, "Input",ExpressionUUID->"caff2e88-e08f-c14f-91a4-3e738088b83a"],
Cell[489411, 10175, 406, 11, 28, "CodeText",ExpressionUUID->"693feb77-36d8-7045-871c-63d86d518c80"],
Cell[489820, 10188, 1432, 34, 83, "Input",ExpressionUUID->"bc11c7b8-0dc7-7041-a970-f5444eb16eed"],
Cell[491255, 10224, 272, 6, 28, "CodeText",ExpressionUUID->"6654f8fe-2487-6f45-b574-e1cbf09929dd"],
Cell[491530, 10232, 770, 17, 37, "Input",ExpressionUUID->"c4efd8ee-69c6-f644-982a-cfa195392265"],
Cell[492303, 10251, 204, 3, 28, "CodeText",ExpressionUUID->"a74ca785-b0dc-444f-ab27-472757a3676b"],
Cell[492510, 10256, 1195, 26, 22, "Input",ExpressionUUID->"62d5ab74-464c-a147-a50e-f95d54c219e5"],
Cell[493708, 10284, 243, 4, 28, "CodeText",ExpressionUUID->"1131d6db-91b7-0948-a436-d615316397a6"],
Cell[493954, 10290, 1043, 23, 22, "Input",ExpressionUUID->"028d92ca-8a68-254e-b643-1f2db082acd8"],
Cell[495000, 10315, 164, 3, 26, "Text",ExpressionUUID->"32d46792-285d-5748-9b94-771e41ad745f"],
Cell[CellGroupData[{
Cell[495189, 10322, 1650, 39, 37, "Input",ExpressionUUID->"24e516d3-e698-4f49-a216-33500f29a592"],
Cell[496842, 10363, 41944, 703, 229, 1951, 46, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"49251a6a-66cd-5849-889a-1c6e667d46af"]
}, Open  ]],
Cell[538801, 11069, 188, 3, 26, "Text",ExpressionUUID->"9cf9cc2b-1df5-b743-8b5f-68370d88f49f"],
Cell[CellGroupData[{
Cell[539014, 11076, 3284, 87, 250, "Input",ExpressionUUID->"9c87dab6-4312-bb49-9500-4543b0f7fd9b"],
Cell[CellGroupData[{
Cell[542323, 11167, 885, 21, 17, "Print",ExpressionUUID->"d17a6331-b1be-8a4b-a7ca-ea08fb4ce8ef"],
Cell[543211, 11190, 432, 10, 17, "Print",ExpressionUUID->"645e23ff-7227-4145-b1fa-ea61e9650d10"],
Cell[543646, 11202, 887, 21, 17, "Print",ExpressionUUID->"e98d0f85-4783-bc45-acab-c7959b5b0ef6"],
Cell[544536, 11225, 430, 10, 17, "Print",ExpressionUUID->"f07ac293-f066-8b4a-92f8-80bfac92fd4b"],
Cell[544969, 11237, 497, 13, 26, "Print",ExpressionUUID->"74ede426-fbf8-1d4f-9570-c4fed92028cf"],
Cell[545469, 11252, 605, 17, 28, "Print",ExpressionUUID->"3c969945-a8aa-6243-82f5-b00ec04694ec"],
Cell[546077, 11271, 408, 10, 17, "Print",ExpressionUUID->"ff92ac87-e091-6346-8449-2ba5a9c00a07"],
Cell[546488, 11283, 408, 10, 17, "Print",ExpressionUUID->"97ad76ce-729a-d04a-b81a-d5a84ba241de"],
Cell[546899, 11295, 664, 19, 28, "Print",ExpressionUUID->"ee2bc49b-0b87-cb44-95ee-18481f3eb4f0"],
Cell[547566, 11316, 409, 10, 17, "Print",ExpressionUUID->"47b201a2-e19d-6348-add0-9c6b0f325c62"],
Cell[547978, 11328, 409, 10, 17, "Print",ExpressionUUID->"61ad3338-c1cc-de4b-b2e0-0f31c6db3f59"]
}, Open  ]]
}, Open  ]],
Cell[548414, 11342, 523, 13, 28, "CodeText",ExpressionUUID->"5ee0d1ee-2e21-2240-928d-aa9b51e956d0"],
Cell[548940, 11357, 1037, 21, 22, "Input",ExpressionUUID->"3f378f47-0c5f-674e-9c86-afc8786b1f6a"],
Cell[549980, 11380, 176, 3, 28, "CodeText",ExpressionUUID->"de35c66b-6456-844e-a84a-b60eea954a64"],
Cell[CellGroupData[{
Cell[550181, 11387, 1301, 25, 68, "Input",ExpressionUUID->"d4f18cea-3d3c-e243-987a-13453742791f"],
Cell[551485, 11414, 373, 9, 17, "Print",ExpressionUUID->"084306e5-cfa3-ae47-897c-b01d3e2e7d47"]
}, Open  ]],
Cell[CellGroupData[{
Cell[551895, 11428, 1780, 41, 52, "Input",ExpressionUUID->"80df8654-36d5-0440-8873-50d88c3c9bb9"],
Cell[553678, 11471, 5356, 177, 132, "Output",ExpressionUUID->"1256d20d-5b64-994d-a6dd-cb1326489b7c"]
}, Open  ]],
Cell[559049, 11651, 1308, 23, 131, "Text",ExpressionUUID->"6e401287-f53d-9c42-8e6d-789bfab05040"]
}, Open  ]],
Cell[CellGroupData[{
Cell[560394, 11679, 240, 4, 42, "Subsection",ExpressionUUID->"0ef8370e-0d21-8042-bf15-9af374517491"],
Cell[CellGroupData[{
Cell[560659, 11687, 936, 14, 114, "Subsubsection",ExpressionUUID->"f0fba59b-1c79-5549-a8c5-d73a2e31fc1e"],
Cell[CellGroupData[{
Cell[561620, 11705, 4589, 115, 189, "Input",ExpressionUUID->"7b72d64d-aef2-f74c-a654-e9f879f5dcf3"],
Cell[566212, 11822, 359, 9, 34, "Output",ExpressionUUID->"68c98c6c-65a6-9446-ab79-96192202103d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[566608, 11836, 5759, 140, 570, "Input",ExpressionUUID->"517b1747-4052-a74c-9d77-f0defe09d95e"],
Cell[572370, 11978, 5736, 140, 573, "Output",ExpressionUUID->"31469b54-b49e-9547-83a7-95e29afcb37c"]
}, Open  ]],
Cell[578121, 12121, 173, 2, 22, "Input",ExpressionUUID->"a77ea4d6-5f4c-e347-bfce-80a98babf157"],
Cell[578297, 12125, 801, 13, 76, "CodeText",ExpressionUUID->"1949f63b-eb8a-504a-beff-533eabbb2cf6"],
Cell[579101, 12140, 284, 5, 32, "Text",ExpressionUUID->"f5872037-3aff-d54c-8cc4-58f8e4873cae"],
Cell[579388, 12147, 1352, 20, 131, "Text",ExpressionUUID->"3dd408c6-6253-2e49-ae65-d90db765e661"],
Cell[580743, 12169, 3136, 80, 83, "Input",ExpressionUUID->"037bd5c1-5cb7-9344-896d-d87516491316"],
Cell[583882, 12251, 382, 7, 28, "CodeText",ExpressionUUID->"81757233-9504-2846-8772-59f4f576c5ee"],
Cell[584267, 12260, 1900, 57, 83, "Input",ExpressionUUID->"79976157-6831-3f4e-bda6-72c666b3eaee"],
Cell[586170, 12319, 161, 3, 28, "CodeText",ExpressionUUID->"913d6498-2ca9-a84a-bdff-4100403c41a1"],
Cell[586334, 12324, 5822, 162, 356, "Input",ExpressionUUID->"9009233d-59b9-d64e-b3e6-9793565ac87c"],
Cell[592159, 12488, 299, 6, 28, "CodeText",ExpressionUUID->"c0afbd85-e5ff-2342-a22c-182456af995d"],
Cell[CellGroupData[{
Cell[592483, 12498, 2345, 61, 159, "Input",ExpressionUUID->"660f4448-c9eb-0447-b9eb-bdf0576e23ee"],
Cell[594831, 12561, 17075, 449, 335, "Output",ExpressionUUID->"7bb9448c-eba7-3846-9c96-0de17f3fafb0"]
}, Open  ]],
Cell[611921, 13013, 279, 5, 28, "CodeText",ExpressionUUID->"1e0d05b9-2b92-614c-9524-eb5342b8b3da"],
Cell[612203, 13020, 458, 7, 22, "Input",ExpressionUUID->"ac3a046c-4964-654e-91ca-2f84e62a06ee"],
Cell[612664, 13029, 368, 8, 74, "Text",ExpressionUUID->"299009d4-a7a4-0c41-9b0d-1200d8a501e6"],
Cell[613035, 13039, 1331, 24, 114, "Text",ExpressionUUID->"7251daaa-4a93-844f-82fb-e422a21fe65f"],
Cell[614369, 13065, 4429, 93, 347, "Text",ExpressionUUID->"48d609f7-86b8-844e-a8e0-d85a1effb8e1"],
Cell[618801, 13160, 5790, 166, 402, "Input",ExpressionUUID->"9168825d-5a11-7949-b022-dbbc4c0710fb"],
Cell[CellGroupData[{
Cell[624616, 13330, 375, 6, 22, "Input",ExpressionUUID->"5072c60a-ca67-5d4d-bba3-054329be9e5d"],
Cell[624994, 13338, 310, 6, 25, "Output",ExpressionUUID->"4aceb18f-42f3-9c49-b0bb-730de78eba81"]
}, Open  ]],
Cell[625319, 13347, 1223, 19, 96, "Text",ExpressionUUID->"9130c7de-3235-0140-a60c-17e15d5ddf6f"],
Cell[626545, 13368, 259, 5, 22, "Input",ExpressionUUID->"c9d31dd4-2648-7340-b958-7bc574cf9374"],
Cell[626807, 13375, 296, 7, 28, "CodeText",ExpressionUUID->"6d94d006-ac04-9b4c-a697-6f0c3ab6f525"],
Cell[CellGroupData[{
Cell[627128, 13386, 1827, 49, 159, "Input",ExpressionUUID->"a3e36c64-ee02-d248-b55f-2e5d6ea51c1e"],
Cell[628958, 13437, 1130, 38, 104, "Output",ExpressionUUID->"66b4195c-77e8-2b45-9e3f-8dbe4c306812"]
}, Open  ]],
Cell[630103, 13478, 118, 3, 26, "Text",ExpressionUUID->"4c485526-0fda-d441-b45f-378d839d30e1"],
Cell[630224, 13483, 203, 4, 22, "Input",ExpressionUUID->"1fcd877e-f43a-9e4f-8c75-f716c507bc23"],
Cell[630430, 13489, 1951, 32, 253, "Text",ExpressionUUID->"749322e7-ce60-4140-9286-64d2fc3f7011"],
Cell[632384, 13523, 300, 5, 26, "Text",ExpressionUUID->"78b964ab-54d4-9c4a-8e23-ccc459bb56fd"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

