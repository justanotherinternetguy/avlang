(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   2260736,      42118]
NotebookOptionsPosition[   2255999,      42032]
NotebookOutlinePosition[   2256421,      42049]
CellTagsIndexPosition[   2256378,      42046]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
I\[CloseCurlyQuote]m computationally generating words that are the \
\[OpenCurlyDoubleQuote]average\[CloseCurlyDoubleQuote] of the same word in a \
bunch of different languages. I\[CloseCurlyQuote]m looking at the \
pronunciations and spelling of different words. Is there any way to generate \
an \[OpenCurlyDoubleQuote]average\[CloseCurlyDoubleQuote] word given the same \
word in two languages? Let\[CloseCurlyQuote]s start with the Spanish and \
French translation of \[OpenCurlyDoubleQuote]fish\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.9602822024011707`*^9, 3.960282246937089*^9}, 
   3.960282294234763*^9, {3.9602823359583473`*^9, 3.96028240188913*^9}, {
   3.960282931463149*^9, 
   3.9602829382861557`*^9}},ExpressionUUID->"2227085f-80b7-4b90-b27f-\
2eb6d8c42935"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rawTranslations", " ", "=", " ", 
   RowBox[{"KeyValueMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#1", "->", 
       RowBox[{"First", "[", "#2", "]"}]}], "&"}], ",", 
     RowBox[{"WordTranslation", "[", 
      RowBox[{"\"\<fish\>\"", ",", " ", "All"}], "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.960069316416398*^9, 3.960069321616056*^9}, {
  3.96006938608705*^9, 3.960069461730592*^9}, {3.960069499133286*^9, 
  3.960069500455065*^9}, {3.96006954171968*^9, 3.960069553058988*^9}, {
  3.960105082663083*^9, 3.960105083135532*^9}, {3.960239778620843*^9, 
  3.9602397806037292`*^9}, {3.9602398149686117`*^9, 3.960239815599966*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"3c5a1a4e-fb67-41f4-a066-4a5741d3b6ec"],

Cell[CellGroupData[{

Cell[BoxData["rawTranslations"], "Input",
 CellChangeTimes->{{3.960069523949654*^9, 3.960069525116569*^9}, 
   3.960069556699833*^9},
 CellLabel->"In[87]:=",ExpressionUUID->"03fac5f5-d962-416d-9f16-d079d6adf5f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    TemplateBox[{"\"Mandarin Chinese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ChineseMandarin::279r4\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ChineseMandarin::279r4\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:9b5a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Hindi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Hindi::9858j\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Hindi::9858j\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:091b\:0932\:0940\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Spanish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Spanish::77gfp\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Spanish::77gfp\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"pez\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Russian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Russian::36x4m\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Russian::36x4m\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0440\:044b\:0431\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Indonesian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Indonesian::473fb\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Indonesian::473fb\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"ikan\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Portuguese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Portuguese::72qq5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Portuguese::72qq5\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"peixe\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Bengali\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Bengali::3wcm6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Bengali::3wcm6\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:09ae\:09be\:099b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Arabic\"", "\"macrolanguage\""}, "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Arabic::3gqbv\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Arabic::3gqbv\\\"]\"", "\"language\""},
     "Entity"], 
    "\[Rule]", "\<\"\:0633\:064e\:0645\:064e\:0643\:064e\:0629\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Malay\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"MalayColloquial::33t85\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"MalayColloquial::33t85\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"ikan\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Japanese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Japanese::y9r37\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Japanese::y9r37\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:5589\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"French\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"French::367gk\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"French::367gk\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"poisson\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"German\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"German::8jz29\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"German::8jz29\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"Fisch\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Urdu\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Urdu::3b357\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Urdu::3b357\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0645\:0686\:0647\:0644\:06cc\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Javanese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Javanese::25jfw\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Javanese::25jfw\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"iwak\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Turkish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Turkish::5d235\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Turkish::5d235\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"bal\[DotlessI]k\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Telugu\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Telugu::38nnp\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Telugu::38nnp\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0c1a\:0c47\:0c2a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Marathi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Marathi::8b536\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Marathi::8b536\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:092e\:093e\:0938\:093e\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Vietnamese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Vietnamese::gw2r8\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Vietnamese::gw2r8\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"ca\:0341\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Korean\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Korean::yz98n\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Korean::yz98n\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:bb3c\:ace0\:ae30\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tamil\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tamil::423bw\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tamil::423bw\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0bae\:0bc0\:0ba9\:0bcd\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Thai\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Thai::2ckfs\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Thai::2ckfs\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0e1b\:0e25\:0e32\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Italian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Italian::39fbj\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Italian::39fbj\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"pesce\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Yue Chinese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ChineseYue::4wggm\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ChineseYue::4wggm\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:9c7c\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Swahili\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Swahili::7j7v6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Swahili::7j7v6\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"samaki\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Northern Pashto\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"PashtoNorthern::p7983\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"PashtoNorthern::p7983\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:067c\:067e\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Gujarati\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Gujarati::2gmjk\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Gujarati::2gmjk\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0aae\:0abe\:0a9b\:0ab2\:0ac0\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Polish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Polish::q5362\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Polish::q5362\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ryba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Ukrainian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Ukrainian::9qftq\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Ukrainian::9qftq\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0440\:0438\:0431\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Hausa\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Hausa::pdr74\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Hausa::pdr74\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"kifi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Xiang Chinese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ChineseXiang::6mm3m\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ChineseXiang::6mm3m\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"yu\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Malayalam\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Malayalam::24c4b\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Malayalam::24c4b\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0d2e\:0d24\:0d4d\:0d38\:0d02\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kannada\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kannada::7t74c\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kannada::7t74c\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0cae\:0cbf\:0cd5\:0ca8\:0cc1\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Burmese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Burmese::py4f6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Burmese::py4f6\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:1004\:102b\:1038\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Oriya\"", "\"macrolanguage\""}, "EntityLabelSublabel"], 
      
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"OriyaMacrolanguage::k2649\""}], "]"}],
       "\"Entity[\\\"Language\\\", \\\"OriyaMacrolanguage::k2649\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0b2e\:0b3e\:0b1b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Hakka Chinese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ChineseHakka::875d9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ChineseHakka::875d9\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:9b5a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Panjabi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Panjabi::w5439\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Panjabi::w5439\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0645\:0686\:0647\:06cc\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Sundanese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Sundanese::2374p\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Sundanese::2374p\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"lauk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Bhojpuri\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Bhojpuri::3w4q3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Bhojpuri::3w4q3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:091b\:0930\:0940\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Maithili\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Maithili::3mwzp\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Maithili::3mwzp\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:093e\:091b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"South Azerbaijani\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"AzerbaijaniSouth::75d85\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"AzerbaijaniSouth::75d85\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"bal\[DotlessI]q\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Romanian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Romanian::q8y74\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Romanian::q8y74\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"pe\:015fte\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tagalog\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tagalog::5xjct\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tagalog::5xjct\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"isda\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Dutch\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Dutch::6dz65\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Dutch::6dz65\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"vis\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Sindhi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Sindhi::pmz76\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Sindhi::pmz76\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0645\:0687\:064a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Cebuano\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Cebuano::fm6g6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Cebuano::fm6g6\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"isda\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Igbo\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Igbo::jv2qd\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Igbo::jv2qd\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"azu\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Amharic\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Amharic::3q552\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Amharic::3q552\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:12d3\:1223\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Nepali\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Nepali::j75c8\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Nepali::j75c8\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:093e\:091b\:093e\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Assamese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Assamese::h33np\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Assamese::h33np\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:09ae\:09be\:099b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Hungarian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Hungarian::px9y6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Hungarian::px9y6\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"hal\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Madurese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Madurese::mq826\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Madurese::mq826\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"juko'\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Khmer\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Khmer::bw44p\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Khmer::bw44p\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:179a\:178f\:17b8\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Marwari\"", "\"macrolanguage\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"MarwariMacrolanguage::33btp\""}], 
        "]"}], "\"Entity[\\\"Language\\\", \
\\\"MarwariMacrolanguage::33btp\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:091b\:0933\:0940\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Adamawa Fulfulde\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"FulfuldeAdamawa::b32zb\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"FulfuldeAdamawa::b32zb\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"liingu\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Magahi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Magahi::9b4dn\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Magahi::9b4dn\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:091b\:0932\:0940\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Somali\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Somali::3c534\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Somali::3c534\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"kalluun\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Modern Greek\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ModernGreek::cm6sp\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ModernGreek::cm6sp\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\[Psi]\:03ac\[Rho]\[Iota]\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Serbian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Serbian::9593r\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Serbian::9593r\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"riba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Czech\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Czech::4z65s\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Czech::4z65s\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ryba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Shona\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Shona::5jsw3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Shona::5jsw3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"hove\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Dari\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Dari::7592r\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Dari::7592r\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0645\:0627\:0647\:06cc\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Qiubei Zhuang\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ZhuangQiubei::k33c7\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ZhuangQiubei::k33c7\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"bla\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Zulu\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Zulu::2wwvn\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Zulu::2wwvn\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"inhlazi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Nyanja\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Nyanja::x5462\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Nyanja::x5462\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"nsomba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Lombard\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Lombard::ybdv6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Lombard::ybdv6\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"pes\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Belarusian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Belarusian::29m84\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Belarusian::29m84\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0440\:044b\:0431\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Bulgarian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Bulgarian::xmr5j\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Bulgarian::xmr5j\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0440\:0438\:0431\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Swedish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Swedish::557qk\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Swedish::557qk\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"fisk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Akan\"", "\"macrolanguage\""}, "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Akan::67m2j\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Akan::67m2j\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"nsuo mu nam\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kazakh\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kazakh::dm2f4\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kazakh::dm2f4\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:049b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Iloko\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Iloko::s7mhj\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Iloko::s7mhj\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"lames\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Uighur\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Uighur::32bkb\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Uighur::32bkb\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0435\:043b\:0438\:049b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kinyarwanda\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kinyarwanda::3j337\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kinyarwanda::3j337\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"Jcinyanja\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Xhosa\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Xhosa::496z6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Xhosa::496z6\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"intlanzi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Hiligaynon\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Hiligaynon::jypx6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Hiligaynon::jypx6\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"isda\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Lingala\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Lingala::c4ghd\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Lingala::c4ghd\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"mbisi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Armenian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Armenian::f964n\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Armenian::f964n\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0571\:0578\:0582\:056f\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Catalan\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Catalan::qy78h\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Catalan::qy78h\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"peix\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tatar\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tatar::knyy6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tatar::knyy6\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:043a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Minangkabau\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Minangkabau::734hh\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Minangkabau::734hh\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"lauk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Turkmen\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Turkmen::9y824\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Turkmen::9y824\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"balyk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Croatian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Croatian::8p83b\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Croatian::8p83b\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"riba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Santali\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Santali::y562r\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Santali::y562r\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0939\:093e\:0915\:0941\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Afrikaans\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Afrikaans::83h97\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Afrikaans::83h97\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"vis\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Danish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Danish::zzfc5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Danish::zzfc5\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"fisk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kikuyu\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kikuyu::gy24v\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kikuyu::gy24v\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"thamaki\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Finnish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Finnish::6x24r\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Finnish::6x24r\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"kala\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Hebrew\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Hebrew::4rfm5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Hebrew::4rfm5\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:05d3\:05d2\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Slovak\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Slovak::446r3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Slovak::446r3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ryba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Eastern Balochi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"BalochiEastern::54bsg\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"BalochiEastern::54bsg\\\"]\"", 
      "\"language\""},
     "Entity"], 
    "\[Rule]", "\<\"\:0645\:0627\:0647\:064a\:060c \:0645\:0627\:0647\:064a\
\:06af\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Rundi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Rundi::96f2d\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Rundi::96f2d\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ifi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Norwegian\"", "\"macrolanguage\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Norwegian::3369f\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Norwegian::3369f\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"fisk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kashmiri\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kashmiri::489hw\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kashmiri::489hw\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0917\:093e\:0921\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tibetan\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tibetan::2xm9n\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tibetan::2xm9n\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0f49\:0f0b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tswana\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tswana::b38j6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tswana::b38j6\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"tlhapi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Basque\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Basque::8747x\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Basque::8747x\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"arrain\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Georgian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Georgian::hmkh2\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Georgian::hmkh2\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:10d7\:10d4\:10d5\:10d6\:10d8\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Pedi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Pedi::z6558\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Pedi::z6558\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"hlapi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Wolof\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Wolof::3fcm3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Wolof::3fcm3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"j\[EDoubleDot]n\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Central Bikol\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"BikolCentral::4j7hz\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"BikolCentral::4j7hz\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"sira\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Buginese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Buginese::422q3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Buginese::422q3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"bale\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tsonga\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tsonga::xt9n5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tsonga::xt9n5\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"hlampfi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Galician\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Galician::56d29\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Galician::56d29\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"peixe\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Eastern Yiddish\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"YiddishEastern::5tq83\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"YiddishEastern::5tq83\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:05e4\:05d9\:05e9\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kirghiz\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kirghiz::r929k\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kirghiz::r929k\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:043a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Lithuanian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Lithuanian::d7kfk\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Lithuanian::d7kfk\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\[ZHacek]uvis\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Achinese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Achinese::572x3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Achinese::572x3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"eungkot\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Kalenjin\"", "\"macrolanguage\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kalenjin::4xz2y\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kalenjin::4xz2y\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"njiriot\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Zarma\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Zarma::y3kn9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Zarma::y3kn9\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"hamisa\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Esperanto\"", "\"constructed\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Esperanto::8k36n\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Esperanto::8k36n\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"fi\:015do\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Slovenian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Slovenian::g2d39\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Slovenian::g2d39\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"riba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Sidamo\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Sidamo::mtms2\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Sidamo::mtms2\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"qilxi'me\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Bashkir\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Bashkir::796y3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Bashkir::796y3\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:04a1\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Chuvash\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Chuvash::phnc8\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Chuvash::phnc8\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:043f\:0443\:043b\:04d1\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Swati\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Swati::y8tb9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Swati::y8tb9\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"inhlanti\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Makasar\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Makasar::cfb4n\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Makasar::cfb4n\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"juku\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Macedonian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Macedonian::83m66\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Macedonian::83m66\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0440\:0438\:0431\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Gusii\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Gusii::dn8db\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Gusii::dn8db\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"enswe\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"North Ndebele\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"NorthNdebele::qty8m\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"NorthNdebele::qty8m\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"ihlambi\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Latvian\"", "\"macrolanguage\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Latvian::5546h\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Latvian::5546h\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"zivs\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tonga\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"TongaZambia::9wy6w\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"TongaZambia::9wy6w\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"ika\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Tumbuka\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Tumbuka::6d275\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Tumbuka::6d275\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"somba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Teso\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Teso::gby67\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Teso::gby67\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ekoleit\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Newari\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Newari::493gy\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Newari::493gy\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092f\:093e\:0902\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Breton\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Breton::9djjz\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Breton::9djjz\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"pesk\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Estonian\"", "\"macrolanguage\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Estonian::925q3\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Estonian::925q3\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"kala\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Scots\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Scots::vkm9z\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Scots::vkm9z\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"iasg\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Venda\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Venda::n2h56\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Venda::n2h56\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"khovhe\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Chechen\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Chechen::nnb6f\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Chechen::nnb6f\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0447\:0406\:0430\:0440\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Mapudungun\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Mapudungun::yr438\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Mapudungun::yr438\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"challwa\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Ayacucho Quechua\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"QuechuaAyacucho::rd5rj\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"QuechuaAyacucho::rd5rj\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"challwa\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Masai\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Masai::my6c5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Masai::my6c5\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"sinkir\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Erzya\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Erzya::2p566\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Erzya::2p566\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:043a\:0430\:043b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Krio\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Krio::63m66\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Krio::63m66\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"pwason\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Fang\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"FangEquatorialGuinea::738c8\""}], 
        "]"}], "\"Entity[\\\"Language\\\", \
\\\"FangEquatorialGuinea::738c8\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"kuas\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kusaal\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kusaal::v23rv\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kusaal::v23rv\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"z\:012b\[Eta]\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kara\[Hyphen]Kalpak\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"KaraKalpak::4ggph\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"KaraKalpak::4ggph\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"bal\[DotlessI]q\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Sango\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Sango::g6vwm\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Sango::g6vwm\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"susu\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Efik\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Efik::dysd6\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Efik::dysd6\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"iyak\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Aklanon\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Aklanon::7r83z\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Aklanon::7r83z\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"isda\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Maltese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Maltese::g6ryp\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Maltese::g6ryp\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:0127uta\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Yakut\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Yakut::cp588\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Yakut::cp588\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:043a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Samoan\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Samoan::r5b4z\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Samoan::r5b4z\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"i'a\"\>"}], ",", 
   RowBox[{
    RowBox[{"Missing", "[", "\<\"NotAvailable\"\>", "]"}], 
    "\[Rule]", "\<\"pouissoun\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Komi\[Hyphen]Zyrian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"KomiZyrian::2c633\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"KomiZyrian::2c633\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0447\:0435\:0440\:0438\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Fijian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Fijian::ybcj9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Fijian::ybcj9\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ika\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Icelandic\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Icelandic::c922c\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Icelandic::c922c\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"fiskur\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Papiamento\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Papiamento::r4722\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Papiamento::r4722\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"pisk\[AAcute]\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Moksha\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Moksha::zv522\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Moksha::zv522\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:043a\:0430\:043b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kumyk\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kumyk::96g8h\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kumyk::96g8h\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:043a\:044a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Navajo\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Navajo::xs388\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Navajo::xs388\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\[LSlash]\[OAcute]\[OAcute]'\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Maori\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Maori::h5cqj\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Maori::h5cqj\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ika\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Gagauz\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Gagauz::4vgvn\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Gagauz::4vgvn\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"bal\[DotlessI]k\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Central Kaqchikel\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"CentralKaqchikel::32z7d\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"CentralKaqchikel::32z7d\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"k\[ADoubleDot]r\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Dungan\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Dungan::w28g9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Dungan::w28g9\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0439\:04af\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kashubian\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kashubian::5wx25\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kashubian::5wx25\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"r\[EDoubleDot]ba\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Kaba\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Kaba::9g2pg\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Kaba::9g2pg\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"kandje\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Khakas\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Khakas::2f9cb\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Khakas::2f9cb\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:043f\:0430\:043b\:044b\:0445\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Akaselem\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Akaselem::97fvy\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Akaselem::97fvy\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ikuyu\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Faroese\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Faroese::86cfh\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Faroese::86cfh\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"fiskur\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Ga'anda\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Gaanda::qj3yt\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Gaanda::qj3yt\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"ekyenyanja\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Romansch\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Romansch::7s4qd\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Romansch::7s4qd\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"pesch\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Evenki\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Evenki::cy8vs\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Evenki::cy8vs\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:043e\:043b\:043b\:043e\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Chorti\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Chorti::pq579\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Chorti::pq579\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"chay\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Khanty\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Khanty::8y9bk\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Khanty::8y9bk\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0445\:0443\:04c6\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Chukot\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Chukot::njns9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Chukot::njns9\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:044b\:043d\:043d\:044d\:044d\:043d\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Sanskrit\"", "\"ancient\""}, "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Sanskrit::76hxr\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Sanskrit::76hxr\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:092e\:0940\:0928\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Chirip\[AAcute]\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Chiripa::2gyc5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Chiripa::2gyc5\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"pira\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Nanai\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Nanai::f8473\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Nanai::f8473\\\"]\"", "\"language\""},
     "Entity"], 
    "\[Rule]", "\<\"\:0441\:043e\:0433\:0434\:0430\:0442\:0430\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Choctaw\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Choctaw::ymhp5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Choctaw::ymhp5\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"nani\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Mansi\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Mansi::j594d\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Mansi::j594d\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0445\:0443\:043b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Koryak\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Koryak::hk367\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Koryak::hk367\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:044b\:043d\:043d\:044b\:044b\:043d\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Ho\[Hyphen]Chunk\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"HoChunk::2v627\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"HoChunk::2v627\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"h\[OAcute]ra\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Karaim\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Karaim::m4sx8\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Karaim::m4sx8\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:043a\:044a\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Karon Dori\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"KaronDori::vdzp9\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"KaronDori::vdzp9\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:043a\:043e\:043b\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Bai\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"BaiSouthSudan::bfzw5\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"BaiSouthSudan::bfzw5\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"sumuti\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Batak\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Batak::f6rwp\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Batak::f6rwp\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"dekke\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Gilyak\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Gilyak::v4k2q\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Gilyak::v4k2q\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0447\[CloseCurlyQuote]\:043e\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Alabama\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Alabama::v58vk\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Alabama::v58vk\\\"]\"", "\"language\""},
     
     "Entity"], "\[Rule]", "\<\"\:026ca\:026co\"\>"}], ",", 
   RowBox[{
    TemplateBox[{"\"Judeo\[Hyphen]Crimean Tatar\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"JudeoCrimeanTatar::k52xf\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"JudeoCrimeanTatar::k52xf\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"\:0431\:0430\:043b\:044b\:0445\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Latin\"", "\"ancient\""}, "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"Latin::627pn\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"Latin::627pn\\\"]\"", "\"language\""},
     "Entity"], "\[Rule]", "\<\"piscis\"\>"}], ",", 
   RowBox[{
    TemplateBox[{
      TemplateBox[{"\"Classical Quechua\"", "\"historical\""}, 
       "EntityLabelSublabel"], 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Language\"", ",", "\"ClassicalQuechua::3792q\""}], "]"}], 
      "\"Entity[\\\"Language\\\", \\\"ClassicalQuechua::3792q\\\"]\"", 
      "\"language\""},
     "Entity"], "\[Rule]", "\<\"challwa\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.960069526174642*^9, 3.960069559304079*^9, 
  3.9601050878192*^9, 3.960106519743885*^9, 3.9601162701660137`*^9, 
  3.96023978306826*^9, 3.960239819255999*^9, 3.960241757925609*^9, 
  3.96028181851904*^9, 3.960285398413836*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"8b2b8049-0607-430f-b5d4-1cdb5463ae85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"translatedList", " ", "=", " ", 
  RowBox[{"Transliterate", "[", 
   RowBox[{"Values", "[", "rawTranslations", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9601050595072107`*^9, 3.9601050786370363`*^9}, {
  3.9601067276993713`*^9, 3.9601067529740667`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"36a82d30-9092-46ea-82b6-89f9809c1044"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"yu\"\>", ",", "\<\"machali\"\>", ",", "\<\"pez\"\>", 
   ",", "\<\"ryba\"\>", ",", "\<\"ikan\"\>", ",", "\<\"peixe\"\>", 
   ",", "\<\"macha\"\>", ",", "\<\"samakat\"\>", ",", "\<\"ikan\"\>", 
   ",", "\<\"hou\"\>", ",", "\<\"poisson\"\>", ",", "\<\"Fisch\"\>", 
   ",", "\<\"mchhly\"\>", ",", "\<\"iwak\"\>", ",", "\<\"balik\"\>", 
   ",", "\<\"cepa\"\>", ",", "\<\"masa\"\>", ",", "\<\"ca\"\>", 
   ",", "\<\"mulgogi\"\>", ",", "\<\"min\"\>", ",", "\<\"pla\"\>", 
   ",", "\<\"pesce\"\>", ",", "\<\"yu\"\>", ",", "\<\"samaki\"\>", 
   ",", "\<\"\:067cp\"\>", ",", "\<\"machali\"\>", ",", "\<\"ryba\"\>", 
   ",", "\<\"riba\"\>", ",", "\<\"kifi\"\>", ",", "\<\"yu\"\>", 
   ",", "\<\"matsam\"\>", ",", "\<\"minu\"\>", 
   ",", "\<\"\:1004\:102b\:1038\"\>", ",", "\<\"macha\"\>", ",", "\<\"yu\"\>",
    ",", "\<\"mchhy\"\>", ",", "\<\"lauk\"\>", ",", "\<\"machari\"\>", 
   ",", "\<\"macha\"\>", ",", "\<\"baliq\"\>", ",", "\<\"peste\"\>", 
   ",", "\<\"isda\"\>", ",", "\<\"vis\"\>", ",", "\<\"m\:0687y\"\>", 
   ",", "\<\"isda\"\>", ",", "\<\"azu\"\>", ",", "\<\"\:12d3\:1223\"\>", 
   ",", "\<\"macha\"\>", ",", "\<\"macha\"\>", ",", "\<\"hal\"\>", 
   ",", "\<\"juko'\"\>", ",", "\<\"\:179a\:178f\:17b8\"\>", 
   ",", "\<\"machali\"\>", ",", "\<\"liingu\"\>", ",", "\<\"machali\"\>", 
   ",", "\<\"kalluun\"\>", ",", "\<\"psari\"\>", ",", "\<\"riba\"\>", 
   ",", "\<\"ryba\"\>", ",", "\<\"hove\"\>", ",", "\<\"mahy\"\>", 
   ",", "\<\"bla\"\>", ",", "\<\"inhlazi\"\>", ",", "\<\"nsomba\"\>", 
   ",", "\<\"pes\"\>", ",", "\<\"ryba\"\>", ",", "\<\"riba\"\>", 
   ",", "\<\"fisk\"\>", ",", "\<\"nsuo mu nam\"\>", 
   ",", "\<\"balyk\:02cc\"\>", ",", "\<\"lames\"\>", 
   ",", "\<\"belik\:02cc\"\>", ",", "\<\"Jcinyanja\"\>", 
   ",", "\<\"intlanzi\"\>", ",", "\<\"isda\"\>", ",", "\<\"mbisi\"\>", 
   ",", "\<\"juk\"\>", ",", "\<\"peix\"\>", ",", "\<\"balyk\"\>", 
   ",", "\<\"lauk\"\>", ",", "\<\"balyk\"\>", ",", "\<\"riba\"\>", 
   ",", "\<\"haku\"\>", ",", "\<\"vis\"\>", ",", "\<\"fisk\"\>", 
   ",", "\<\"thamaki\"\>", ",", "\<\"kala\"\>", ",", "\<\"dg\"\>", 
   ",", "\<\"ryba\"\>", ",", "\<\"mahy, mahyg\"\>", ",", "\<\"ifi\"\>", 
   ",", "\<\"fisk\"\>", ",", "\<\"gada\"\>", ",", "\<\"\:0f49\:0f0b\"\>", 
   ",", "\<\"tlhapi\"\>", ",", "\<\"arrain\"\>", ",", "\<\"tevzi\"\>", 
   ",", "\<\"hlapi\"\>", ",", "\<\"jen\"\>", ",", "\<\"sira\"\>", 
   ",", "\<\"bale\"\>", ",", "\<\"hlampfi\"\>", ",", "\<\"peixe\"\>", 
   ",", "\<\"pys\"\>", ",", "\<\"balyk\"\>", ",", "\<\"zuvis\"\>", 
   ",", "\<\"eungkot\"\>", ",", "\<\"njiriot\"\>", ",", "\<\"hamisa\"\>", 
   ",", "\<\"fiso\"\>", ",", "\<\"riba\"\>", ",", "\<\"qilxi'me\"\>", 
   ",", "\<\"baly\:04a1\"\>", ",", "\<\"pula\"\>", ",", "\<\"inhlanti\"\>", 
   ",", "\<\"juku\"\>", ",", "\<\"riba\"\>", ",", "\<\"enswe\"\>", 
   ",", "\<\"ihlambi\"\>", ",", "\<\"zivs\"\>", ",", "\<\"ika\"\>", 
   ",", "\<\"somba\"\>", ",", "\<\"ekoleit\"\>", ",", "\<\"yam\"\>", 
   ",", "\<\"pesk\"\>", ",", "\<\"kala\"\>", ",", "\<\"iasg\"\>", 
   ",", "\<\"khovhe\"\>", ",", "\<\"cIara\"\>", ",", "\<\"challwa\"\>", 
   ",", "\<\"challwa\"\>", ",", "\<\"sinkir\"\>", ",", "\<\"kal\"\>", 
   ",", "\<\"pwason\"\>", ",", "\<\"kuas\"\>", ",", "\<\"zie\"\>", 
   ",", "\<\"baliq\"\>", ",", "\<\"susu\"\>", ",", "\<\"iyak\"\>", 
   ",", "\<\"isda\"\>", ",", "\<\"huta\"\>", ",", "\<\"balyk\"\>", 
   ",", "\<\"i'a\"\>", ",", "\<\"pouissoun\"\>", ",", "\<\"ceri\"\>", 
   ",", "\<\"ika\"\>", ",", "\<\"fiskur\"\>", ",", "\<\"piska\"\>", 
   ",", "\<\"kal\"\>", ",", "\<\"balyk\\\"\"\>", ",", "\<\"loo'\"\>", 
   ",", "\<\"ika\"\>", ",", "\<\"balik\"\>", ",", "\<\"kar\"\>", 
   ",", "\<\"j\:04af\"\>", ",", "\<\"reba\"\>", ",", "\<\"kandje\"\>", 
   ",", "\<\"palyh\"\>", ",", "\<\"ikuyu\"\>", ",", "\<\"fiskur\"\>", 
   ",", "\<\"ekyenyanja\"\>", ",", "\<\"pesch\"\>", ",", "\<\"ollo\"\>", 
   ",", "\<\"chay\"\>", ",", "\<\"hu\:04c6\"\>", ",", "\<\"ynneen\"\>", 
   ",", "\<\"mina\"\>", ",", "\<\"pira\"\>", ",", "\<\"sogdata\"\>", 
   ",", "\<\"nani\"\>", ",", "\<\"hul\"\>", ",", "\<\"ynnyyn\"\>", 
   ",", "\<\"hora\"\>", ",", "\<\"balyk\\\"\"\>", ",", "\<\"kol\"\>", 
   ",", "\<\"sumuti\"\>", ",", "\<\"dekke\"\>", ",", "\<\"c'o\"\>", 
   ",", "\<\"lalo\"\>", ",", "\<\"balyh\"\>", ",", "\<\"piscis\"\>", 
   ",", "\<\"challwa\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.960105079566072*^9, 3.9601050895800247`*^9}, 
   3.960106753639998*^9, 3.960116274435212*^9, {3.960239792679099*^9, 
   3.960239819391876*^9}, 3.960241758855055*^9, 3.960281819016411*^9, 
   3.9602853987089148`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"04a7fbac-cade-4afd-b8b1-6813b0f53a76"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{"StringTake", "[", 
   RowBox[{"translatedList", ",", " ", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.960106689768001*^9, 3.960106706459375*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"caa2f2f5-e720-4418-9ce9-b03666ef2f08"],

Cell[BoxData[
 GraphicsBox[{InsetBox[
    StyleBox["\<\"m\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.6422018348623854],
     FontColor->RGBColor[0.24, 0.6, 0.8]], {0, 0}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"p\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.5897771952817825],
     FontColor->RGBColor[0.95, 0.627, 0.1425]], {40.5, 0.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"b\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.4849279161205767],
     FontColor->RGBColor[0.922526, 0.385626, 0.209179]], {-0.5, 32.5}, Center,
     Automatic], InsetBox[
    StyleBox["\<\"k\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.35386631716906947`],
     FontColor->RGBColor[0.4, 0.64, 1.]], {20.5, 26.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"h\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.35386631716906947`],
     FontColor->RGBColor[0.772079, 0.431554, 0.102387]], {-2.5, -33.5}, 
    Center, Automatic], InsetBox[
    StyleBox["\<\"r\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.38007863695937094`],
     FontColor->RGBColor[0.578, 0.51, 0.85]], {-26.5, 14.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"y\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.2490170380078637],
     FontColor->RGBColor[0.915, 0.3325, 0.2125]], {-33.5, -8.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"i\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.563564875491481],
     FontColor->RGBColor[0.455, 0.7, 0.21]], {-35.5, 19.5}, Center, 
    Automatic], InsetBox[
    StyleBox["\<\"c\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.30144167758846657`],
     FontColor->RGBColor[1., 0.75, 0.]], {15.5, -32.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"s\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.27522935779816515`],
     FontColor->RGBColor[0.8, 0.4, 0.76]], {-18.5, -32.5}, Center, Automatic],
    InsetBox[
    StyleBox["\<\"j\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.22280471821756226`],
     FontColor->RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85]], {-16.5, 37.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"F\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.2490170380078637],
     FontColor->RGBColor[0.637, 0.65, 0.]], {38.5, 21.5}, Center, Automatic], 
   InsetBox[
    StyleBox["\<\"e\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1703800786369594],
     FontColor->RGBColor[0.736782672705901, 0.358, 0.5030266573755369]], {-30.5, -30.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"l\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.22280471821756226`],
     FontColor->RGBColor[
      0.9728288904374106, 0.621644452187053, 0.07336199581899142]], {9.5, -11.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"n\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1703800786369594],
     FontColor->RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965]], {-45.5, 4.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"d\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1179554390563565],
     FontColor->RGBColor[
      0.8439466852489265, 0.3467106629502147, 0.3309221912517893]], {-7.5, -8.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"q\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[
      0.16397784358994957`, 0.7038177251280403, 0.6117734123079395]], {39.5, -2.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"\:0f49\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[
      0.6753413537738198, 0.3589675436319385, 0.5991466155654507]], {-44.5, -11.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"t\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.14416775884665792`],
     FontColor->RGBColor[
      0.838355547812947, 0.44746667828057946`, 0.0208888695323676]], {-23.5, 35.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"z\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.14416775884665792`],
     FontColor->RGBColor[
      0.5833680111493557, 0.4126186601628758, 0.8290799721266107]], {-44.5, 14.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"a\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1179554390563565],
     FontColor->RGBColor[0.8996399512215667, 0.7463488834690629, 0.]], {24.5, 40.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"g\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[
      0.9874666782805795, 0.6948333914028977, 0.033839968642435214`]], {38.5, -28.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"\:12d3\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[
      0.8857244243136628, 0.3764133635295058, 0.1393110607841571]], {-0.5, 45.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"\:067c\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[
      0.9324333565611593, 0.5282889043741062, 0.0921900209050434]], {27.5, -39.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"\:1004\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[0.5407932311309059, 0.715, 0.09762679674248334]], {8.5, 47.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"o\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[0.7748409210981391, 0.358, 0.4444755060028629]], {-43.5, 23.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"v\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.1179554390563565],
     FontColor->RGBColor[
      0.28240003484173815`, 0.6090799721266095, 0.7538800418100857]], {34.5, 36.5},
     Center, Automatic], InsetBox[
    StyleBox["\<\"\:179a\"\>",
     StripOnInput->False,
     FontSize->Scaled[0.09174311926605505],
     FontColor->RGBColor[0.47401116530937026`, 0.47809330081437784`, 0.85]], {47.5, 15.5},
     Center, Automatic]},
  DefaultBaseStyle->{"Graphics", FontFamily -> "Source Sans Pro"},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{-52., 57.}, {-48., 54.}}]], "Output",
 CellChangeTimes->{3.960106708500795*^9, 3.96010675648969*^9, 
  3.960116280190056*^9, 3.96023980184*^9, 3.960241759384104*^9, 
  3.960281820219748*^9, 3.960285399283989*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"f4fa1f16-f5dc-4bc4-a014-cd81abca4432"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"audioSpanish", "=", 
  RowBox[{"SpeechSynthesize", "[", 
   RowBox[{
    RowBox[{"WordTranslation", "[", 
     RowBox[{"\"\<fish\>\"", ",", " ", "\"\<Spanish\>\""}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9602417650099583`*^9, 3.96024186910279*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"c50aff40-23f2-4e0a-a187-ee845c4b08f0"],

Cell[BoxData[
 TemplateBox[<|"audio" -> HoldComplete[
     Audio[
     "/home/thinkies/Documents/Wolfram/Audio/SpeechSynthesize-2025-06-30T11-\
16-39.wav", "Real32", Appearance -> Automatic, AudioOutputDevice -> Automatic,
       SampleRate -> 16000, SoundVolume -> 1]], "audioID" -> 
   "0088f2da-7d14-4dbd-b47d-d2864055cd71", "appearance" -> "Basic", "version" -> 
   3, "class" -> "AudioFile", "label" -> Automatic, "duration" -> 1.065|>,
  "AudioBox1",
  Editable->False,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9602418443424*^9, 3.960241869521902*^9}, 
   3.960281821426607*^9, 3.960285399598103*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"7c416152-8b8d-4f30-8065-817aa71cdb0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"audioFrench", " ", "=", " ", 
  RowBox[{"SpeechSynthesize", "[", 
   RowBox[{
    RowBox[{"WordTranslation", "[", 
     RowBox[{"\"\<fish\>\"", ",", " ", "\"\<French\>\""}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9602847977662363`*^9, 3.9602848150187187`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"a0aba922-eb13-4ca4-a42d-7579f1dd13f2"],

Cell[BoxData[
 TemplateBox[<|"audio" -> HoldComplete[
     Audio[
     "/home/thinkies/Documents/Wolfram/Audio/SpeechSynthesize-2025-06-30T11-\
16-39-0.wav", "Real32", Appearance -> Automatic, AudioOutputDevice -> 
      Automatic, SampleRate -> 16000, SoundVolume -> 1]], "audioID" -> 
   "9817887d-53b3-4ff4-9551-7f67eb06e550", "appearance" -> "Basic", "version" -> 
   3, "class" -> "AudioFile", "label" -> Automatic, "duration" -> 1.08|>,
  "AudioBox1",
  Editable->False,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9602848155145082`*^9, 3.96028539997066*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"468bf66a-5390-4657-b79d-fa9c9e7ce831"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"audioEnglish", "=", 
  RowBox[{"SpeechSynthesize", "[", 
   RowBox[{
    RowBox[{"WordTranslation", "[", 
     RowBox[{"\"\<fish\>\"", ",", " ", "\"\<English\>\""}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9602848763014517`*^9, 3.960284897361232*^9}, {
  3.960284948498151*^9, 3.960284959331052*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"5e8fae65-461d-4338-ac1e-c2a3adf532de"],

Cell[BoxData[
 TemplateBox[<|"audio" -> HoldComplete[
     Audio[
     "/home/thinkies/Documents/Wolfram/Audio/SpeechSynthesize-2025-06-30T11-\
16-40.wav", "Real32", Appearance -> Automatic, AudioOutputDevice -> Automatic,
       SampleRate -> 16000, SoundVolume -> 1]], "audioID" -> 
   "23bbb34a-583c-4026-b200-09c186b4fb58", "appearance" -> "Basic", "version" -> 
   3, "class" -> "AudioFile", "label" -> Automatic, "duration" -> 0.865|>,
  "AudioBox1",
  Editable->False,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.960284893144545*^9, 3.9602849017566147`*^9}, {
   3.960284951116441*^9, 3.960284959783533*^9}, 3.960285400234078*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"c4d3d975-927b-42cd-997d-8d910e24e196"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"audioGerman", " ", "=", " ", 
  RowBox[{"SpeechSynthesize", "[", 
   RowBox[{
    RowBox[{"WordTranslation", "[", 
     RowBox[{"\"\<fish\>\"", ",", " ", "\"\<German\>\""}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9602849034499063`*^9, 3.960284962697152*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"d524eeb2-53c5-4a98-b0a8-9a099789a9db"],

Cell[BoxData[
 TemplateBox[<|"audio" -> HoldComplete[
     Audio[
     "/home/thinkies/Documents/Wolfram/Audio/SpeechSynthesize-2025-06-30T11-\
16-40-0.wav", "Real32", Appearance -> Automatic, AudioOutputDevice -> 
      Automatic, SampleRate -> 16000, SoundVolume -> 1]], "audioID" -> 
   "a1fb5590-ecd3-4de7-be7a-39ab127a4f15", "appearance" -> "Basic", "version" -> 
   3, "class" -> "AudioFile", "label" -> Automatic, "duration" -> 0.865|>,
  "AudioBox1",
  Editable->False,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.960284924590464*^9, 3.960284963140337*^9}, 
   3.96028540049052*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"c9691388-03b3-43d5-a5c1-e6b1069c306e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Spectrogram", "[", "audioSpanish", "]"}]], "Input",
 CellChangeTimes->{{3.9602419143585*^9, 3.960241918046232*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"5f91e7a9-5b68-40f6-ba8a-f3357ee2fdc0"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
TGmNROsSqW5UWzzrGES3s3fRy2AZu8vVxxrlvpT8ujS6BdlTx5oPqXGGJ2ZU
S6b3uQMoPXkAFp5IpBL/mfTL0xmlrabTWud5VL5bCObXyKTerYqklTNa4l1D
X7qTeJDmeujg8PYbXXsaI6X+roV7YwaRiUs6hf+Nxtydj8i+8zJp+ZDG8Drh
SZMWHaepjn4oa36U6uU1o76thuPZjQ2U+ng4xR4choXP19PfUiMpYIQOLay+
U/qCWGnkpzD0mZZNtxwfS68sDEgfWRWLlx2UilNjcLbpEwqJmC95i7V6dqwl
hqbflWLu6bF3XCUEzt0pPZb1aJ1QHsMer5cGFxlw9kdt7E69Kr3OGIml1bfT
iK59aZrIjQdcqYh3z7ZL5yfH4NuBx7Rj8kLp0wsf5I44TM3q8b2++Ue6i3xk
PM3sbsDcTFNkxB6Rat2Q0Sm6MeIWvFTnMeflOLyaUV2dI8PR3viduFxti/X+
MN5TQZUvCPBBPesffMfvwBDcapmp4jTniUi+wJwnzUYPpxmcAw48IXLzyeyj
jAMMOHSa/b9ZzwS06Mi1owUz9DD+yT7zVooBi2pxflrvvYxTw9m3eKQaYNqa
5bN+69B1A9d2Zs1OwEZ/vu/65bAOXSZwXvbxewJqdOE87l2QjNxGGudpqcBs
JPuoxk1lSF/ZZ1ZZqwd5Mr/a807GYw9+7iidiPXn2XdlbFQg+7NPC+oj4u8j
tlNL5JWHjjC+kirDTeb3nS9iYvfXLK9/T8ZII7b54L9YvY7tlP0r+raR5WO7
KDiSzPoTliq43VqrKYk+T9L6/GCfiOmbWJ49VnASb+7byAgFz9Yw9nVREFqK
cQVHBRHnue190Z/EN4wzHyhopZ2d2T4W3CCM8YnzCjpp54bX7iv4OpLl34SO
zSTtvpPgMs8vaNxD8J/4jdo9JcFtHjxgPEfwk+MaV5kmeE5/jQuZCa7lptW1
jIS8jsZ/3pQo6KudOe4TOr+188SrQmeKdv646KOCbdqZYKKw0egK4/airdVP
jRcJ/E27S/9U2Gv3kXGQ4GAJ2rnkEmFzjtYfj19CJ/9/zzdvaTxwr2jrpt0x
6yD032j9bCv+/W0W4/mCo23czniE4G+9tfrbI9G3eVp9r7XoS452N+yC4Iwn
AxmXEZyx+1Ae51+DxZyW5/lKHyU4ITF+t0LMBbHOR9GfYO1dagke96cDyxfk
KPgIlveKV3AhldsuFHHeYhvvtb3FCeg+jPdCF68EzFzL+27uyRjs+Mr1inmm
E9AywVbFDZ4Eo9yhZjxHJwfgzpDdtGiWHtsflsfS1xukTMFxZk4thwXd10rP
i0LxdNFVWtf2tdRa+JZp6aa4FnpEGtdWj1NvyqCm1XIpx6CggZkV3Hr8Vv3M
HvfBGDLsuOo3Ngwaj38F9XmPXI/C7i1cZ57sGYOiAXw3oMrheFy+yOdfscIP
znfgPWsn9ke2GfOl7rMVnC/hd1/QTOzHAbzOrz6Q8aky768J12Xcfsh7Ey9k
ZNqz3LitAoSzvuNLGQ27snxRJQX7nzCe801GBz3j/fNkjD3J/mTkWhkW/xgP
sVfQcpm23wcq2PqD8RsfBYqrxn8EF3qvcaFAIXd10TiemHdnbd5fiD0ua3v8
vMhjSqw0Hi7mvbU9y9OFzveNjG+Jvfj5D+Pa//VhqVYvnShjfzfu20LLeER2
Y6710CIWeUu5ZpUxVYdTq5hf1equg2MQ57Z1XujQj9jHthbj8W0Myy/Mjod3
dZ6Lk3/CML0Zr5mvQSPxSv9UndP6BbY4W9CE/G8asG5QLfzqeElqPUvkEPFW
cB/zRwqoo0ffv6URsYPzd6v6rlhvd5Iytiag079XlPTAXZripOBOaAv0M/8q
XRfvr5wrg9Unl0n3YMCFD6ao+OiI1OOuyH09K2H7uJ3StWt6jP9dEbn+O6R/
BSLOhNaGaY8r0nFFhzJrfpJZ7GTpzGED7IxqYs6eC9KOfwkYPvYDvQnyk3qJ
XOC0jymGeadIpUW+WrTZGOlNV0hZYQYYfzZD4bCT0uRhBmS+qwbrRcelNZ0N
2LTWFP1KHZEsV4t5c2mNHpv+SkeEDw0d1Qp7h/1U36txh94ov22pOiang+3g
uYBrGhU6DQa+HFPxbPuOsBnQRsUZRsPwYQ7fs/IbOhGvvnM8tb4zAEsP7Vbl
LW0M+HCbc+2rHuOQUJvP0NPWhEJnx/fokh+E4PcnvufTukIY+lbm+9UTmjnh
+J/pqp24n52RcsmFJs41oJ9UHb8fn5HWiVh4b+Uzim43Vaoj3vFJkik2fUqR
PKeOQNVZm2n5dje1rfVGL3zLf0Fuj/ywYOAxal6piSqf9igUWwa3xcNPQUjX
XyA7i3LM/VIckRw4jfqWjkVayhPafX+O5HU+AWnGb+hz1hCpp5mM03XrIuDm
NWnDzFHYvHwXPbaB2vZC3XGoXKMaCBNh3PQGjenC9zY/BAXgce0q6nvtqNYR
Zo7Mc1Lt++CsxwoVu6cNx4EnubRougFOn8wxtsoZte2zyvE4WOQLiJiceqMx
Ime94t9utHRBh3opzF0z+iGAtlKMaxTMBz2gBxu3qDr7Z4TC8rY1XHbq8duj
At6/3yLFNtRj2sAyMJnMvx3okRCCSNeWHB/rdoJecuLfgOyciMGBfM9hSoEv
Jvz9o8pXLhuNfisK+X7d9TgYF3JenOY/Ht9dGqjYK3Ecij7zXPcTfq7cUPaB
YZX0cHzD+/RKHxme89kfVv4k4/L/3EHyN2DSKY4FG5xklNV+79OlpYzPxoxd
4xQkH2H/kyW4xPV1jNsIeQVNnij4yfBt7FumNVCwrAPjx6dkrJ/LfvWDQcYG
HfucffVFnGrLOvW6inxwB+PFWTKirrO+s/CTY7T7tKPsFOyey/jAVAW65/zc
0w0VPHFgeVVXoaPFyphFMo5e5WdFkSL8g/7/F0+HaDrDVynw7sW+MfyZgkId
x8qdj0ROGqJxidcKeiYx/jBXQUBF1rcJVdBlCtv5ck1B2Tass+ecAo+PrGOS
piC/ULtndVtBt96ss1Jwn8Z7GA8QOFert6y+p+CMB+N5giu1GK3F9ELBK45q
9RnBr/LTGU8Ucb+3xqNeiL+hWp1HJ3jOBO1OezvBT+5r/GSE4E2fbzIOEZyo
m3a3ykfIa95inCr07TRO1UXYGaJxp7HiWabas3wFNtFwO8FtFmi1qUNC7q/x
otmi7W6tDzsFtv/N+K/gUQM1DnZK4E7a7yJXiLafNJuuAp/RalzDhc4UjXcd
FDztsFZn2y3sfdN42g7Rx55P/299bIaQ79HecZGwE6fxxvmij73/p+73UkHg
PMbvxPx3vchzGpKsYFEcz927u2J9urPOLdE2/KC2NsRcXL3I+IbgwMvCtTUg
1olLBW77OFHGm128Ds9siUXNJ1xD7jM9BjeNmV99qBKJ2VX5PuQ3jzh0fMbn
jIUR4xC4nPf1/T/OCPTdRIee6xF8vxKWX9glbawi8r4TVdD+2X5p+Kgg5Lmf
pwoZJuTeQMSB6KqIfXxQqjlZ+IMz5jg2nX97OOfDYFjP4jtXhbmdkJzUh+95
5oxDfwfO75x3h+PIWUnF7/tGok0FPh80W6RD2xzmA16t9Xgbxnlcw886rIjR
7qdNM+CPI9e1PlSWMWAp+6KScAMiPrOfaVpdRrN9LM9qJ2NXc80vPZfRpw37
pVXuMnzPsXzwHhnVerFPuJlsQOodtl9N+Ks1UazTQHBau61sv4254GzFbCdb
4O8ljO3E/Fpq+doI4UOKnzKeK3xUxzlsn64rGNCW57HxIrG2LXke5Zsyzrxg
nWHCz7zQ7oXuFfnUMSPGboKTb+rG+ttiRF6m1cd6nTLghAPnp5VfxsL5F9em
wnMjUWES349tbh0PXQJzsLBnMRi1gmv7OaN18CthfuUmeEyUrXbvy0vwtzf8
7vn7InAnks+g2zXwx4qp5Vnfti/kN6vV+X0yrj0eHOP72xvG9Me18dso7Jse
XTdWxpSne9S18dXaF0t//aTUvWI+NxdT6JcZqry9LSFpYxT/9sq1K+ynjKDn
2Qb0byH42+UMVWfAuHFIH22GocE6uJ/8Qf9u61T5ecc+OGpYQYt76tBq2Fdq
uzJCuiTyH0tdGzTJMKJOW3UYkv2HBt6YLi08I3zAK2ssLC5FOZcM8H5eE1Zm
bL/bPDt8mtxS7UO9Dh1has28qOuoblhYy4d/d9a0DyrW4Ph+sTqhb3qkilvb
+WBd1HcVdzw0GtNLf2JONWMMDpfimm3HLG+sTHuv4nYe/ugRbqKOYfdFk2Cx
zol9wogwXPSzUfHoYwk40ZrvrhxNisL7/XyH2WihAc0ieX2uFDzgwlKuGxx5
HgWPn5y/zCvbExWuzFWfZf7CHob4zmS+WeyVSQ2RZv5Uco/0xoTwPbS0sKuq
s/CeO8LqXCS3BtZoFxJADaL2Uo6bghtNW6Kx8XdpVidHXFgj05Rpy+lzBR2K
+32kSXn+UpapJzI3byGqP5jW947DMOk5pcfJ0uvG/th0N5WuOliS2alA+Jil
0YdtlWiHiNnT6hjDfPdyqUpjD/icXUP/OvjyGWhXW/T4XJ/eZ/hja5OTZOZY
l2pl6lF3f0W8X7Fdan1MhwExfynUfJb0s4YeD3JL4yWYw+9vbgf71c2oe2w8
Rm9+QdbTg6ThS2W0yGqACW6PVZ3R6zrh+PdedOpXApY8fk97/vmo8i8JYfhV
ZIOT60fgz9nNVLe5G21Ijcesli+p79mx0lgRM868aYs5x8rQoYYe2HFqDXXt
zH32ju+AH7o61GqQDEq1QOi3O9L9UyIXzLFG3PNSqk7ZGE+0qvJIxa8uD0HI
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
mNj/xyer2DOYaXMq8c9VEmdF+1zXmelWpHfYVeMx55DstRcZnUF/u0osesNX
Kn5KTapxhH9qSKxUY+KLbs1FjtN8Z0sOUTzNs2BlpmuTDC8q9qVtawjbKGI3
Jv76Wu5ZCyceO0LqLRQiHjtN6rr/Inx1QeqLTqb36uW964k/jxYsWofmeVHq
BiwkLOAlmNCH8IP1P9xCc6gvNpNthA1qSb2sMPq9S8QOFkAY4KLYgn7Ts8sF
b7ymv16CN/6bS/hfX6E9YYaPghnyafmM4lv8QvQEefYpPftKsFZZwjNFBecs
or/dZc3f0HsHy3u7UZ83//Ah0d/EBtWZ+iQILipDdIbglolafqL8llo0xl+Z
wyt67q+8d6RW/0HsciHUf5b01+L5IyX+aha1N5D5uND4C+RdWnx+Lumj1Va1
Fyw6ivonyjjl6Lk58i0eEqZzPSn4ivpHye/aR9/kjWDUGJrXKYmT70l0WaHH
EzY8liF4mL5zSh3eJzYRCgKc+WxmEY54259l6PwgE7ImMj0zwYRicndDYL14
/DjEsrXtejNCH/N575liQGQYy9ks0sch+vg5PxMiYvlZLa5gl8QVXBtqxvpk
5vNn7hpweSzz4cQtRjwZyM9m31JgktpT73aZkacWy5rIWBXP0pgPjG6jIKk3
27iyR6iY3p/b+5NO/2U2/64Pg1XsaCX5y4RVF4h926eqAlu50/CYlYq+R/hd
c5eSfjSQ12ctnf2KcvY3PKQxJe9veF2Sd24svz4Sjmr3Wmr791eRX/KX35Je
ufA002aaw2F7pvslqLj7hulLhLU6FuPxa9C+SxUffVH6zs8Eyy3aoSLuAPfR
cF0+wXXZc4kHNmM6Y6+KtzeYTqB92lTOtQPxmXZrmH5H+uMkybNem6agngfj
TFMFI4pcZ6x77W0c7kaz/2KXfRxmubKt8mV6DLZeYpk7cbMBbzfzty533IR5
1iyXX3vGo/4OxtheRczYqGecbNvUBP+x/N0/hMfibgGW0dYJUZjpzXijwbs4
dI/l92ZsDUD7BYxPpq+MRZe73D/kcT+Mfsg+qYBSAajyqpKl/d7ZADwuwXLw
0u9B+Pj9rqXP0s4esFrCsc2p3YegrCvnunrfGYw5NR5a6C36HtjUjGssZBT0
Q1ol9lUNcuqIXqFc5+phRjA80jhuZ9XNnphmlc5z2BaKdomM2bIWBsF0hXM6
nj0OwKE4nk8K6SUfN5Wy0DdWh8P8k+W+x/NIxB5gf2K+zgb0fsn2orSmRqS1
YKz7fYEZ9xbx+YrcYYazLe9/22m0H4rzdyxWlnSxolLrw19F7TDeV57EsztJ
/b3FxO/fJHH/CjkKHi7hPVx9gBnWch9cZxiRJ4bfu9XGhK4l+HsN3hpDuhJ/
95f9I9GrI+eWWt2PQG1nxo2tTZ5oaOb7YuY+DELH0ow/g8xeWGBgHBKWPxgO
W7j9wH4vTJ/BdrBPVhGIn8e45al1KNwzOFbqZ6IPRoxgTHX4ZCTmNee1svYa
jPveXJsixikC79eyX+/nseFY8IRj3pzyBeHewNqW9lYPAlFyL+Pe6tbD8abD
B/7ux+Kw/SBjrXW6Pui5fq+l3eOyB/ov5Xpf4wcGYpc3Y7+t3byx8j3X9yu6
PRCvv7Hvb3c9d9QaeINtpwtCUcaW90OuRv4YVYDj0z4s7ISL96ZZ+hz+NAJD
e+ZwfpC7H/ZEMcb7WMEfe/aX53e9M+DKGck9eRWBFwZe540XoklGcjzYoNpm
TN/A52tPugG7TklNnh5muA/gb/q5Ful0Us8qLF7FpQO8N2qTvmkSfTNrkop3
Odw+hfDGMImnekryIkDuFC5N+npFybUZs07F4wTeS6cmEob/LvZSwkKBq7n9
D+GCPPEiE0n+ePRg+l4ajS/2Iv0CwmlSYzl4GcliqUWzhN5ZTWxcnWgPn5Qc
wBXEF+3knhp/mkOszOEJycfCEltuRfJxttAvCFOUFB1zEvHAKXKHi2bn+C21
Q0edJrlsw3R3eu9J8SFuJn02sgO3TzivopnUNf2vL8CP2jeI79L5KumwUk9J
q8FpENvUHZLtLa4wfZXmcGMd05WJzy8QPh9OdB6xTc0leonQWp3zGMEGBsIF
VcSukklt96RGxA/q0/5fzBJhhnZi89HsQ/cFp72g9nXSbqb+tWTMajRmiuCr
vdTnvuCT29TnkGCbyjTODRm/OrUvErtQJ+p/XWxNe2mcdhJb3oT6nJc+JenZ
tfJsQaLNQr/WYuMFtxSk/o2kfyWixwr9jf4/UzDeWep/RnDRD2pf8K9+Kc0h
Vuas1deqJxhSiynrK+O4UJ/PMk8tn3Gd4K7SNN5I+e0faW3mC6ZaSXJzq8jN
P7R+1tJnPK3ZVsHS72kMo+gRntTHU2xfWp6BTr5LJuHt82LT+LKJ1lzyZFde
M2ObxGsZFxhh/4ntTi08TZgt93tmPic85sL8ub+DEes9mSdn3IlHbBbrWX3z
GFA6k2Vlp/UGmJL47Ie/NeJvIOtcZ7cZ4RjAOKrpmzhkhHD/6BmxCJoo8TxH
4xEyjMccXIIwucRqqmNU9LvD53rZBAWtljOO2njDjPg0uVfaRsGJdMZOjV0V
tN/DGKwW4aI7A5m3FEhRsFZiXVqWV1D4GPd/n67Aypfb5zmpKHeN+6+0JR2k
ksgyGgeCrzbQN7eRmChvan8t7QPTVezcLuexCM1Z4h++7yP6LrfXiyHMvIl/
yxiSj/2kdtYr0jGt83Of6Hm0r+yY7kXYLFOwWX7iE6mSC/NtOemGAaLrkW44
84iMf0dFiNgtU07RPinBdB46r/0WMt0nREFduUvRLyQeAe8YI10eGYsrkvtm
PzgWzsuZ3toxHk2bcJ/u2SY8GsH46udgE/J34H0yNNiA/nOl7lkFA963YPyw
4XI0kgqxzap2fCTsHrK8jn8dhIJ6lr8LH42E3sR3BOzZ54vcY4tZ6AeXvdDm
HcvlUxHOKBiewrW1dSMRsKkEn9OJbrhf5JqlfWBjd9weybLvkP1wdL3FstWz
sg4bzgRb6Nr5+yK0CvsZbRa3xw6bAK5D7tQTxR9vtdBWMa2x9UYnC919Uk+4
30yz0O/THNCks4eFXtdtKMJec43WFeEj8ObLD5a5U0Ph8ITtFWVO+OFvL/Yf
ncnxx/ZpjA9jPweiczHGA6cOmaEXm23jBfFYksK2oxdrTGgwiW2/89+a0awE
79Un7YnfSszhWb0K2/1SS20bnfd00bVJ9z8nNq6i/VQk2/D+6UT7zVnwWDLp
7ulyT0pp53icduHvOzzWgCdH+Tse+x6JEfnYv5lVLwjm9zznQeuCsLQc1/uK
tO8HO1/2mYbfH4WFWzgmasUXd7Ruz37eZN9RuJjEMUs5dTxQoTFj4B7J3vg4
iHNkUu57Y0Zcfgv99GNvzF7Md0mEHQzGZolRv2J2wq5KXOdzX0wk4i7zXgrc
7YgBO6dY2m03uWDzPfbn3mvrio0OnAPYpbk9ejXi2v4x7QfA+xDnD25X9DiV
GWOhn7v0RPB33gMXHwdifSbjtMCCnjib/dnSXs4+EjHpHFtV4bovfn/ivfrk
COG6Ntx/ZNZIdKvP+9mngjtQg/dk0+g41Pcfbml3HRwDpTfbrFxuBKC1I+Pz
81Oicfg8x8Nb74zAwdl8/8KquzHoN5Vthsu+GGB8wnisXTsDch/is5ZnmYLn
xZiPZRKffCl8Mu8RFdU/836oHK3iosSaHiZekSdY5M4hFeMkNmkKybGxh0Xe
kTx6f4LpBzNVnK0qOt10FUslziGIcFTAJqa33ya8IbWJHAiDfVjB7R2OE2bI
w+07ia5sxfRu0h9NkgvZnbBJjU7cHviM9FPxxVy5q2K1xF18Ib5bQOKyLlP/
QLn7xplk/iXJ/3J5TBhA8gGv0jizFjC9jOZWXeY2ktbkjMRjLCdZ+r4dt7d4
r2KbxF2UIDn8RXTe4oSvmkpcmRbHVEf4fxLhiAzBSFb03lISJzaBZO46iTHr
R1hrnei8OwkLPBb7lYZNekhdzUEkuzuK7NZ8bbMFG9QjzOArmOEl4YT8YvO5
QdijsGCP99TniGAqp78qrohN6cBvrc4G03OIHidYqzX1WSJ9NP/aD8EnVbWa
V4KLjlB7r6//wzznBfNsJXqg0OH094f4EG9pNbukf6BWS0FsWR3ob1XBQn+J
dpPx/Yg+Ke1aPYcPMmY2zWu4/BatzkSy/MbT9P84wXUjaK18Za2K0DqtkNoL
Wj5gf/kW1aiPs+QUHKR3dZK5PaC/8yUntCm9p4dg4yuErdpJHuLL1yomiE1y
GI2fV/y5Onr2ouQeajazHGlvQ/QwsRNa0Vo+EvyWRP39JB5sdm8F3dIZk3Tc
a4ZHC+b5q7vTb/zMfPihsxmVnVhX2h5tQkI6y9aQembc38W6VUyteNxPZXuX
b4IZSS6sj+8eovkdmIdXWUwyug/LDvQwYXguHiflghGXnjAGm1LWjFmBPKby
2Yxd9Vm+XCd96G8v5iEHRis4PVHqq58h3JXJ7X8PKDgvtadUTwWhOVJfawVh
3WA+Uz0LEoa5yPhnfnHCSx+YbjKccI7EHjfPRzj5GLdPjlCxZQm3dxivos0L
ph+uIrkmec33aJxeH7n/z+MKfm2T+7zyqni6V+p0Ec6tvlLuOiSe1vgNP/t0
hIpTYovLpn1yXO476HVRhX0rpjMIpzlKLGgN2mvNhJ9YE/70uMXPVqCznCZ2
8irEx6bkZvod7cFM4aW/Sedbn8Pj3Omg4IDUDbCaEkNyl20XETaR2NGA5chF
RwNO3mceXoBke/Yh/nZ/upqQ84btHra1VRTqxfvkQ1EjspexfWx5g1ikX+b8
91JfzGjVSOoMdI2Gw0aOK643KwTtN7DPpaFLBLrsYxuF7QVP9FvPcVaZpUei
w0+O47rWoxW6hnHNENvaDqjs4mahS81tDl+drf4ene9mR5tg533OiZu2sTOG
j+B7ewfUbo+6J9knuNfFG6Nf50VMWxWbStXBj0ofOd/tkD/2T6qIIu4KhttV
wq4O1y3tS692xZ3WS/UjaE+dmlkJd/Q3LO03nTvj3S++0/BRcz0CkuXOoCWu
2JXMMVpXnL2x5DnbQ/rsCsC+9KrMHyoHoIxtZQv9/Gk0jg1hLLrrjgENFJah
Raqa0XcGn4VuwxW0+8bf69tc0nnlztM73xTMkLzC/+Ys2+8i2Xec+xwmHG4Q
H40HYe1KkqvV6KqC1Z95r/odNSCiCL/30vtY1GvE8eFVv0bi4w+2KZUrPhLv
nvC3ePUqDAWuc5z8yS3tYAj24nW+5IXJzxkbJx/sguou7Lc9GzIcps0fLfR3
x+6ouny9hV5+0BFXzzJG6j28O44W2GCh6/60R8dbzRn3hvfD1A4n9WcCVRxs
Vw/Hf3+zrP+FFt2QcJL9v3MGtcD9y1Us9OPgpui1mmux7u/uhx76MvCvQ3JJ
Vxt7r7+zPHvLayDGvLxo6ZP3WyeY7WdYaL/IQUjNy3H7PduHofJ9jp9vYuuP
cjvZ7vQuKB4HHjNPW+Mfgha/2M9YLiAQOelsBwv4aMKo86yPbHntDxtnxthr
dJE4ITHwBfeEY5cr+0lP/A7F04sOFrr4eBOmf2DeuLahEajOum1chglFrvAZ
1Hc0w7Ym8+T80cRjizA+N7dUsNCR98my6bRfjzKfXHhTxRC5Xy8rVMWzmXKP
IYi3SCxBQdLpksQ+r/lG7kmtqmzCMxMFz+iI97SWmqJnLxBWbyp2CcImPa5x
exvCAvckTmkSvbe0vLcT8bEukivd7L6KhBhuTyVcV138fd+p/zeptTXrtIqj
YndqdE7FoFoi6wnP/JLY47EPVDiILa4SycC1XUT/JV7gLrK+LMnkYpL3d4vO
yCA5I5cJXx2X+FVXksn7JJbsNsnMTMF1M4gP92kt/JYwRc25Mk+SxUdEFh8g
eb1TsKgTydmfUiOiEvHq0sKr7ajPEJHp2r0xtcRmsp9kdIr4B/cT3pgmeCOM
5v5OcMhHaqsv+MqZsMdiic3+r73oBOGT4v/qR9Fvfyg46hGN8UN8jtOJTpQ4
seX03jry3qM0hr/InTfUPkrsNlqMWCUZcyiNCVnPZfTeEjLPSJrPQPHrFaX/
Owpmy9buxxH7VSOiKwpuXKiNI3FZ//V7fqW2MdL/vzFRo4i+L3203MrcMp9w
6t9ZbHdB1PelxErVpHltlLU1Uv8z4h9cQ+13xTYYTeNVkXWIICy0Q3x/E+i5
p7OY9qL1nidxek1p/Odih+xP76wvGK8O4daKknewgn73DMHPBvo+LmJHzUP/
f2fP9PbTCmyOMr99NZi+u/jauhA/bhrOZ7Y8YfmfcseB22AzZszgM36nqYLO
DbjPrBATts5l/rCKdKnp8WzXOqXVFnVmm1XyETMa9WUst2SJESMKia/wmhGF
8rHtK4T6DHPlPu8OmNHZkenEUAVGHfONcQEkI6N5nn9rqPjsxHO7QjrT+90s
dzqOJNzux32uf1RwM4rbtbqBb8RO1f+ngpbzuL2gC52pF9xerbGKvXLf9JNu
hFclh/oFnb9183jMVqQb6iSWRreEcGwf5iGbhqiwk3ui7UeTbLjOdI14FeP3
M/01WcUaqQ2YukhFtsQeFMmg83Ka6RPE3+yFv03do+KmxL2bUlS8GCY6IO2L
hdWZHrSd9KndTCfRWV8qtqwU4ktpwpcakP5YWvyPbV8r6OjOv/3RmVjMTOQY
qgkOYQi5wfJlcIFYOLZjvNQxLQ6Hg9jnsiavARcusE1yjY0BXWwZjx1PNWNf
Lv5eW94ZkCl+kEZh0djgwXp60WphKDSSx7/m7I+C49nP4jDGF49Hc57+0u59
kH2LfTrvd7qj4aCb+hcPFBTV1UCTLc8ssnJyiwB8iK6MifPN2Ly7NAKbH7K0
l+msR1D9aH2v82bkblgWZ6+d0G1vbcak2cWR9Xi7LvyPGdu7lEfrOWd1pVab
MK5OIZwIWqm7ulNBucHVUCfxoa7AMRNmj7FGsUprLWN2mNIBw86N1c+cYMa6
/KXh1o3vKS6xvismzF+ir5pFPGNjI/gWzGOZc8FR3iieYMUypVofzNPzb4n5
EwUniSfftDYYP0eyraZVZQO66nkNP40xYPEHtin9pd+wZSKvZ1fCVl6SG/KC
MMceI++lHz1Ipvzk/VnigIqij/j7lqb900hqVmckaDVwJF/Vg+SL1JFLIpzc
po/UG+kdj22BjB+WvDCi+kA+j5O6hmLoAY4PtznghdyzGEcV/TESP2+Uxic6
i64t6qHKY8Y/1l1csW8k25GWt2iK3n8LWOhVAV1xcyvnJvy07YzmfRmjHija
ErUDWljok84DUTLxoj5qv4Keq6qhxMBHfHehjRe+B/zWT2xG/CaugnaPkqW9
UGHCaXquC1p/mB2c7Pj+7p4/WmGUawcLXWS2J9qdZf9mzhMHND7AORQ1H3vB
2JJrU1wt546c8mx3+tLJD5sqsV/PLTEa3ld533ZbHor2juwf3LAyCs+fse9b
mRuKD9bcPsDXQHuSv53dhSgUWMV52feuhcPjPGOqZZeMyPzIfO/VwUhkFGcc
u9smGoYs3hvXHppQbSrjtHnHzNg0mPfAk6Ik31/wmXVro+BFL94PJ3ebsD2b
MdiKSAXVezOfnLpIwdePTG8m3rV6ruQREy5wkntJqlkTDs+WGs6EHa4s4f2z
fyPJuDmSM0gyZJ7En+tIbneRu1kfk0x+JDFO9WjMgvnFVkPnoYjIlz0k41qL
LSIPyaidUvdgDMnMzZIfvf8d4ZzdYn8geThOcqXvkQx06iV2EmovKfl9j0g+
LhG7RH6Sca/FhlCMsFagYK37hCPGSF3B54SjnOS9SwjXZYm9Lpj45FWpC/GL
cNAnqf01jeb/RWLszcQ/Kwv/LEAydJjos1NJLueIXO5OMnePyNzbNDdF5pZX
ywEUP+YgwgxT/tXwJHm9TeS1Vr/LQbCZL/VvJL6qpyTffwn+mUN9eoocz03t
VUTuqzRmY7FTaffsNBW7jVZ39JfgloX0jRYJFk2gcUrIOIu0OqXy7FN6boPM
OR+N30LGj6M+xaVPlpZL+PN/7SWkvTT9lhJiO6qoxUqJ/e2MVqtB+jen+aiC
/aKIXimY7b91TV/R/1MFRz2hZx1k/lr8VT3xFZ6k8cJkL/Wm/+8WzDlOs93J
fEB9aoqdTa/Z+mQ+1tTHXnBgWfqN8fIbS9A46//Fp91TMTmaaQ+ai7XsT1d6
/1SJOTxGY1rJPOOIPiBYrgO9J1nq02YT9nQQHN6L+LNB7k+fudWMelZ8ljt+
N+Ob5CTOeK8gJ1BsNaRPjBG//8MnJvRYyHyg7QAzQiXe46Q1ydnWrIM/vGnA
63CWs4d84xBXe7iFHr7fhPYvmCfUtiPc9VTqSNDZvRAu97zTb3ooNp+lhJHu
RPIcLu1QEXmQ20fZ0VmQGp6OfireBokuVo5wvo3EvQcRhpc7JqxJF4luzM/m
2qTir9QC3VVFRZTca9OX9P1v4PbFRhW3JEb0EJ2hGm143UJn0twkHvLZShV5
Iph+QFhrTT+mf9NZzGcUe9cCFfn1TLcmXtRdeFF34g0fpUafSs/m7st9Yg/S
OZL80OXraF9J3mJJwmB1BIMNIJ1rXAg/O34KnUGps+RJeyaP6BedaA1nvOb2
EbS/oiRXaDThuuKC6xxobCWF+XBdrxgMCWdfxuXK4diyBRa6/dFIFK3CssDQ
34DSjVmOePnHYvpduY9yswEDNjGubq83IjGcdfCUYgY4/GU8Nm+SEVe2sW/a
0yME1w+zHWBhiQhknuRYnY3jgxBu5ngnt/tOiBkz2yL7xkW0R62vfvp9H03Q
TSuCG5s26QoTdqo4tTiWZG3XtZhFY9f4qS+fOFanP2jCi+7WKDpljW5xTROe
xudF+z9zdENJfgxoXhV7fO7pahFP2ZuvMfH8PPqOiUYU3/5D7/dljK7iVwVq
1ZroUfalboDZiDjf73qHJqN1MCuIvFIZ5tRbuqanTfDea40hu9fqbqURHqhR
DYM/P9A18Tcj37aSmLxxjwUD/J3liHl12VZT/XN3pNfYZKE/XAlGUgOOf97s
FogMf7aB2D0zoM5aPi+prw24dYDpU2/NsC7J5zGQvlvARJatX+kcG5YKJqc9
OVh8OsW2kOyT9oZHSUbInapIV9FX/NpoQDqXD+/5qEsKHj1nPWu1iwk1vrCt
smIrIwJ78Xc8YReKn/6MtaxUL6ijOf6q/IghSEl+pv97gfSVqOrYO/WJ5bd3
Od4LjgO5dpZTVFPsuMn2pYNL7fFT15TzSae1RN+CrfSarlstuAm6BLId8pm3
C9rdXKG//swMN5dyuPPgtGXMYn5BxN/r4PN3BX6oiQqjXlraawYPxVZfzkn8
dEyPmSfj2Ma42AUey9mHOKR3IM468ToPch6Kso/Z5zvnbwhGTuTYsCPDgpCU
XYdlx7VoWNmwjTGlXjRi67AN9kCLOBSSerMH3eIxehrj0vcno/H+GsdQ5auk
3YskubdF4lHame38DrPjsP4J88BOnmbUXs88M8fdgLkd+ExtcTZiazKveYGb
CpYVYr73ifBO5k0+pxl/FYzbxO1JhJkXtGUetZ4w6J7GckfANwWxE7lPHcIa
2C3xe6mEl1byHggg/bHzO94DwzqSbniK6VuRKkaskDjY8Sp6Sy7PrGUkr6W+
3/Q3xMfkPr4okjUbRdacJEwyRO6Me07ycKLcz3uW+I+T+MjyEb44IpinIY2z
TPLvFtIYQVIPwYPGmSK+Pzd6trvwrpVEzxaccJH4nK3IsgaEeTwkD6gSyUxf
sad50Ltajxd7C2GBeZKX7UDnv5rU+4o+q8JR6lFodQtGShxvG5KtVUW29iFs
UECwQTTN+X4q07OJHizr0Ilkt17sKj2ID6cKBkghuX9IbCmTaUyzYLyP9Fue
yZok0RkoIvaljtS/seCEPyTPMwVDavWvHCUe247e9VVwgoHmtlvmlqrVAhW8
odn0Bkn7fMJaswRrJdGYlcX+tuaHljfKdCsaM7/M/wrN/7vUQ2hC40QJRtJq
y1cV/GNN84TYju7Rb5kvv+UNtZcQ3NKZns2WZxsSPVLoO0QHSi2IWTTHeJnz
bfp/qGCYxvT/cOnfVavdKuv5gsbPLeNnUfszmWco0U7/alloa/Lnf2vyR8Yv
R31Oy7O2RF8S+hftvXISDx+p3S8gOaq96HfVPv0/fH5Jvt0pam8hv3c2jf36
3x2UNM77A4KHL6uYpmN6cycVDaV2SvcEkklf2R7VdC7Js9aMhb4S7rgRyudX
F6Lgcms+76uPmjDQirFWrUAzrl1mvlFqhRHfq7G+5tjdiMvrmW+0qRhDuifn
LHup8chsw7buzaNJtokfcFVVM57OYtw1rjDRDkyPzlEwP5n5xlOSC1kvWS6c
zlDw0yB3Twygs1mZeYITydSMPzzm5K0KXKX2V9H7CtbV5HGcSL+7O1tiRBuq
qO/P6zCYeJcq95Cumkc8x17i4ZeqKOomeTqEf2ZJTOb6qbT/pQbLtWGE67ry
sw7xtAfEfpVGe3zmKabzxGnyTuozaBhM6pF+9FfRLpLbr5F+s6Qkf6OlhP3a
dBS9cjSdu5uSO1aP9p7cr1p/nIqxj7k97znSTeQus4zZxNPkvtQv11V87it7
dbuK0XsFc14z48NqxtjKxRB0PsR592e/+GJlHPuJni8JxPM5HAN8p2QYdtZj
e1SfXLG4UontXYeXGtG3GH/3e4ZY1G7ANswq42NQ04r9kmfuR2OwI8uvfo/C
8EBqNDkc80XACo51UTt4QJnMMTwXa3bC+taJFtp/mxfmDsuNkqTPr3mZCxlW
0yxytvmDbiiEdfqlbhEIdL+mr3V0hy7vZBOevCqA46WX6fJe8sdT/VF97vX5
9YcfhCN38FX9sz+7dbnbhiFv+Uv6TR1O6/44R2MhbusN6YstY87/1A5Xhvno
O5kjEbL6hv51q43sb3rTHb8Lb9J37BaJqrih/1R4M/sQMRiln9/TP7lqxIbS
uXB6L9/D0uYo0OyHqj9DsqFCWCPU35Xb8lsCa3SHviH7zmrs8UBOR47Brt0n
BL1mMf5suiEGq9bxuo09bMTVdby227LNeLGDv1ccyROzH3/H9jtVtJf62BOu
qKgu93D9t4ZkQhrxPYmlmXlKQb0DfC6Cp5nRI5h9/Vtym1DrgNzVvsuIbWZ+
77itEbgTz/FCKw/44WITjj0rXd4f/dPKYwrxnfi4Rph+hH/jXlcPPD/J33FX
jh3WpTaw0LmWtkGr5j0stJ2uHbJbDterpEMeSq8HZ6cflnWbWcERJWIn6Ru8
VLBwUQ38WP/c0p6xsjvUv+xb9HzQFsnDBljo7DRvhG/hWK8SQ1wxZifb06b8
GYr7sVwnxDo1AuYonn/LqSGYNJN91v2qGbCnO9sSXQwRsEvkuzvHfYrH8ibs
B5+UFY/YBRw7Opz21riCzBs/EO5Nm8y8MbFBPJpkMqYq082M7i7MD1ekUf+d
3H826X/HizMGq0fYpttJqTW63YgS4bzO86IUtJe6WNsIIy3dy+c6KFvBb7mn
vm2oiqHTuT34kYK2Lbj9N2GnE2J7X0Cy9KXYrL7Red8v5z2L+NVT4VeNCFOF
pkhNP5InF+UOuGMuKkyveZwZJENSJH7pFPGTfPUkjvQJ6Xdyl412z96cf/Gf
JKdOyj04ibdoT3iJnCU59UJk2WLS/WuI/UrLdfsrPpoALV49XeQdyc8bgmfK
f1YxXeoXeRIGWSCxW82I1wWLP3E3zdNd/IALSP43lfy+P0S/EV/hV3q2isxz
F815mNjNqtMcTILNYmluUzL+N+fnMucChIWmSCxQCuGWPYJblhM+CpEcTC0G
/NV/4tuThN78VUW6xOrUpzHvyZj3SS6vErl8Qesv9qsnhCXeid1Gi4eaILjr
KOGiwpJjruW+HRefl3YnYSfBS2bCD+MEbzTVYqUEq1yh9x4W/+x/bUG1aPyt
gpdq/NRyQpnOIXzSTfx3idT/sIyp1YefLTaiG/Ref5lPOGGP3YJJ0mkcW5m/
Vs+hhczBj+ggwX4nCAelib0rmOim4gecR/9P/IeLtLqp8qx2j/YFwWBjqP8k
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
+awNLxmDzjbsc0/Oa8aZ8izfS5eJh+8oqRl7RcHfD7xPTpAeX0DiD7VaLz3E
JvCXZM55yb+oTfLkvNzR1pVkxSa5660RyYcu4kO/dMeAFMl/bB0bh3dhfDZT
6sUi3xm2SU60CsewjmB+eDIc+6cxZr6x3BtdAtiXF1cqBnltef7ldH74+4ex
9J36UZiWzXujfXAIUq35W5fxCENVX65Tmvd7KHLtZrx0bFMgwm7I/TV/IpFS
hZ/dnB6MW4vZBuvT04R+Ynu3Lx+NhHtsf3OqaUCYO9vVvc+ZENaE+cYbwjxr
BfMkEx652IzP1MMmJsSPYdvUo9YKPvfgcxGdoSAxTu6B9VGgK8r9VeInGcJP
lu0xY3VTxki3ipG8eMNns30P0vVW8Th3SG96LXpTdiMVE0P52blBCvo34jGt
UhUc6s190s6q6Cz3Asw0q+h/ls+1z2EVoR8kBiCR5Lg1001Bsv4Aj3k6kPiS
2L7eRqgYniw1/eYoKHuD35Xag/TxH3Jv5mUVOqmN/LKQiuk3eP5P0hVc8eH5
+LsT9mgo9XboDBSXuw4zST7fk5pXBUlmFZD4qxqElzykHtdMkqtzJeerHv1d
JDUTRtB7G0L6kCydKraR5NsqbKUmgyPJsW6CPaoRnSE+uPyEL3YuEbsByeqZ
YsfQ4qPHidw/SbK3mdguVpPsbSQ4RLuXJlywUDDJ6qXijytIzy6ROPba9Gyk
xKvbklwtLvFgu6n9vWCkqjRegPzentpdh5LD2PGKiq+Sk5K2XcUsqe/6l+R4
msRdl9FiwASHzCIMslHsbB9orVrJHBrQmlwW/KPdpVxS7EtaLalaglWm0Rjl
Rdb/9/7B/8Zr1SdscEywQS/tzhrxo/WiNdkpdq0iWkyU4DFXeraIPLuCxjPL
2i4leqTQWhza0ef/w6XHZJ4NaZwqMmYavWu7zO0jjVdF8JJW07Sl0BfoXY0E
Uz2j9veCnWpocfuCndyIHiO/V6uVOkRw1G/NPibjFKf2JKF3UnslGUe7I2iz
/Jbt9Lf01/+tWzmZm45wVLRg7GD6FoXlW+jp954R+2EizaWpfPfJ1F5S1mE0
jfNQ1jOb9k8NqaVmQ3v7vsRrjSU8ML05n7XCowzotICxzYn4OPQZzTz29zsD
ap5j3htU0YBJrbyEL8Wi9FPmvfkzDShdn/usWRSL6HTWhSOaR6LAOpbRFTEK
I740sdC5G8VgyETmwxffGlD8lOSY3wrHgUfMt10yo3B2OufvdCZ9fJHo42Vo
z85T+ewXH6Og3mSxZRVWsGqa6Il0jqsLDywZp6CbF/fZUFdF1UHcrsxSESG1
1kduovM7n+nerirKFGV+otmkZ29m2oZ0lz1S8yrLTPjNyGPOofYHBbm9VoSC
LVIP9r0b4cD6kudF6/1pF7831YewsSe373OhPSNxEYY2tG+Xi++PdMPCkuO8
YqqCmzt5TOdvCopMYh6oI33OepXcu1FVRamW/Gwu0gXfdZI7Ndap6Dee55aX
zu7yZjzmxRl0luWeWfdFKkZI/aWGz6PwvjjLqYl6f5jd2BcT0jIcaTZ8b8i4
NlG4XV4w86FIfC/FMfPPSXfvoWPbQr7+MehmzzjqliEO7ibeS5VIjk818rcu
+DsWbz25nkCNyrHwWsR76dbaCEQO4LgatdsoLKnDtZh8PQlX/GKZpdV3dDrK
8V3v64ahwiTGh/mdAjDhMNdP+FFkFA5U4v1W4JUf1rxlbFO/qxc6VOH7FvNv
Dsc4W95vqqcXWvzg9r63IxE5hX9X3eYDMb4V1wSI2+6LfsP4vR7dh+Bpb66J
eq1xIF6m870wea8GoLQ923kO/ArB9Ri29R2M8ob3Gs5JrFQsGJ4XuJ7Y8l+h
WHmKccWhsrE4Y+Z1eLokDqdLsy2rXDMjgu0Zg01bZ8SP9uy7z1NRxSi5C7go
fes3chdPY8LUecUGayLecEBqmaaSHCsmdzwdmU+8ri33eW0gXSCQ91hYYwN8
x/MZf3M3DpWbMzbeNzEeD4ewftRpURQ+72G7tA3t8Y17pB5FmXBcmMwYrPvY
eAzrzP2rmcOg/844alrZOLS8wN99xpJIvIjheu950wz4tY/1uyYfDVh0jfdJ
m+4x6FBM7hY8EId5q3hN8hH+/zyReUujJwZ4JUtOQQUDBtvx/OvQOf7Vkee2
9qQJG8ow1lpfwAzHBtye2FhBl2q8rybTeWqexRisUncVPeWOeK3mXkGpuYd2
Kg5t5vZkLzr7bnzWbk1ScGMDr2GLpoRjDdzn+REFO1fzs5cJL0XLPRHD59H6
S9289YSF7Jdye1vCxrGDuH30DpLvUrs43ETy7qTEVp1TUUHilI5qdTEncp9x
xNOmCE+bTzxtkvgoH7dXcUvqsNl0VtFO7GM2q4nXxXKf4tMJY5Rm+jvtkQyx
c9YnrJQjd2ecW6pilcR+9CGc81XqGDSl+YyU+UwkjNOk9f/ksr/Io2DCSpBc
p0d7VLhJLeUz1L+/5Bz1PkZ87w+3tyMcVErsbNsJz7yX+PMJ11WUFZ9dVcJQ
Zqk/n4v0iy3iN1dI/vuLHayCVhNM6prOIWwwQ7DBKpKbC0Vu3iZ5+0hwl1Z3
3E/inLU79DbIs6NI/hYT+ZtCeCRJbFMzCb/YSGyYx30VHeR+yagnKpwlnm0E
fYtVIl987hDGCxSbT7ZWj1HkOI2T918NeZpDBcGKJlrDa2JfqkUYwefq/+w/
z/7VQidZv1lkfU8t91Dw2z6ib0t8eG3tHkDBIVqthSB5diT18RUcUpTwS5Jg
rTZEuwleekjr9lDsZhp2m/TPHkV9noudTctveSw2H19qLy/t6dS/qGAbrXbW
25//w4SX/9VqoDnEyxy0OxCny/gLtbqpYo9qS/37yJy1O6+DZJxDRC8UWqsV
tlR++3StToXgqJ1EnxL6BfV3+fU/bLZU1kTL98wl85/xTsUXidmzoXW1E9/3
PprLKqlTull7p6zJUBrvq6xVX5rjBcFsueivzSjZJ3RW/h9ZVx1d1e50f7i7
P6C4uzsbd3d3p1C/vXbOwd2KS7Hi7k5xd3d3iktx+ea82azHWt9fzUpzc5JJ
MrNnMpmZy7jojTp4YH5Qfv50sRtvbiifrPTKic+MNTq4owsZWygeOzvYiW3z
VIZ+z2+iQBrlV9PiOrDssfo/u/4Xgs9Oyu6rPTBmkeZPKXCoH8Iqaay/hN/6
Y7FT5U6ZL8Go11LbjxobgKOj1NbxOZcX79qpvumoYyJsqn7ryB0DN06qLjk4
wIvOC1W3taoaKJFTfVoSCa/7ulB5Xd4rJp580fI4fxNnqypv7LrfRMb5bCO6
29r8ylvaDrQwfQz92+dYGN1IaXU9vYmLRxTXbZ9qIvMd7efjQxPDSzInYwkL
scczXkQXC/5NGK9e+N4L8r09fhZmM77NWdFf8zBmRadidhwYLW/+ZGL8cL4n
Ehn6sLyOYXJ+C+vpl7Ve9Kenp7Wc0o6RQv0CoqtNqM89LDzm7Cwtpxed8TJ9
/471ET09K98RhIfi3V7FyVU29ceeWnqfmKhrMH4fVXwVEhCC0l3VnjlpcTCO
v1CZ+yCr6P7PlSaZR3rgXq33zn0F0z06z5wvbwxcTqXlFeEezGKsj3W+bvx6
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
h/rIHuC7hgT7TDSepXMpe0NwckLts5/wqzszGRtc+MrZptp/kOhxeXl/8ayo
/Z5I2zQ4YiBNNx1b9bKhmJ9UY3cYjV0Yn05lZZkYchY2av/p2xi4Plzpn7Wb
YPiWvB+RNlk3E/uJLr+APiT7alrIcVO/5dhmonIwfW/SG2gcqPvtSqSBkZV0
DNevebAxie6rTuNNtN1D7BHXjWyFFbesvSl8e4+2z1rdi0/XVC6XXiIY5pbi
nIh+XqwdqjiwS1k33sZRfNhkjxcNXilGCt3hRPmJagdrntuNd9u0/zxxHAi9
q5h/dHsXZtdXOpz64cahVopD6tx0omM2tV8ljuPEpKG6/3NOMNDHT2XNSqcb
BzPqeIau96BbZ8YmfepC3RWKCdcIfl41kjYT4ecHmOvwiciHSTWVngmGC99m
rrqp3WU/dNDydZF3+Snvugo/2Md38aWFB19nnMYbwr9ztNdyt17Svg/xg+Cy
jY+UtrtferCwu9I8aVkPrrTS8/iyjIGL3xgnqqYXA+8rnevWMFC1qO6B379d
aJJS6XZd9IzjtHftOuRC0ZQ6x19tDSSeoO2bh3oxaqeuSzGHFwtpS48730An
3gkOt3MCftD6d5lMDL2m52hrLBOe/lqeNM/EkviMaxdkoMwP7T9smolj93Ve
yXwFtwxi7PSbJkKSKT1fig6SjnkfLghPGE+eUHyMhaiYPC+CRzIw3t2EpSJ3
DK3vLrqvSdvIWzmvwWHa/1LBTnFp95gi5c11tbxU+H0cxhkYscBCX97hxguy
cIrvBC8NtdDnqZZ3Cr+vzfhRP0Qm/6b/T4DoSVfyadlf1jom44WmemPhNuV+
C9HTK/KOY+9TO5YX94CM2aLf11fR3QZxj+0ROjRlDAc7J/AU6u/9hefsqqnj
yfGPhRU+jClRVeQLbVNDO5m4/UH550rBYLXSafvRzwRrfdI9MEiw5IBJ2mZd
bxODM+q6zBBcdJY2NN/egrV8GW+nuugI57X/X4JXixCLrhIaNKHdr0VaCyUZ
B6ytYLw0fB/asoWJO0f1W+MFY2bLr2vdap2Mmb5VlS4JFuU7wZ4vLHxgPuj+
whtjkzduETl5lPmMSsu6ndtNfCV7oy3fSSWV+qysbywyOittHXaenfz0sR8s
a/Gba2HHGH/D+hSCGb4Q/0wQDJKTOKe3bUvh3VwHkd01eK/3WsqRxAmhUt7B
+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
z1hYNx0WWvHOYqVgkvm8X+tSxkIsxgvtcMzAT75PWZ5cZArf6bzeZqK2Q8fW
o4iJ8rS5zRT5E9/BO9NcIlubaj+jqhiIl1Xn+PCKF2Zr3auTD5qYulz7uZzZ
RPtbtFmt9WLgSuUVCR+YqFxQv1tlvuiJibR9h+GC/xnfI53gKwfjnca868UM
N30LB8n4iyudZwrG27pNx/mwvIUSq3VsBT+bCBup/X/3t/Bpmo6/bgf5Lu/K
c6UROtOXJr/gtJvM7ejvY6EqYxim2GUhE2NNVDtk4SLtHuPsOPA1dC1mCy5Y
RAy8ScpJmYe0vqzXLvrWThessm/zfxisDzFYLTmXdXlnFyHY4R4xW3LBAyHE
YGWlfX76XX8SnLKU9i777q8bMclAwWDhxGCrBZPMINay40ElJ8aLEDwyjhhv
jvSTlTauAKnfTRtXKemzBX2/bRw0iXdw6wWr+PNuNJ7U1+D93W7BIZ+JQ1IK
DtkU9Z9tqgNtU3/7mLUSLJSPtqaF0v4f4pZEUp7M356TuVRnfsaMdnwM8q7u
Uk5AO1gtKY/mO4Ii0ueQPz5a8p13nG9+qe/P+s0ylsscZ3vBpMfoWzVbaHuO
67Jd6tvSRnpDvuPLMfyQuW+lb/x7odv0o//Vb2d9ZaGJnYvdLrcWOsXiXeSp
2KL/HmDOl9Uu9FuusnXaVQfO+yrfK9U5BG1Sajzt298D4d3Hu6TfwSgexLzS
5YMxMZveC1yd4I/jNRRHVbsbhDwzVCaObdcBj0Y8/Tdu/Oe7AVgcXU353spA
oJvyzJntPej3Vnlaw4zBWDBbeXLhNR78aKJ87+xcB/IFqf/M7A2iq6ZQvjdu
iBPPFioee/LDA9cK5WkdE3sQf7bK0wKF3Bh2WfXcXgM8aFtJee/We8IbLynP
aepjIvCO8oR52d2IWqbtI9IYWNJLcVHLBB68HKd93k/txT8plFenf+gFxikf
OHrdQI2t2udXp4HXqZQnfB3pxvOOigHitPZgyS3GWerpxrITavf4FduLoFOM
4VnJiWiHYonq7wwcoM95gvhezLqubUoPdaNNXe3z42sDx1JomxrCDw804r3q
SNHRoukXKuemCXNY7BDcPZL5rwO7ODEuqdLwQuVQfMqvMvdsXzcm39SxtWom
a3RMx/zmkRsRb5T+5wXf5ia+vVtY9NBcyscybjXRYyDjRA030J65gOsVFllW
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
sdD5DulsOUWHVtK4ExsNzErCb71dZ6B/LI21ImeWfJqL7e5NE9NS8bcbi5u4
W4T9zCS4q67G7Ooj/L+ajd+dGmrBT9/It9pm4ecR7q/MgqXva8zqhbsE82i8
2aVnLezRHMQ5BVds1ju41KLfV2ie4r+CMc7p/dROwQDV1HZUR+q31fupU4Ix
Cit2eiHYY5Vim8VCOxWHHBSs9VGx1jX57Wm9B6wkdAFtp6DQt7QP3vyGE/Xe
sLe08VFtZVW89jfFfi8EY8TVOz5vTLbYitkCRL+0HkK6hPSlub5JHCP1+yk+
8cZ7X6+4rpVgLbfarBoL3VHp4/Lbu4qvXII/Z6pfWXv5/1rt8znp56t7/xeL
dpU6J7XOCulbNcVmKYVXCdTGdU7GMlP5WVXan7ONNAQ3vtH3C2cFQ+XQ+A8l
BCeGKIasION+qPnO1kr5WMXJXaU/qRXXDRN+z1Ub10nBpJX1HeKLTwZGFuK6
3ZNC9MsGyvb7c12Yspsy6vJPE9vUL7fMBtkvAdwv60QOn/dQDid6FYElOYht
sgWF490clu/tHo74o0hnatAdDWcn5Vhu9MHq9/lj6CH5+8KoRjx2MoWBbg25
1zocC0bx6jwjj6oYicfh1EcTRjkw9jBltTXVgVMfSTdub8Ox5sQ5W/0jcXwH
629pYsPXPCx3HPegmPrD3HztQrH01Omhfe1I+47yvGlPF06dJ1YJeu7E1vXE
Xb79PIieRDlcGjY0v0HMZjtvQ/JG1BfRn8KQLIo6aMInF4qWYvszPglmqEX+
JIkr8uc4ZX6upm6UOkSdm/SUC0cs4oTXNgfWh3BcRw0TX12UA2lHmci5nnRi
mZPpsTkXLZ7YMHI1+7BTzuabXvO7p9wW1mkMn3IHZV981nslWS9BPUhPlfNd
PB/K20GLPIjU95UzpzoxtDaxzcQXduRJxbURt5ILa9KRPwlDDdR7TT0bDBd6
5WZ51ex2DFX/5IgGToQkps5NNM9Aps3E9vlmGFg9i/SVai5cLMrf9gh24swM
1rddtaG+3mVH9XWgdA3yZGAOB8r/YH9c6d3YdUT9lsdH4vcj6t81qSMx/xh5
Xq+DDX9bcw2YN+34e44431lGsPd6zuPEdP2Qbwr9us8OFT2+g+1Uc/dF4mWF
OO9V3Uji4nyVy9YX39Jy3Y4uFIaqlYjnCx/ui7wPeI92L24ImszjHWjk/GAc
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
0dXENsd6mxiXm+WBgnESNWXfPtc1sW0a60yQ8+jHGmxnxmgT67aq71BOC8Og
7/7ym2ivcaKaiG4/qTksEsmcVFL/+day196V4m+9PrNHf+r94ywDAUs53tEz
TCx6wzrFRa6/UEzlyWVht8aJ2jjNwnv1u+vU2cI19bPqL/htzwjihy5HLCzT
N4zeeD99A0jPjrTwcYXG8LwmZ3DNE/2hpYUciiV8C1nIpfacEgcsTNZ8jr1+
mxii8a4HppK9813zy4uOHaw+/M/sFh5sIr1G+la0PulDLgsV95N2i0z6nZ28
ChR8WKOD2pEE+5UeyLHvOmvi3DXyrfEnEyXd/FZ4RQN74lFW7BJM1XmQvvEU
HJVZ/U5r3zMxP7fG4YmykEVzAIVPt1Cykr4JamfhnMa673DVRMY/bMeZ3sJV
tWv9kjqPy/4vTn4WjWmZcaCF6fre5Kno6A2dWT5I+NxY+dxb9HBJzYV3QnDQ
Eo0hkFF08VW9d6slOvmhjfRFwUfHNUf8D9HjzbVOCcEV5RRHdRRM8lbvp44I
bkmquOWmlCfTHM0+Xj8otREVEqwV9It0lPyuoGKA/8bRmvvFQqj6ulcVrJJP
7Vc+P7yYk3R1qb9c/ZrGCG4ZqLilg+CUuGrDWSn46pTGel0lba7SNpPKdxfo
WBoKvVPxUl2hF/+bV1H6Hqh3lFllLFe//s/G5ac2pQmCwYrq3eVvoeNr3xbJ
b/OpLauw9PmCll8QfBigNrcywqfu6j+WXNqfru0nlb9N1d51TvoyIZT06lOW
yB/Sax9K/zV/dAOp30P91i5L35Jr3x5K+XvFXdmF35X1fnPYHtmz97je6trk
3NGOazv7HwPNmmtM40sevGtAmVO7oAcTgim7uq31wLWc575+0QYGa27QvIIZ
3IoZAkVOVDhKPZivtROry1Mmn+noQJY4lKs5U8rZ8xfP6ftKO/FjEXFR9thO
lNV7ur7rPaizgd9qNN5AWATb77zIg7sOlo867kDX82oTyx6Bnqv4drL7TA8O
NGSdBnOdONmTcv5v1lDk60jbWr8UDoSupy7emdEjcpNj3PvQjiUfidkcZWyo
qf48/3z04Od58qRPoUiMKUl9+sU3Aon387v1b0Tgx0W+t2qf1InQzxxL7ff9
MLce76HKL43Axw/Urf3tDjzvT57sOxeOHC14//hwgw2vTtDOtuOsAXMY+fzx
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
0veS2cNxoA11zYuoCKx4RLxUJqsbFzRewcqrNhQOpn1p3HzR9RovveWlSFhJ
ic3qFbBhjpu6+HYCD+5cI/788NoG+xmNFxQ3BJGzae8qMT8EhSrw7YBjpgdp
GrHNFMXdqF2aOiXsdwTu9SEeMO/Z0Hwy2ykyJRzrmtEnOetzB/J0JKZ9M9bE
sf3k7QM501W2acwlOefm13xqk0VGVfmHdNv3Hlw5oXHL93pw/jX74NVNtVU3
9ZW6NTtyXmYvFfxQmjqxiej6hJnYzm3BclcUyxVJbWCLxhdyXDMwbz3nPV5G
D9Zm43zZp7pQYYbeYYW6kOQb8eSkuza0Gc8xPsjtQP5ktBcV6e7Ar1y0O7X6
5UDp9RxvdIgLYz/zt48LeTAxQuNG/nLBpyXn7uEiOzbe5bwHtDXQZzTXdu4j
kbh6kpjqzGU7empsrkyLI5GsEsu/vXNhqS/bKfPcjupJiJmf73EgJIprrLqv
C+tWEhtcy2zi4EXyyk/mNJnaWpdXcMGVhP08k8eNzwk4v4M9JgZHcr4aCeaf
uoq8Chd533kCdVxR0bPtQN5ekrlrFYt0mMiD1e9Je99Y59FzdHw5Wx1VvQmR
N/s0v/CHLiYC/nD/euI7keKWxu3vGYLN9RhnrELtMIxdx3vwtg0MpNcYEYNX
OfC2GcfbfYaBbbO5H4PKOvCsDeeoX3cTB1JxLLkeOPCzCttfJlg7/0LWb/Xd
js9NyMMcU5zIr/kgrufywNGQc1dqkAtfanJtNBL9vO0deXJuoRtXs3Pt+X0x
UK4E+ex84kK9L8Raf2qamDKUYzwk2D78Ab9bTfZs+p6cixkvDLz9wzb3CB5u
oXj4Zws5Szo43gFPTdzQ/DXt7xuId1X9q+ubuL2A7c+c48Hs9pq/qaCFeYF6
P5jURPzJ7Fv2n7KvP3EfPZ1ioYTahfpMFpmp7/s2LzThp3G0Po4y8WQTeThV
sE36PuxDasEwn3LrXpN91ycz6fO1LPS+ye/ev23F+JZ56Tg7THxwsU2zhIXZ
g9Ve10swgMY73Vhc1swAll8SXLczgdriBL8tzcA6bWpY2H1e7xYF44Xs0Ps1
2e/+/diHg59M5DLYz+MjLJz9xTrbBbesL6V3LkMtNHjH8k1yDjg3jfUP7Rcs
Oof9HNPJQv3arJM90sJNjSN6bKPo6438Vk8ZSxkdy/nZgg8bs/zVMAvHP2n8
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
IpjhoOKTPoIXrinuKiz4JKNinv/mvgny5qTWOokEY1xRTFVDsEwlxU5xhS6s
drC/H6UPisF6SxsL1bbWQvDGPcUbZUV3/FbdUVi+Zdf+vBJ6s+KZv/KdTWpP
ayh9aK19yCrlj9QXPYfX/0p/u1763l3xktdXq+G//ZHy3YrfvFgshdqyooT2
KN6b472/U4x0WtosoH3YIzwZqz5p3nzWVxU3JpHfftA2X8i3kqk9MJvIw2iV
h5/k+9Pakx4j2PD7PNL/vccsJ+WjNTdiK+FbTbXp/fftZELp2yu1lXnfho5Q
f7ZbPhZO5+T6XO408CA995Fbzuy//KgrE3yxY0V10oeOOvHNh/oreqAHj54S
/0xuZqLefu6RuK3l/K4xtc5WciFtJuqggg9tuDOPMrPZNjfOqj98XH8XCjdj
nac5TMx7TnlV75YH0f14jh5RxoDxTuNFpzBhzWWdpAUdsPtShn9qG4jHQ2iP
6to7CH5b6B/1vXdXFL3xPQaTzB/YDtWv3IuhH6f0x9YGS2LogO9N4Nt0bwx9
doPo1df7Y+h2Ryqj4Zj+MfT17D0RNSAtHslZMXPynHgb+ahyzHrOUhKF02eN
qVO8dg3k2kz8s85dG1maz4ihe+fvjOlr38fQu1+3wZzsN2PoelN64rydeY1P
Z+mBwjl5t9g6UyvUuXc+ps72N11xNeevGHpHuU74XPtNDN1oZn2cuE6813Rk
b3x/xTvHr7vD8Sk2fblT/zHRbQllVA85R1fSc/Sj2bLO9c1O/u0mqtkpG3P9
dGFSY+q4pmNdiBVJXfZ2qwP1h9C+5NPFhTkbOF8fJzlwUv2aMsZ1IU5uYuD3
y22ovoj3cY+CnPg6luuhisjbZCpvfyR1Y/UcfivRYBem1eW3egsW+jqWWOi5
ywVnHpY/TeDAy/Fch5+TOZBupdqjSljIPJRt7g5wYqv6wB/Zb8ewDsRscYo6
8WAYdfqLxnZcjKBOD15lh/8/rHN8ox0pcyidwIPB+m50suC7ounpK35tlwOD
Z5IPTWU9D9ccf+cquhCZkjyZcyIS+e7ou8V/PEi9S2Od1XRg7lSuVc9KD+ZP
p07/vN+NsKX6nm6LgRYZiRm6tDawZxD18owVgs3Kc47KiMxuP4HzGHep6AW3
xm+ZZCGL2i7sJy0sU3tXPzljJTmnPr2CuXzzqmwZaqKxvlloKGf3php7dstI
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
v54bCGipa5dovoFJcbQ/92OZePqX4qhBq9zIOFZ/e/2mhbyxdH5cyU3sq6t1
1h8Tuo3ObY14gvMHav+fXzcxYaWW7/PghML625KtLczg+4tGHp/2CNqpZM5y
r9PzEiZYa0ZR5o5ZJPKUcSwhazRgt9YfKXhkP2O2D2sp8iK91v9Y00YXxiwN
miVrUULrLBT5PMTF/SMyNidtL6MEY7QkxtgqPL4b8wIcF35ei/w8WORJZurU
90T3L0een1jk/rM+Sm+6JtiJuYROyl640Vjp4oLfPtZR+q3bxhzeqaUQjLDS
5niX29jAnNHjROaMYFyRPqLrL6BNLL+MdS/vCj/IvLWmX0rNMJFHzD19OpHg
iqtaflL2bVPu27MlbUwbTkz1zUKVGVqnUHfpD+N4jB5o4zvjsnYRTDuN7yiH
yh5Owz38VXDdFvp0JfWz0ac175Qb2GjHHNmQeb7rYNwJGffBCC2fGS7n6LP2
0xNPIIx+UPtkvO2Zqyhouo1GuZVeusRGhD/X7qKNp7yrrSPr0IBxA46KvL5P
G0gGwRtZ/s1jKNhhzkalpwr9gzaux/L/zozz8FH6MJv3hp73bv3p7z1KZHpi
4o3/+h31FUxSmJgkuWCAMGKM7YIfthE/jJO/y/gG8Jfwh1x8N3Fe2qxHvFRd
sENhYpWmgivCiff+6/vtJ33LQb+vNFIewvuyQYKnkjIeQh8Zr5NY65W0mYQ4
cK70M5r9rCn06H9jrcu3xvBd4XfhV3F5F5lDMNgUYrAw+dYOYtGTMr4g6hdN
pE5H2rLay3cr8bsvpc1uxGzTpf5UnpF10t4WzmEhmfMq1B2OS78i6ed/Qsoj
eEd5W/o+h3YqT/6gNLQrfpS5vE9bXEPPPSbnar6cwWz0Exsj49hN/0n/2MK3
t9OuNc6Td1757a5CFralUJ7TR3SL9cOUr446aCInY+Y0zys6yFflXYeFVxch
r270j8h65tn58dwlOq/KoypvA5GrsNpAXjYOxrNMagPZM8SJfKtV3u2v7UCm
+SrXRmZx4iV9w449sRC/IvsZ5caXeXyv1DUQl8LVB9u3VjCyvNeYFT+c/VGt
qdq4Eg8MwK94ikMeVK+CLW01ztWfH76o0calsUyrt0doE/Wl/3KkAdqcXe07
IUD2+LiCWHfuqxeP9StVBa6HXbx14pz2xe77Dt/aNz05EIpiUFAc36hdgj07
5ETOKY+89esn9EPJzxqDdNDwZsg2X2O/N8tcDb8rjNBYqcs6IXrCcy/tat0O
Fb/e8tJTi3RD2vYa037Dx05IufOFl55zLQDGccU/rRoayL5O5dfMjy5ULqPz
HPbDjeyfdX6GRVjYn1XnzTgiWJ05Ve/LPi1EPrw/lsfPR+tY7mCUfKzrkvn4
EHwqrHG6Gjd0IiC+rtGyZSY+nqKd3+nGh6MqN48VcGOHn+LnTh9N5CukeyPr
SxO3fuqeyXzCxAvG7ng8yUKdA4o3Mpx043ly7fOT4ibOXVVZ6VjuRiOnytO+
p53IlFttWXHqOrB4ie6T8YsN/Emn+y3iooFHUUqXFMx5Yu8A9s2JB/11L80+
FoL1ffSuc6XHl/mzztvFtm60ZY6Di2FuVG2o3935woFdXRUPzx1ooKSvtjnr
iQOh9Vk+wMC9SlqeOdjANz+lFwm2nP5ZZVDL3W5kuahtZmlvosoExWOhtSws
GqVnbc0OC7n7aP3qgyw8qaDz84/Iu8kB1NNz2DjE9+llhUfe5Nt/z1vkVHko
v4Q3l6I/3i3hx70HUFcVObubcraZ6PVFqNfXP2phxyL97sQ5hvAg7f/UGy6M
2qrYaY3Uaco3/jcjTWS6reu44oWJS4zR8SqngdvROp/XRd5d5F1Pw+4uhO9S
PNyro4ncs3TsjgKCpVPoHl71yUDeCYqvTglGKtNW25wt2KlYPd0P2yfK/Oym
Dfa+gVO5tX7GnFIexfzONUwkKaTthwgfW5Jc57a8nM/bg7T/u0R+Nlqk5Ytb
2DiWWvtZrLqFdEFaHtXKxt+MFxHoK7hiv85500YiR74onXqPJ+Y53/bes5CD
94+XxtuIYTz/T8NsXGaM98WCDW4QGzwT3rG3ha7FD8OGxTePluBlX/rRNRLZ
e+oK40KILOtL+fhN+P0tvitfIXLmFWXQVpFTJ2mv+CPlQ5lz5B+RG4svMQaF
7JNyjLMXJeWpaLurvFL6E0Lbzn4b8W4pfVPwQmA3xocR2biGPsBhVWxU38y3
NptEftEf7IjM28cs2n/3X4KvHuuc1G9oI0UM7/JERx3GeBpJmtt4zTvZhH0F
Y9DGOEPGu5yye2ld+dZj6gX5ZP83o99LBZFrjMkwINTG9D/62xbyrbL8VkqX
jTIHGV9L5OGoQdpmFX8boR2Ix2SM6ztrfyZetgG+K+npyWXGO8ErQpfgnBc8
ZCOYceMvCqbKyvvBlSJ7s/CN/2+Zq4m0IT8ROd6f+KqO0EfoO91e5PhA2ruS
C2ao9S+uEGyw6e7/bFD1uaYLRNZvp406nWCVo8Qw2aV8JjGAJzfgbWKYaZ6Y
D8Raf0ubu9nm47eCi+hLsFT2yX3unw3y24a873so/blI+1gH6Vdb2gNXeXLl
sD9jBXcdIO4q7Lk3JO5aL/35zH4agn/OEP+Mlr7MJd77b26dQkLv5di7yP9b
0da0XPp8h33uLW1eIA5M5snhyLFfEfod+3zQc8fK9wUdpM1pxGBrpA+TaFsb
Kv3fTd1zlOCiHbyHNWXOOtIOmfaWDZNvUizp+2/qrUEyb6UYL6Ke9H0z72Rj
yfcfc30DZNwlaQcbJ/31ZUyP2YLf/6L/XrnW0udsuvfGyX5+2pR+pFEmir/l
O+tFQjO/ajbhDwePav3m00xccGj5+TAXlq5S+0DPFQbiF1HZt7PKMPhf03uu
OnJGm29QuTMPIgevqBxESQPpyynv7ZzXjYStVHYfGWeg8mbl/6mlTquyWqdP
9mDMa6T4Km3foShaR2OlQnh53ZVNvPSO+APR8pfeMxYzquHEnJFe3JK0RgfE
ff9AY1V164YemTQeV7pSwN4bhm8Omfspd4rBd4XaqVLPbo8F5n2NlfquJdok
1ju+OP36oEeazFhjyfnLXAgHOn73Yq2IEr0wc5jGgb9apg4immgOxG0HRHad
y+Et71TbD2uS/9G7yFI9saqg5pIOaBSCyz3VR6jp+QAkWqn4Km3SgZiWVt/9
hWx1oVIq5p2Rbxe5wljHd0wM5Nv2NaJjZqAPyWzBWjHEWsOEB3zj2/83IsOP
Mw72yxQGuq9VWZlveCB6N9E5zBZooUJz1uliotVylWXlb7mwdo/2IbfIqReB
KqdK7XKj9Fld3+otTCwYoPVfv7Xw2l/7s3urifyJtZ+3Frixlrly3k01UTBE
99JM4a8tpygGi0wj8oL3ONMNBw6N6uqlU7w3MTG9ytmN811Ivl333ts6TkyO
1n0VEO5Gnj/a/tAYF9oV1zGaoQYO7CKuuOrCpBU6FrOhGxl/6d6LaOzE+JR8
Ryn8+/hV7c+Yig7E9lO8N2G2Cf+p2uf6DhdyZtY+vO7iRrrmit/O7TbRN4+O
N0eoG0MSan/OZXKjfX791rEoC+uq6fzsl7U60YX6hcjoZvF17BOHCn/gu7DB
wjP86FeQWvTOaXzz0kr4SXnyk7TCFws1pS4sfP4yecJ02QPmBN0Df65amPpO
ccgJkWMv02ifjxx0oXkdnZMOtokRvO/7PsmEXz+lF1w28XWGjmtYEhcMqF3x
rPCE2y6tc0h4gh95wo96btSK1vFm83XhUHbFYP23uLDjL/1W6GrB6vf1tw9a
GNhzVs97V9HpJlXV8vy/Xfi7k67jrd8mAtroHvjcRnTD4tr/iLkWdjNWgDur
hdAbWidRLgvFXyrtfCz7je8WF92TvRSudP/uNna10Hm+E1/m7JSuReshMp/0
dfzT1saPQkr3qmGhu4vxJZrZGJSQNpkYWccQ/W3GGUJf0f7kFEy16pPW6VnP
Iyv5Vu6UjQ+M0XRN+Hqh/fTPF1k3gfeSv0Qvf5WZ9pMHgn9o7woWOTPv39wi
Umcd64SJrNjFuBANBHvH5j3XS6kbyHclXwUv3SReKizy51BsyhTpw1nGEJsX
ZOPlWu1zrRk2zjFPwQqROWuITyYIxp7cVutMWih4g2/6rkuby+JpnUyDZR9O
1jobPT4yzPs8SvZqYr7p2yL7uUoJpYet8Nj0tE5wNhtJitHmHCK6LnNqX3ov
OHmAzvNM+V1TQ+ssFj7+njK0u5yJ3Dwvi0R/OU173cHr0j7fFDwQefqNPufn
hGfe51vUj3JeCkxSeuo2G22Yn/qkzP8hzv+sk1Kf+annCkZY7UcZLbggipiq
ssjfGMbOKiI4ITtx0Qg5s1/+9dH6zz2d5y7vLXHCM0/Mh3P/w0h3iJHSCm0S
55yU356gjcgSrHWJvvH1BefM5p3jNsEY9sn/4ah2xFG7hI6izeezfLM1ffgd
Un8MMclTae8ZMdhLoX+RXit/lxGDLfTksGafr0idOawzRfoQ/u1/GOkDMdIv
qf/73/hXnjyDvOPz9by35fzkFRy1gXhymycGLH+7XOrbrP9VvlWBNr1LMidr
aIuLeGejAW2GJz1vGGmP6ix4KSGxYoScnY7EzEMEFw1mvrOrgs+X085cVNYk
z1ClG8pcpeO8eTDgENqZPfHA/uJ74cqi857gnX5h0QVCfvN9TZgFvFc+MFz4
h31AdcnBmU30NJRe5rHhJ1Xa8/arxRvlLakzW8j4j/KurcJvx1dTfjuhVzBa
jFY7yYjCgWh2T++8/AcOxel2iou6dBiM8BQVvfT+rcGofkbf0d9sZ2DUE+Wx
1X65UeeXyrh+gsGqEoP99S0Eu5rqfdC1lAPRt5jikIorB2L9Jo2BcDPGD22d
cbx009nt4P9AY8inudkR/6x7qrasOK2QvrlipwNDe+DbO42rsOhhD1w5m8RL
z5hTB64dmnPneMZG6L5a7xP9pgUjXyXtc+W2ZVEBxdS3qkcrPN961ktfudIa
Tx9e9NKJcvfCmQqKwbI07IObkzN56cx5uqLLfM3jM3ZvLww9mdpbniDxMLT/
pveGV0uEoOBLfdeW/ZsL9+uorOkex8TgNLouzcdaiFys63g8vufdq/KfUbNt
XKPP5w3hLefIW+rXsjB+JGMKvXWga7DaapL8Ld/aqfezOTe4sW2RYoMxGxyo
11Z9mT5sc6LZCb3nvfuPGwWK6hpV8uhzxHJdk5mIrqF9a5TXQkPaQifkt/CD
ua1DPbHM6U/7u4kbPn+prMxa0o1TY3WtSwywUXmE7tU5U124ZKns7lrMiayj
FVM9y+9CwD7de2v6CL4ytJ3NT9zIOVP7ln2ygUEnFV+Ve+ZGXMZ6bfLTheWt
dD5P3DQxl7ld3nd0o2QtbefsQxf23Vc8UKiQA8tyKNbKHMfAloH62zwZXGgS
zJzXviYaZlCcWfijfOuGfisilRuZ4+m4ole4kOMu7y5TmpjVROdqXVwL9frr
XMUaaWP4A8r0gTYM3qcMEv6aj2+TrwuvKEte4Xlzmon8YbDwkkz0l14m/GkZ
7xDzrrfRaLqu0frtFu7Tj31cEwMxu/XcLRhmoEw7nauVhS3sZ8yEHDGi+9hq
U3qY1Y01ZXQsK3Y5kGCU7o3DxQRrXdCxpJ3kwprBOsYBLhNlMiteWtTJhanL
FGuNDHdibiK1Wyb9S+r46G+njHMhWyf9reumgeMJ9bsRPZ2AQzFwUcFOZ4id
0l430POX6neVhplI+0Pnv0sTC1k2af9d6U006KftTxO+t/ct9YiqFjbxzv2w
j+ha9AOvP0V4XbjWSS5y1ZdvCQsctHBjks7biykmDg3VcaUTfBUVRD/z8Raa
rdXfdjhrImwYc6/3Edk6VNvxxCgYyBgF3RqLfsS4oPNEhsxlLKbKcqbi8kzF
Frx0inbp9pGCZ5g35NcjkQuMV19L6kT1pc1EsEMOxolaIPghJfGDn+yXC35K
FxAZEo85AaOXSpt9tXy2yMlGlKGB06TP2XiPJvhh9XItR0PR6xn/82kSGxfv
UUfwF4xH29EU2YPpaAfLlMBG6tNaZ4T08zWxX3eRjY+ZR7ueyLUFlGs1RI51
qqLfPTVR5DV92l/I/xsxHmn96h6fGW1/Wy8bo/tqeaTgrFKjtP6sKYJP0jFW
wxzRjZl3O/174S2MafBI5vku3yyUG2Ojyxtt55rnzopz/lXmZxXn5+JWG1lp
o4snY7nCOo8u2ehRVmkfkcW/iK/SC6Z4QAxzTnDERtoJZwl+eMr7Nc9dXlHa
cLoLNvCnneeiyPcWxFrxZV0ieM94R8pHsHyJ1A8i9hgqWOtvYi1PnISMLM8g
vy1Bv+67gkmuE5OUFezRjraafdKX3bxT+29+n1nStxm0WV0SXLOId3mLBFvd
oh1yt5SXZXl6wVf7iX8qSX9WMd5XqIx3F8c7XtrswjZT/udd4Vfp8wfiovPS
52r00fLkxT7Pe9VZ0v4d4rfa0k4VzlsTmedL9PlvKvh5CmONhgvtJpb+W/rS
jJjwL9kDKbkHZgg2i807RMdtqc97wNKC9Szm04T00+K94VBPvkh+1xNf+hrf
WSSQ9flcXelitQS7XtP9Gb3fjTSPVZ7OSuVC/S4qL1KKjl/9h/LSsIcGCpVQ
XpdzsQtfjioPHJ7JRPsQ5V1Zwt3Y/Evb2V3fjUGf9Ld3C4dg/TXFCTVDhwKX
FWsVizsIW2upj3dQsWAsn6x2qtFpXfjGmEVpl7iQ5qR+q8dRB8ytys+Thgch
5KDGJYgsFYLEMdp+yuWdMb/oa83Ls6oHXl7UvDkH/vRG7noZvXS2u8OAMRrv
KOWyyqh0pYP6xleqh4glGvv0599tcbvVDS99868GSOirPuqvXQMwf2UR3W8O
oE6E6ZtDZGM5IyNS5z7vtWtlm1kNjjdqQ2tRuCnKHN/tpS9naodCOfWu8GR4
B5QKj9ScQTu6o/Rz9bffcbAXRt1SrDW68jBUvaj2wO+CKw4wr9/6XoKFGItg
bk4bUyszpuJ9E61OKz8PcFmYNkD5/E+HjdA9lBGTbHRPyrdI/4m3XLKyE8P3
a/vl9wRiSzWNDfX1TyDOBuv9b5NVTuyeovgq5KqBgZ9VrkW9cePtPsUS3cu5
MXUh39n1sFGxC/2BM1lYfE5lYqYTJp7xPrF8AzdmfNH6Iz8aqMS3qyveujAn
E98hlnAjyWitU3+sgedrFAMsK+mC64nuk+lBTqQ/oPJ3dWMXHndnrPiR0k4d
3T/nWxo4cEGxxN+f3Zj8UPt8cq0bE2bpvu2Q1ETFyrqf82wx0SwO78sGCZZ7
r20u7O7Ew576rVlBJmrTn3B7HGknXPu/574LIZcUm7mTGHg2XccSmsmNSvl0
LLmLuFE7QOl+IoMCzqgMapDIxPei2ofVeyz0cqpMr+15QzyesQWELxaoqGd5
tPCQobRvTxCeeZb62irPm3H6nxQTfrKQ/KTUQpHdrXUPHK1goWsjxRj9u7sR
0VGx5ZgvBnxm6Fi6zJJ5mKBjLFDEQPoczDt/2cI+vvXLkigEo331DBYr50LO
r7ougRVCkCOp7tVtZ5xYWUAxlXE5GIEt1I9x7zMHcrdVnJ811IWrfrpeT+46
8CePlndd6IL/Pi1/UyUEgdm1zaUTDfw+rPvhxW8XorrqPHcobsJ5Wedw3Cs3
tm7Rtf6c18TjNVqePsJCoSw6n21Frp5PovtzieCRlX5aPnG0nO0wPUfTRW7/
nskY5oKRdvA+N1FdE9kZs2KkyNjF07T87BALt2to/YxLLNRNwXihIs/n8j60
dj8LG/IrXWSRyH36gM0TmeA+pPRukS2RzKGc1GOHoZ9VZpE/s3nf0UdkcgDj
p3n8ZxJT9p0SWbqANiKPjPLl/XIuwecF6QPsuf/5wlhtVQVntt6l/d/fyEbj
b4xNusfGQeZ4mig47koQY2oJVspKf7NVsUXm7tB5+/LbQjXGiLgfacGi/3yG
BoIr3mibU9oIdmIO7njbbPwmbnkj37rHN1wLZR4mcB7qCGZxMpb1WRnH2oa0
jwmmajpSy1ussjGMsTi+L7CRlrl1KhcSnNNVvzu8hQ0f3h1POCT9f6p18kr7
T5lrcsFBG5n5znST6ChV1iq9Rdr/i7a4Q4JvpzG2/3CZw6HUff77nvS+nMWP
VYlJRBav4L1SG8HJBnFyF8EGGWg7qiMY4Cn9u2I8b9yIPcYKpohNvDRAcMtI
4qhhUn8N7+mKSNlR3sd5Yj58Y52Rgqna0Q72+Ksn1pPSk4Q+TxvaVKFvkx4h
GGYCMYznfeIs+pZfEX4Slxhvheyx6H99tIR+y1hbdeWbVXl/FyJ928e+bZc2
u9KfvLzU+cB+VpLv7KB/ex0Zbz3iqKZSnoE484+U9+M87JJ2BrAdz9uQdMR1
Z6R+XmKz/vL/SOIfS75VhPeVRaWfr3gX/0K+f5gYdYhguY20K3ryGp3iO4Kk
ckbOLiD+/48f/hVZr6Sn/j9f9cS2b8k4LWXPy/ll/JOozYIJ+Q5lUk43xtVU
nn95sIELdZV3vQk0MTSO8ti7uw1kt1W22p0ccP5SvT5rPhPjmYunT0cLAVHK
tws0NjG9jfKfGwuHYaC7gfJwYwgafdB8OtW6BeFOen3vVuW7G1Xe0+8dFgoO
1nZSNHejUDrl/6lFvu/7qH2YHRyCN1nU9nL3Vi/caZzGSx/MWgtZD0714pZX
pTsJDlbf8qaN+6DzXLUj/VjZDJnzHNQ4qM3qI9VMjWvac0Y3WOf1PrFR3dZY
+uy82q+iG2Nih+1e2rjZBSND3/vu62nh6D9ZkfjRLR//pSb6lUmL5e6jXqz1
blZDfDqj+XQWFvDD9GQa4+vopaZ4lV3jd7Ud2xBZZ2sd/2odEPul3mnuWT4Y
Bxqpn3+dLg4UjN9V+Ua0E8nuqJwKfeTAnmoqg+zvBjIuVpk4T9a5M/lG2usW
fD7SN3ug7CXaQ/zlfAz4oHU6Cm+5Tt5Vd7cLbQsTG3xz4Mlybf+fE4HobSju
Gt0mABuWa0z++PdCUPeK+j69OunC64H6268nDQw6omuU0eHJicBYiHNMBM7Q
vVTvion7sxXDNAowER6t+6TGQAthZVTujGvvRnglXfdJHU2coJ9P6wYOfN+k
ey/LjBDcm6F7oNUtF4rs1T6M/+7C50aUucEuhKdSGd0ml4WRr+jbc85EOqf2
Id1ekcU3FGtdDLXwlfGXaiR0Azd0bvdeNZF5gdZv9toJn4O6Fu3TW4h7gG9M
6lhoyFjlKcJM1Pxbx/vluwP11+l8Hq9iIiCpjmXsEhO3DxGnidyuuVzPYMfl
JtKe0/K8gom60Wd7qGCA+91VZkWKrpktvZ7l1cLPk5KfxxKecJi8dIlHB6TP
gyc3WWnyilXVbKQ/wbzzX90Y+ELP3fdhTlTeqRgyXSYXdlmKl56Lble1NGMI
5zKwLEbntswrwTmddH7wTzCuV2EM5NVujJyk8zm3ezDeDVL7drKTDiw+obpS
q3cO/A7ROfnwJQTvGqiNulsnF0YtVUw7/qAD55do/SzTRV5f0HUJ7ufANeY5
qpVT1neh9rNnjImveRnrqaAba3vofK50GZgXrDytqGCoG38xNkg12W8BOrdH
V7hxx9I+F/tkYn1RbSe1zGvTrTpXMbUt7A7V+oN/Wmi+iP7wJUwE31AeeEn2
Q8JD+tsN8yyMjdE+D5K995x7r1lmC3nPK109mawJ85HNLm2jCeOAZRJs1bkW
40sI9nhKnOOJr/WSb9k8OfGWdqbdQ85+/Sit81vkxjm+j/st8uIJbZ5rBXdl
Iu7aKLJgPHORd5G99CwNbQWVbExcRSxU0sZk5lh01JN2eNfZR/bhNu7DO88s
dKmt9A8ZS+6X9BMQHNH+uPb/RWwLO/x1vD19LaTuq3MYU0n2c2ulawl+7MS3
h8lnyl5lHIzToiu8oq/LgUE2qjFf1YX7Fj5mYnzIDYIH5mr9plttxKxnDA3B
SCn4ruFDQRurGe99TIiN8ny32E0w0kv6sJW/bcOPccL/m6slucjVF3zXmVJk
fkLaDHeLvvOd96dZ9wrmOa/fqhkh7dM3LJnI/0kTiQHe2Ni5WemfchYX0Q7Z
Qs5mHuIKT2zzjsQn2wQPXOO93jSPbwBtjIbgh+zEDw0EU72lvaiq0NtJrxN6
Cv21Lkk7rYkr3gl9l3QRqTuEuK6h9CEB++CJU7WLmMrje3CVvgerpG472nzS
CTY7RfzzXMqDeU8X4cnJSL+pLj9s/OQ94CahW/97b+iJm0qfq4zSzg22U1P4
FYi1ImUO1hK3eN4LzGV/lgldlvrjYJmT9cRInvvWN7RT9ZVx5yRWvC/fzUXs
1E/+/qGNq4LUzUp8eEP6W5FnZJvoMiV47/NTvnOOtqkH8t2q7INT6BHUZ7MK
7vpGW2VvTx4fxrtI7tF/mSOyRXYbR0rq3hsxTPT9tsp/zE5uTKujMu5kdQsb
Q/QsVBA+M3ms0pHFXJh1S/lbiSUuTKDdqdQNA2XiKO8dXcaFmPda51uI8NJc
KhOfXHbg7Ffln093BWP6A72Di3vMAWtPN/JYE+Xph29uNbDAX2W3ucVAXeaz
axPoQrLE+t28l3uiyh2NqXU8Y3XRZzX2e7x3PaROUm95QMpamD5NMVjjtg1x
jLFPS/auimwrenvpiZ+6wO/zey99q2ppnImrceYnF6uP3ukUj/2q0hTF4+3x
0ndn+6Bx2SEaT/VFQ4T90BjvA4b6o90CzdU4q+kANHpZ2EvP+doM1Zoc0reK
7kbInmqTl95Swg+dWyoeu1CjD771VUzYo20Qpr/X3EatNrvwIyHvsAQ/RKfU
sQ+OcGHSVS3/Kbre8Eb0uxM+8aqs0p5co4XoL5FS9tro7coTeiQXHvKK94xn
DRy8qHObbFoQBj5VDDzm0VB8a6H3mIUeDEVALaUbHgtCRLjaFY+N9tyt67dK
5JP901ZlXFAW0cHz6h57JJhh1gXGS99ponEW5jUbaiL1d8Ue9/1N7N6j9M+m
FtLv1PqLJjrRLYva0/xrOvB5mmKtVGmFV/wbL7qagZdutbdsPuTGM8ZBzS/j
KnaBsQsGmzj1Utsfl9LCg2XK/3NcMvCVceRGPTXx/bn2bUgBA4npv309uRs/
P/Nto+gFJaIVnyQ95kLxzjr/W/wN+KVh3NTabux+pPMw528DS2Jp+5vPunEs
t/42a2k3Bk3VOq8nWzh4ROVyojQWNm3UvkUFWljQirEIhJePYC6Yt0tFL+Zd
RmXhCSOZlye98MYY+uX6iW63mDbtvcLzuvLOopjI2zlOnbd80oeZ7INrvYGF
9bWfOfY50e6Jzvm7Dy5cLqD4am5iA0mmKD3poRu+I3QslUX/avJT1yXXMxdy
fdM52VbaiRzz1V46WepXY/1hkx1IcFnx0pndDnwdp2d/4gI3unbUtYuSPux6
pn1YW9HG9GXa56qCq4/QV7DUdwsLmdM5tJ4LJxoqTluzwMDsxDqWwCYmSnTS
dY+4YGDaI8aqzWZh2V2d5xuCDwsRH36RfdU8Ef2u09lokETpWRssVKqt8x/j
b2M5c0+3DTJRJR6xcWIL70dqmz9F3raib1LIcxOHPtH3dY+FyyHaTmnhw2XJ
h1PnsPGjDP3nBXdtD1X6ZGMbF38p/VZwVyRtPs9Fpv/8N2aUyMAbF2n/OS7Y
jLHXCoscyPJN6Wwi00CcMKCTlPto38YLXntZnT788v+CwUofFJ0+eUv9bfcw
6SdzFA6JK2vBWA0fRC5Vo52q/QXRkW/quNYIZntAzObYZ8m6a/kE4e2+5O1P
75jIuJ9vZ3ZYONCT8ZCDbDjWaB/2SfutXnPspywM2E/98bKF0CdKXxFMdZ12
pzDBEv7EJ2PjyP7fo/2MTmIj7n3GIBoumOEOY/vPtXGCMeoL7RfeyPxKBURH
OcmYpZd22MhA37kdgks7MobwVME+lf+NGy86rB91WA+2aUM80ypK8B597G8J
1n1CrPtVsEZW5hC8KnjjJ/2sngneiP2vLUvwwGDajmoJrvjAu7+NgitWEFdk
Elxxhvd0I4WeQoxxSrBWYsZ8SCHYpjn9nXIKTojDu8ID8t0wfrebx/eetqCW
ntinxDA/hU7Ct4GemKuveef4WTDGStp2sgiGasf4Y564E076aL3zxCxl3+ZI
356yb6nku3s5xo1Sdycx5E/5/x/apj7LHP7kHHpyVfcjJuwrvy1D+1sKab8B
7WNxpM4RYqpuMu5GtOl5/Oovc1xFPDHNOJaLguXaE8slkLVIvFTpN4K96/Gd
0RjBVln5hveg6K+VmFc6VLDZS/pGxhG+Wo/rmFzaTE8b13g5m50HK51HdJpx
LXQPnzkvfKak8sD9f7nx+I3KlBSC/Rcl0bNwKJ6JNdlUd+t20IXNtZTX9YON
Y4cZp26HC0WyanmlbCaGjtP6Vaa5MG+EYoOFf4bhS2713arwPgh/Rmucgbux
HAgJUN12yjM3xizW/vjGcuPNbu3P/LEhKNRdMVum3E70bKk8fNTs9ihlq+/6
0tJB2NFc8UnKwtWRLeUY3zmipw56nAHZxpzzKdRAdNDuKXEtw24fT+7MreuK
Iae/+sAXr1gO5oIyXnp+/W54dELfA76bUhkb6+o9455XfvBpEwfJHnryYhVD
jx9xvOWBrcog+nU+jfPgGoxpf6sfWoFv7fCpnsZZrdajCjY26+al/46pjq8v
xun7xLbdMOaLfmvLDwd6bVR9P8OHgRj7WWOF+TR1wpFebQ7Jj7pR8JvKBf+H
Lvy8yxwo90SeMg52aLDI3I3KTzbIPurWR/nA9JM2ztOHM+8dC9mSKP+pMdKJ
6Ghtv7R8qz6/lauuC9trq/wqI/xsYXnGhFxmIEVulVkPi7jw6iJjtosuPqik
yjU70sKzQtr+kQkeH2/tw7k88l3G6ky21ELfNNrmWOFh+ynXou+5sT6A/lSX
TLSZrPtwx1sDeQboflgle6x+qO6xJOndyJleMUPPkSKvX6q+kGmZhdcZtP3M
gvFOMt743zvdWH1K57BtJQM9OimmqrjKRMhNlZu7+xjIVkixU5bDIl+eaf8H
JXPj1Xvtw/ACTuzvp/twdVgICmzW/Tn7kIESC3R+toeK7tCJeQAFJxdIrWeh
yC4Hfg1XjFGuuhsbL2n/04v83V9C5yHVRxMRBXSutsscZuEcTt4lfJJ5h1vI
Pk5Ifn5Mzv4kYqpuz208Yy4JU/jDXvKHMvVs7GaOnl/bTXxKrXMSvtiN6n11
TpoIbjyUSsc+J7UJR3vGAZvkQv8h2v8s39zo9krX6FiYEyVaMZa+6IgPmH+z
1Vo3lszQNm8ZbqS6oOsyN44DHx163k8fDEbzX6pzeWzXe2i7PpfdwMYXiuvO
Rph4dU77WXeaE2NL6LdurnZhyTPaLS0X6pZVukAPE5/36j6MPir7pKn+Nmdl
2UvxtDxntIUTAbo/uxUw0Wy7jnGk8LTCR3R+CrWROhcV8+9eaOFnPN1Lh0bY
6BGh56urbWIu3w7kEeznT+x35qGFK/mVflNCdNXC2k5rWcdRcXV+em61kLgD
McM4G6sZc76g6PcO+tYGv7XwlnakRRNtpKTP0meR+y7aNguKPrWTPu05ZP7X
cv7biBwo51A6luhiNerxzWMqG02+aZt5QgUb0Hd3nsiH74wDlvin6EcLGOP9
nYUCfZRevtzCTMZJqzXGQtv5qgu0EYyTMSNljezhdfRPcKWWs8MYvLkEOx1i
3qLlRQULDVLa+m2h/Gqt89ay4cP3Pp67v0e8+4tqYeNjGuLDMAth9LVL8tFC
EhdjTdy20DSB0huvWijOXI37qtkYSFtu0dU28gzXORmz1cadDcRpi2VNuyrd
WHjpAeYd7maLrnqNcdIW2phLn/8cgjtO8k3Kc8FBmRsovVXO4/IZSucW3Sc/
3x4GCH6LR5/53iL/t1MPivDEL6U/0l+CGV4RMywXXFGMWGiPYIq3xJAjBJO8
pQ3q3TdPrDDiZ8EzxYhndgneCKdda6MnJzXtYE8Fb/zgvdthKa9OXHREvrWO
38oqdd/xHetz+f8O9q2GJwbps//1eQLLPe//dvI+er9gwDbhSnvuAdOynxmE
zke7+hP5Vj3a3ktLHx4RLx2Q9n1oE/PkmM7A/vwUeiPr3/5he21GHvqDtHmJ
Y58u7Zj/5lWUOsdpN0so83mD9WtJneK835wg8zCUNv8iMpZR1/+Ho96QTy4V
fFeDdjyPr5dBX6/rgi1NxhP7JOO7yNziy6UvafgW9fx5oRn/MFLOeM5OjPEr
e28777vjVTAR9Vl5zpFJBm4cV36b6bGJCRHUy945ke6s3qFM32hgdQvljS3l
7Cb8W2XQ4u9S54fWGZwqGBPTqi9WofcBWFpFc+d1ThSCJVAfjy7lnFizSmVW
8z8Wwtfx/c5NCzE/tZ9jXgXjZ7jeUyR/MRhdHJr7uNP37nCO1RgLbbu0Rtoq
Gl+0zrG2OBalPlfdp1XC9zQtvXSXgv5o3Uljzl8MaIvDh6/7ju4lc5a0INoZ
X3xGj3ejZVRCLIy3xMdabKJ49rS4X0PvB2ueaoOcba76NtptY+zsIrgwOZbv
GdGDh4XkRfZDb7x1TqT2wW1rgPdbo2o0gH+sVV46S986uJpCfey3tu6KWS2i
vXSxtt2RZc437aezB7b+pT5m/6QahIej1J+tRS43IuqoLE6wKhir5qhsep/H
hUUbFefEFv3VnkofCdHd5lJ3a7tKzjJ9GPyXy9kcrHQ/0ekSM7fXsdQu9PHX
dpo1C0btvIz/sMWBY70UD0wSuVEiqWKSyUEuNEuuci3tdjcOH1B56slFspj+
wwt6mZjF2Fb9RR6dojzqONDE3kgtrxdkoQZjdhWPNrErh+KKr51NVF2sdXJ9
tpBylI4raVkL7auqzJonevyke7o30sq36oUzt9QeN4Ze1/4E3jZxf4fu22kN
RVYupbwbYgqv1vodBhkwqus+L5LTxr6KypOnFnMj3NA598SFaM24ECNFJjgr
6p4vcsbAuzNK+1Zyotdu3cNX/xjIvou+3IJdi2dS7GqcFJnFWI4PSziwoqra
gv4bx/V0XpHX33UetggujmGczK8DZG5H69zeED2yGt+OfRKe36MkeZHw0Yz0
0T0mfM9JvpfulSd2JfmAyI5YzAfnWmGhbG7tz19JnTjzTnH+15ouJK2oGLt1
Mwtzdum8fY9nIItL8c9SkXu/OyuvGLDYia9DFP/saWLg5B7dJ9GbXGidoC95
rBsBLxWbJbso3/JV/vDxSggyrNf76IHz3HjWWNfuxhgDX1bpulRvb6BJFP3E
DjlR6at+K0Jw+NGpur4++92I/1B/O6qLhYgY7fPaujI/jBvQ8ouJ6HI6t8vO
W0h9TceeZI8JZ15t55zglwop6duT0sJB2j8ryG9d/G3scqJjzmB8zpkmTozV
tYsl52lPF/2u44GFPMyT2PyViWRxeG/YUfT9ioxnVcPCC+YN/NjEwrItSrf4
ZGGGrb+189k4yrfhBw7aWEY/Imuz6NGMO9pSeH88YoaMk2zkpE/meuHt9cnb
/eQcFRqtbQ7IYOMDc2rPFoy3iLEmDsWxMXOv1jkk/CHYR3+bYrSN3owj917w
5J25tBd1tHD6OWOjbbTQrCHtV8lsVH6udfYKz6nMuCVHpT9r2Z+/KopcW8z8
BSKX9jF34bTOwpeY46nFeBuXvyu9VmRZccqyxoKTRw/V9vstttCauSxT/RLs
ulTLA2XvJ2LsrCQ7bBz8NxePyMYBMdpm8vU2XjM/e9xDNm4y9uA7OStnmZen
0HbBeLwLWCPlYU6lI0Rv/T+2rjIsqy1Y2y0Gdh8DuzvHwMZusQNFBMGgvm/v
jd0d2GJ3Yxd2d2ArBnrs7rjvZl7v8Xnu/cU8i/WtvXLmXTOzZrLSttgJsvgw
7VMtce6m0j6VGXL/JOV+j3dWHCaOmx/Ql0h/RZ25xAO27cuDmOQZsIM37Vb7
gEcSU89j52jOSD3PS/y2D3/7EuW7+KbPfod4nrqdtsB7yRjLq7Ttr0W/7lj8
/zmx1mfgnBrs5zTgkBnEIZVQ5yux0Ep8qwLtgO1RPoq4ZSHKpv6J3YeyR/QN
m4X6r+gDvwTtX6AP/De034Z6LS/02Y820zOof+1PXmm0P499s99Wl/+Tzwjz
M5r46hnaTMI+j8Z4P//871tn+a02+G1F/vYayjcTyzUC3Yq4cQ6wcRVi4zWY
m3fURznsNwj87Sy0d4nxHCZivmfRP9b2eTtNPVsr1NnCu21i7IHa9A3L3MqU
sEOMPzPAkKh/Ve40x/2mUGvlCSvA13vWUx5St7BTqnqr3LmXL0RSeapMyTw0
VIrVVJnbB+fv3jvljT5e2POZVIa+w/201TPlz7shN97FqGwq9DxAErgp7jri
GCKHJ6rdqklmU/JGaR/2ZTEkzWDl5w7w2FKflce2m+2Ql8zJ0jR3sKT6qHfk
yHS95f1CtRt2LRskoV8Vy62Nrit548+KwzNVX4t8mxcWRxf1qyrDZ6uuKV1k
OVlyr2SN4DymyJGs0mLxhepF91qS60xRcb0eL65ObMWeMmiR4rRDozzl1ehH
ceWBTX2k+HQ33bdTqsvdtGpb3DO8jTgPKfa7M6+LLNz8mr5kvSWkhMZ5aN1g
sJTrrLHCLqUbIq+Zc3DWuQAZv0ZjPvRJESp1+aY++8cg2VBDx/sSvDPZUp2H
B89MCWrJnHHgdcli+d5nGXgp302/AH/oQP5QOMCSPbP4hh3Y4Daxwft+QbLi
X/U9zp3DlE9XdC3cZ4ZK53Bd63+AsQ8313Wc/8sphRNSh3nVKa2bqzxNUBRn
tg/fc7lYMoT2yjv3DJl8QeVa2qqmrO+o+3BQOUMuP9d2fowy5egS3T/jEuJM
7dPfJtqHteH7r5ELTQlNpnTofFOW/tb6Y2cYknK87tuQ504ZRL/o+nUNGVNO
93l8F4wrXMe1vZVTFuVRHNWshynuiRjfNcYpzUfRVrjLkLOFtM+V3jmktUPn
amlfp6Tlm8fPa0ypwXwlxfOHyqoNul6jM4TI/ix6XsLcQsTbS+muFULk9xql
4wErvj+ofcsJuX+Ccv/mKZwjxvvN0AryKANzx4Dvzsip61jtkiVVmcOr22VL
CvLN8nnwpPOUTa0fWeIzRuljpiVTLmo7JbDXLcan8sW5ztNB+7Ovb6i8vqZY
ywm5nW6i1vn5zimvmPe55idDmpfW8oT9QmXAba2fPK8h1efrOu79ESLlEzGe
/GpD7sfqulQvEyo+z7W8OHDs/JI6h/E7GpJtks5DpgS456TXduYdtKTzO93D
zgZOyfFGeVEx4IrBxBXDBjglara2c2aIIRWT6LfanTRl6EGdwxLbTOnVj3Yu
yJ+R0/W3ubKbEnFBxxK10ZQXLRnrrIUpU3fr/rwxzZD9w7XNmeUgf+kD32ae
IT6rtLxVYqzREdqq0OZsxnx2PDJk5CPGlDgDGU0/6nXpTDm3Uut8LmnKLuq+
si+ypB7jPq2sgzsy81bHjLTEnTnTyzbCnDBWZ/tiONe+St8/bEnJH/rblMA5
jf2UTu5nSaWx+tvhwNsHqaup09PCGVQ68yxTkj3S/R9yxZRFb5nnK5klXS7o
uGoC7026p23GNIQspo0vDHipf3ulcwJ37Cc+mdDRAjbV9lPHWFKLuR2vA7+d
ou9BGuDEr7U552UseTCK+UqOg3cxR9U1yLprjC/6eiAwBt8hHt9lyRjGEFuB
9q8z73arBTgjfAOy84Ql2dNpeXZgqpqMkVVjMnhgFr49XAP5OJFxMIAF3jI2
3X3g2J70288XYcle6gyLAgfNqM1vAVN8pf5qMLDJSb7dmwaZPoZyfxFwUGnG
WwgExthOjJEBGKE78UxNYJVK9Pk5ATz1L/Uqdn7CdvRRnwC8kZt+8g+BT6oS
a/0dY6oSsMdi+m6NBKaoSJ/8JyibTzx2HvWnsH5fYIYSxAy+wHhN6I9k5+LZ
Q9x1GvVN1n/0yc7joHRqlF2iD3ksMEZ6+i8NQptd2GZeGztxjHPR59/EYFvs
eaA99ATorOzbMdTZT9w1CHOSkfjtLcqHvPoPH1Yj1oq2baDsmzu+O4N4Mg36
35l2Qw/M52XGL72HtldSN+V6H9iesRq6Af+uTqB0Q2DeWRbvsGhvL+31iYDN
Ipn3wX7HWol2wx741iH6m9XC/ommvb7uOFM+bqJ/iOmQ6iNVXq+Y6MC+VLpf
lFN6ftJ74p7FTjkZoPTGQqbUTsl4Mo8dUpY5O7x9HdKvuv7WGWbKRuZ897gd
Kk1P6d12ATDe0SP620fhgyXpNo3jNDBhoGS6rvZEO19gUDflXevzABvznV39
+IZsclHeKwNDJGq96gq83jtlK+Nyb6/TW1IGKYaplb+eGJnCawyIb4ljYT45
M+B5nN4pMqqKuG3y1LzSmevJuaeKwZI9aSSlWq9SP/mTHpK04MY42n/sACl8
S22CX11aSp8ah+LKT+0MlINPVL9Ub0QbGXREMdX1Km1lXgfNabjp3x4S1ETj
TsRPPlgmNFb7afB3X+mRT3VWVVoNwd5Qu6d3ghAJPKW6heQfAuX4E9Xjrfka
JD1aKr5aUMcp6W4xTlE+7D3mGjNXGLL8us5bzUemnGGOpB+4Y61/rfwhGc5o
XsYYz/zElAy1tc5c8LaJP1ROpdgTIs2eKqadvs4pKyJ03RfcdMqcPjrPfYKd
UuaA1h8yIkQG/tC1aFjXIYmmqP7h4CZDvieiP0aEKU35Duv4FlMSdlO6QWWs
aTzaHIsakueorm/evaYMHKN13ow3pdhO3Uv/oLw/y1PkAra5o3JqeB9TorLx
3WUeQzaHazvpsN+8eafY7e+URAu1z8szoo6X1pl6GPOXSMe1qoVTDmXWOq4f
HbJ6tO7tm7NN+f5a2y+y0CndetD+CNyyiflNysxzyrg2Wt4Gcq/jZG0nwWdD
ppcjnvnkxD2IMeRfOWSZt7Z/ZrIp0Se0/fU3McZUui6L0oM//6L9qC54401d
azsGURX6fmSNtkQYR2sj1vcTYwVsh9zJQR+DteBJF/lOf9ESS4L7U1+Bu3/r
D0qvw/2l4xc9v2Zup3yuoXvs9ytDPqXT/keXBl69r/OWOj/w4TKl8/wIlTuM
pd8b+N11uu7D2v4O2dZQ29yV3ylT22ibaZI6JPtwrV9veKjMaagY/v0ah3Rg
7u8dQYZYLtrOo4zAnLu1Dy6JDFmfTb/rusSUy7QR50nhlCUPdD4n3AGeP6Z7
r+YrUxLRBle5kCVjPZlnGVil6Rulw1+gflJtP9MMU7rfYgycn6Y8X6K/ndHW
lFkX6bP60pR+Xdmmjymnimj9FcCDiQfzvoP7zS3mE//40ZAUpbT9k8BRlRgj
tPECU4ok1P4brpa8jq/9WYO7tTtzxOSub0m6GC3P5GtJnpFafhuypTV9em3c
1Ym4a5Nl20S0zlDgmRbP6MPZwpKkLkqfxB4pEF/7kHGGJSv4/i7ZalMel9f+
pLlsynDmOXqIvbbaqe1fwp1iYXUtLwqsseY0Y42ib3eZJzor5MwjxiYdCt7j
x3yLMW0suZJHywu0teTHP4z3nhXYJqu2U9QLe7sP448BX2xNo2OcDIxU/vF/
utwe1OU2wDxcpA3rEe7Gv+9onT3AF5kqK90c+OEi/ZTeQMauInbyHm7JbMb1
7djNkixNlT6F37bnb4/ivrIpk9LrF1vSi/4YByBz71Af8snOS0i7W0rghY2H
/5P1nn98hFBn8fn/sMpSYpV8qLOFdQKBO4rTR+sVMNVh6nBqoE5ByvFcwCSV
qNfaDlwRRlubHYsgjBgjma3X+k78hjbrUM8WjnlIRN/yv2Oez0KfkxIHlkT9
b9TJ/EIfktPXa/cvSyy+AbRjnTZg//c+tOTmSOpz0OYw6qxsnVkU6+RBn2ux
z77AXTHUiTVHm9sZ+2uqnd+HuKsNyu6wb+3Qt2+M4VAAv1395w2jHZeeuilv
0DdJJ0KbfvQT+4I5mE5s9gH4Kj791UsBI60hRloNPFiLcdL6bbckAX0zrmPu
P/Ou2gh1VjAOSQZ8qy/nJBH23nrizJXgsfvJY+diLxQvS36LNlJw/3RxdcqM
FMoDp5d1ysGZlOMBhnx+S5/SvU5xeaJy5AvWZBx1I3fQtw/MZzoZ91lrofLA
fm6GFN2o9KjpoXJ5svLSqNShsreJ3mfDjgVJ/SFqOwgEX/VKrXz1+X1Dcl9V
Ptked5oDzJeRcoolpXLQ/vUkVDp/U/x2IU+wTP6uOOSsWy+5vjKpnveK7jIl
x5Q4zJMioKlULLAtjn68vI2UqXG+hhN30wc3C0jJkW/jMFjLKs2l8oI9cXWC
R7eTEi5qf/yUzF8kQdW4Ngd+8pBipxSDXRjkKa3qqF7r7b32svLlTc2nk9lL
6qTQOFpj3AbIwZKaM2jzzEFSrYO+x7zlMUA6XdVyt7cDpcQ09Tn/NXSQ5Eyk
daaGh0qzxTpv4d4DpUcDjZUxpFmgTM+jNr4xH0PFsyJz8x00JXaR8sAquGNW
b6e8a90myGv6jpbC3aso7261zply4Bp9mUY7JfKXYoOuNQ1pnVvXPesEU+4S
54yDbE23UtfUfWKonBisfTNqm3KQsRzX1nNK7ae6f2ZUMMWjPjH5StxDmfvj
3HpLzs5Xus0xU4ZFah9ybzTk9U/mX05lifdjxpDEuvsxtk8U+vzoOnPbXTJk
1WzdJ6Wygza1bzG4u/+mf9TZR05ZzPhaJyDrL1PWJzkPnHlT2xkMXruT/vCx
ZU3ZWVX77FrBIXWbKm7sMd0px8vq/q/exZC+ETo/yzPijpxS57nnMUNCemg7
txpbMuKjlkemsOTLLR1LTy9D5h/W3xZ1w92KPpNnE1tymvHQCnTAmSpBv5RL
plT/V/s5Amcu+prWybvMkoSDdE4qgw9toC/0CfDSG+Sla3B39GecnBzgFXcD
yK/svLHk7aNSmTJ5qmKAupDJo39q/wNHmlJyPvMwvsA6dtDvjtthSLO8Wmfb
KFOmLtY6CS44xMn3Bf5dTbn3WefQWO+U8GV8k/jdlLVzmf/ugCGOetpO6a2G
DE+j9PLihvRhbK4ysU5ZyTwRHYGrZ9/VfjYC1tqSnVgrvSnjVmv5tiKGbD+o
5eu6mzKCuRoD/zWlpQf1osBFsYW1vAXw7fFjSqfMYkrbw9pOE2DXPM0pK2eh
PvMn1sP8n76q7byG7BrC+0vDLOD/mXQds52xZE9u/e3RJtjn9Gm/M9CU8421
nTnjUD8R380BwxQO1Tqbn5vyuQ3j2c62ZF8t+rwFW7JtG/VOpy3pwHwBMeD9
Banb6Ys2L9EHzJa3NWgHab3BEpdFWj7KxRLjhbZfoRJkfQR1YsAP77y0TnzI
TOcLbbNJBUu6z9Y6KwtY4suY7RH4flbmIrxdxJI3Xko7gbVu8L2zazhkHH3O
TwArPX9Lv80elgQyp4DXTkvCT1HnBpkeS5+cr70sSduDujtgwgX0JUuKvZxr
ptavifkf+YKxHbCXN3rqbw+dAx4rqvSwfThf97VOALBYZvpZNQSOKlZRacdG
S1LSDtt5lxXHX+LOFOYwBd8Sjj9uSRLGmJ33FP2kLakiMM4y6kOOPbdkDv0k
1wEL7KFvVXvgjbq0QzUGnYp0PNDHaR9cCtl9hbqvvMAGn6mrWYY6k+k3Xg51
PlK+BwJvJKVvUjTO8l76X31A/Vhim1jgjWrEWj/QnwyMd9oLeCOcbyFjUL6Q
dsndwDk3iHNsH/X4/NYYO48hdWgR6MNx9rPWR1s3ThzywJJ51P/sB4ZJT5/z
oehbferEmqE/W4mp2qCd4cRFMSirzHVvgf4e5rvFSRhLcY5dgLWmEWsVs+OX
0sb6GH2eRT3YXtAP2f9kaL8s+/933LCHaHM+5ycUdf7hWOxY+qkZS782sE1w
Et5hrwKHM77KaeyxR3yXWu2TzQc4J3auH+oeR6MvJ2gXLo02U9CmnAjn4gp9
P8rsM+RAFeV1UYucUon+scuHmrJhvPKHE88dMrSr3hlHPzAk/W2tn3iqKXn5
Fju8jSlNzyqPnYfzXTi1yoivwU5ZzXwuGXAnqJCTsWXSOWVofJV9vTY4xVql
333hYciUNiqPcoOXHiAvXTTfkO/rVYbOSGZI1RK8XycDZmNsnxOnBkq3F/Xi
6JPV/eRLrbI6J9W8ZPsaxT8pM/lIz0UFlIcnLSvD9ueLw0jbI9rLumQ3a1zH
nWd4vDzSf3ZM9fjtLcnmXVBWR32Mw2MzJtSVcm9nxNU/Pri3ZG6s+RZzRg+W
6sc0NkLuWG9JbObR85K3p0yvozbHxy8HSMOJ6mN2ImGQXC6qfW45K0B679Bc
QgvvBkql8arLyjfBKUEZdE6eeAZK+7aKr+bcHSSNZ2h8MJeBIfJ8neqUPGMM
SRCt6zIyBPeC3bq+r8B/3pP/pIL8Pc53aheX4yzQJ2FRUVPeZSbGwH7xpJ9t
OcjBGZSDd8IdcveD6igGfDZlC2M9HfIAVk+g65stgyHJuum6BKHOVdapnc4S
jy+Ud8B9V3h3PvLBlBKGlvvlMWXGE/q0FLJkLfUPkTssmXFc+5musykLGEf3
VlJTuhtaf+dTQy5/0n6+T2jJyf3aphvOqCdxSL1eTinXV/vp29yUn/RB8lxq
Srec2p8FoYYkzq577MtphyS9pvjhMc5TCuY0aZEDmGS4jrEDMF47S+mG6NuU
V9pmJO4IjRi3f29nQ6os1P08PrFTrp7Tc/QT8t33uPa/TUvwn3S6XreWWOJg
rtt4kMVXg3UeUjWzpFlCrRMf/Ck1bTEO3Hfv8O1/IptP803NM5TvZzyle+Bb
M5gXpipktCdjVxZ+7JSiMwf+n3NaAnOyIIfOif8m4Ns2SocnNmXOIO1zvjmm
lH3LN5JfnZLptbZTt6El7Z5pnzthrrZzroq6mlJvg/7Wc6QhgxrqPL+dZErB
o9rOy9c44xm1Tmlg7xq/tM6RaFOu/2beYeCOwtkYn22oJVluU74vMKViAtoK
81rSvxbjzi0xZWl2La/vNMUarN+y3233ZKxXF2ChFsxTOQ3zNJbxl3btNyVi
uv622ypTXMrS1w6ytD9js++/Y8o6xh8I72/J12F8k4t77dNx2ocs2IOF6UfU
JcKSXYwjOqG8Jblnap1ZQyDvGJvdOmFJgbSUQaC7UrczARhmPn0sTdybzEn0
64bMHEWbsh0zKif1P1cOWLLlmdJTGljS+AlxEXBEkfGMMfXQisNYcecasvgY
ZbEv9swaYs6suL8np+6owmHsQ75t/GbrWvherwewRjfmbr62zZIwxpi6Cqz4
YId+qz740IG+2oczm4EDqV/yW2hJx468i7UDhmRM/nxtwbuo+6p0wZLRpYkZ
MMbQR7yvob99l3K84F0L+OZ6E8Zyi35EzXH/eMC3uracnM93/XZ8pAjqN1IC
GzTiHWQBxlubOQ0bQP6HrFA6DG2mZpvtIauP0j8n7A7wJOOylgU9n/YjL+CZ
8bQn1gaumEhdzRvI6+uU+zVR5zHtg6PRhx7EJ3/7L9m+T69pd2sNrBVIvZA7
MENF4paP+G016pSuANu8oQ5qH+S+17b/MNIkYo9yaOcZdURl0V582i6/op9L
iX9s/6hx1K3Vs3VExEIN7Td3zF+TClisHG0l7/HNosSKts/5MGKS6WjzGe2J
doyvOmzf1r095BjtuKd1iBtfoj9u1BPaurTyxEVBdpwu+v+7gY5P/DYG7Wzg
/HwEPYa6rIM2bmT/f6M/Wbi+Z9HmWNocl2EOZhMbX8ae704+6QHsFkh9oIHv
9yLGtvNXdvoTix79NKmrtHMVXSemPYgz9Zpnanld3AVoj8iHO/Xzw7TFg/dO
Ie+tn90pUcUUCzkinXLukMr9yi646zFvddbtpnRirrEPOGfNFiq/2rjLlFuG
lk8fY4hnO+WZi/eZ8mQSbUlYI89x2p8dK3Dfv6F1gsqbYtRWmRXkacpWxuxy
9zaldV5tv9umUBnOvB55uoRK+tXqK7J5hkMKPlE80LZIH/mwPkMc/apEHzl/
UOk5i7tLxNJvNbJiflv2LSbT1sWPw06561eW7vFb1IhxGHJ3Unrpn2hf9Yu4
732+nkNqJ7wRh7XqhbWWe5lOa5zS5R1k0E59/zg9YW950F39xM5FDZKJroqF
JkzsIJ17aJ39v7xk2luNA9bqiEN+R6ocjwFmfD9fY5bePRYs+U+qL/rgT6HS
oarqrG6EG9Jxjs6P80KI/HBXv+Kwpob04nv27v6mpK9FHLse+H+u8p8juJf9
4L1sL+T4Z9qPJuGOOf9PTo09pvw7Utfl2krIwbv6rd/znPK7va7742ymrDqv
674AMvTCCJWhL7+Fytqm2s+CuNc+9NDfTrptyvgMuq++ZbCkM9/Rx0J+ec1g
fM6dpuzn+/eiqH8vPXPUpjFl7iLmI4gypcB8rXMKmHB9Ft0PWXAHTUu9XNex
pmRcz3dJkD+1DirdC/unB/dPAchkI0pldOZ3tu6O+pzDpjRYqe08+2mIX0st
f/nFKbPpy+311JTd9emHU9MU5yBiKnwr5xHKaOCEgAz0aS+Ae8cv9v+IU+4k
03bKuZkyOp7+dkszQyYxV3Xr4rgbBuj82PFdvvKt1qZclrQuo/REyJ0oxn48
hXubC3O0jQKvKkz+7wk+4LqTZwq8LZS6cRfc+96R/zQdZsml+9pOhAFsXIg+
mb4OOVdNz07oK0O2pdH+L25hSRBtT1kNU5IF63hjhkOuPdHypZjbxcxxc2ki
xs74FesWGDJqi7Yfc9eUWbn4li2JITcK6P5pGm3I9LX624KJTOnJPNG/vhly
ri7fYELGOkfoPDwFTk67i/7YkFHuzF9TMrslpfNpnRSQYy0Z5/PMD1MeLtLv
ngFfst8r2vQh4JbR9P0+G2LKaW/tcxN868gwbcf23ahMX/GRJ01pdIhvZnFH
+Mep5ZdXmrK2lJYvBX+t/FrnZJmPJTGm0guAwTINV7raFqzFRv1u02ro5xb6
fe0DNqMf1AjUKcxcMLPAt8uTb9t+ILcox5dCxu6gH842YIxsxBh5Id8O8j7e
BXjyPH35emOP/FqpbVYETmsw8b93rMn5jtWJu8m5X7Rv4rch/O0RyKB/KIMe
Qwb6My66P/p5eZPW7wQstof+UV0hi7JeVvoh7vttGR9gVH1LzjygzwPGNPuV
zsmPcDtuidbPeR+ym/oiN+CgEMZhaI42ktF3yxffPcrvOsDHd/H9Y+0NWLuF
bAcycB/fCS4AfjnEN4D1gHdqUmf1CmNfyXOUBedjIW1M54FJPlE/bMeC6sY8
OxdwvlJRzv7ty3QFZzCI/j/r0P+IYMplYJPMvNt6gf5MzNYD37pDvccVGy8Q
e3yH3HehvG6DM+tGn66zwAyViBlKAifcod7GzY4tTz1PT5TvI+66Z8eYol5r
G/ocTt3LYrQ/gbhiCLBEQdorM4Oe8seX29aNE+e0RvuF+ZYwFPR50u3sWO7U
0ZUHZhlKHG7HkZhLm+YszM+SP/H9fuNOQf+xbejXIOKr83bsd2LCrPgbxnFN
RDsXiM1e2fiKY7FjvcbSFhkAOoLz8w70eeq4kqKdUmynFH5blHjMHeNaRJw5
F3Wz0GZa2bZ1EhPa8VNdhyu9EvjkMv0xOqLNOZzbS2jvK8e4Ef1qx7G4gt5B
nDkKdavxbAZg3/1DOVt8iiFlmNOwHeRCx6QqF8q8MSRfZvI93ENLU4aWQJ0V
SbROqdSGFGAelhbrTfFpoDzn6QlTlh1QevNWUz4yD0hS9D83MfAPYIHSX5W/
Rbw3pUaw8q7yuE/soF+o/yH7vSr1xu6GZGM8gZb9BkuWN+pPnvBgkEzprLbI
dgUHSsYi7nH0hzUD5LePxgVdfrebLIr5rPEWNtQTK+WcGvXP4W4XXkyavFCs
de6Cv1zvXkPXfaKnxC5U+2CaWq3k7rRjcXT42X7S0Cu/7udVfSV1vuy6XlV8
pfF9zRMUvqC3BH5XfdfmF72lQYs0yv+z+Ej8VapPa+g/QIL91Aes1tjBcmyI
+q3V/+yUIQ91bjOPCJapq7rq3rgTKFdHqb7r+WSHjLqkMnE97nxb5ur8e78A
1qKtpx14g7uPzluSvXaMOKWzXbHEg/6cq8BjLhQlb6xgySbaCzJ0MWQH3wC6
4RzHp364kS+wBN8Pyh2HbM2j+pn61Z2y4YBi8g5rgaVF13rqv6acoO2mv4cl
X5i3dzf2SYlGWmfoVFOqXNA94DbalKCljCOaEbh9B+Nf4c6bhPG0SzhMOThA
6/SONCV+H20n30BTNlAv4fPekPQF9LcjfhjS00Pph9jnDRy6h8N9TUlcXuuH
Ate1Xkg/eeCKq8QVT8cZMqC71i+y2pRQxruoAr5VhLaGIpB7xQdTXgBfhf/W
dracwFz1V/xg7jYkXUmlt3wyZcRInZP5LQ3J76fzuWOGKZnvan+qQv4moPx9
nRn8MKPSCYCfO8zR7xa0Y2cx94cb7lzPZ/93HyxAPjkW/CAxeX4y8Pb2lCOB
yy3ZzzgAT9F+ErZfqByw3zPdS34PnRI5UffhTtw32mQO4fkyxT+x4pxSOJc/
TcYJx9r9WqF1ijWBXPiubV7Lbspe+ofn3mHKsYE6hxtjgGmvM57tHaxpZm3n
6Q1TsiZXOgWwd0tibxdXS9LFY4xN8IZdr7UPQyErXjCuUZFY7P8aWn9SDkty
Fdb6rZeaUpN6yw6nTSlzSukdQZakYU69ZTGmjCmiv93oYcXFs7DpfqPtHHBa
x+hsyXbGodrfE/y5k9KZ8Nt/CrH/mHsnccjCGpY026vtNMaZK3dG6RvAGHno
356xpiUrDjFG3BhLiv3U8ryQFZWZE+Q9ZMsyyvfTkHfFKXO/AmeWJc5cswry
dJTOQybI0oSZKZsgBzJQT7UNeyYJc7fth9wfQpuXY7sFDMl3duuw/xkX9DJk
U2LauRaDD6RnjPTYm5aspr60FvZUcmKeAg5gS+bJvTvHkqX1tLybYcmI01q+
ar4lm1vSH2YtcOYMpXNDVm9njPcZ+GZHxjV6ssMSvxNa/uosZCvf0f9E33+M
Ji6dCWzAHGTLgLGftaGeBNjsCu+YTTBXTakb9MAa3aF+7NUNSwzaH8e+QP/5
Xq8+5Pwc+ueUw3jXMv6GG7BuT2JdV8j54tSJTYe8dqfN6wvOYCuewYzAAK7E
BrlxBvfzDNqxEdrxjfB3YJKO1Edtw5wPJ8abB9kdn3I8FnR93pUmgD5EHc5T
YIAf1M+kBa5YTD+l16C9iE9WABtUITYIw7r3YY7IMFuPRCw03Y7JSftXKPp8
lBgmBvttEvdbKozxB/fDffx/2Z/4VOjjb8Y7zYpvXvoTbwH0UNL7bJ0Yx1IW
7U/jnMxHeVKWV0D5EpZnwnf/IYbsh34+oq9aEjuWPnVT7VCn8sP/2knGdsqB
dqf+rQzo6qT3ov4L2kM9MG8diZ02YC1ycy2C8M2uYUoP/WlJBdpqbVtqSv62
Behc/O5KO84GsaIdP3YC42zY951DvO9EYw8X5R52nMH90al8L3lfyCDa+HZE
mxJBvf3N64bU3aJ13DMa4tJbefLzJZBB1M9faYx1/OOj0hT7PD7zwuCcpQ3S
31YeYcqlWdq+7ylTKhyjvsINe6+N/tYNWGsIsVb7aZbkdaMN6KMhGYsr365f
fYjssdSffEBLPyk9T22F0Y4A+eKu9rjo9APFvKjvHFsN7CHLG8aLo3NEdhHv
5Bqz9EKOuhLYaXocfWZQSxmz9nAcXTbMV9a7aF7FqkOCJHMmjZs0QnrJivSa
M3HB+iDZm1wx3vnYvrKtRI442jOhr5R6rzmvQ/IPkFtu6pf1bMcQ2TxV438W
XOMr3w5r+2efBsnQ5OpvtrFuqAwS1dFtiBcskf5aXqtHiCztq7bCrcVMmZdD
ZY23YUj2gooHxuPufIL2C29g6q30SXiAc9mLZ8Ef96fXzA1RAbwoPIXSvbAH
fLgHDuZwSn7muSvSxJBFjP+fr7Qh1h1d963gzeeX6dq1zuyULdm1vkw35VC0
ru/D16ZkYUyeqXmAr57q2lUDbkpzR/vfv6QpXQoxLvoyU9Ix/sDc4abkm6Ht
pMY9dWASLd8JWXmG+ROLgf8lq6bjbQa59nO37p9o8N1g+lw9P4wzxTdZ68Oc
8v6B2sjqPzXk+Qcdb8qkpjwI0b4VBwaoeo3lNQ35N6eOPQB3oLqMS3YBPL4d
ccXK/qZ8LaX0d8jfE4xv6efnkHOMI1FxiVMeDGJM8smmFKaP0JMBpiQQxsnv
jXtxL77V2oT73Qrt85h8ltSur+NaFgmstZt2GciCn9RZLQX/uUWeGYG1bkAf
rUe3QTP+Q3zw/4K8L9dA3ULdedfDXbb2U22z9GtDzqbXefCbZUhl+rfvxpxf
5pwXEqxXf53bMjst2XJSf5sdeKMC8cbHdsDwtAEdOwY82Uvn8xTuVh2+8I3n
O/CEvPqtB2gzjHkiRsbdI7XNic1xV02u7VRNbcct1/YDW5mSne9rvofi3k35
/tuOBcrcgkZDSxo/V/pZGUsOMC7olPyW7GqstG+UBSyi30pRFjTtfa8vWVKr
us5PMO6kwjtpHuCUU/RB6gIMe58+VBeA66oWoT4NMr2Ei/42yz/4VjUtLwus
dZI+5FuBo9bSp9oDGPm2EG/Ms8TFQ+mvkDkHiK9yAz+so45uwzVL/JsofRjt
vGE7WXCWM/Is54d8cOX9vRnqfCdmaw65V5/6mUVopwTbOY+7wwa+4zsNHF6c
fgWLIVdnEfN8gezowvhRixZb4kb/8AzA+4voV/8CmK3MEaXndLXfDOr8jF9j
yTbaOgudt+QVdU2nxlliMl5cZuCxhqdoN0T9D8z1vA734atFKOOABfryjdgs
7OULfMvZ2varqa90SsjMWnzr0fCkJVMYD9+OKV7iz/s4nIUMfNe2FvLzMXUX
S4BZ2tNuOP+9JYOo/zGANfwmKn0DeOcB7XHPbBnNNmOwXq25Xr1R/oC2Jzu3
TiLK6OEo70k9UkXI8S+033mDvkib4Cic5S5/fJxQ3pnl04BDStIfyX4zWJI6
H6dtE+SbwaXAFfmJN1JD7j8m1rLjVy2lX9YdjLEN31NcxX4Ys0zpOcALq2in
2wDcFfDHTx7jjU/92098fxDHewa4qzJtoElRfwHL/84Zbb83jMf+hAKD+ND2
Z8c1fUS6KegN1Dt1xhgbEuP1xDycJL46gPZ3sT/JUecuMafdxhziwA+Yq8LE
mSlAl+Pc2rmMqhEvpbRzLFJ/OO6bHcOEcwieuY4Yexv2UjXalxug/BTflu5H
G2uIgWNA1yXmHGq/gyBGTQM6ivMwHOszd5D1v+c6Dc91tu6muPxW3pVSDJmV
VeXLPfCMHy8ZRyWtJe8/Kd1htinnXvJ9/T5LjtP/cCrkew/m9Az/Br46i3e9
QFMaduY7Mtz3f3sr77VzfO2ur+drE+4iCfg+Jd94fDeJttMAvG5AW949Icua
8i55LjRE9lxS7DGy0UDJcUh1WeE+AyVpC/UhH7DOT3LnKR9H7xjsL7GXNTfQ
CkcvCcukMayulnMXzwzqP78yTzWpvbx3HD3uhpeca868P+V6ysmp6nO1p09T
GZpQfexnNfaTOYZivMmtA6TCPM1fs2tAoMRfp75V3mG9JH1R/VbSLQPFe6j6
kn328Jc8hbQ/c0o7peJExSpu+YbIJRfFkDVcHOK2RG1z08HLb/lpHbOoU64O
VNoV/PLkN+XhCXF/TbhE5y3pPvvdK3VW4Lc1aSPwxX7owL0xBvulIHnp9lGG
NGumsrV3P6esHqaYpCTudm707clvmXI3TNcxK765iv45TXeHSr+Kas/Nedsh
Z7Orvisg1JCGzDW86oYpSZPpfnhf2hSPstSNQP5GfWQek/imLOqu8nd9GlNK
0Ya4whf7hzqoDG8N+ZhNyztDHj5i7rZ6hSFfutE/B9hqWoR+6+tdQ3ac0f22
dbBTSm3Ucc1NAp58SuvMBtaq7dQ2Q7qZ0vaH9q0kZG/yVIqR/rlkSCXmFbpV
0JR1SbVO54voJ+NXj+1jyMwTenYG93LKT/qGeaxxyEh3tRd3gZxK3Yc+KpA7
2UtQjkBONrmp/SmNsx6f/k4nneDJJ2i/G4nx0m9ZgKMsxlrcjbM/j3ygJ854
Wp7x7rjLdgxSeiH4jA95fh989zfz/Dbfi3Zu8a1EJ2CYZ4yj5WrKsc06J6eB
gafn0zFeBcbuvZx+U7gfHWit/aw9zRTnZV2jhaPBExivqV12U2ZepM95M8jK
RHyDlsqUl5O13NaDlacebMoaU0ZUY0z176Z8ms04e8CDfespXT2/KamYxzwS
WLIE8zh7TLJkeQYdi3ODJXvoEz6+FLArc810SGVJpofajusE3FUZL2J3dkvG
0d97sR94LH2Zjq20ZC/jQe0dBp78gDpMyKnijFeWCnJ+733qbC3IDr4B3DrA
kn58S/gRY5zzi77lWKuqzDtjxzqLz1hnFbDWjmNKZwCOLUMc+/Ysvkt9TjrI
vXGMpRD2l04vCGf5dh2t8wYysTJ5fhbIvZXs517wgUvEZslwfzdMpedBdl1j
vKDjK4ArmO8vBrL0bVtieOy3fxgnueBqSyLHaJ1pwCaNGP/zJMbyimM/f8SS
CvG4t7HvujDeSBSwUPPPWj898GCZ8loeC7yQjfh2PGRgBH1jlj/EHYT200iM
yf+7/nbhfksG0ydtMjDV3gxa53s05BpxaX60H8b2l2B+wsnrukD+h1LXZ9t6
qtDWUxJzlYo2vgHv7XuE0uHAO1uIzXoDF+QjzjFsvQ31S7YdqRPb3A/5P5rv
12oCgy1knIGzwAJT6Y/UE5hiFP2d5qI8kvhqPLBEemKq5sADPtS9/B2ztDhw
1ADa4+w8y5foN54CfZtz5786A1knKfrvznvWFdA76F8Uhr5F0t/AC/X7MD5V
N3z/NLFiTrT/g3upCPhMMWL4jvitC38bH307RgwTH9ipGzHPQjvu6B+dFdqf
xf6kx3faEQsVQP0frB+C8kzERQVQtw11XD+B61yoy8qMOj5/xYo/+Oq/eUvD
ebuONn9T17QTfbtDvjcf7fhS9zgP9duy/lCci4uUj4Oxzo8Lk6/a7zX422mg
K5K+YuNS6hLD0Jfv3CcW5rYR94kdd791Y56XzrjH1aTPYVFLnPRXnJXOkCJt
+JangSmOmZQppUzxL6b0lAnAY33pf/XTkFItlO9dP2FKV9oNM+0x5cVwpZe0
wLmmXSblWFPWrlWe3OOjKVcZr2/xE/Bwd6VreZvSiH5ZJRKYcruXtn8HvKpG
Iu1btQhDwvdpH9IdHCwfvdQv3VmltxRrpjEfMjz3lcm3Ne56mvO+EtxT6X4B
QyR5d43l5bK4rUSdvhSHnbzH+sjrqQXjyk9HtZUtNS7HlWf4Uk9mZZyruXiy
NJF77pvi6JnbekiT/vF1nn17SYcbqu/6NdFH9i7Xdm689JQ6Px/H1W910Uci
TxSKKw98EiTbE6rO6uunwfK0mcbUmvjBIX2Yf3lE3RAJeKHxjn6VNCWasXcy
93VIPzfG3sxrSpbXOj/dfC3pyndA5XDH6nGJd0+sf91Cuu5fcXaL09404QB4
zr/U+Ww0pFW8P+/LnJLgp+KEMl6mpMuoazGqvSnfb2gfeo8AngnX8urvnLL5
rOKuodGG+K/jG1I/9CVWscdPyN4LlbSfr6uaMoDxHifnscSbMT2+VLFk4jql
Pa8bknuTtnMe9WM7a/1GuCuXaaRtutQ1ZFpZpeuUNeVjJa3TvJUpgYeVTpLc
kp1XdF+5Z3TK8fSKUb/vMiWfpfvzRnJDdpWl//YDp8gYHcsbH6e0GEvM2dOU
1Ml0vNdQJ+94rdMsvSmT1+i4au4AThukbX4GDsnO2IxTHzll3jSt71xnyLh3
um/bPDfFq7X2rTPwyQbaqgYAa6WhTmYm1iiCa3R/F3AX9Q+B4NXR5NWNwc8K
kc+nBH/azTc1/uCTPYmro1AnH/1JEgGHjyUOTwmZ5l2fOuRNpoTRB35/bVPu
OKhrumdKJ8bkHA085vFcy1fhjHcbRdsc8KMLY26sHQq8x5jqYdg/3Rln7w3k
YTn67O0ONeWkr5afwf3gYzZt590rU5L00m/5Yg6PtNL6xeuBJ98mFgJ/eJKP
scqr4a5Ne6t7a0vuZ9XvrsE9dTJjZ1UeC/nCt2zbwesW9OPc7gG/va51Npe1
JOtELb+HeX3KuAEv/O343rzrgX/WoS4ouh/mzaHlIeWAkRhrazww3m9ivGbb
gHn2UW+GO2OPNnxLuN6SbbQF7wdOO8A4q62xbssOavlRyM8UxCoTbN8TYqRi
WLty9OnaAfkzgW+jHkFWf+ip9ALsgVL0z8kHLFCId/O5wIej+CY9P2TUJdqz
9kGWhhPDpAKejLyn/ZwKHOVOHLUGsroI81OnhRze+lzLL4L+/Erpx2HYe4yf
PGqmJfdo12sG3LGFGNgL+NBBfBgCXHCa/uQzIAcbUg7uhvz6SJ3SGPRt0zet
P/yuJfX5vjIpfnuPOtucwITLiK/aQoYWp27kPeT2VOofCqLN0D85lIHrDjN/
aEOMayTzIc7GvGXjvF2H3DxJTHIIcjYpcU4VyPH21MOctX2WqNt5a8fFot0w
Bc7dauKTnHYuGNoZP6N8Pf3WamBdFnFdcr61c1UrPRZtZuc8/G2DKwKs0ptY
JQ/qtKF/0Xz89jx1ZV/Qz9fsZx3UP8f6e9C3xhxLT9Txo/1rBOZnE3Vif+eV
zoZ+vmb/x+G3ocQPoagzivWr23kVT/yHZ24Qh6RFn1ezz/ltGyh1XP+gL+7E
ToVQ7spyOxZETZZvA47KzPily1Bu/MFCwDY1qYOqg/LrrL8QY+xAm53zuxWn
n4rrP8rzcOwzsVbviY3tnIxtif2a4HeruY6fIBNzUiaWxfhc6aM4HuOox/Py
Cn3I+uw/nNaGfduI/u7nes0BZtxMzJwGfTxDPhzjwJ3uqJ6L7g1NGTtb+efX
XYZcLaYyriTw3RbmR/hyCjKFMRXT7jakfHGtM/OFKRfoI2TH8Z7EON6jcT/o
aOgZmQm55kM/+Uq4+xiX9btD7pvSr4D+tpevKUXLKf88O9yQ3bUpj26bMsNV
66Q/YMit2vrdJ+UdMr6JvscPeDdI0jxTX/SYjn0l/iXNJ3j6bj+J2KS+Vdvm
dpRspWM0B/TeHtJwvGKkRbd9xXWhYjC/7h1k9qHbcXUSh/SQWV5qc3SW8Zbd
Q3LG0fU29pK5H1VP1awP6P2Kr76WqS/3nykey3i5swy7+SKOLj/dQ0710LyH
1T55ydkzqiuL/B0oZbLpO0TPnsALl9T3zEgXLK13KQYrGRsiB5eoD3ybpEFS
uKrWnzc7UNZ10rhevm8dEhvE/MjFLWk6SNcr43Dc9x/pPDfGuVnDd0O2TTsx
c1cFBFtServW2eIw5UeAzv/MFKYUG6v4oW+wIWY6XYtdYsjYHIptVm0w5Pl3
LV+D30bzt4H9TclPm9pgL0NiGd+g3WpTqlbUPXB+AXB1Yvp0RZkSPo8xfHJA
PtIW8yO+KQmJsRekxW+XKu0dZEhJxgZpXAx3bcZvfFjNkPpp9VuPA8E/N+q4
TruZ4ppQ93YA2m5A3WBR/G75JMVR1747JGaZzuFwjKUUx+KexylNa2v9L8BC
jb+yzbVOqbNA9V1ds1rimV37UHeqKeXO62+7fzBlqIP4JNKQhhl13zapDOza
SvuTK9iUET20vlHGkiejtZ3tkHGxlHHtwi3ZVVXptZAvS3x4rsGXIngHXAhe
sYx38/k448UoL8bZvprkP0PAG8/y/pUWfHowfQns/ndm/y+kNMWcpPM8840p
mX0Y5wGytG4PpY2FprRj/Nh8+3GHZUzIbotNOZ9ByzsXtOQK441MmAts9plz
ctMUt5TaTiz22Nhx+q2VK015VVJ/e3A2+AzjmO1ZC7qWltvvAvbzXUC1i6Ys
eqjlVRdaYtGXL15CyI7d2v4ozEcp6tgnNLMkKDHjkANv/mZu4sfAUdOJo6pU
xrlYznUEnokgnvk0xZKCeZTeNsiSPYv55hG8dhjlo9EI+O01daqQP/noQ9UL
+Hc138dlRzuBjFcTAtl4injDpTfu2oxvUMK05Oc5xkOA3JtJPVXiGMgOvjkN
AN7z9uC9HnL8Me1W3yC7AumDvQ/7YgX1nL2w1vdoX/NAm/nZ5hjIjq6UX7WB
N7yIN55Ggj8z998qjO89cX4itDmaWGIM9tF86pHG4ftX6AN/AvN2gzHtp/bB
/c5Xx5JrpSX/Mt5LFGRyDb6HKgW59IJvGPdAvq+inSjigSXp6BtWDeMYz/eD
9lu9u4xHWuxfyBf6Y38EHUW7WCzOwg36pO3A/HzYR7yK/V+K+K3zRUuCK1CO
/6UbvAYst5nxKu8Cs6RlvMpWaD8h87ZMwPl6RH3OFbTvT58lW/eShrqXr8Cx
PpSze1AnIev8HTsrBP25y/PYA+WXqUcKwDx48350E+c3PfU2OyDHy1InZr/D
60i89BFYqAHXJTEwxmHaDTuCLks9VXWsXRj1UV3sWF60ze0G1phKP64TKDfY
vp1bJzPbz4L2zhBjNLfjixIjXUG/ztCWOgtlJ+kDVgLzMIk4cIeNf4hteqEv
O2kPXQWsMvntf7grPdu8ZMeZZ/0uP+zYd0q7op9R1NfdwliKEBM+xx5Oxb4l
tH3MOFfVQO8kHrPfe0YTD2dEfT/6zHfHt5KQN9pvCR3Eognx/y1c9/k4Hy+o
Xx2E3ybkebkF+jD1WsnQxx88g7exb12ZTzz2vp1fQOlJ6GMbYrb37uBR0cor
kuLemudflQWtwLsyMMdoXRfcyxj3+3Qn8PAaeo5qgK96kK9mdrX1xvT/zIn7
UQmlf+POEZlF67fJZsnw3HyHkgiy8iDtkuDnAYw3GINzf7aq1nkLmXuFOeKP
ZDTF2kW7UhVD5iZR2bo3/mDJW0xjhGY47CtbSip2ugqckjO95qRu2relPB+q
vlhF57bFnU51WSXLBcmvH4phptVrJVdWqA98toxdZV3ft3F05xH1ZVG6+XH0
oA4esnjq+jja9Wtnydjrpean7tlB3E8pTpu4sb1419BYW85s3aR6ds11uKtC
qJz5pbHFHvcIlfX71C9rR9ZB4qyl7xB9cO+vfUvl/u+mhozpomO82ShEhiVU
m+nXoGCpOLhrHG1ddMi/L9U+VQU8ORF9sX61x7owRlM3rHsb2pLsGHgGddpV
poOXFqbPHu7mw3k3b5sPe7Ke0o5k4MmXdF2SPDClRDGlG/V2SPNsqlsLwd29
Ct+WuuEcD6AfaSbgn4uptP/LIEPTUYbux919fYTWjwVP3ubHWILA3p/ya/vn
5xkStEYxVa6fhnxrSv/qeqYEjdP9eTTMkEXltc4oyLoPB1V3lHGzIX2SKLZZ
UMCUbz8Z87yQIQ12q/4qd3dTCtBunjjKIX2W6BwWhJws9EP7kKe6Qw70Vzz/
dolTEgUpvurYwAmeqxgsB/ZqKHP6jKptSZmzSgfkdEq2ClpnzTunjDvPfKO1
THEwn/sjzG0B6tzGJIBcZp7cFrjrFwqh3RD8+ABl90Xwqym8972HnKrQizwc
fCiK+oET4JN5ebd9C35Wg/fTslh3L677Kcivd7RhvYi230XSdjnMkGNVdT4P
lzKlSAntZyrIrkH0Uyqe15J+jKWQtK8ldQbwXEfb86xrOhljOcax7AcuuvxY
yyOAPdYxllFUO1NWXNP26x8y5fcSrdOpjiljTC33S2bKHUvXLsUk3Kld6cMW
YEqaerqXCkDenqNP9XjI+axF/sQXBd8ztG9vgS9aX9Y+7wAuCmf8UtsfpAR9
vNuVBe4ar+V5cA9+y1hkO5dbcpM5WYpgjocGa5vDcJ4KbaEfO3DrSercth63
ZCv9sS9DPqfvxDd0YViv61o/AbBNa8bgarAEd3++YckNefue+iI7lkJC4pDd
OL83+cbhGPj5VuIQO/53XuKT3KAT05ZUCPJqGu9TlyCHc9NX/xL2wjvqr/pC
viWgfCxwzpIJ1HuPwthX0gadHO3doa9jbsig4vT7SoW7f7/KSntivBX4NjAv
MIgv7Z4LIKvb0PaXHRjQSZtjM8i3J9TnZIMM6sr4JLfxLX/q8cpA7mWljfum
jUeY8zEYMjaGWPHEWcg4N2IA2+5GuTwOeKkPdV8V0OfJ7PMP0E/43tAN8joH
scfaaMgm5o++jDOShXJTwEuzkpd+Qfkulm/B3D7im1/b9tWFGKAyzt02+nKX
Q/1+PGuPgKnW0Vcqu21DJB4riXnoynl4B1lfjXjJjpsVTjof8JI79TMzsL7x
udZPUacn8cYT/DYl68/5bsfwV7offhtKrFUP9VdyvA1Q35OxHa4BwySj7c/2
G39J3dQbtBNA3LICbVz9/+x6+M4N+gCHA3cUop/bIdRvQR5lx7SvzHaOgz5I
HFUJdHviq3S/rDh/U5tuCQwziDbTH/jWN74rrI7/5/vjG2/PFe2hi/DblLQV
5sJ4S3Cu7Bzc4+kPZuv0mhFHdbRj7xPfRmFMkbyPeGMsHdb+t3/6cv+8QPlE
jnEg+tyMc7sG41tFXVYt9DcN81q2xPx1p608DfZjNuoz323BWabd320T+F5r
5XVr6htyowZz2H2AvIhWGRG/lSl5GX97SCXg/8XU7YPHNiaPdVSzJNNW+s8A
U9UkpooeZ4rPVtoLcoG331f+aYJv3aLOpCP4bcul2k4dzKUP71kPJ0OOn9Tf
7t0Fec332o23mfKAuTZcLgyQ1qk0blW3+11k12r1e68131dejFb/83WJQ2Ty
dY3Hnu5xDwmrrLHc43UJAI9SP6srE1pJneXH4347yb+ZjD+0M46+ma2NrK13
No5u26yJZEy1OY6W60Hy9aD6xr+qFyAtumk7mdoHyp266q/V/eIAcUmvfZua
2V861dKYqIEXBsrzRBq/tPnZEKlXUfVX/ccMkcAjat9MfCZI8k3U9n/cDJXl
R9Qn6ucoQ8zmOm9NHYYkyKX0ZMiRl7xftx8M/raMd+Rdljzlu7npOK/R9PG2
47od5Zud9r9MmbZC5VTii4b0m6JYpe1yQ5Zd1vanJXLK4lOKAyO+hsjRT9rn
0y2dsjaH6ohCVxsy7rHWP+1tSNtLupdqlYLcN7Vv3stNqelG+dvBlH13dV+d
BVZvlJC4/YAhb6nDdL9rypvszO+z3ZTVAfpbL8j/M+30t+FrnJJ+tmKhdFMN
cXFqHwrkd4prK/rCoZ0BbGdLAlMy9tF9+LixIXlbaD+9mjlk+x7FV+NGh0rK
ThqvNb4H7lOftG9dITNL076ZGXhvYxn91slJTnmeW/sw5VWIfDqm8zN9llOm
1dLy6c1NWbKDccyWGDLhqP72JXjVJcYSXzraklv0d2oNnv3pKG1h4HNDycOH
YO1ycO0+g1+Wp+9NCvCZUeRd11C/AGXEZPCZqrzXr7sGfkJbWMV/LKldXcc1
f6gpYxlPz45rYTCuRcUkwCEndN5KLAYeZq7w9xE4473pO/TZlO+MpdYCOKVv
uPa/xX5T7k7V+r+BQe4zPm2qpKY85nuEIitMCSusda43Ar5aqN/NvdCQIZE6
P/Ugq1ut0r6lHQFexPc15ztakr8C7eZz0A7jfS3sYclD+rSXDbLjEii9G3NW
kn6hB4BfRjLuU6K3pnzur31bMdySRbFaHgC80J1xCS6BD8+n3iPKjt9IzFO2
mSWfGfdsEXjvCuoYpwBbehFbbpqKvZ2PmO0QsBn9t2Mhz/PRvpDrKDDPn7h2
4OVbmQugIzDYO8btPL/Nkl6MW3VjK871dqXTQW5cob+TnZPuCe0+DbFPurZW
+m+baWH0J+E/fMcHOZyrotZpsc+Sa9TplVkFbD9CaQPl0+iXWxN9+LZXaddI
Sx4zz+C9E8DY1Dt5L8OeZF6wYnMsWV5H6dnYvzkYK+8z2n/It4TFrlrygrrW
ZEstEeYVajUPY6dfsW0DL0ud5DtgwpAhWt/djnlFG7o35i2cMcHsdyLufCdi
5wJOR5+3l7in5OA9pTLoDHwnkhfnZiOxUF7cUw5Rb5kJOC0JMdtu4ENX+pP/
7UOVENihCf3i0kOOHyP+aQM6ljgnN3DIRPoaDcLZdFI/tg+YYhNxVGOsXR9i
oYa2jY+/XYg6hVnHA3J/HbHKcMj934y90MGOJ0/MORDYYz6xlh3zoCDjei3B
GKNp57JjnXqxHX/QDYklIsBD0hDD2Pqo3dRH5UX5a/KWbBhHXdoQSwFPJaP/
fAXUqUPbXFe0sZ7YyX6HGE6sVQZ1yrBOI/T5E/FbTZQNZT974TuniK8u2r70
7E82lE/kGh3B2LNRZ+Vpx2Hgb+24rx+ov0qANTpFPGnfUysRI+XHfObk3aQf
5ngz9Zwt0PbV9pw3zOUM4qVDoPNQP3kX89SSGOw+vnWDOq4l+GY32vqTxtgx
ipXOMhY0fRjM0YZsaKk87fwIQzLUVzov+GhIWuVdYpryy0m/i66mJPtGX46Z
kNExzC2CM3h+v56FhAtM+Rhf+edbtLmGbW4+YUrkfi2vPNDAfKmMa1XEksW9
GGP5lilT0ynfq5jfkoqN+JYH/P+Ov37XI7FDDIf6jS987iMtqxTW/Xm0s4xZ
pfa7Y1Vqy47nY+LohBdrSsTZ4XH0gXY+0nyP5i6ceN9XXDaqHsyo2EdOx2oM
rjYedaTHqQmqm/reSGou1Nw92XJ5ystUD+PosY36yfuSeePq/3u7q9Sp9iGu
/OGS3tKO+rREJ/2lVM0acfTv8v5y94hircS3fKVwuH43Xo9gqZ2xq67Lboec
GKM6lhLDgqV5hJa/buuQ+reZexd36C3+ioGfnzXF4yrjcKaxpDTjM3+H7HZh
3i5X7I1Y2hfeQt5GMgZjCPhTAsoCH9xfayzU3+7wNMSYSeyBu+CmInynlt6U
NPRNyt/XKU+DFV+NuemU6szdEzAC55Q5QZZONKSKr677Z8iL2Yyz7Vxiyrys
2udW3qbMpm9e0jOGXA9VDFOxpSGD+2sfrkaZcoDxtUJPGxIUrHX8ypmSuIbu
h7vrDCnzQb81v0eoDNyrOsOtx0MkSW7mSd/gkG9tdW5b/3DgXq+4sbLhlCRX
dCy/cBfoEkMM8CRYdrRWfP7xkynLRun8nFrvlEfLFTtteBIqYd8VA4fkCpHd
ddS/7kYnQ3rN1f7PwLgqGdrn7vedMixM56r2HKcUY57lcpeBH14wRgruQf8y
tlIVO98Kbe5/Y+NzkNcT6GO8DbywPO9u78BDZtInxPZNaE8Z1BN8Oz99Lfbg
/lWYdpyPNS3xO6bnq+UYQ2q1JR/oZsiwtdr/W7dNic6oYz/60I77oWP5t6Ep
1+cyDt5FUyL4RqA7ZMJvxl5+gP31mX7124ARHoWTDjEkZ2b91s6mpizayLeo
vUwZnlr3Q+dRprhGKG2/D2vaRcdbHd99Fa71jy8y5SljJtdJZ0ryFYy58RW8
axrjUQB39exA/7EcwHuFdLztWgB/pmaMzbSQxR+0/vTJlhTNpt+qe9iSybS/
F8Kd5cZZvidaY8lpvpWrVs6SgZMZsxT9rMw31BWxdoFcu2P9IX8ZX2s7ZFR6
YpIVK3Fm6Xvvijv3Uuow//azeoaz04NnZxPkZCb6Zb0BNsuaWOkYYKE6zJu8
AOu7gm/rzkGelKK+KAuwQMEg4qIVkLn0gd8BzFy9F/XbwAgry2j9K2gzJdtc
AnxRZIjSryBDPkTR1xcY5D1to6nQ/qdAton+ryLOKQtcV4q4rg6w1nreHab7
gCcw/lgJ4JqHT7T8DcZYlFgoKfjVYeq1tkKWZibW3QBZf5B3hxuQoQGUuZUw
t+/4DnQi1mviea4FZGwUsWuZV3asD84bzk0q5vrZjjYfsc0jkOn9b/9XPy3r
Dwa2qs83iba98jrtlU0hWz2pB6uB81iKeKkc6ESk/YDfUtKGGIzz6OR5XAcc
0vRPPE+UR1DfYr/pG0QsVBLtvKM+Z8pX2z9EaTfUSf4n1jrwVfo//kugjxFr
5QUOSUgc0h/1KxFT+YKuQToN6mygjs4Fv3MnJqyPb32gvs7OST2NOO0A6tSm
/ioXeE5C4pbj6P8l9t+28aWkjS8Z+mUSp80FvmpJG+JxOyYG9Vc50Z8Y1v/7
/eAQ9GEnbZqDbJ8r9tm2D17luvdDnbGsE4Lya8SfCTEuJ8c1Cv1pRzugravc
zXuodR93W9p9Gl6xJAt1p+kw1t7ULW/B/KXn3ruDdd/Kdc8OfJWdODwP5ukJ
77z2G9YZjPmWA2d3D31Qa9Y1xJs5ebfgXO7ZpOXDCmNvd1ceUjm5JVOZn6Ih
7hxJKikPHA7+4ailPLMseOHId8oDy+81JLSC8uQJvQ35cUDbnz7HkMsRWt8T
bYd7qoxbPd6QLb20fEQ73P2vajvJipmyM6vSCR9CxtEnecahYFmwXWN+nko1
WJ56qg2x75EAmWhqvua3LZrK7MjIOPzj5VFNMjzw0rzPXytL97Rt4+g1u+vI
qw6T4uhuK5pK51h9Y3ixVhm5UDCX2gS7dpIkc57E0YUO+Et4RsVO7bZ2lR3L
32ven5YtpNHMA3H0klq9JZ2f+ucvLeAjxx5oTK2DAf3lh1FUz87TACmaVeNR
uAwOleikqj9xdQmW6WvUX6t0xRCZsIE5i987Jd9l5iJcZsjc8zpXKx3AOWd1
DjuBl6zlO6/cmyy5wLgBs7HHN/CMvANdinvPztUZQd1v/kOm9KEd51WEU1r5
KQbY1sqU4kd1/hePMeX+al33klsMKZJS13dDW/CK/PrdbFjHBj20b7WA2YZN
13Xvu82QLFm1/ub7hhS4ovQhyNw2lLl3kpuSbpTKSg83Q1ZuUHvfglJO+TBG
dVPPchrSf5yWD69iSGLakbN1NST/MqX9aobK/kKKtZYWNGRQpNY//84pBZk3
uXdmQ9z9tHxlcacUdWr7j2oY8jqLtvOhU5AUWa85uF9cCZYHiRV3TXwcIoki
FL9NGR4sTVYoHl7rGiQh/mqP3nM2VDqPVww2+rNTJjzS79qx0KszFnqSZIZc
Lap9+PnMlGfMG35skynt2+lalAaPd42kH/ta4IQpSj/EGoYzN2438P83E3j/
BU9LwjugEzwhLXUsf8eT7wa5M4h3/3v4Wy6lrl094IsfZ3T+52NuAzi3x9dj
bzAeWhXgiBaMjd9jKOQ1Y7ZfqWjKFg/G828Cucw3d0dwlrfTVtgtno39dIxB
XqZUpc98wXimZOuk381+y5AEe5mXHHe0W3V0rm7hu0nfajs3h9h90/Ksd4Df
MtGXfrwpn7bRZ/6uKZJDy+8+NuVUNcahRf23jPHeGTjqI3HU9uq44+/UPqcB
Dm2bgH5K44GX+CbaWGjJPMY2v7DTkq5nlM5SFHiDOdb9Uacn62SC7I1gPArn
HEt+uGt5PeCNncQbc4CJ2jLGxeHtwNXMd5YTOGoMdVzDgAcC+F61EWTFOMYq
fwj5+40YezDkcHXGQHgEuf+AeTDnQA5fpa2wN/5mH8q3e0stGe3P72JfHGEM
h0S2ryDtnnmBqYbto5/8XPCWhlr+A20O490tBPeCL4yvtR/YqsJspXd2sMS/
tP52Yl+MJUDpJX0smUI/LgP7x+OO0tcwjrvM7/kG8rN0O8o7jKUV9QNPgUfO
8n2H7Qf0k/eIs5iTA/MoN6PsOE7ahxyQoaUYEzUW8nc95XLVe8CujJ31GvPW
Mh91KZCVKRhbyRNtXuE82/HFX9BfazTOUUX63uR+YMeqVdp+c1SU/tW273or
+iz1BOZpT8yzzY4VT71KNDBAWupbioDOTyz0d97nqDfA0tSlbMZvj/K3V9He
EuIc28YXTUzyE2d/Cf21HPjuIX7XDbiiBPXhv9FmUerr7FgQy2nfTGT7G7B8
EvbVWOpFM6JOSeqv1oGvfCVWaQM5MoF6p/1oP4o+og2BnT5QT7US37/Nvr3H
GMdwvNnsGK2sE4x+RrKfdmz858RR2fGt0dRNZcRYC3A+U6G8Act7o583iWPn
AGu1I/4cg28e5hxOwnhr0WdvJMboS6z7GfWfUyc5HfXfsP4LrPUc+v7lxz75
RV+CdminFd8i/R1ntbWdT4F7IxR1/mWdqVirurRN++B+N4b3uzK97Fy3yqMa
5TWk7QLmHEllyqgpygNv4x50hvegjag/2oUxHNoCF53nG7FFhozYpTxw9gJL
9jH/VM23hkRm13YOXoCMm6y8dPUAp/jMoW7kuSnuzAX2ZaQpXRl/Pk1WYELm
MXlaz5CpVZX/16wbKtOrqzytNNApwcu0nTlh3uJxPFcc3fyBn3xMVkHP9ePe
4lZGY4oOv9RSxiQ4GoeLVkhHaffkXhwd3am6tAn3i6MTBdSRKs0mxtFT/h0o
fQPU3le4eQ9J2v93XPn6491lRPHvcXSV5p4y6JDqu6Zl7i91v6ieLXrPEFmx
RGNqbZwXJLJX43SN9AyUza3VzrhuTLB026vy+kNzzANjYj/GHX3LC62/qZZT
9l1SPLDllEPGXlD9TN7KDhnqqfquM68wbz11DgutAs+n/v9LJM4d/V17Yt8O
JuafjXv0Y/q4Zh9nSi3mIi97xSkPGis2GOxmysL4lK09DVm2Xef/fLgT66F4
rFYn8C7GuVr8w5AYxg51ZsQ9KIXusU/gT7UGUo4EGRKbkjHwgd+E+G3nHYfs
y6u6psLJgC1vKj3qhiW7OpBHOdGH/PrbTyOdcvyrrvuSVSFyZLbmy35+xJB/
OjGHS0anjOfbw6spcX9h3hy/4cAP0xlHrrEhns11XB8nGOLRT9sv5xco/st1
ja4bDuk/Qv3TPo0LkYlZ9FtjDobK8raKqW5lCZbiNxQnt0hoyglv+hrdCpUY
2n9nBDtkra+2k8TGotP0u6WTWZLnovatXyFTMqXgO8pq4LebGW8fsrLecNrs
cOee5aVz4g2eN5k5esZjffOSJztx9t/x7A+x7Y+0WXS285gwTpHZFPwhnq6d
7Y9k0h9peIwhG5jv6XIlUxK00P6U8zRl+mOlrUWmbEqlGCzxF6dsjNU9k2yX
IYcK6W/DrjrFaqHlo6uY0qk9f9velDt809oc98JOzHe54p4hi8/rb68Dh28l
Dp//yZT8jAE72N+Q3K913nJ1AQ5xZ+6DUqZUKc72d5jiNVj7ln46MOQ1XesK
Aaasd+c9Edj10TT97shs4KV5dJ634M6SK4m2+RMY9ruL1qkEei1jRCQ/BlxE
nVK9RpZsYt7nKJuXv2f9YEuqMgZXT5yRzzwjx3Ee3zBO2gnclTPTP78Zzmxq
5rix40rWYPtvcF/fN0rpNZAL7ag3SAl8MoCxqmpDli4nflsBDHKU+ur7wFwb
zmr7ryE3XOcyZgXaS/mRaw0505+5ipbZ/vkXGIcHWMiN70ntN6/H+TazA2Ta
UPqldDwE2cRY06eASy8kV3qsK/ZhAtrcIevS0v6YFW3Ou8U+AKvMpy/xT8jM
GNr41uBe+I0x3iMh0/NTvzQR85CGPmD7sc9/cp8vO2KJ8fs/PeRU4ue/4x0d
Qjvd2E56tN+P+oqywGMzA//TUWSjjqIweE4R2pKWQC4blOM9IZ9/8l7TE3Xy
kS/NAwabRAx2ExjgEjFwHeCIYrTB+aOd5dS9xAJjTP1NbAA8k5v6tGyoO5P6
q/3AFQ1pn/oB+b6RWOU5sMom6oJ+gf5N2rbxvaHuaBDaXkwMEwj8Mon+SPa7
QHfaOrvit81pc6xnv/WjvS8rMMk84q6c2G8faA+9ivrN+K0p7+2YOeQ5r8B/
GDPEH/1sSRzyDeP9TDyTEeUneMffAXokffJN4KtRxFe3sKYO4uEYfKcp9fPr
0MfDxEt2/u7lnNtxqHON7whq2tiS/lqP0KbQT2wq2qzOffIJ7STiuB6j/xuJ
M8di7N2JIU9ib1jUG9fAmqfiPn+Ldm6xbzMxpmjqNi+jD2nZzzmgM9POOxrY
M5A61Q7YL5VTkc80NeXABtrmfAyJvq58bEEK8HPmzB1X1pRCVZhbJD3O2i8t
XzcDd4dSvEf8NOQDfZgz/GtIry/KM5O1NGS5j7YZhLv8geKK5ZoVwZmLUvoK
7rxNNmubWYHpOtJe2QJ3VYN31WxNDGnPuJpdXoRI6D7VLewZM0ByXtcY7N7B
/nLnocatmtg1WNanUAwzpbaPHO2qdsPSZftI5StqKxzgXkvmDxgZh5EqzG4m
bi13xdGlpzeTH6L0jHuNpcH1tXF0j2iRRXXD4ujYr/3kcAHVWS3Y1E2eVdG4
9InT+cjasVoe77a3uLfU3IilTgRK4yIa+703cOlX4tLetUOlemnFja1GBopn
cn1juGfVYDn1U+PJD7eAbe4orvBPbUi1OjpvN4EBhhADVK5syo6WukatITfL
0r/6BPZU+1y6B9pib5qUsxVxh42ivaNUTVMu0j57/ZkhieIxJpI7eOAV5ZkH
gc9/MBZ34moO+dZHMV7fMYYspe1pSgZTmkTqb9cUQZuu2mbXYqaUyk4/nOGG
nBStH2A6pfENHVe6SZDFzK1z95dT6jC+x9NOhqygPa5QklB5XkzfF0yo7JTp
GxlD1T9Uun3WOWwyLUh2TFeMWvb4EDlwWbHumXihciSj/rZXOUMmP9f2L6YP
laU9tTzYxSH/LGVepN1DpMtC/W2H9oHyu57irg5zh8jzdFpefJxTfqdUzLls
gUOupGb+xECH9PbSdSlyLFhyHFMdrDHCkE11dexvIPe2rqDeJj94pofObeB7
Q2ox7n2QD/gw7Sy/cWffT1tSHvDFMMaNfwQ+kZ+55u3c09coi9eBVzylLWkS
7s2h9PmsadpvwOkPBhzReQ7juF52SPGP2v+2OZ2yqrzO7RTIasdQPctXShq4
mzO2/DrgUsavOJvIKRGnFRuvAd8NIJY4WsohHSvqPjl30ykD+iruGo772ina
CqfVMGRKZuq9c4IPF+e7yBymfIzWvr1pZkpMJPfnZEOOBOp3vcSSzQcYm72D
KU0ZI/dcEUu2Mify23BTkr/gtzaYcq2JYrAAzIfHZPpu1bDkPmO8bwcv7cX4
SBeWWfKWtrNlvpALo7V+EORsMOVsOuDhxsTDmSBvnfQ1WhVuSSbmADrU3JId
KfS3dh6VgrRB+I+z5CNzRod3tONNaZ0muCuf5vtKP8je/NRZFcc9qTbj9vwC
bz9JPr9ziSUPmXurE3BUh3faTrIgYHX6qi0FznlDPdIijCs3x/UaGO8A/aZm
Qq5mLksdwkFbR6HloYstGc24cMXCIIujaddGeQ7qxGw/ow4F9LeJwW8Gl+Qb
KOyHbbu0jm8N+52jlufuY4mnj7ZzFnN+gnMeibkdylgWPpCtH6m7eAgZXpk+
WtOAO8KcSn85YUlp2l4N4K4rzDFU7Yold5kjIxXmagtxVyvQj2nzOo/5/EXf
xf44Ox7Ub3w4B9xLHHsAcjkl5XIr4JBZfDNYBOdrO3OgnAfGmUMsZ0Cmf+Yd
pwq+5eS3rgJTFKafT2KUh7M/v1F+n+WbINMPExscAGZYRNtiV+CTJMQw/YAN
bhMXvUWdIOIKV2CNFNQX2f5a84i1+qL9VsRaJ1B3Ft8PPsW49nNch9D+NuKf
V8BIR4mRXqCNRMRvJ1DnHOv0t3VWxJA7MCf1GXd9O/pwkvbBZahzgXqtv2Pa
27q3f17+134SlldF+37U79Wy3zDSNmrH3zhz/r/98J77wc4vOZ71W6INJ/Vs
YSifzbmyY000+BOL3u4/8Z7tU+9O/dgm8M+a1Iu2vgj8Sd8tOzdRV+bryWHr
tei7lQP1D1GHude2tXIOZ2PcB6g3u7kbuOgq7fL/Q9ZXRlf1/FxjxaV4cfjh
XtwJxa24u0OBYvV7jyDF3Z3iUiju7u7u7u4u7z7N5v2z1vPpZs2dM2fOSLIn
ySSxbTnIO4ajvU15c135Z84KbrnEu1f9PC1xL1Relw1n2HSJlEed7GBKMH05
eu8wJU0x5cMNthrS7oLKnb01Dan2jnIwnUv8bZVlveIaEnFeeXKBnoZsGKRy
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
EjXZ5kXU/876IShPzfeuwXP1GaOvIOrk/RujHmW1WScI3zuA35sD7XcnhqyJ
Z6cwJvwMjFsN6qyKoNyb5YdQnoDj+a8vmT/6HE7dl+Pv9INj8gd0T+oYnRzl
NYhRT+M5D8YjvYzybtRZPUeby9l+ZayZO1wzddFOF87FS3xLEo7bD/zmZxyM
UeCTMXnfwYkHX42xthZgHDJyrGZjHvoSrzoxlII5tkXwfZU4L0vxnuntiNtz
2bKpCe/k7oZsfU1f5QWQa/2VXo+9s597J/8cU+KuUj6W7C3OoQcZSwff/Zln
57I4w/XpqfJi5S5LUo7XZ33eGdL/GGOQPjRkxSSlAw4bEuypdMozhuwsoXSf
eAbWhsrKis5d73XKM/PUs6RQFP1DIlySZb/aYo61DpUe31WWDT0aJAHX1J+8
3YxeMum8Yp7Ay/2kmqtiNP3wSE9Z5qs2xD3o15MninmexvOTbbvU5ji1gL80
X6L4Kqh4Txl5Vu8q+o8NlRdnFQtF5fOXjHO1Tv9rfWTu/RK633f3Fa/9ZXQM
7w+QbY01NtekmIZE7tLvWrrYkM6WjvM8yOtKHkpPG2HJasabyugVJmXyqM6k
Um+sw0G8O3bLLfOyajtrr1viTqy8LgnOrWFnmOttHM6YaZT/dMAa3E8/3v3Y
HzZ9eHaAT0znve8X4Gd3s9FG42UBD/D+F/hlkwLat3rLgHtv6hrYndqSrsxN
+Qk88kJjneuZ4TgXMG78Cl9LEq7UNj+Cxw+L0L5dTmDJ+6HMa9nFko6M1ZYd
Mnpjcq1Tw9sl7+4rxvv2JEzMSNWDZerlhnxRnDYO33q2lK6Zqz8NGf5D6a8N
DDmSSuV7vLxueUgdYMpakNHvFUN27GPI7claJ/GNMFk4QNtf2taSrG8ZW+Bn
iGTroDbBrlMMyVVax6F3JrfseqBYq+y+UDm8VvFw3Glh0rKm6sSC1oRJ5c1K
F/vqkvuVtf5h4Nkmb/W9WYE/d95V3LLRB5iZ9q+S40zZ3Jd3UiD7pjEO5Aqc
XxI21/laAxw1lOd0wf7OyTtWjh9XTvpx1QP9OS1l62NbStKPtyjOfHGZs+lJ
Z1v6tGU+Grx3Uz99r98sU3ovVvpwa0viPtW+ubGvqzL3ZW5vS4bmZ2y9S4bM
aKDjfxa8JaCpzuP0q4bcbMe7G4ctkU367LxlhpQbreNZFfzBJH94Mh37/YWu
h67ZTcmyULFfxTOQlcyR5wKuGTxVy1djX3RkPPabpU25S31Xp8+gi+ga+zc/
lHXJEo/P2occ1WwZcpV3DFdZ4kefw9yQsZeZD3rvaJxN6HOVb6EtA+l3dA78
NR75Xvv+tixjTqJwyPTKlOkHwWvL19DyNVWx/i/zLIN56c55aVLLljnPeYcR
/bxIW+EIF/DJHn32DPZuiYxK5wAGWevWPqTeYMtc5lkLwL7z4r6rPdyWtp8Z
ox51mjKPjw9w9Wfi6kqQUdPPa/nhwbZcpz/8WND37/HuJNbUJWK8qBK2rJmq
fet11JZTyShfttjSmr76JWvacviR1om/EXuZuXsSYDybcDyrt7XlWCWlz2Ns
P3BsFwP7DWNM16vdbQlhjlRfyL1Dr5R+dseWxvRL34UxvMJ1ftbBRd2V/grZ
3oY2oDSQjVWIZ8rjWT/6dIVDPnpQXj/EszXoe18UZ5CzPIOcxPy+YyyIZcAV
tejDP9vJ7UKsdRnnmrC/eaUf2vKHdqhpkO0PGRM1EfDADuIrC/V/8Bw0CBjg
NXU4hyGjD9J25vjDjyAG6OhgJeb1+4Tf+9Q7ZQROGE1/p7FODsGn/xfDDAFu
eUjcMg/fG8TvdXyW3hIP/Ktzm45nqxAXFcR7MxEX3QE+uUO9jRMjuSDf2wH1
m1NnNdyJF0HdlBPbqgLv6NVA/RrUuW1yckOz/SToVxXixrOo/4QYZhHKT1J3
54dnL/PZ8ehnPvazHupvJfZrhbH1pL7u2Udb0jAO2G60I/RPuwJ6Oekw9GH/
Xz0b+ryV4xADfTlHXVbmU8BUOZSeiL1scS87cTAOcPz7YYy70N9+LMbZk5jW
A30ozXudOTG39ajTODTLllG8M/IlqyVPnvHO135TsjZWvJQD/MGbsZVKJ8X3
Mvf0kUKm1L1A35uWpnQco/IiuLAh34aoLLt1GnKwuPLPjoVNecx7SfuymRJv
ttJjsIc2JtL3fm1hSBv6aHXDWSrfduW3/dG3BU+0TqJtlni5lR/W7W3I/VFa
f7zjX9BJ2xx2Plg+NtMYVp5mNym4L3k0/SZXe6mwQnNJf+vRRU4cUvvgojt9
pMsvxUhft/aWnesKRNOfr/cR72da7reyl9zKkSeaDkrkkktVFAPEv25K+y2M
O9TXLTdqKAYoOzNIUiRh/NIZ/aRxX9WnvX3pkjIpVOZW3GFKvaL67K1eplS/
oWM4cIxLXP0VQ54oGSqjWimGXFvDJRlrqu0sqr0hzZrot6d+Yso++qL3ggz9
QRk6N9SW95vJn8Fjw8hjC+L88Y55x3LijJyEedaad8TYxtAx39/OkLYNtP1X
rQ35r6rSlVri3M34RXGAk6cn1fnt28ySD2e1/LuTW415aV8et6QVfWZ25rTl
RAPGO8poy9F8xFR+wFrM0ZPyvSk+WXSuGzVxy6+zipEWDbXk3RytE1zAEI8Q
XWNll5piXlE8UNE2ZN9N7Wflym55M1ifTbPcLd/Kqh6s5lS3bHqmc9T1pilT
9um4FX7jkjcZdF6yhJkyMRXjX511SemZapdcBBlSbrp+b5q3LjmfRetHJXaJ
Vy1dD6OLhknILMXG8YobsmW69rOanympzjJ+FDDImjzaz4xJDBnxRjHzwQWm
lDwYRB5rSt8mOg4Vl2OPMyatKwL8lnfwPwE/16S/TXzwgBD6k1wGz/tD20oK
8JJ2/uQb4DcVyW8LrMfZnzqETJDRCxijIEFKSzZEMcbLQfy/UufuNPb+ule8
nwIZWnIr7TumLZEn9Nk+pinFqJ+c/cSSOlW1fqKlhvQMV0yVZRfOYmV1zE99
wt4prO/qDCzX6rGunxO/DIn4o+N8KaEp30rpvk6z2pRg6qyeeJlyJJAxvm5b
spjx4R/iLNZ2rbYzuZUlV+8r3fCKJU+Zs7XiJkuWMY9qRuC3rbyb4/C3/ORv
qdbaMo85Fz53A6/uqd/YGvtrG/dXLKzzN8zpXKaFLd/yaZ0PwMPVaeeKPxn4
h7ndW2PP7bula74E8GETnptmfbQk2ND3DsO8VVmi5dcg4w5TxjkYIesc4qhd
tmzhvcWynWwp2oxxrkBfZ/7HCY6fC3H4C+DDA7QzDoQ8ucQ80QPnAG834hoI
sSWQMbhaAKfc+xtLv6cttxjn4dMx1KEfwp8JkCNZ6fM/3ZaY1N2lHGZLBt5t
zGjZsv40fdjAc47V0mcfAUecpC7oNtrZl4X4agqwB+M0hgNfbaQOzYmhcY7r
07EX5aJN0PGnjsU17+TNqc7Ykk6eu4y0GTl3ysbRznX2GuaI/vDTIc89iJ3+
oE5x2r8uAyNc5P27npDz+3gPsRbk8grKZScf32ja9Tb/kxvLsbl9oY9QpJPn
nTasTpDR3YipNqCdAcRUpYAl/hC3rIC8HkF5nQxYYhmxVgXU8SLemIzyO/Rf
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
YoP/7NI6WbDfz9/WcquNLb15Z3/wDlOCmBf100NLbtGPqxJwx6qSWl4QfGN4
SX122WpTnvzQcXjQ1JKZp4nhl1kS11vrGBksKX1e+7M+zJIWfrpmLmPNlpuu
5Uc3AcP01voFIk0Z/VTbLLXakrp1qXsHHjNN7U+9YcBsEdqObxVbxjHeVEO0
v767ljfYZ0t6+kQdQZ2557VOEpwBpzKfcpkoyFzq3rtgfNozt+xTYIYHS8hX
wfcuLdA+bPOzpH4OnlmAZ7KfoS1vlSVbqvP+Yz7gpc7a/hTIt6O0o6VG+4l2
0D/TyXvIO4wZxwNLe2mdacBXs6lz27fdlv3MR7Me8rPdeKVzzIbsrqv0IvCE
QjyP1z9oS1Lma64IWTOWsmbmSlsqT9byU/1Qf6rO9ar+tryfofTPs7Zc4h2B
lfguz7PUm62zJSxK6TSQWfWYJ+5WiC3rNhCDYf2mzcV4JsAmm4jDn1+wxaDP
QzPgPd/jWj4BvGsWedcCrO1U1DsNhgytTBySA5jqOjHVPifOg0l8BXn6mvqu
k5CJkfSjCESd37QF/P4EzEndb3bsFy/6Wjs+7YEcq0eQ1S7GAfh025bi/ZU2
IVtTU7Y6dwMHsD/v8d43lOP90H7Lv3kPgR3i0Tbq3AGsSnzSGBjkFHVQy4EZ
ijL2Qi3n7iT1S+uceF9X/odtVvLZp6hfnRimNTBOCWKtbGhjIXVoNr5rGfVX
6YE1vhEbfEHdYsQ53ujzSmKwbKD9SBfCeyfQlvfEyWdEmbII739DX6a6eFdr
YsiZjt879UuO79gf4iVP0HVJ50OfU1DXlBTP1mc/Y6IsgDbNdSj3JEaK6ejl
+N5NqOPmvDxHmz+JtUqD/vEXm2EcvDgO51DWgjbBDaCvMG6Dcw/0ENvxPGdL
gRJKz8Y7y0Rw3PAdszh3g0AvIr0f/X1OjP3v3Y17GNsmXG/pMB6d6Nf3vQzO
8k2pNyhpSZxa1DmksaTxDuVpCarhDMX70ZVR53k1rRN7kSV3MyivmJ7fknNp
tfwxzjFFGzEOYQxTNidmfjeXLZ/26v7KfdCQ4XFVBsXMa0rL7VpnKs6nPZfp
e/uPtGU548CkwNi8o+0jxRBLrkxU3hVzsCGrn6oMrdskVBJfV2wTVMiUF+e0
zRblesiOWoqLNk3rLLnLKKby9m0vh4u9j76feO13J3myXOOa1goPkRzNFQtt
P95PptdQH/iOAX6Sb5z62D+811smdlL9WP2GIXLFpTbKufGDJPsczaOXq7lL
Xo5SnVWwtyH1Rqi8PnvNkGyMlV20tEvyemgdnw+GpDmv5Z9PGjKzgNI5rwLT
xqRfEPDAS5eO82rw4QjKwSuY85o8854d7tjNddyOgXe9oW/PM/CAUox/OwT8
8+1krVP8qSmzmKsuVpgpqXgXz++9JT8HaPtvy9uShHFy8hQxZfotHds/B4Gx
V+saaJsOe5AxvtoJZBl1Ar51ben/RembuXGWaal00WeGzF6q3/hrvlt8M6rO
6s0GS2LRb2rXDLcs/aq6qUKLw2T4UI2l0HqcWw6d0PIDtUx5VkPxUt+9lsSf
rc+apyzpe0HpFQkMiWBOyfmZ3fKR8bv2ul2SNq9ipwXr3TKyh/ahQQW3jPVn
jm98433ey9t6EXNXT/u8c6EpPY7qWK39YUnq2Yw7ms+Sgal0jlbMcsv7GNpm
/yhTVn7W+jHem/Ius67zOImwN28Rs5W0Zc4sHZ8DkAOjD+ocbQdfbEWf6hDs
60vUV794ZEtt+uUuA798TTvFPCc+DHlFMPhTPNo4MmAfpaO8HrTRkhD6XtY1
LJkcqHvKA5h9J32EhgVg383XPmRbacnHijxbnQCGOaH0hXuG7BumY/L0giWF
3mj5pSWmnLik39sT2GTHZ23/9xRT4o7V8nc409Xhme46MFKS+vpsK+Dz1cTn
HkG2dF9GPgBsluKE1j8HzHNzDn0YgL2bDNHx/BALZ/zt2v8lTW25mEWfHd3d
ksfptQ9fOwPHMt7FIeC6/hf02c/AQf8RT25KjvPyd22nRkzQG5QOH+TE/NFn
nfzGfbhHbGeO9mt/0u+z5Cl1aMNrWnJ9ivZ5VJAT94z3km5a0i6NPvsTeKfx
CqWfAauMYnzOM+CxTbIwzmphYIkwXRu98Y2Ftmr9BlgzvRnn8Mg8nItb67Pv
HB0G71oGgZduJy918vFGriW+wruW0V+94jVbBlPXlAfyfGB9pf1wNi/OuF5J
gcFeTlB653VbPtNHvQjw/kXm7PYBBltJ23RCyJ8CSZVuiTpDmLMgHjDR3WCl
E8zF+meu7ZrAGmHUU61bDT42X8uXAcvFJJYbC9melfF404G/faSv1BsnRhb9
/x+/suUYbXkPIR/rEUeNR3k96moOYY+84h4ZArl5g/qoyqD3UpfV37nj9vcu
npNDh3EkvoFOzzuMvyDPGxCrPEL9dowh0NTBM/SZ/Izv8uM5yAuY6AT1UW7I
+sHUmWxD+RDqtQaBnkT713f0fzX73xaYou3l/4vH/vU/7w6M0YsYIzF+yxN7
7ESdYazf6SNwHX2NhgKzfaHeaTveNZP3NJeh7kPixk3ozwD2zYnB/om2vFPA
rlHErk78rlrERVvRhyO8X+nkoE5PHLgc7xpHfOjEsrhHe9xnvHcev/Ezyp+x
3LlfuYOY7d/4XS+cvEgcQycPUX9irXr4fw/vG3o6+ROpH1uK/6cTo/7BvFwj
FmqP/p/bwPnF+je4/p04eEMYb20xxuoF9YHd0E44x/8+xmMT19hvfNcf2iV3
YSwTE2PXxzgZ1MFGtMOZ8aPygc/7TGleX2Xuq9+mnGym/KdJHUu+zKceYLgp
8RspDwx18hUwVt4k7ImmyZUndD9iyNRUynsHexlyIqtijAIdIAfpj5GtiyGT
uitG6oVz9sON+uwonG37FVY6Oc6IB3MoXQx4IQ99G050MyR1gD6b34lbzJgS
zwqEytXCirVW9zXl0AuVv7Oq95LS/dWGGJLCJRk7qW7kXNX2EpRasdaf3z3l
WLmc2ofhvSXLTc2BGPypr3yPUr+vknW7SYrXqhM7dC1ULqVXfVT7NAGSsJjq
wdpODpJdH1Sv5XcrWGIO0zuGg36FyYh4+t5T78Lk80W1N91YHibbZyp+qITv
2ttPv6vCOUuWPODZfJIpW4cwFndB4CXeUwvFWVi6Kn0D4/ODtpJcZbD+mbtt
C/heJPOObcRZqgl9tOJh7lLxHtDBYqbceErb8WZDjh9TnVKyhODn15Sf385j
ysFtWqc55P9C3j08d9qUx8OU3gKMlJTxvYsMsMV7NmOC+UH2MT/IZMiaM5Q1
p5cb0nKCvmtCYrc8mKX4p9Q0U3wZu/5DpCFzZ2odH3HLuyDFP4m2mmIw/ud2
4JRD/ymOOuJtSRnmc8n12JRtL7ROyq8uack4V6VvmGLt1PKEx8LkdA6di33e
plxj7PTSEWGSpp/OS1QuQ2K30zVsFXXJ0Jc6j10vuiT/crX5+k9ySerRitmS
jQqT5an02bfDXXKwrZavvemWmtR9ea8z5XZc7cOUt5akpD/5+K+WjBtLf29f
nAGZJ6VJIPgn41t+wvkrAWNrzIVcqMWzVXxgqvwupZfgPLWHZ+2RqPOBciQx
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
c4erXeBBC6eYYYq1boa75GFLxQ+9vJyyMoeWF18eKI4Zym/jbx0obx5rvsIa
GdpK676X47BNgoxVpNyUpnH04WMDZM2jEnF19iZxScLR/eTmfpdUSvnbu8vd
MV51kg2R2nuveI+esTsOdzX8q49MaKDYLLh3X1nZXt8zVi/pK8sS3Y5r81SG
0vIkdxK1Rf6oIMYz1Xf5T2ktd16djaPrfG0kkec3xdFl/+4kFze/iKNjjjkk
Or3KlC6HguXvneonv9gzSFpnU92dlzNAjr7U2BQ3Vztl41Nd58pTAqRPHdWJ
5Srkln86qLxr9MIlmX1VHq3/akrSycoD/ZOA152hPbGpJY8T6hl4NsqU7Iv0
DJzOFiJrPRUP74f8HH++chzdY1CQbIynWOuoO0hOi9KtGrvkxFY9Dw+aOsQr
m8rKpE+c0v2TyrJahQ25ulXliO8Hp8wrqrJsQagpLbvSxlHXKQfr6p52/REq
J331zLz625J2G5Q/X9huygX6Km89CTx/RdfqSEenlFhOO1TmMLl9Xn9boFyI
PFiqc8lSIkzql1C8lMzbLbFHdK2ODzVkUUU9854Xw6Tidz17Htnc0iu/1mm1
LUx2BWn55J+mXF2ka3iubbB0/6C47tImp+RJrvPNHGxIwQR8y1nClJo5Gbvy
qlMGbdE6NYa5pNQMxS2PMpvS6YDKx7fbDIlIr3I/SyK33IvWfbzhY8q6QG3H
qm6KI0Tpv0bbd3bdxyNzLBnlpd/48kvgpYytdPQa+DPtho3Al6LIG0sCY58l
xr6S2pBa9XWP6uV0yriJiie7AIdsCdTx/JXLDdyoa/IY8jxVf/1m34En1CJP
eDYyTHJuULxdr7QpxwvrOCfdc8n3UoylX8YtWejnuSfSKamduiZrCjtl637t
904Hl8x6z7efR4Ml8ojudZsvLgmYpu14JB4iQ+fpvaNk6TBZUkX3NxR3i/Hf
9Iyt7OzGuVSM99jTLYc3aL+zE7sk7TCtE/LBLavOKh4rdsIpG/rpeBY9x158
17mfDDck91fd08TAYE/H61qNB4ZdRJ1Px8qG9PrKnI/APCYxT+3lhuyM0t8u
iHVLdb4x6ZLAlAT9GDd1hiFTx2qd8/getzCmSmNg4EnEwK+AL9Yd0LO3sIGd
z1e/iyTY27LMfeOf15TXL4kJ21oyoqiWjwem6k3fv6cYc7ndWn4ImKI981xP
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
OK/jwFqDiBWXgb5BX7iS2NPn3NNDoHsQX40G3Ze4Nyf6jM+3CZWxLzMY96wI
zslyxrC144xFcr71sG4p6Lv1aIMl1+fqXhshlhwO17PXDmvQjTbrD8BrDr6Z
fbHRknlLlc4DTPV3cq0z7rAlaZjLIGoWsFNFpd0jTFkxQ3nCGci6d/sYyz25
IW8rqOz4Ph538P0qH2vlcErhsco/P+cLkXpdVW/gdzpMNtxWObWjbJAE/VD8
894Hco0+NmPaOEXGKv13Z6cMW0uf4WpBMrqI8tKYV6GSPYfqJY4OdsrrX1rn
7U639D6jvC6qWaj8E6YyK7x8qETTBpey62C5E62+8bOiGkq1ievj8Ez8SaXl
5aTkcXSBsa2kU3n1gY/e3EaOJFS/rKyRdSSw/z9qZ5xRSbL4e3m7p5nScVcu
uZv1bhzWMnK0F78eMd5Jwae6tk8i18cs8uqBdd2WuIQcKxwv7re/t9eViMPq
9zUmpKesaZEqbjzX71aROo1ax5Ufb1xNkr3qFUcvv+0rp4bejaONQj3l2Fe1
UbZo10185n1T37BlveRF9/TKVx8HyeaEamec12qw9J2v8y3WyS3O+ioj3EVc
MjGD4tK+r0xJ46u8zq8lMD99Nq6UseTgUMbbeWhKpgpaJxBrPuunrrnn/kBJ
lVD9ZK7N8Ze+2aroHvUYLNvva7+xo4Ml7wHFrn0+hEmTUYr3aqV3ik83PSfL
/jblUjs9V7khZz9Rzt4Db07zt2KMF28cYpxSmT74qFOedVYMliCZQ34+0Tab
FzRkwDo9k6/rOyWquY7zT1K3HL2jsn5YdYfkuKVYKOs1l3gk1vKQzE7pFqjj
GdrMKWUG6W8PpDJkUi3aboBt3hHb3J6Ns7pI9YcFuofJ7UyKK9aXNqTINa0/
4qlDrDU65jrdTfFIyPeJ4NuJqH/u6W/I+Bcq00e8d8rvgvR92uCU5b+0/YvV
3dLykvY7K6kpY4eq7M6ez5DRC7Svk/tNGc+8zJ5/mdKtI3UmkHE+q3TvkkPG
1U3A+OT2W6rP/MbnWdKsPv2NwWv78j7VoAf4ahet3yrYlOA2Ov6hE8PkRbTO
dzK+8VGd9RsvMsGU6O1axyjvkImLdJ3vAKe9JU6LOhgq9dsphrzv75DRyxUn
f8A3c4GxaiN+u2VVAr6ZvQk8w9hrOYA1IoMY028O6tTR7/1BjlD5MkO/8UTe
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
lrZzdqcl25hn7QRkxT/HtE4NzK81fUGXDjDkn7uKDUYlNGRrTtWntb1uSJrN
isFCShny/oKWl9wVLEMna5yoRD7+8mihxo9K37SfTKiZT78Xd7AcmKI2xy1Z
B8mapfpOcP2HMBk4WnVi9dsGyuSGiq+KbQ+SSqXV5+qXOVhmtlAfeNu/rH0W
xXgVyrqkahW1xfTpbEq/j7oONae5ZX4xxYe1IEvXRtL/57IhE5YoHdTalN3R
Wj/RTUOa/vtGfqwp81cr/ikFPjGV+TgicC5SFtf1Ccad4wf9PLPhrDXjO+V6
9ttnvs+dgPObjt/dqf9r66zDtSye//8hFAlBFAkBpaUbkXxo6ZZupBEBaTjn
0F3SJUhJ16GkDlKKojRIt0gfOg5wzu893/t1X89e1/n99cy1z9y7s7OzM7Oz
s7sarxyfkr/XOzRQmjhPj1RhgXc+8sb9cPewQAHyN975SD5bjIffoaTmY7iH
k6We6vvYwym1R+t33sjY8mtYYDDnuEuEa026DrmS7zeLeM4S6dpW7L98KTtQ
i72J5lrb3WDfYaP6sfInbKjk9gZvK+TRbw3iohskw1tiPPjjFdKNo4HVbjXa
HSpefZrT+3aEdNtzbEES6dscrFmGiOY59z38jZrT/6C3p2u9u5B3b8/tEw+5
d2WSfMVNy9l/1LcjIokVDJJfdNDjSUfZo3zs6TSWjf4ZG11L9ezg3PoejV0F
zpt/JV0+iRzLDaL5LjR/qnHcRs7tPumJh+RwPhP9qZnLaaXnool775SuqIuu
eKvf4ewtVpNu6M5dSXtlq/sMYc6eCw10TOLBQ2VX7+ATHm4kfcs7jE9kl5qV
9srtnrTc3JN2dWlYYBzvDrcS/1eMIbaj8YpkvIrK/qxhTzNa9nY6+dj9pQt3
YE+Xa73Qi/XC7OUau5FePd3Emwfk+TwVrz4lvnH2x7DA6Yb47fIf6vLeSkaN
W+FUyLl0yIySHnxGerUo+TOtNF6JGesN4m1hcmjribdJiJlslw3JjQ+QVjgr
4X+I7ExZ4lFmS2fgG9ja/Blr8wf69n1iRI01Fj8Te+ko/TyevY/zsp+FsOPV
NGdzso7edVY8bOLBqzRfnrJW2iC+VeAc+t/q11r6ld5sn3+PkPp4EJ+qhspT
0VYa2YIq2AK7z+kiOCvVr5T0/UOVXya/q5jg0eDUF211oC2F9MdI9ume69sW
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
vAn0tFW/Nvr5PCq/Am9bqZ5w6kmutpbSluU75cAXOm57SdDcUrz6ijHtqN8/
qLO0vm0PHz4UfgLG9H21NZ+2LAepD7p0nnCaUH81u9+AsYgjej5GDp8JPy/0
2LvQp6mzoeB82L5HarcLYzpR+N2Z4+Z7F4SeeII7U8/tt/ZOBPWrPJRv/1O/
puJrfWrvJPp3ZAmuxrg00rcj6G9Fjc9d9OEXqm8j/vAh852o56joLAbf4qit
ltCwTHBe/JBfBPcBHiV4MeNueek1+bauyiPoi+XDH0FW8wruhY/UXnB7xuWE
/r9DnfkEZ+XbIcK5AE4ulaekvL/gjrSbTjjZqfN7ldeg/IW+KwL9Nv6l4cN+
8W8zsldE38337xyzmBs4P6q8pX8vq+DcjJ2tF2pAw2TTP/il5/TdCeZ4Yf1f
C3k+pLkSjc1171YtpDbbsZavq/rTUr+7rrmqNdCdtkEdMpz6wyT7aXlb02LX
56Chg+R0Iuu+K7YeZ82eT/2IwmYVF84h/7ytaPicNXJ80TJ3v+cDPFmoOduJ
M3fx5MPzTuvdsbJNxLvKyp+pzZm7NLIbR7lr8XLL0EAE56FWtgsNHPzQ87tK
Fg8LtCF/+0oF2VzyonNeCw38kdurf+vXWjtwt2Q/1V+qoQevLS3flTuRZoiX
o2d6be2sovnI2boYuwNwo1d+bYVkhnNG99S/s7yl0kz28Dfy01w/4ZH415S7
1KqK/6sZux6Sh0fIw0bJ1AH04QNb66Gj7K3PFfD/hMoOsq9hvsZ59tSui9+n
2Od9onl5rqsHF1U7cdnHmSUfJxnnoQKam2eYmx9Jfrsyr12/7muN77/Yizya
c+XYU7imb+fgR1URfiXon696fmNNnUxymJX9ta/1baR/R7HFb5k79s5DKvzM
cPX3G+ZLc8lqVWTV4u5jsHGpBGdGtzRUW1PZZ7mo+ovhHy6Vb/INfv4u1XOT
+ZVKdVeGnjSWG8CctTVvA/rSX/0d5seXLE7CXpLt5WWHNntf4yTt/qP6G6CL
VmtMG7IOOi6cpazrD+vbS3xb0XQFvLLciRzQMF3jO43xtfv93uJfVRBOfvDN
Nmb0z7Nrvt9j/2uc2j2Af/i9bEVB4oQpVE9n7EVPW/9iT4sJvz2yl1/yeYA8
t5ka81bsu01Vu8OxF9+IlmrEMBuq/q3cb2D3/0RTf2P1rwP7ZbtVXhX6E4nm
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
ubJ9yUTPg/KfzvfnBT8G340J2F5MIvpluRabmXd29rEaPqS7z+juobg5MLNE
WxlotrX8TexFJv3Op053v89yny4B21nFXuCbTTyM3Fps6jx12h2V8YCbWVwC
HMsRG+fEx/wcsJ+FPxB82xMcB8/d/SPXX3LPduW3b98Exz2Xv9ejssvIuZuP
Zz5za3BsL7Uj9TRXPWXpl8Uw44MzU/AtJ/+5pL/vLPj1qyD9IdBvPm1xyuc6
eUoWxzhLX9y4Vj7h9PXz6NR+GsbOjTlY7DordFpO0AfgW974XGBbx+XybbTg
Rej2+apzi39u1PpCuxbTW01fbA2X722Q56uh0+7B6u+8GZ0SnC3ma/n3t6v8
KDS4uUzbzPej/qPCyQ89bj68+Q/VnLvxN/v7AsINB7+58O9Ds92LNQaerNP/
i+nvaP0uexWUef99bXdf3ub4VHjonl/+VvWMeBsbZ7jKb1Mept+8zhnGIrT7
vuAb4Lv7OxZXzAX90fp/HfrNbNZsvrV8uuTUf09lDV/H5r/tpR4AtrvQxsBz
9830eKJrOPcOuT6nyXwe/858/W5h3Wr7HcWg80fBcRmj/cJ/h28Hq50n+DmW
470MHDu/sIhvLQfyOLZjxDzZbt5+Ta3yv7F3NYeGBU74bzuKxjiFvXK7S/8m
9zF+2Vv6armHU1Y+RUQqaFAdKdlfC5EPkpe7iabOkO340mvL9otSNmHsRP8j
6Dd56YpPFSNdOxG7c8j2XnkLzHITlrNefmlxKvg8ReOSjTGy/bXljEtbwe8i
Y+Zjx2XsQgQfArZcwS7MBYsPj4Fv8VS2DxnYYflIrKPtTpQh+KXmy1X39bzg
7b4fpbI2+L3jpJtz4Hfdt/NH8Nnds86ptrphOyy2kBS7UFG0nXsTW7bdmIDF
nJJgu98TnZMuouuEu8qP4csvmEpcK2B6ADpt36MAbVlM5ij+1SuLyzEWD9X+
fsbofzZG1G/nAe9Tj7uWsZhiI/wQu1e5NfTbWfnH4Nt7YfGRQ/ORMjJ2thez
hX5ZDLsktvWUvl30PKhLk1PnZP1mZr7YmeK0lM9VHetuxdY5w/T/Pep073h0
dXU8tZXiSWydM159/wvZs/mUC3m4YmeU4GEyla+BP7ZvMzcyNpxDOBnxzxOq
/CIyFmL5WsR1Swl3Kj7VeOGk8HPeRHurHYydyqpzjuYDkzfGLlL93Yoeuyue
7cEPHKAxnMg9vW4c9QPREw7Ndh9UZsb6muoY7OtDJ65l+X4LnfdQfDtl+rU8
esbyvrJR52WVZ3gdW29PtHFkXNxz+rb23Q5t0TaejMV0s0e+HlYdnZGlULNZ
zPF2ti4Gtv2gOtDm2imzUWuo51399mZ8LQa7Cpy/9G1/5M38iyy0ZfGZYvTF
/Pap/tkxwW+cfOY4fv6n+fng2xn8CvDzkn67xsSWT/fuSov53GAu1FZ5Aspt
3zYd39rZwOV868Yi3Hp6mv0CtlziqdTZMSZ4f4WdF9n/JLaeMT/2K/pifuBE
vk0unJf0a6/FzaDB/OqdwJssXuGfZ1F5+zexyyubLabcco0uU6f5mbNo1803
c2OG7lrAlR835nPAfFp49Vq/d4D9veD/B05ZcCo=
   "], {{-0.0026625, -31.25}, {1.0676625, 8031.25}}, {0, 1}],
  AspectRatio->NCache[
    Rational[1, 3], 0.3333333333333333],
  AxesLabel->None,
  Frame->Automatic,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{{{0., 
       FormBox["0", TraditionalForm]}, {1000., 
       FormBox["1000", TraditionalForm]}, {2000., 
       FormBox["2000", TraditionalForm]}, {3000., 
       FormBox["3000", TraditionalForm]}, {4000., 
       FormBox["4000", TraditionalForm]}, {5000., 
       FormBox["5000", TraditionalForm]}}, None}, {{{0., 
       FormBox["0", TraditionalForm]}, {0.25, 
       FormBox["0.25`", TraditionalForm]}, {0.5, 
       FormBox["0.5`", TraditionalForm]}, {0.75, 
       FormBox["0.75`", TraditionalForm]}, {1., 
       FormBox["1", TraditionalForm]}, {1.25, 
       FormBox["1.25`", TraditionalForm]}}, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Automatic,
  Method->{
   "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{0., 1.065}, {0., 5000}},
  PlotRangeClipping->Automatic,
  Ticks->Automatic]], "Output",
 CellChangeTimes->{3.9602419184633093`*^9, 3.960281822027967*^9, 
  3.960285400660133*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"933ca726-5625-4e00-90d2-de94a73f301f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Spectrogram", "[", "audioFrench", "]"}]], "Input",
 CellChangeTimes->{{3.9602419189603777`*^9, 3.960241923501523*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"bc48dc94-c0d5-461d-a721-4c326ac6d57d"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
+faOkWiZzPeg6upGomkMc7Y/Fccgfi5zvB0tAzDnO6+n5wd3fLM+oen8/e6H
xEXMe1/+CMaLYH4P0d4uEIfi+N2TK20ikNeN97+P7SPx5SKPldg4DO/H9dZw
u3wDHr1hm3QKjkCAB8fhXj+isM+d/eKs4OcfZD0q6V4UVl7l+8CbfhvRYT3b
4dM/OlRNZbsq9DcivgrzpVAXsR+R99W/ntLjxHf2kfstDKhygvn/wrJif6Fn
H6k9TvhwAOeU88kqLkVwXqvuLvJUWZbfPWbE/Hk8n8WTVMSsZnmnyios5Nn9
uwQj1hdnnWthRnyU76Qs6i7y/iWufY3fo6LSNu6/WbSKgv3cT/IikUPrsDxB
5NLwfJY/nyXytbzHNXCxCr/68txT5MSgVex3+cL/Kuew3O+Ciu/VWH7yhOAz
+SzPvCrGspbndA9Fng1i/O2G0JF1tkqCL+2RZ4tbRP9n5Lnk//0exUGhs/A6
Y1/Bl3wl7/r3LY3Sso5kLXjLCsl5tgqetUnes/IVbU1kfeyS4DnXZX1sltD/
JbnQZ6H//iLjSMEZWp1mbBD60ZIXFQrsJ/nMKyHbK++2WYp5lpV3vY4IvExy
pFCh6yLPCk//u/8v5zlQ4CBZs3os5jBT1t8uCHno1//V0+rKepqPkK+S+geF
/hV5dvlV9D9fcioSOtWlTnvRzl7O57aYp7+cZy+h00nqPBP4qRxrruizouzz
lfjv1eSzGCl4VCl5T2xQpooGFRgnCd2ncn2WCQ7bc7jkV4JjDpecto8Y96es
H+4Qfx0l994h+jeR3wxpJ571qeWSa4k5P5Fz9ipQMVi+ZxouxmoixzoontWn
44xT1ojfK+t1BZ565DXl2F5yvQEDDnGeSmwjbF8v7xL7RmKcfDdtiTEcy535
XsHRMlFY1oX3aItXhqGEL59vtrkWinPjmL/96hGGRt85hljYinhykPFzy0i4
+3Oc2X4lBlGOnFN8d0bA3J/vra39PBYZZ7m2XzcIiIoz0OEvsVg64y1dMhmp
vD84AlWL9lClae3pzoHumH1xCtXctZQWlGyGUh4j6CHto2plK6G10ZHOr75C
Lf0vUJnBZtTLp4gOzP9N5o/bUUOvPAo4VEB5ZZpT/smX9G3eVzri2pp+HH9K
x3tVxNzVDlQ67CrZDLxIHwxVqajHbwoP+kPVi3WgUT0fUWOTW3RWb06l1n2h
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
k2QLfFHin0Jnvaw1NRF9+sjaTpjoZ5vkhP8JntUn73+1oJGS760UbQvl+mwV
uLPkh0v+nWNKebbgOTGS85QT4xolj1op5EvkvbWJgmvFSq7VQuhUlrzuucCd
Jae6I3BZiS+Jv/fkWO6inZ+sff0WOglSJ1HgUvI39hI4TvZpKvTdJO9aKca1
kffixgj5CdlPophXfVmTdBFr7DiH8QDRx0VZy8oSa+N04n+/vZOczy7RZ6Ls
M1bwtCXyncpvYm1fy+c+XvTTXp6TlhfyF5Jj1xfr1EueF8//N5bU+STWrJPk
w2f2qFj1H9tex/cGWNZiHlVLxOdPMj6HVohG+/Vc977cXId1ply7iPyqx/tH
zKPK1zCgij/XDQzBRrzqwvli1mUdqj/m2LJZ+Na4VpwLli8xwMnIcePAfB12
nuF4ldPfCO/9HH/8RL7KKsZy2h6NjAEcJ0+6h6BtPr/7M3nPaPhtK83PznM0
utUpxWtVbSAOuaVrsbrJbBcUfN/C74JldEede3PpgJmKX55NMHhkgUITVSy3
tcKft9+Uyi+MOBzZGOauL5We1gZcHlkFs3z3K/d2GbGtmAWurX6szFL0WJhY
CpVrrFK+ljdg25JK8J+0W2lX0YDFKZVglbZbOdYzGHFtL9PBdveUJFcRa+1L
wz1jtRJ0YTLSut2iFTv2KktEnE5J/kGReVOVhtMMeHCjKh6kH1c+1BqP7RdO
05RiJtqcc7LboZpPRbrcNQKNLe/TJ9u1Gv/5s9QeyqZRmk4VGwW/QoLIc5IB
S2pXxfz0o/ye+7RQjDZT8O6BEQbTxnhvw3exAhr64MKefK3tBJ0j0jrxt9M/
NR2Lg71NtTVc9WQiyp/mb6tW+TYas+9wTeDHhQkYXoq/QbShrg9MNnE/FU1C
8a4M3125U3USSGVO1bB4FDwsuHZa73M0/pvP3N6ufjQqvmW72mgmOMMerttc
zdKjvyXblaelHnP7y2+qCB5Sx5TtKkfs2fNvMp4m9uOV5X4857rYyxcyn9kn
OEyva5xH2os9zZDrHM8/rxMxSt7XzRR754HyDvDqQBV/pjF+f9aInFTu576I
/cPl++ypb4z4PYhxoykqJtxi/TXhYo+/mfGGAyrepMtvDzqryHjKc1hRUuwT
5XcIM0Se+iG/rX1W5MHE6yw32ohYvZj1S300oERD+d2kUCM2y+9k+r00YPQX
9qPu1ww4u4JxbxsDarxhH7yaZMS+mpJzThAcuim3rffBiBFBPJZNkBFDrP8f
W18ZXcXSdI0kuAcnuFzc3Sq4eyBogBAgECQu55yZwd3dJbg7BHd3uHBxd3eX
d09q89271vP9OrX61PS0TdWu6upqLXdmMKVOLOM2Ozikz3y1iYb5REvtympP
lQZGqnVVMVLuc36S4HZ8/QZPA9vEV79Qu1fdJbRtap3Tdf2AXxVj57vqL8NW
ai44j++95XJh3b8r1qi7NJ2eQuXn+24y9ISusUjPAGl8SP1IKzJ0l+Trde+v
b3GnVCrG3AipAmWpqfV8LR4tSUYrVi9eLlSKxKrvfZVvlFxP1Fnl+T3IqFs6
Vl6JoiX5dV2HJXwNKbJA8cmVQKfE8Dxgxd52vKnS2wOwlnhOdl8dh+wVHZ9H
7qa8CNNxewY8P5x4XpY5pXUFlXvPNzglvLvSxQs5ZQJ9v416GFLhoL6302BT
ckzWuaieBuvnPX1NWEuZD9JfBMzwezxxSE5LypXXdVIB/CfJPwiy/GMFnfdK
kHEFvmh504HQlTe0/ceBA7N7Kn0LOmcU9+B6NwAOeaZ19t0GvXyEfi3ooh8b
VF94HbDzVml56CFLltGP1GeOJetbKF3knCWNSil/a2CrtfQvzcG7+jzkOTJg
MOE+0Uvoq+SMhd7+jyVvW9C+OGVJSF7qSvR9+1h9dtERS7IxdmsXykdwTFwH
0UeeNT4O/VaAsfSF1kB3z9LykkOBPehbq7Qa/WV+sLzAVGO4x2RMtiR9ES2v
gfJ0jO05Ahx0j7EE71CegnH40dC5J+iD6gdd7809xI8of0AdvQz4ZwT3zjoC
F2w6/b+YbRvwRUHirvN4tgGfPWXHbrF8BrDAK/p/vIExIogx8gIn1GWsflfQ
zYl/GoJ/NrGKB373Ue/PAsb4TUzVHDzbyLPHjgdjO1OAZybxXk288zaxXB20
pypj5oviXb353qZ4Z3u2JwrlW9iGrqj/F+ufCfo122/71pYTyw1E+QiW2/uu
C9lf+xxBDcbknwf/BPL72XiM/GdQPpDlY0H3Jg7MbO+TEpuVA/2K9Bf0axIx
ajmMQRRj+bqg36eYM2026NPcT9yM/u3jmDQDdupPvJoH7/fmmGy14/SYS20L
cNpYnnstjncVpe/LQLsmcW0MsXEyx78R6knA9XMOeG1jA6WXQAeN2qDf8uEE
wGYZVLaXyOCUfPtUV8ZPZEr3cJU/C1IZ0oF3J31v55IdVdR2++eXU25uUCxX
pIdTPHn2+eAFp/i9V7l0HRhl3S/Vs307OSTlUpVvr2s6ZBJ9bv2TRIvxQGXm
/ARRkj5adffoGSFSz0P9+VPOBkiLE5pLtk3WvmK2KR5HX30QJFGxuk/ac6C/
dCqhsb5h6dvKvhRX1G/m7y3JNml8SLIh7SXebd2XyebTU/r013zX50q3lNL7
FNf1CfSR2csv8Zy4n1QpqPoojV9HyRPzOK48tI63XKuhdbpdrS5322rs7vUZ
DeT3zEWaN3u7yLZ16kcqMbKmrEys8cM/v3nJIp5ndx9cQW6Xr62+po+V5Njb
1hpTXaGyFDrtozkYW3tJxlSD4ugaxZvLsGC9R2nhxxrS7K36LqJPtZPqdfXu
pwZv2si6Z3pX0SDvHvIyrd5F1TCou2yskFK/66J+srrsrzieRpOccvKGzt3q
Nz0lVWLVj5+BX74kVj2y/WpfGTdRfRG+qV3S8KvO+6YjDvnWR+OX3OtFy7t3
qivDyzmk1Vf1dx2tZkiO9FpPjr0uOfJG/QNzdjjFfbSuk6eVTXFvr/j81xlT
3l7V9elb2pLOw1V3HGtjyc58KmO/4nuKeU0slNmSlZmVZ3gvS/aGK0876IWG
D5QnXzdL8rXX8kBgqvM8X5OuuCVnw/TZquGW+CzX8l6hkIELiMGaQY65K317
rCVneG4rE/TCsS9KBw/D9/WOey4TYQfl0/JRZSArxmj9SYHZNt3h2fkuljxp
zFyCU0y5ckt1dIJplnwsp8+eOW7KkIM6DokhM+6wv5tamZL3sI7VjfumePKO
mNTZLWlSROufCP0WWE9pz/emuEUoz4NCGB8/+veymrL5rH7jrmmm7Huobdi4
NFL+ea4+ovHlguTrAcXei+pESq/6GufZILavpImv68GYHykbTyl/l/395fEp
9UelOuEQh1PXRpEbEbJogO67+bwOlzIDNcdOp11hsrilxnSN7xYsSW+oP6p6
3UhJ0kjftTJnqJTqoLirXO9oSTBaceP2yQ7ZNEH39c6fx5g80rE60MiUczE6
PndqGeIqrmvPNccpl5PoegsDVlmdVce/9DeHDG6kci+VE7p+P/MwVHTKOh/F
VO0wD5av9mVqdmDa6zpuD6u4ZDPjBmthbN27cK2WdMn6kVr+wWVKAOPkx/oD
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
HhigHn1BI+xzhcQYJ6HT8/3Jqw/+heTPj/K2xAYm6hzKOnsBG1whbnFHeTTx
hp1r4gxx0XrUHUvcFYx3tqaP6Ad4PvFdqVFP6z/nLu14LeKi4vadTcRj+UAv
JW3vzfmSPo92lvutdGX8riCGtM9LruL+5n9j3uz7mtIQp9nnKasQz3xDnTWJ
rxLbuTtIZ0edhVhnfPCk5HvtfUyT7X8B3izcC/5vPpCEqD+UY1ILPEKMNMpu
P/FhX9Qznhi4I9r4kzbFNzsPBnHsYtRThO3cBP7dHNszoEuzDcPA785xLoDy
dpyvdfg/grFnl34YsqcJz/5DZvalzBx41inNHqpuTTbaKcG7VWbOmOmQ1CvV
to0ZHy07i6q/S9qA/6rK2MqwYfevUht2YzmnLG6s5TVh2+XjHugn2Dd7K6ns
su8WqMpcyrdbuaQF79Qost8hGVprPUEfImTwU405yT8wVMLi6V7enSKh8nm8
4pOhRqCM9lVMUuNXgLhP8dQxydlNWlbQe9l2DfGRum66XzkpSx3Z3nxyHB02
tbqM6R8ZRy/9VkcuWJpraNvbajL/dEj1JdCri5r+JUujPlZr+suUHs680i6N
5sval0Rk3kZHHP/V9E2kTkW96+T+uwri2bVeHJ3HrYns/r4ujvYb00dSvVX/
3p10fcWrvMa/VX3dVpLlV9/azTJhctBN9xa7pwBPVuXp27ePNAjUZz/ZeNhP
deLXPkESvFFxXdLRDskfqHNUPiRC9m9VH1fNl1GSor/6MerMiJQBa9T3mONk
hLwrzzxUFaLktK/60Aakjha3hIrZks0HHtuvdZa54pT7yVQnfjzkErdkisc+
hjnFzVfXydyeppTOxn3GZIYMLK+6tTLk7SHK2yotTIneoXpwQwHgjQRK+0MH
5aAO8p1uyaUqujbSAC+92K66rEcYZCPjvhoeAF5ivHEx4KinxFFvYN9Xu608
ZSvjW1uhz+YZaUnLX1reEfgqJi33cerh+32gPL7ASPeqavlq2ME+E+lnA66b
8E3po6jHM76+6+swtJfnMeN3s2RcO6Uj+sDm4nmBVpDTvoWVP/AvyBze0/Eb
9vSd48rTNZElDY6rHq8OXfAX96qufjKl2DAt91tjyub6zK2R05RR9/X77WX7
6rifm2itKZHcL0sRYkq9+joXJ4Bbu4YoXXKnKR2GKE+tZaZUL670l2BT3tZj
nHlGQ+r10rkLAE5uRpxc4ZUh01PpezN6OuXbTbWbvMQQK6uuyZ+bnBLQT2VI
foxxjVZaz4C/HTJvuX7Xsz0MudtJy/tiDVjxtf7Ag05Jv0Gf9d1oShVfbduv
yU7J80DX2CDYgEIbMDIY732vdPGzhkSOUNmSYaIpPXlP1r2shngb+q4wjHds
f+XZBV0azrMVlWqY0jhc25BsmClr5+mzv4FxGnTXNhwLMKVaLuaKxxpetFv5
A1oZMiuYeVP72Pcd65wu7QT8U5N4uwrk+Xqd96I+wBUFtLxLDsj2klp+vJcl
1yO0/Ic/1hj33z8CbyTep+snHJik03jm10L9Tu47N4auaM8zgFcW4tlexCrA
VmGJlR6NdRXOM/5ZlluSe4iWd3luyc2lWv4FGOb0X9TR+L6+8/vaDhx1mzFj
jaGv9jA3aQ1bv1O/XAdW2UisMmOPJR0ZA1Z7sSVT6R/OAh30gncRjt0HDMm9
y8yNYb98oo0AvXDsqJYPAGbrTcw2At9Rbe7tOlBHKOP57bj1n8ztORuYwp15
OzvMsaQ7zx10wreW76iOVdZVluTkOdAPaOcjnnEYC2xWhucLbN+X0PeVG1g0
EbHou3uWBA9S+j3Grd0KpdtBX7+ivv4IHT2cuGKkfW/Rx3/9RUmIJVzAFSHE
WrvsM4P0w9jn+eJ/+1+cE4lx3vYnpz1wyFriMTvnaiXWY+evqEv+cWjDKWKz
YNDNSL8Ffz9iIe9fduyr0tdQlpZtjo/yrmynfV9SJ5avR7tS0v9j70X+ZHty
gq7GNfAB9N/EIXYM/1L6jmrbufqJ5f57/6YX6Byku6Nf3divZHbMP9tQx6bZ
zkzgSUMM1g50SfKfQFluvjelHQtHDGmh/aPZ96aYh2Nct068syJxchqU76BN
YftyoziPF+2zGDz/G4BxncL8IVPQrtm8s8COv0vC8fmMZ2dxLzIZ5uQF6dUY
gw1/9pRRTw1iwr3A5o9pd1zrYcj8wypD4kMetBimtvA8YKFEPioz7x4zpFpf
lV3fZznFO4HKyZzAV6MuMB57tiFzVzAv04RoyVVScVq5CVjnjJOcCH3t01Fl
6Ujonc/UO9uSOeXhJJXn23o6ZMgF3fOqPhL1pNV68sJW/VlS+Y90iZCegYox
Tg51SYqvit+Gp4qQn4nVn3MqPERyGXqevXXVKHGGKMY4mjtQslzQ81k7DnaT
jd/1nObtrX5yM1hj9e9n9ZeOYYn1e2zgEj/uU/h2FQkva8ThpbNfukmmu3ou
LM2aRtI2t+aibLKnjawqp/Hzmz/0kFJHNH/a0KXl5erXarp/OryZvPDQ8/5T
RtaXaQfn67ODqsnSpf01b3nCBpLcWKgYD+0pzvYkdg+UK621/X6jAiXfNMWf
vwv2l56V9fzpxKWR0pAx2OXXhkl0Bo2R9veMlh2VFV91TemSzW8UU3UeGimX
OjDHL+zjWgN4n1dwhGzcrOP8+4gp3bbxjiHo81brNIYnbI8hJbx0bVyqbsrn
3qqbll01YPNq+Y3shpQapXqwGTBUubO6TiKgo3wL6tozH5tytpbO735fQxbF
aPmn+JaU3arl4ypakj2GMc/NYPNyXzIqCHqBucFnAb8MbKV03oaWZKIvYifs
3dIztTwj6N7TlF6b3pIMiRmLBXu9f5C+yx34Z8Ygpc9MNyX8uerfvVVhO2xW
/vbAbOeI2R5Ah7aIVPof6MpEE5kTA9/reNrX30Msmcm90aboV4dNjL2Hfilf
iPHGm02J7aHjfBL2esUEyp/rsyldhit/AjybfqPSV8oZcvWtju28Q4ZcbK9j
vgA2w1HmTndfYMoH5jl/C92Yg/63FPgGrx9VugZwWpog7ePyJcBdvN92cD1g
5gk6p9+BN/OXVAz287Qpsy8pz+1ODvm+TL/ZDMAVW0vo+MSKU95Fqi22v6Qp
OYtrPZMuO2TiBpUtq0sbwFfa/uOLnbKpqMqWBt+j5QNzqdWxTOkzUNt2LtQp
adupDDEMS9xOMRdoGUNaPKE/bb5LVvRQuXS2gSVruGedLgV4qinPq0smbGZt
f4wTdmhOXZPJN2N9eugY1thtSsOxyhMC7DT3L32XexFg+J5a54Rzpuy8ozxb
MCZd/1a6X2b7jmn6P/1NSZmCGPiDKWscOubZZ5ri+VbLi53A+HDv8vNuSxYz
p8T5+VgnjDPcjvXj4h18HaD/JzIW/dAE28+pdI71wFFLiZeAVdYxhsoDevIm
722ZCL3kRp/VR5Sv2qF01yuWnPBWelWsJfsY61XshCU9eF/2CmCnhtyLTAH9
8pPnBO3c6uMilJ4FeypRT+I62P2jk1Lvo866vFu5FHTUbebD74v3t+P9fcdh
hz3qxdyt04AfeDYhI95TqSZtk1OWvGN81yLo0tWMB6sJvDeaeG/aXKzDNjxH
ACyXZrPSiWJgZxGjXoTeTs09ypBnllxlroystq7kXUXrgcH68U7J+Q8tSUif
W7Str+lHWgY8spp+MC9ggAKP/9eP9Ap0CuIKX2CGpsQw9X7aflriEJT3Yrlp
55EgvhoEXT+dWGIg6MmkFwOHBDPOfwGeDaBPph7KxhK3/GP7YYhPuqM8Less
hXoqck9wsH2+8s99l6jzO3HaDPQlhnt8B4FVDjJfxBL7/CB9QZXtOyj5Ljsf
2jM+2x7l91h+HvV7sQ0F7fsridlW2Xn7iTmLYBwOE0OOQXns1//FpcdQf0r6
2UbZv7/+tw32+Ezk+KzCu2ZyTF7i/YM41/WAmwI2Kd0c78lKX2U03n+LWMs+
P/GD82W/PwNxXQjqb/XH94j/b9OfdhXv8mUfE9tnEMgfiXGL5NmBuSjf/icO
DfRc0qkwHkf4bd5LasjNMiqj3h1wyIGOKid3hBpS86fqxHGxDrnJuPqc7xwS
U1CxU9cjDpkeqOWvdkWL641ipzvOKPEY2jmOLnQhSt5/1RinfeecsvGZytuL
0S7xOaw4SuJFyd/99BxltgURksnQGOB8XxyyqKa+K98kp+Tlub8Xq6Llx1J9
18ioKFkcoe96DTt1VIy+K6RhpJTqpDHwlzZEyLrjWuf76GhJfFaxxM2ewbLk
lZ7h+tC/j5SOUL/T9YF9ZPxBpYu7dZcB/hr31bm6n9S7oOcQ87j7yfT7GpM2
5kobiZ2iGGzCyIayKf4yPSNZraG8e7Ukju7ws4Y0TDlCzxEM8pazOfVezs5e
LaRCS43hvziwovTo00j3STM6pHO47g8aWZpJ9eHbNJ/qqk5Ss7HGvB2tFCWh
PRVnLhoaLM36690Hw7qFS/z8uodbNjZKjo3UMSnZ3yHn36neHPrAIVdf6tyV
OhUp98ZqTP4wzOOuVzq25ypHS6k9it/GJXOJ8UDxW4XCDtl7TNu2r6wh2V/q
+jn93JBCbqqvW8KensI4pbGQ3839lD7bzpRRt6P+X3kzltdMZUqqmcyHD4zk
lkh1mZ3vKy3zffXeAL3As1SZ61nylucTfTdaMpQxM+WgE0asVv5hkPOHKOdz
OrHmeVZuNPRX+xxaXmINbGSew7ox2pJsyZTOfwm2G3NuZ5xgSuYTqjdbrTMl
UwvVm2FvTBndm5gNmCtNc63/oC9kXT2lz4EnA+8+XjzalHtbtZ6nt6DHc2h5
2HLI86H63u8dTHn9RMenMnTjhixaz0s3SxIcVP700A8/Smv57sYYt2XKX+Cu
ITkvK5b4cMiU8Wu1nVWAK4oTV6zpijbH1zbcACaZT0xyuRrGk7FJhWqY4k4f
0ZuLhiSeq3X+08aQfgNUJmzsbkjMPqUr+kdLnmD9pnpeMaTleuU/d8Eps3i2
ejFwa7nUyv/DzyUL/Bi7uN0lZy4TOy11SnA55d+LtjvcdX16pIMs8tE19mie
U2p7KE8u6NsFZ7WdjyIM+ZxMMdU7YNstabT8QkngvRv6rIkxa3+f91s5DEmd
RfkDMpvy+BDPMvRxSY/R2raAmqYEMj9wg3sYh+varyvAtOur6lx0Qz0psmo9
Fcpa0nE873DMaUmJckpnAJ5a+k3rGV0Quq+jloe/M6V0qNZzbTbm/QfnZTx0
FuPwFySzZMl15UkbZkn9RTrvOYFJzvAsZOFo4DHGXI0BHlvB3PV2nMvJiVzD
0EXJme/rtp2na7HS/sARfzE+8xwwVSXGiSXcBgzA+PYi+I6qXFB6yH5LvnGf
Mdd5YBXeoZzyJuzrAKVrAbeEcz90NnTO41lKXwC2SchzBHNBexLndNsJ7PGP
1tkbda4vb3HdWhJ2m+XApfN8ubd42pL9jCPNec+S+8ybkWgPMABxbDHICl/u
4Xqizs5sZ13o3ut/7sFBfwuxv9mgi+sSg9nn795Qh9q5Q4eTxw30CeZ99QQe
6biW7QSWucFYfTsnfHr6WOy8B4WJebZD/5amT+k+6KekpwJHvCWu++8ZPdv/
k47+HzuPfnJigOvgOchnt4JnPzGJfX/lLvqglttnG+mLGw+eLOTZB/zQnrFh
g8H7m3FTdr6sJ/ThZMI7s/3Z90T5fWIV+x6kzjwPmx7lGRiHNg51HyR2yopn
/+Kzdj6xq8RsO+3c+6TtPGmniK/+m5fsNJ4tQjxTGHQf1pMPtDfps+jXCPYx
BM/W53s/gR5EHBiBulMT59h7tZeJjQtjXm7wLqqsWP++zOm61z7b++euBPAv
IX8k3nOC43Me5bM45sEo38zyWu/t/MNKH0I9R1jPGdDvSMcD/zHaLN4Y/6HE
b+9Al+T+6YBbsPF5LsbRCPKzmcrJjoOc8na6Yp5fh01JtklldY8kTrk/QnHR
qKdOOd9a9XKe3A6xFqpeTt/KJY+yqxwbUT9Kyi1j3Pg8Q1xbVV75HY2W5dnV
5vW/7pAeR1Tergs2JOiDtqFbXodUXaV17oAMfHtDZaA79OTuYSozt4a5pPo6
fddRMSVFf8q6X7DfWytPt6ZOabNNbfN3kNtFLypPlTMOGTqWZ7JMpzwYpv3N
vsch9+ppecFZ4ZI5rd4R8LNbtOQKUl1zXKJlzUXFJ6eLB8nhJXr2v874aCla
RDHM67adpECu53F4qUfqYGkfJHHlYfG8xOfagLjye4UqSvjr+upDW1FKMl3L
Un2/w5SBsdklvNv1au2wJmqvLyZbeieM4wn+UUN+JFUs9zCwpTwfdzCObr8m
TA6lVd/XnUu9JdMozRt2OYEhvZi3ZPy5SNm3QLFWUMkIGTJL/YeLWzklxRkd
H0fKcPlrg8abBSZ3yrupOtevXVGyfKRi3RJnnDKTZyRvPokWn7U6j79quyTJ
XfUfbp9kSNnBOtduC00RD8Yy3TTlYWb6BCDjX6/U8uOQqZ14xr/ePEs2tVP5
eSQ/1nNz5lCdDhleXctjF1hS01/p7P0sYF/VQZOBm7bcUv5MIyy5+FXLa0AX
9cmt/CnXQT/GKH0Z8rUy44EfTYUuYE6JrpGWzN6g5Ttg33/pq/T6LJbs4PnE
giUsGRDNmPkmlnzk/d0/II/TX6OPqxnsdDfuySayZOkx7fupeJA5G5R2prZk
zhulp9UHznzM9rc35SDv2Uz+CXqfPrr1+B53MC+NfS6yAPen8qJt7bPqs4tG
om08D9gksSX1TuuzjsmWuHN/x60Q2uzL3Ahoz7W1zAVaGjpiKM9jfjVl30Qt
f/bTlE0815Clgku+L9a5/pTNJVtLKN12bZQU7ayY/0sNl3y6qOVDgB8t7jmG
JgT+yaxrMjqlS7K8VRmSYplL9o9QPBYYa4hnAf3eE1cxRJKoTFidx5S6b/W7
/pLTJYlraP0Pk5tyZRzvUk9gSqceSretijndSKy+wpA0D3VN3vOH7bBb65TM
lgzk/dcXOhkyc56WF0ptyrs5jKF9YcqhdjxXMtiQ0jW0nhbbLRl3RsezWVZD
rju0X+8hS7u00HoWpzGl3SKtp85PF+wx3dO386w+YZ7VIcBg5nfm05thivOV
0hVdlgw5ovOb+jv6NUPb0KGjJZfoj7Xj7R8x3j4+bOuq3MfMCCzwjjFgHtCx
neiDGnUE2J4xaYegWwsz72UhrNuhPJNyDZhnEH1xL1ZYkmgMfVn7LPF6Qf8S
9MlDYqprhy3Z5ka9CfxTmfgn5V5LWvKs8S7IsgLMm/razoXur7QvdNAK7qsm
Ax6ZxHitZw+g45grYxnaXIJxWdPwrokJiVuAldpyD7ER2pO6E3XZP8APzamX
8b1/XqRteDIN2KCS0lHoSzj3RvtttiRou9J5gVdrEa/6YHxaEXtshx7ewXz7
dsz2JuKBSsBHw5nD6jawxjLmaiuMZycTm9nx7Mt5N6V95u474+H/m4v+l32n
Nv1CtYAv7hLnPLf33z7/iwemEw80Ax1AzHAWWKs4/UW/gAH2U++nxXPdmG/W
H22IIn6IxHv+/uP/QXtScT8unn1fJPHYRtSfju8qi7bNIBbK9BZzxDMIK+0z
CNx3s88TfKNv7TuebcpYLBsnziHusu8Bv00foJ1zbPTXfzHknzvQ7RwRnuR/
gfKE7HtL1J+Z9VewMRjx213wXOKz20EXJl0EuCwHMXA2G+Ox/Xae2qfE2MvR
l0S8d/I13unJNudAu2r+uVcd9GbGho3As4f47Bvbh8Z9xhe2X444sCbaNZLj
aeeFq0Ms3Rq/+dn+LKizMOsfgmenchyeY+wT0qaIDDRk/FWVIRncnTLOobrY
fXCkrGqhe1ieK52ytRbt3MfRknKF6uJ7baPk2kvFXZVHR8i1POqDctSOkjVT
tfwEdK/vB407yjExUqaN0zp9kqOetxrLlDaxS/pcUvnsm8Ml2SqrvP281ZC/
c6p8DqpkiG98ytKFhnzbr7Ix/mhDrnZVeh/0/tYsKruqdjCkz2Tl3zfLJXNb
qcxvf9aQ8iO1zuz5XVLLh/mCgCfX5uA5hV6Q4YxVLu3lFHeH4pZTW6Kki8X7
fCMjJSan9sXVNlwaftS83KnS9ZabVXLr+nzcDbJU9zTHpW4r8b/rOYLuCX3k
XgnNMd7tWAeZE/6w+vJdLnlTPJlUrrI0LibtaeGe0n+93juw/2dHeXfpaRz/
rtJdJG2o3iXkDO8q1xN+i6MvP/KXLQ819+be/oGSOK/uY54/2E+KDNVzl+Gr
QqXpNo27uxUvQj6e0hwXS4eGiyNW/Wnv/J1yKbNi1Kme0TK2iuLPa5OAzy+r
vggJcUnYEh2rm0ddMjGj6pqYJYa8+lvnYnVbQ9qN0DGce9GURy8VS5QKNaVS
E561zAr7OofqpktzTCnCe+tisDbfn2OMRy98R6GMvZlpSdl69CPNgd3nzfPs
tn+JMTB75lrSlef90xyEPGROsK1OS1of0nrulrWk2iR97/ZikI2hSu8OBG0p
z6dh0Gu88+78AMg3xvwnA2bLv17pDJYlDy4ofQC23THGZI6Dbgnm3XwZ8K11
p050AvutLaPtKRpmyT76OkpDR+c9qG0IW2JKvwI6Ds1iLMkVyHgz6DeT+7n/
zdHUAFgu0yN9tgB0U1+e/8pYEXKM8e0Pofde85za/WqWFGIMXoku0NdNmJ8t
lSU7eYfgs/iW/Nyi9OwglwyYq3M9+LhTep1UOfB2iCEr6ulcj4G9NmKkyo10
b00pzdyze7xcsuKMfl9JSpiytoDizFlPXdJ5ua6Z66+wTtIqbjngMqRRPp7Z
hC0WQH9Uh6em3GikdbbEt9/4gPK0hU15j3Hdya8Ycmit8jcCRqjN/Dmfga/L
J9Nyv2emNGuu5QFYF0/GKJ0U4/dphranH9bSZPoq9/1jyMA1+qx/Y5f8jsdz
oC8N6Z9M2zzmhVPO+ansWvTZJe4PtZ6fr4EnMypP1WSGdC2nmC1Jb1OWMk/v
JMi3nDnoe4Q91rCflmefbUnSxtqGu8BQh85qOy/Dpk/PvbY8G4G9me/lR1vo
keLMoQccEUy7wBP877orvWiJJRbzTty/AexBX9YE6Bb/7Er/8wr4fAv9Klir
icoqf75twFGM710I7OT5Jy4L+Gop4xstrPOiPFeYGLr6DWPj5wKD+EYpvQP6
LYL7fbluWtKwl9K9gSHt3IJx6/kJ8OFMpRtDB5qVqeuh65oRs/nvt6Q/fXTt
gLsiibsaYUzK0E8eBX2b9ZPS3ZfhWxiodCa0x5P7qkNiUc492XPrLTnFHOle
6Fcp9qsidHEvxhq54buL5ZnQcOh5+3mbnoNvPw+//f0YQwfHMBIYpCBjkzJC
9+aiLl4B/HCP/iv7vGQM9bW9l9ed+CEAdBTLncAmxRmntBn1HPuTwx96P5p4
7BzwwDviveygn9L3kh70QdKPUOcs+qDSAr948EzfM9C7iBvtuwBKsg1uaGe2
P3FoeO4xz8+ORNuPEp/Y8Wkn6Ls7DmwTRSw3EvUk4V7hIDsvB+O7YuxcsvTX
dQZdn+Wb8ZuBmMreV01HrOKD8kHEcknBf5n45yHqn8y+2LnObvHZmfj/C9sz
2e4L22Dvf97kuLXFmDwndtqKNudjmzfh2V4v/8XeGz/9y/+U/PZ9o+2Ib7eg
3MExb2Njvz970HjXW861nY93L8f/PubxDf2TL8Czk3jvb6z52zyb74Kuq/RD
9WbOCsA8n1VuRDYOlTOeenav1LYQ2T5dc7FOPhEhs8tq7Pe5GQ7ZsFSxVtmG
TqmzRHFLvKdRsqSjYq0cS+ycQoqF7LsSS9xRuf1koEu8eKZy8DpD5v1WGTsp
G+TtAG3DnZamTNqvMrxlNHQEffIPISfzUvZ2/seUfL9Uf+0fZsqRhSrTpk+H
PJyhdYaAJ4o8zsGwT3nHR6Zbhjw6pvWYiQ0ZXUjfuyS9U87u1nbuWewQuaZ9
nPHbJQGJlWeab7Qcbat+s9Ovw+R5SfUvpewSKiHBOm7LI0Lk6gCNYStZpZ/s
Ll8mjh5Wrqc0uaVYa0dwIwlvuLJ6dtifEevyiOPhkzg89sisKOV8dO+yb25v
6b5Xz3KWeN5CTu3aH0cfMbzlQkrd90y4yQ8yROPfls4Jl5vZ1L+367G/THmq
OO32oTAJiFR/WrWbEVJ7qM7jpkbB8ipM921fvo2U1yV17zi2QKScOqA59hPk
dkr19zomBYKdMr6JYrbkGVxyLq3q3MnQ8xev6FwPrwvcNUbnrlMyU6qMUN00
YhbozzpHb4GhXs9UOlceyJwazFH/wxRrjuqgk9thZ537N4a5M2OYe8FWu89z
YZMhSw9xj8a7syWrGvAMYx98s4ylDwLG8yTGewd7egP9SxmA6yoyP9iERZaM
CuL+CGTVF+a1aDjEkp5PGasG+zqU9vVw4Kzye7U8PWT8z1VKl/eBPcs47bdo
cyRjyXxCYJ/O5hmBUajfjWcBqkMP7ta+GxiT79N1TH5A11RkLFCiHJB1jMs6
vcOST38zDhmYtnQeLR8N/VCG+mUeMN6HQzyLOsGSBbxD+fdpU2IY93W6sSWz
vypPp9SQvfTXbe9mStdk2oa75Qz5yfi0ah+j5dx9tcUqvDGkMu/18GvilASb
9NuvvdUlw0/oGsi5N0pWL1P7pUR3h0w7qnvlPeY65VgKxXU1MCfZxtIHPtkp
r27ruir83iXrzyu2qZYBMpl3AA3q4ZJrwSo3ImqZ8tnUNZbrlCF1nVrP++2m
JLC0jwMfGVL7pZZ/m+iSrcW0baNumZI7u/a3a06XGNV1DQ/tZkjFbSoPd5uw
9YqqDCnu55R7KbRtbWJNSRql9a+E3Ku5TPsetN8lp75p/aF+wL0+OteXhrjk
4Qdt848RWHs/mdfub0MmcC94C/DqzEKMvWwN3ZFTeb6GmyLtdC6iTpjS/Yi+
9/pES9yZZ3g13pWjrfKXwLeQcZmWT3kOzL9M1/BBrO0ewVp+GPrqAePHArGG
d+7h+WJg0cO0a96dtaQN/WzZoKPacW+uAfBYTIjS3n9bUod5JOycacN5HjMU
uqjpAKX9oI8ycT+uANrzgDkfTuL7mvUnJzl03S3u1yQFfsnInGB2ftP3q8iz
x5IpPBeQG3ZHO9odY4GR3GibJMV7xhCzDYEO70Is5Ac9vII5OjIBp4V/IN4G
xmnfjfod9DfSF4APPZnLIgbP7mJeHfs84rID//qIVtJHJNCzRbgP9V/f2l/Q
7ynoq7FjyfoQV1QEBkhEH5cd7zSB+GEldPo04oc1wCR16C/qjPq3sP5m0OMZ
uYf4HPhkMfFYJvAY9IkVt/OjElMVwP8t6avxwrui2J7hqH8xMU9d/L4mfriJ
8gzEPHZurp3ED/nQ3x7Eb1nRF8f/5wxjNnuP8tm/fqG/iE/6g//xnxz+qL8L
39vWPhdJPPYG5QF8r51X/w3rTwq6OOkJoMP/5OG384Oxj/b+7F2WD0bdnzk+
dk7XeGxDW/z6cF4ceG4WsXQVPBdGvG2fp0xFnFkDfS/DMU+G9/9k7FlL9GMk
71nYgXc9IsZ7b+fdJb6yfXt/cS5Gow2pOKebwHOI/IXR3zT09dl3F5z48+ww
yDHeIZv9oEOMTrpnd/2vCOkfrntb399EQi6pjp4/PUq+/+gcR5fOGinrxqi+
bukWKQWLK/3tbKRUm6d7ZA8ruSQNz8uvEodE5FeZXOSBS+5NUHn7rKtL3HxV
XkW1MKRCL5WH/q1MOXtQZVRGfCtPeGatZkJThvRSXdDwkSlzqzNnFHSa87nK
w+pbDPHLTN8a5PNJl8qx+71cEjFA3/V2sCFtamnfV3mZ8jBE37W+iCmVMyt9
Bra+p/B+QMjXyUO0bX95R8vGIorHHopL4p/UPs5vFi05MjPW/TIwm6/qr/Km
Q7aXUVx3cVYvmV8xZxz9aHmQ9NpSLY7Osllk+WjN4X8IOupCMfU3Dj9dTyZn
nRtX3i5lbekydHz1gpNMub8nh7Qvdqtaaw/Yrz3zyaGJL+OwnMfxalJnWbCe
FzjXWo5d0TwbA5+HSbscihvPbQyTToUUm505EyqpmuudfXdGRcmTwzq/jXJH
iEc7XQM3gduvM56w/8Vo2dVC+5V+vUuOrtMxP/nFKbumq69g+VyXlOC9qE2A
Zdp91bm4FwLs/VXruZzekgOMpS9aCRispY559lSQP890TidUhI3JGP5V0yy5
UFFl6VXDkomndT1cngzcVVTLD4QCqyzUcjOfJYGN9NnvbYA98mv5X8BXZ54o
/Rj4qjVz3VcbZMmIO1o+bSrGlP6B/8ZxfYIO8XmpddYGjjrF/Bif0LZMlRmH
hm990inqDuiK0vmJncZC/ngoXR9tLvnnrGU5S8ZP0Xp6u0xJH676N+FcS6rR
BxgKTFqFceP7k1pyhznb7+0yZfVoLY/IAlssm9az5qgpLXYwtryuJem5n9sH
Or0kdfqpUaZU26Tvmgcc+6yh9rHzJ1OyD2GsWkKXlDykcxqTOEr2jVM58DgR
cFoBxWmVyjjlUw3FJIEDTdk2imc5U0dKbGeVCQ02mDKuHe/0fBEpzixaz/01
TknmrdhszRaHBORlnP8WfEfnNQZgPfo7nf1tc9gli5Or3CgOHJFAdF0NsO/x
PKffadEZhuyfpd/1zIMuyeum/KW2OeRLIa0/tLEpp5foejsQ5JRbjfTZd8ld
MuCZ9jfzT5fM+KHPpk0XLTlTqa84EjIkxlQZ0q0K7BTm7thU1iVzZ6kcyFnF
knJrmCNlulM2MJfyq6Yu+Zpcn92y0JJhATq/G28aUvKo9sXOF+fPWL7FY0wp
t1PHcxvm6/5GpQuWx1xPV55D7tCtR3R8ckC39GCs1B7Y7s/om7oBzPaGmM1r
IzAM/Ug3huOb+qLlTiewBHN5xUD/9Emhz3a5a8lyJ30CqP8983EdQv1JGFs1
F7jJh3eBpQZ/I/qEq1yxJB/PCKTcbMnJbcrzDd9gpxf0LQMb1puh5c+XWpLU
4r4nMGF0UfoTgFnGr1F6xGF8s9y7vAoc4c5zjrleAX/yHufhwGLlGOefAHr1
HPdYp6LOw8WVXgVbLx1tvanQk4OIu4YBj10u/S8m/ERM6AldPJ8xSP/dp9uH
94bTJ9YGWCDPEKXP2niYd1/aZ/f2MK7MvjPxBP0t9j2QF+hvqQa9fIS4yM4t
H0t9fcKOOyIu+m/8+X3gmSHEYxVQvpbPbkbZVvqg6gCrlCUWckObj/3J3Qr+
rcQA9v3eK+kXsv1aSYkfsqP8LvGVfR4hJfcQywInvmOc23/z9g8HTzPioh54
vwdxVy2UF2Ub7HyzGzlu08DzgDz2neN5iT/H2nuUbEMe0I1e/1ueheUD8dwr
jsMdjFN57rfuBb2UPqvJaO80+hUf47n0PM/bDW3MS9w1BnWmZ50L8f7jjD2r
C9qLmDm+fbcC8ZV95iA/9yt/otyPvq91qLM3Y8ZMO1aQ9XRGO9uznXXs+y45
R3acoQfXw3P8jiT+L3jLkFLHVQ7MG++SgXlVh9aKjZIko9S2bRwTKX9f0b25
Zksge4ur/Py60yEx1VW+HXnmkr5rVHbNOBIlX4/qsz0zRMtw3gc9N3205Mqi
9Pf5phzlma/0myBvmTOnSGJT+vBe8p7QaXvOKM+PM6Y85b0568eZkvKQyqVR
uWDHMSd5yxemrGmrcmkVbMRfJZS/aGM7N53ymIVM2ZtK5XBOyICzzHl+YbEp
G5jHyTuPIYPmqq6ZWtoU9/LMZbTFKfHDte/34jmlV4D6i0rWcMnkcyqHM/x0
Sp2VKs8DgAFfF1EMltUrTJZX0vwVPWYESeZ+isHKbOwjzilF4+jt2TvLveFv
9W6mme3ldbG7cfSJe8BjPRWPldzWVtK1vxZH743wkh3DBlUf9MSUJMPzSFSk
+tZ6XfaR1EW5N3qzqcxbszWObjjbT1Z903xojfwDZMO3LHH0ytq9ZULGPHF0
zfVBUvaStm36olBpPFX3N/P2iZLUNRSnFYyJluMu1ZWzNjslZbCOybnhTjHX
qd6p/8iQxi90Xe1+b8ruKJ0Xlx1rzfGPB/ve/bPOdaULwMOPdfy9jpuSc7/S
T2E3t6R/yaM3vgvmyrgSYUnjdUovAnbqSOyUrSm+o98619femjKV5yUbVrKk
wRItT1wI9mln5uEvZsngIMZfeVmS/LDSD/oCvzG3fxvwt2eu+y1YJ+W5Tiqt
MSUB806UDoeNzPuVuvlDz3ZWuvVQ2BHMGeUBnqXLlHbzteQXfXRtZ6M9TbT9
bYC/HjIX1vwBptQeruszD/q3o6qWF1lhycERyv8YuqVHlLbtYmVLnq9SOjN0
Y5Z/mAd4uCn3lvJ8Yg5Tpt3RMb/xzpBleZT+ltOUeQ+VnvDTkGfNla5YwCGu
bRrPWatRuBTepfvy7mGQAzzn2OqFU2501TX/6lWU1ItQ33iy78GytHctlfn5
HeLcovVkaB0htyvqud2W+M7KO3SNNUF7g/0U5zfMFyYR+zVnYFRKhwxprM/u
HuqQmt76TX1u7ZLOhRXbPBnmkts/lW5Y1IU26PeYDpi9o6XrsNbnaBn/Quv/
8taQMzm0j+UGuqTqQ312vgtyjHkXjdcuObtfZVrD+dHSLUjXfLe9hlRiHrYm
q51SrImu/6AOTtnzWrFZ0d6GfL6odsfoBE6Z0V9lxX1gyFQ19dmjYsghT+XZ
0MEl2Wvpe5MUNKVfEp3rzM2AmTcoPRfroQrXg33X/BveNW/nS/bMr+v8NPDM
KN6LnW4R7JF+So8YYNvsut78gUleM+9rbmCkvLHKU2ucJa703OvEmnTjnqkb
9E/SbMp/6pglwcxl0X2GJXW9lOcEbI1w5p5tifXZl2c/k8CmaE6bohHW/3R+
I9/m41tjXpqmwJ+LtmpfBu+xJD79YOegFw5sVbov2hnAWC8/2A5P6AO/GQOs
0lfL16Jtb9Jo25wdIROqKc9IYNER9FXuxPe4gPdHeACDlKPfz74L4xHbPxll
uRcw9gxYqTf3Xqdegl1Wnz4T6PB2jKdaDYyTnXisJ/BbC+K3UsAGNYi7ykJ3
f6dOjwD26EAccgS6uxf3y+ajLIjYxgOYKj79WsPwbGfiipfgOUAc9QA8I3//
61P6c1ejnWviMn1WO1BegvtupVE+lthmA+rZzXeFgucr8dJ7O6c9/VR23rMl
bOdZtHMi2xlo5zUlprqK/3uxPe72+QI+uwl1puJ77Vyq1Ynr9tk5zYh/SqP+
ssScdjzVDL7rFvjP812bUV9fYsXj4DlAzHYd5ZmJLdOjztTsV1u8dyj7Uuc/
9zGNxdiUPaF0X4znO/q+AlFPafond6K8DnFvC/teAOKxb6jjDcfzv3H4S8Bz
jbhruX1Gg/RK1FmTbU4NejH7bvsd95P+hb4mJ6YdAtvnCfP1PQFuSVZKdcoL
P1NeJdLvfX2PSKn6j55PjG3tkN1DmHf9qEPWBysGCynmlJ8F6asHThteQuVS
mc0OSZadsfpeDrnGnO3b7kfJ2Toqq1+kMaRRS8U8/T6bsnaEypMg2NcnaF/f
BUY77M+cSLDnSrZV+vU8U2ol49lw2ElX9+iz0VNN8b2rz7ofNKXUUuXpWc+U
+Dyz/2WFIaseq+18Zokp73muP2FuS7pUVZnwc60pi5pped2ThkyPpPzcbshX
3o2++4dLPL6rrC6QCjYC/TnVIDPnDtU2zErslLChzMsEmbcyUuvMZ0TI94eq
j6ZfjJAJHXTfMOB9b9mQVHNZJJvRX+pk1bv/HjTpIgGXNGbMd3IXSXj+Uxwd
sMNP8g7UPcr+U+rK7tUz4srrpi8rddsX0fObLyvJ4C16D+YsK0SsZbp/eh44
cWEixWOfXwXKqfqF4ug3eUOkaza9I+lLuWBJkkn3MRslj5bLb3TuPqaLlk9p
FVfft+/Q66rzPruYSz44VQ++gL1fhHvBCZMDd41W3bchvyktfyldeIwhd3ro
XGRIY8qbBVpeoSfsykD6r4DlQqIZOwRsdpzxQr/bWLKa/q7BKJ/JfcyERfBd
MxdBCHRWyfNKj5piybwSjA95bkoKb62zD+Y9X3XlGXnNlIvJmUci0pK5zCV7
C2tvn4/O3SR8O/noN5gfbsouH53riWJJH+bDHwAboQhthKrukNuHtM63sJ9m
1dBnvVHHz3ta/qYE7FCX8vfbaUr3oTy/2dCSKObmzeJhyuc1Oj5Fob88qL/q
wdZo+5n7vNMtaUUf3fAThnQK0/Ef99WUW4zPD+pkyJs5igGe3DDk2MEIylVD
rvPejewOpzQJU6yVJNCUT4W0jxM2hMqa84qdLgIvPJqsPq4PZQxZ85R7/f6m
dE6l/Afe95XUCUrH0Ydhwx1fqzn0irmFSM5JitOypA6SI556LmZoqyhZf1nj
Todu6StZP+o9X74ngKMKK45K9ztCIjKpz63I6ig50lrtvk5JoqUk770dEOGU
9f7a/rBIp5wNUHpbq2g5W0h918VvmPI8HePxGhrSoxFzWb8xxcXzsFnPGpKb
ecwSz3bKKOb5yeNtSUP6S7sAp7fzURy1sodLRobwbCZw1NSNKnO6znNJo248
szDZkIrDdM1X7mbIxy363j6YwywPVJ5Ex5gyOouugYvfTOkwnXv3mMfHk5Tu
WQZybzTPaea3ZFoz2hHDLflMf9eJwZZUe6z0QDv/BM+n/ILO2c74sR9zLPEk
XvIAvnrIszPV+1mSaxT3VYFtxjJfsQt4r5ChPPf6WCJD+J1egK3EXK9z8OzW
0dzLmIy1Sj/wrMemNKqt7e8MeViMe75nc1pSvIK2vxWw1nJirV8jLUmRQJ8t
/8iUOtwHSQ5clsmpz64rDR03gvdflLOkKf3M+wsCk3RSeg7avIVtnrrVkl28
47Kc7W8vr/Q6jNUR5nOeDP4x5B9zx5IM9DFexFj1aUW/wd/Alsy/YcdJtSA2
Sw+du+vPvYrQ0deJK+raOamIzdIAG2Tlubz/5sV6CLo2MYZ9ZjE5cY59509O
4rFu4ElH/pvAGz2Jx74CMzwjZpgDTLKSfio75uoiMZK9d5aGWCgLeMKI3+zc
aB3Ib9/lFMByLzs3GvGSnQf1G9tvnw99zH69QZ2H+d5uoP2I0+x8ZR3ZF/ve
olD61v57X1It8F8hjrLPXA5inSvA40U8UwbPVmAbeoHf9ebftgV9+RcvvWUb
glDuRVxXHfX05/7sTdQ3j2cuquP9C3gWw87lf5u+tSX2XQMch0R4dsCfeUSd
eTiG1/HOnOQfhrLl7EsKtOEF+7vUPmvAepLbe8Hkz48+biYG8wDdg3QDrLEP
jGnMuhT2VyFd20G5nZLpo+KH+Zcgb5OofPt62JD1XVQu9XW39/VUbrf6bkj1
ekp3BP5ZuUzrmXPXJReHqmwpdMclkyylj0DneFxgTv7Wppw+ofJKephSP4PK
8PdbTIntq/XUc2I9MI+6O2ylNvShzfbBd1eQtt5US5owRrow8OzKKdovt66W
fGH+gdbbsJYYj5rnpikpM+l3bfpDJ9KPkXeuKWYCfe/qhaZkyaj0yMumjGKO
zbc5TCl0V/v77JshUbzvr+BxQ/r30/GZusaUsQ24T1TJJSnXKT5pBPmR/S+1
64cVj5ZMIxXP5F8eLSunqd29p1CETDd0f3CIe5g4qqp/YODJEBnwWuP3NvgH
Ss33mqt/UqIQiZ6jeu3eulZSId8xzYmxpbMsWvu++s9TlmwcUVTmXokfV77+
r2ayfIfmzZgxy09WfFZf2ZuLXeVlu++8f7yndHXXOz0zHOkv1e8qJpwOG/8E
bfyRz6KkXjddGxXKmdKrhs5jUG9Dsl9S/ZIx1JSjjXVOt38wZHNhHavHsNMP
Mjb+cAJL1m/XuUh0D/K5qNI38Kxnc33WN5spm8/rs6M3m7K4J/fmPphyw0mf
Wz1LFt5T2etoAB3xXOnGnSy578U9SmAeF89FZutlyXOeEQicbsqRp4xhwzo8
lF7pI8BF94fpu/ZAd5yIVnpZb0tmO6ibtpnSLkzLh0CPOLjfd8UBvcPY7LEb
TNnC+15LQHdMH6ZtcM00Zes75fFYaMkxxl13DEHbGGOWDbZ4c96b8yWXKU+f
6jjknmTKiwv6bCd8v76Ftf5A2CbOXTom/YINac38qItNQ/owDmqArynn3ut8
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
VVtn0+9igp+Ufaj2rou9fKT6RM1RsLKxl2y4Ufg3/cA1UPrG0pixms/6S7lw
N/1mMwdKjQeKr7bU95cJyXQ+7iWCpPA09YGO8guQqcwZ2zd9iNQ4rjht6Gbn
7xxnv9sTOSSinK7D9KyhIuXVR7kS5+JyWZXd5TcYsjKOnjd/6NkRtKlWg5wZ
24G6LfBMVeIZu0Z2KdbITjvWFL9IlY+R4M0bd+tvAyFn4hHbBCU15cs4Pber
IFu+VdX+U0uCd1m8S+K0ZO1h7T/qtik7WR9w+G5TstO21gvY6lBv1rUHjspK
HNXrnCnzmfcy1kngKPr+fva1JBtzNx2IxnP38m5aKUvW0K86FvKlBfMSHIcs
ettZ+0cAq+TromcySzJT9k7U5xovXeLcozg/yVvoAjm1fWYc8OrtOuc7kFf9
6PNqWdSQ9dHM71HelJMNWRuxiike3ZWu+NOUZMv0t00mGuIZoLi9DeaY9anG
5Fe9YEjb+bpHS3KGSlR93ce63UOlTy+1hSa9GSpTLcXeX5IYMrWCPtevY6jc
rat9hlUMlSnMIXYA7/p9ln5H5zIZMjBA+4+ZZErSk7pHz9NacjqurlXoYlNu
MbeY7wlDmoXofLzXmvKIdUV7QBZ3Gc5YiNyWPKqhv10OvrGddvIbwD5O5oOt
mdmSm1m0z/EGwB7Pla6Hb78u8wZ/OYR2+rmq5jFlxztd8+bQHTpRdzgFXWA7
8znknWRI8hBdw1dp7JqD+qwZ0B0zsq7rvXTQBRJq/7eDwGdYs1Uqgm8zR8ov
H2CS6cTnG4EzV+scMo6zJHNSxmUBF+QmRsowEuPQbpwCOugz6q0HIZuK8D7g
A8iNb8Q8pSBnkhIjHbZrRjAX91l8a5H81vpOsaQH7UuBq4AJJ9DX/8ySsvST
doAcb3VM6TTASBep5879z5KB9JNeBN3Lg3YPyLEVzE++GXhsEfFYTcjeMb2V
Xrsd+OEE44EhYwfF4fwh0+K1U9rO4/6C9o3PwGs+rF0+BH1aEGcmAKatd0rb
62Kt8mX7a7u4TMxzCmsyhWvSHjjlDnHgDMj35MRpwyDzO8UQxwIDjCNGag9M
0X438QmwT6dIpW270QDa0GZBXm+kvP73nuMRyOtIyutbGK8S5XhLrGd5rudb
9HcRU0XZtjHax2JBvh9l/8q2X5XxbHYOhzzEG0/x27b87W203yW2sWPRL9D+
c9y+J0iseBbv0muv0v7Yr528D9IV8+nH+UxG/yKM0SoFegz9hrHwLl2I0+xa
kxn53DV2Xnra4j7iuZWe/i+22YTfZeXcnoFOw/kL6KKM3zuBOT7nXnzB87vT
Tt4Pfa6zjx3/9vlP/Bue+5zPzYpn9qQt166n+Z7zn4c+6dgnKdbzM9czDdbz
EG1Zl7BXJVnX/l+/cDT6FyW+sv3XFei/7gP6MX2XhXFO9tC3OxjvXoV2yNXA
fd1p130/xRD3MOUVJ885pPYixQ91W0HvO6T8uRBwzkrmU8rUxJSZK8i3oUe/
bMV4mBSmPJypfKlMF0NezFG+en2OIZtW6fjXqxvin0vbk9Y3xMV7W/U6WDKS
ORVb/EJ7ex1n3kFTfJcoXz2K76mPG/tAZzyUntishCWLmdcxDHz1ZyHmHXIH
XqUPtDB4wGLmio95CwwZQNx41pQXD3X8ec+BARLqc1vMMCTlDJ1z5+KGWGdV
LjhyuWRsPcU/RRM7pdo49bt17OKUeJ81/rzd2BB5fFSx1sTeTnFlVYxxo7dL
0gxSWXZ0UZA0C1Of4zC846/FOoeYVD6SL6/mi2h6LViKn9YYre5jvaXeZL23
eHXeAKn6VPNnNsjTX5KWyf6bbtitt4x/m+w3Xb5/L7l8ROvUlJ/cW75GJf9N
7zkdJC8bqr/y0fQgadlG55DrhQ8wsNrBTiUNkf0LFUetu9pfqtZXPPZktq9U
PaF3KotPGSTvY6nNrfBZb7m6V+1yZmNvCRvi/puenyRIMn7S+DTjsEMG9NRz
dW1roOQcr/5TjzCXPH2ra/KidYgcuK42tNBVTqlfR/Fb63yWJGFtviKFTOnI
XK//hRlSq57u0adbLtlpKiYpPduQwYuZSx9nOPth7Z+gqikFeip9w9OQj5f0
7BVNjzO8Vfd9amzofZF6NvwfAC9VYk7XXaaED9M9GjzSkC0tdfybYzCH7kqf
32lK9FDts3OdKUObKj1uqSlX8iu9CTLcl/lSJgaaEszal3GyQqfOre+4BGe7
KO0h7TGHUZzDtXiG5M+h53AV9KAo6kG3vJ2ytZaesXMjnFJhtdIHLjvlcyL1
Ia6LZQDD6W8zhrvkSjm1TaVu5JJ63/Q872loyoD5uj49A1xyaa3uy+2Spiwt
ru23gaP211ccZVrQgy4wrhtn6UILPUsvopzyZJfuXVbgjgSbdQ7XUrlkxy+l
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
JL1+L5d7G1KT9RoSoP8M9m/r7ZA8rzTmsHaoIe7p9d1717Rk8Uneu0wdJAXS
qX85c8YACR6l/vH4bwyJzKLfZvEioRLhUB/ix63+Eu+JYukSd7xkmEex33S7
eP6S7YGeH7c+nlJkufrKu772lVFVVNe4VtMpYcMVO8Xyd0iDuIoDV4x0yPjO
SjsehUr7Fbq/lasFidslnVv01QA5fFZxvnncIR6G4rSxFUIkaw/97iY8d4kb
83vcWeKUrMV0f2ekNySgj67bvkKW5GAe/lofTYkYpufkCzDGqHnKA3e9xPnp
yVqHdr22AMY2DLWkKfNd3I02Zcw+5Tln/Sy5z7uTR4HP+7POwmTohqmYI3qS
E+2+2t4oDfRZ1j4r/daUNH76rOxVLDF557cheJ3jmbZ/jYB892bsVoApjVvx
LC0xZZ2bjl9/pCWtPjJ+co0pS2rxzstBE/xE6Y2dLalTTfu8BtaYwTxCySBD
XMwtb3YBTqih7XUrW3J9LeeDbyQdcyO/KQE8Qx9EF2DaQ6y3kmqEKcfm69yG
47fPGVdQc4klY1gPJRWwVp1svE/6T+6j2sBRLeuRn2+xZBnvjXZrYMmpp/TP
Yh0ycB0SeWJ81tG7Cxz4i/5T33MYk3cHdgKPdSQeqwZZl2KUttv5QxITTz6A
TP5MG5pti9pDXPENsr4+8UMEZM1pypqW6HONMnQesFg+2kByQ/4GE6fNAnYo
yJyxLrT/oFx+ifZptN2dxthz6IOrYceZE+eMgkzvSplux9InIN3ezsFFrJLD
lvvEKibk+F3axw4D5/wgHksJzLCBmOEl5uygfXIQ8MtKxkG9sutREqt0xzi9
OE5i4If1tL/Fw/w/cs6heG4OzsfO1dGJGObfHGtpbezHudnxUZdoE7Pzqj3j
/HuiPTHzdN3H/58Rj9m5Jl5xDiFoz/IHQ4IeQ/oE5nyN+NPO4ZGadGs7Xou/
jcSz0hCn2XcZXHzHw3Z+XcanLQXumkff5WWs/W3a/eycIiWYq/8kfnuD44dg
/KMcvxbmU+ZP3XC77hLPg52bbhljDnODzke72Vdgv970n37E85NtUnoB5jCM
c7BzelwgVvw13JKo18zRd8cp15lLYVVAiDzrrfhhWyOXpP+pmKr/DWCbKJVN
ScBv3B8oz+92ErLGpe2V3rik1THljXvHGLK9G/XBBS6Z31flRef4TjnoVF34
QQWHlEyk43xf4ZLck7WPe2+XlPFiHtQBpkwtxnvu703J76LM/WHKZtYo8YGe
ui4F74VlMeUE73NlTGXIRtr6xtZ3QU7ou/SZ5JLbrAn1BbxUOuj4m6E/ZWaO
jgXDnZJomeKxlH6mtK2vfYwDTtm9Qnl+2nah0qaC+m6aXAqU2Kz/0jnCX75O
VPn17nCwTCWuuN44UNIc0juM0VX8ZP8Izbma1tdffu1UHNKwp7/4WEqnzBEg
o5aprCzfP0BaPlO7xJddgVJxsdrfTnm6ZECYrlXiur4S1FntbKHAeF8iFOPF
r+gvUdGK/cZfC5RNRXSe664Gyd1A1hYcHiCHeiqGHA58UpB1q73u9pbHeVP+
pttW9pWKxXV8z1K9JPJiwt900Q++0riFyl+3jN7yaLba3+4d7y/NE6kN7eza
dpJs1qXfef5zu/eVz+fT/W4PTDBQpsUq/pt+PNpfmubXdevXButQS9chUxVT
cnrofCo9dkqB5npW7y0KltSXVV9YFD9E0o9QH2vEuFA5mlNxy7jqDqlVSM9Y
ihIOWXND12T9FKcYN3V/489ySd7Geh5S1HFJwzt6Tg4NAn74oL8dsCBEVudQ
W9/c1C75Ekf7PE/jkEy9mK9jRohc/6bfzszshiQbTf/gZEu2uSn/L5/fKfsT
Kz652NAlNb7qOFGrTdnOemS7gdlq5tffbknokAXuOv7mjEEyr4RilWLAgdHD
dB2uNAqR4VsUn1y+7ZD3NxS3zN4YItUG6pyrT3PK5Cf6vj6jAiXssN4ZyRbk
Iy+vqg122lZDijDPWJ5MQWKV0meV3hsiaxbrOEM3DhB3URus1AkS3/fa58PP
AfJwfKHf9EK3YAlhnpPX2YNkWkPtc69ZiPw4ovPMNyJEgjbqWt3b75CbrXTO
baYMkpmxVReot81bfjRVP/jmRyGSoJ3qMvO/OWR1C+UhqYe65P1jPf9x8jjl
3jdtz5TDkLJjdQ1r1wF+GKHnx3efKbun0w7pbslyxjO0WWXK0Mra3n+HKatd
SqdpYspgxmY8y2/KwrhKN+9kSXPWknbNN6VlIv52syl7ezBvcxlTJov2z+5u
SHL6F7YvsOQ17UXh1/Bb5sTLN9eUsj9ZFxhzuzFW55a/qiVfmBeoQzdgJObb
6Z4UGOmm/rZVJ1PSP+Q92X8wYeyrlhiMreoMbNNhgD53frQlq1Jp+6f9wAnM
g3Em2JJQ1hBPsN6UaOY1OpfXlPFfla/uSmnKwAVKL5+K9bmqcy6Htd3HOkez
v5uSkH750V6W7OX9i16NLBn6jv6LM5YcKKNz8IiCvsB4sCZ43wVbtU/1+pa8
eaD0k/aQ3cyT2QvYsiJ95VeA95bStra1IORjF+0fUAB9eJfnA3D10nvav8pI
u+a10kfsOlDMW5IGOM2LOWaHQk52Y/2aeJDDiZgT+BEwyX76nuI/tSQeY5Cu
AnfE0K4yAXI2G+WsBTlenrhiGuR+vCN/7TZt2Mf2qXUhNrsD3FKIuSxsP2QX
0kH42532ouS2jYv45xDw2Cfisato302c0wOYISd9nfWAnZoynqokcMtl2tCa
Yg6JaXdait9e5TwTon8Fxsl/QN8P9NPtR9/MfPfCwCrB9LttAYYxiGFuYi5Z
OeehoCcQg/2bB6MsnvXx4f9iuX9zVti5cHdynqMwn/70t163c3cQd7Wx87Nx
/jUxTknipe/Yi160Jdp1jkKIqS5gvL58lzYYczzXpD/6jGSffXZ+Etqs7LoA
1YnP/71rMBZre5pre/cfv/x59F1NjNoF7YnY5y3mU4XzyQ56Ce9H/JvXbtAM
S3JV0bOXKYMpL3bq9+X1Gt/WadVVO8xzSL2dqsNeKhMqXZaovtw1n0NObmad
wf9c8rmfYrAJLUy5uUt5wt6OlvxXVs/859mG/LdMsdnWNKY0ZK3G6++c4jlU
ZUq5ri6J01T5qvcHhzwvp3y1y07oX4Npw+9hSbMOOmbcuDh7rKGZdKQpCVin
ZmFf4CvWjM6UzpQ6m5gHbCzOXkJ9X488hsSPUN7YsBDmzHiknGcNuTFJ5dHk
yi5ptF1lZfAQp6QOZ26KG6GS29T1mZQuRBYdUQzw7nGIDOqs8qL+nUAJqq2Y
Z9rJUMlRRvuvyumUgS/0vVLNC5Rl2RVT+WV3yn/3tD3vgEB5WkdlZbEfwTK+
u46f8nGwNE6g9O1NIXLIT+Vj29ihcjZKn9s6G+R1LZV959s5JcdtlfulEgZJ
g8c6n5fhDnk0Tfd0WvsQmfRc5WMf7yCpu0xtcROu+Uu+kVo3MN1QL8hutbnN
WOgpZxfn+U0/WN9f1k5Ve9fd8BDJ90Zl67GjPnK7ksah+d/wEo9makt5GdFO
InwVj8Xs8pMVq+vyuxgog1Mrfovzyk9ejlJ7yzZgvxslFPvFAC/nqq24t9pJ
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
x4Oy85QOTBqGSZGKi5ZVD8PhiYoHnp0MwqhwvQtb/NyF+jvVjnRqRqicDRVf
pQv3YNo11cvZA00sY6yq9yMDUTat4rF6fv7I8lXfDqyUeTsYqX7vS5b74+FP
xUVvsg/G+F6M1dYnFHtvK2Yrmj4APv+oXe7S5hA0uKi4K+XzANwPVaz1JWcQ
Bm1T360USUMxs4lip3uDA5GD72rXPPZgdyPFt2GzQ9EhSvnvkNWFJz46Vs8H
hiFtIz0f9Yzjj9AqiKHPl/DD0f05dV4+98evPfqGolMjPxSqov57V9YG4IOf
2uI23wgFjivO6X3ZwJ6Gum4jd3hwYRRtpCcs7D+g63x8dQODrupcfz3rxu4p
OqcTRO81b6pz9DwyGLUrKx7bXNFAhQ1af0QzA3nS67ry32bi35y6rvYHuXEj
seL27DsNlLil6yfbbRNd9zOW2noPRrXnW+YroqMXa3kmWTP7T+uaCZcz1uE6
ysM/pV2os0jHasYIA5fe63fbOL76V/W3+cYamJRAvxWQ2UbLPCpbWlYQuU1b
U2F/G0cZA7+fnLMWMw9pXZHHn0LpcyVyuA712mvBbCeJ2Y6L/NmUm/72Iptr
M7d1hOA0F/NU5pRz/BHGJv1H9PxW5m1cdlvwIW0sNUSnNGZM74l7bRRh7NPE
Ir/bMU5sGueOjPqoo+CodsRRuWfaGF1O63TfYyP7faXDztmoVYx4QH4Xhzkl
wwWf7F2pdf77jiD9QxND7uq4XRf50OGejmdakdtdDuuaOTjGwO14Op6fOpp4
MFf315ZuFtbF0jP1miwWml9TedVYztpXeNauWshCgtSMNz7FRC7mL0gq4/mR
+a38MlmYeUZ/+8XXQtKc+ttX8tv3Xvrb8lJ+kjnXrmySvjOP57gvFlwTVeZn
P2HjRmrtr9c0G00Lap2ngklnFFDamc+fHbVOl4c26vLuyYkHFps5QMuLPt/K
O6xbok+rMIdypOjkO8zl98SJP0/bTkmhq/Eu76BgkL68c9wveGYf8UxBwU4j
iZ0iBDPsYDzY1II9NhOHJBd6MeljUqcPccUjwWLhxGP/jXs/QtZna+KE0/Ld
2fzuGudtI/3znTeDPWk7WiX0FNrHZknbrfkWIELK7vGdaRbh+Rv9oC7Jt37z
W05c2TN/cJS0n4vYw8k1sIl3l4+cHE/kubvQm/7gMaE/s7/7pG4DYjPnjvUf
3rFel77sp70uWtb8ePqb/Tf3pfP+oCvrJ5A289P+NlPay02bYS7ht26I0obU
Xcs4FU4ehCrE244f4EieU54LP0nZr67ydyLtjRGCzV7Rhua8tbxIu1xb4XP2
n/tQWRtLuDZqyHj7EYMtlPPR2rFK9xY+D3EcDo2z0SUez1/eJuqnov35jonk
9Dv1WiZ446LukXFyrtzcXPdd7skWfh3R9T9Pzs6Hmedxch4bfzfgW+bRFuIx
n/hfmUwMd9FedMXAEcYos04bmFZI6YkiTwq5GVtGzmrtXbqPlvwQTMV300Fy
1vSaoO1nlf3xj5fW/9hbzox+jBd0zELpncpPvOMWzu5S+vxICxsXMO/z3xZe
9NHy9XJOSsh8lI1mWajzVOscrWOiGXRM+s+30IfvdM61sLDgiMqBHOVkrOj/
vKuKhfvMNbO4toFMT1Qf7f/uwfClqmeXisxe2kbHc+0vA/3j6G8/1zVQ8p3W
z5TLAOozLu5KA6km6pi7B1sYWk15eCkycGZ8LQ+8bAIROl8tWxlYkF9l5l9d
TGyOVP5jRYt+HK7jHL7NQP7z+ttlgicXDVEeVohuPUrdOi/IwMko+sj98iCY
/n5lWhvoU1jLd8czsPoc3zJ4e9C0v/622GQDC3Nq+83vu7H5FmPkVjNRPJ/y
sy6j9KO46s1ptz04lVXb6drVA694ip0SRoq+vqj6+tCPMCTdpHahZtNCkXG2
YpUA0QMtaykmWb1tMCp81Ps4vw7+uLFd8dVe31Bkva/YqeLCUFQ6pr+9VDUU
80tr+fi7g1F+gb4JfVvFjaiMaqvxGh6CZb/5liHXAAS51EdrUfZQ5F+qmKp/
x0Ac6qaYKnluf9Q/ovzc/jkAW4ryvaEZiJRvtU7RgSFosUzbPHXCH5dmaCzf
NwdcyB5f8WTINxe6f1N6XP9gfG6gdrDfYwLRNRffV6bxx/rh+q2vKwMxaa2W
P10fhve91GaVotZgvIun960udxAel9W7v1wFQ/DBrfe5eZqYyN9F56W8rGd/
rud2soajH/FNTQsTc/y1TlWhXwxW+sosA7Hr6Fw3HhGGoasUK7456cH0C4qj
FsQ3sY/x1hr8Y+F7WeYln2agbin97b03JlIy7lngJgOJd2p5ynuCqdy6bhNt
t7ArRPfpQ5EB29JrHa8fJqz6+ttJ/7gR65WuN78xFt6uZHzU5CZ61FUe+rQy
UcGt/JfNJPqFuc/el5czb4TSi0RG3uB7q9KChZY/VDm5SOS5X5iW591oozL9
staIrsvJnNSdt9gw92j5AcFjl2kfc/x2HzM/+H9jPQXus5GMOb57XrVRsqGW
+4le8Gcs2foi70OYw2i86JcPvOOoKjpqGHMJ9bUES5xTGfhOMNiEB+RN9Gka
2gpWih5JS1uBt+iFRLSbfZ4vdEutX3a1jeoTlT40TPQsY6+1CTZRKa7Krq5z
LUz+xDjb0u9ZjEu2J1Jkfnadox3VbOw+oeUHLsn5dL7KKO/pgoWKafvfh9jI
xFiyj05b+Pe8/naWzN2mVdp+0fIWHtRTuTrLY2E047mdEMzZvKK2k050TWm+
r//62kKYr66xUydFX2TSPk6aa2NhPdoeBU/9qkfbyBQZH8ai6XVDcC999RPc
szHUX+kbMs4Z+eb0jujoc8QMzx3MxTuvwDsyp8wH+rfM7wzaPZwYF3GIuxw7
237q/TDBD/2JH5o4uT6J2Zz4XVeIYbY4eTCJN/5rBysjdarwreJLKYti+UGZ
60DO9Umpc+hPHDDBMIt5h/hAMNEc+qTtlv/7sC/PBBt8J15qKXw+4P1pIemL
D213zQVvGMQbeYW3eLSnTXPybLIv55w8lcRL9aT9JsRmvlI+lDw4vmF1SWeQ
OgbvAR9L+XL+dqTwP4d3nS0cvMdv/e3kSScOdN54+pL/K8J/JPlf4eRsIrZ8
+UrOONxrh2TNNxxHDCztJ+MYbpO6NTluTgyTeH9imMjcFaC98b30vSztli7h
ZyD7Gyq/LUW86sSqLUcegoW3xMS9X6T+TNr0ykn719h+PhnbohzbloNFhtCm
dLe4nJFH8g6rsguVDqmuvHnDhbABqhcKC87JtZ323rQWnuxQGRjRRnBdAW0n
7K3gnIG6Fw4L3rhMvHFpg4mG8XQ/NnNiJzK2uX9qwWPx9btDJlmockjLXbKX
VzAXcHfBsG2mMi50D5F19EmoWEDGvIPWudbSRvssWj5TzrD1XFq/fjULM4J1
L1eVub3Es+TN1BYeM+bGNzmv7aSf/6z4Fp6HMg/dagP3ZqrMfyRypVN21Qux
9xlo9EbL+5YTfbRE+V+V30Dt7koH9nNj5QPV6Vume1CR+cRnLDGx/5jKtEgZ
n9ocn02TbHRMpzxnTWqgEn3s2xUxcZZ5BiftEFxE20WFKx7E/kX//N4m/jms
+mXvEgOFQngXk8xC05nal2pzDBRspOXrEpn4TJ+3GyJrgxk3tVspwXhTlP/l
ZeTs6aPjdnCsG5G9FBftamTL+U3HPLaced2Xtf1y802UXav9KljCg530YZu4
z4Xz3/WuM3MdN+bU0jHxu+fG8WuqNxcmNpG0PP3b/zLwbYf2velIDzYu1XEr
3tKFK4XVttY8KAR39ymeCTw0EDOH691cdOdBqJ5b7+O+ZhiAeU0VO7WME4SE
pdU2tTFTAAa9V1vW5i4BWJpVfeNfeAUhuc24EKWCMbG5+m5VQQiCbypuiZUx
AHle6G+fX3FjXxT1/rRBqBtf3xV+LxqMxd76W/fGACSy1R41/rY/7jxS3LXn
rQc+Lu3j8cRBqNJCv/v1lYW8PXXv/GgXinaLFCue/TcABboxV+mlPlg8Nn0M
vW9bIHq/UAx27EsoJjVW+2GCSkHonV3tey89vfC1r+bJanOwH96O1rhhnz6H
YP8Xvf9NXsSDb7l0vvpcsvCT9uHtR0zM6MJckPdNxL2k9PPsJtJN0/mKLdjs
7iBde9f83ajxS+d3TFYLyW/p2lh0xIOFfCeyMMRCoo661/otNjB4sK7JyrJ3
/Lrq2ju13EKlIsqDc9efjnf9xnULH2Lr+HQ6aqJjd95tib7O3EDXapwfHqxY
pmNrXpc2O+uebSnyOPKA7q9v/S1Z68rDEJEHw5kje0dfkZkhKkNSrrVRi3mo
X52w0Zpx+NOJTJ3Bt2nJRdaOYDzVviKPx7wlhhE5fZv3FDlOi27NTlow28ki
Sm8WOTyR+jpM9O1T+vqOE/3ekXcoZUVuX6Lcvu7ILfoeTxDZfoi64KPokLJf
9Ls7ltsoQz+0wlI/PWMyRIjuvcQ4847O7zZY6RDBfjaxX3opDxlA3TfRRkBK
xoIQOTCuio6tz1gDn2hXnJrBRCu++1jezsJ1xvfIK/xspJ+Vk8c7QTTP7CtE
xhbXOV0Ux0b3PYxT5CN4dYfKk8uiJ1fRPnBY2unxWem/KtpIslTrRM2R8eR9
64Y6jn7X8jN5BXcx/0LpaAsRBbT92i4bp3YwX6eM5T7m4qwp+Ggoc68PWmQj
LuP/R8pcp2Yup4cyd9ly/3/byE5ZA53oCzRGMMUX2tAWvnXeaSrdWua0Lef0
9nsb4+ln7rzLy0id7iV4YCNjWz0V3RRFHLJUynMSR/WQv3v++PnLvE8jNpsk
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
E397u7DxpNqLKmVpialrT8RgjCvze6HEF/Vdr/CmGy4W+xFTXrnSQMwppT5X
pXI1wjzfDTHlmaf3QcLQdCrbc/XB0PF6v3k5ui+C+yme6VV9IB620t82vtUN
adzfY377snQwmrbRMY97ojOyt3oTU95zQEfkP/U4hi7g3Rwr/z0YQzef3AL1
oo7F0N0z98fehIVUPpzsgQwZ1S7X/6SJJ4E6L9/e9EaarWmUh69+mJ5bfcA2
DusN+0aqGHpg8naIO1MxZ4snPZHrRWKVvXUMPH9BnJmrDNoeKBxT5123FviY
SHkYubgXBifVuGS75vZChtc6bi1lL/aprm85a80yMK2mzsvcvm6svqnrp33D
MGzdpveqdlML9bfpvnu6zYVTN3Xd9v7ixsEajEdRI1RORLomf5ZwYc80nbsz
OaR+I6Vd391IwvzgTTq5MWGZfqvZxDD4MzbsO9kLzWijGx1kYvtfumc3lbRQ
opTygAEmqkXrum36j4kTD3U8axezsTFY929iy0b3s8QDoj9nL+NbIZGvpo/K
w7f3bATT3pVWdFpH3vFlfmDjPN/TzRFdMX6m0rsEv+3mHaWv0K1oS88rOu45
ff4vCv4amo26SeT8D8r5VKIbK9Bv/7TI7R/U47ulTmrax04LDwG8Q+wi5/3t
tKW8E9w1m3iglHOHQjw2yIn9ThtaSmm/DNvPLu2MZF9OO7mYiffuiX7rTIy3
WjBk6/ZKHxM8lp/5nhINknP9RB23OdctBMdROZy1n435hpYfEOxZi/m+J4uO
6FpHx7zMUAtHxzLGRXXBBqe1vHV9Jy+P0i2Gm1hbVec05VUT5Zbr3KWrbaHx
OJ3ftVmlPnO4ZJZznE9Blf9p5ew/frCWjxXsU45xNe+L3ktFn3yP6OSpl7R8
tejkVtFKP3d8vdj3vCtEVw7Rcic35ULi8EuCeS3G0KjhvKGgz0xvwWwFiNmO
/iv6dxIxj+j9zLzz2iE6+V4/pf8S7FDkT35Dx75E3HVV5nQHbThJpewdsYeT
Fymafv4+gmHS835zg+Cv5cwhfklob+KxnIIH2vJ+bZjQ34gNogQ/+BI/bJN2
chELOfa2xLy/Wy1YJivf3v7Xx/6L/O3D94nFZf0X5D2+YxscRdtgTllLdYhJ
IL8NIi5y8mP+JNZy4nS9pe3X49i76BvmxMfITdyV7buT21TpG4JV0nMcsstv
I3nnON7Jm0lfu1pSfwq/5fiPPeZ6nipjc55jm1TmIjnj8aaS/5/mecdfvnOV
bzQg7RfinnLexk7nHgwW7HSWmLOitLeV7xGcHOaj2eZNqTOMZysnp8F72hWT
y7f28FtRUv80ceA2mcPKxH6Jhc8xfHdQSM4Oqf+8a95mokZuXf+9vTzYv1tl
YxrR51WYz6hSuIEw+kGN2GLhBvOX1ZRza3bGjvZPbaM/fYCP5bfQOoHuo9MX
LXR/pvUde2cNU3mYMsNAKW9ts1OQhQbMH/cxvoXhLv1uVZFtd0bRH0xkUuH4
yvN72YN16Se2TnDaReK0+D8t3Fyk9Ak5B2/w1e/6ijzJN1n5HNDWQvgN5e3y
NRPX1tFPKYuJM4ylH/uEgZGZFT+EFDHR6ISWp/A2kYCxQazUBk7yfeibCAuz
kuu3vLob2NJZz/vXH5nY9Urbf1nEwoys+t1jQzzIGE4MtskD01dxXc5JLnjn
U71WzcuFqelVZ6U76MIR3m/ubxmKXWNVx11a7MHT7PrbRcWC4VdVccLmEiFY
Nk9xVNazHjS6p3VGCQ4stVHbebbQgzZptHwbROfmVT24eIwLYcmVh+2pg3H2
mGK/cY1CMclPv7vwuQtVGO9rUR0Xwj8qn57RbpzooJhzjWCzwq0Um+X84MG0
4apPW1d1o00B/VaP0gbeTdcxLLLejSYJFNdtCAtFgryKPxdtGozB99RH/cpo
f5wKU2w2tj6QYbIRgzFyL+6LRy2y67zIefrKyF6IXGvjd9bC6H31t3eVIzLn
33PArvGPt1Pn27RSuO/O4XNTzkiPBxZGjXZ/xbRzObAakHlUDJ1/emUsXtPN
J+ovkVszc+NS2+cxv81+oxza+yKmTspf7fFk9oMYuk0JXxTLpHaq1kfq4OmP
+THlkQeAnS/tGPp9gm4oE/olhl55vhl2djwQQycKCsDwYL27zPy7PTbM1zbH
RHVC7tZ6r5qlZWtk2XIhhp68qBUeFDoXQ+fr2BoVLmr5r4lNUem02uWWVqqJ
3gWnxNBlStRH+r3LYugqE7vhQbtvMXTyZF0x99mHGHp1lRB0OKdr5lqhMPyb
T3FX+gIe3Eil8zg5RSi2dVZ7167UHtF/KiuyNQtFfLeujXEXZf3T/7/0HhdW
vtW1NPqLiXy0a2WdGIzd1xX7TZjixqdhumYyrjPwZInKhDL9QnHgmbYZu6uF
FszZEXDPjZd8nzsxm4kSE3VvNs5jodUXbR8tLQw9pvUPzxK5zTirFRrb2Pmb
7/Iu22jO2F95Za0s4ZvKKqLHm9C3dspFG0srK71eZPgD+gilEPn/hTqrhOiZ
l12VLix6ozhtYiNE11+hj9ZwwXgLApX+b0yDL6Jbwub/T6f88UlOLb99xvLN
cobOxHeRQ0SeN6a9y8kFXYz2MW/R2x0nKP1GzvgbmZuvpWCwvoxrcVN0TTna
CqZLO5FsJ4t8y2uB0t0dPch7z6gZgsHKMI7ZMQvJdqh8u/avhbW8oywmeDA0
MfV1J/lWVZWxNboIHqundOYjJt52ZL71ktKXEcyJIO10rqTt9Egv87Vf5+7H
VBkHxgR7Lvrl7WZtZ5rM6bPjOqd158u5/pfqixfDBEs/1DpGgOAB5l6fKP36
xfFvON7Gevq/fdgtOugu44EIXlpKvFRphOiyp/rbxJNt3EyvdfLIGC4gjj0m
OHrZKi2/ccZG7fxa/lkwRR5i77GyHgYwFlltmYtLfIvhxN6PQ0xyQeZ/Nu08
7wVXDOVaKihYZTfv5l5IeReWZxLMlYP+V7Nl/bwi3jjtlBOPnXLeGtBXrbO0
E0H8VlPaGUfcklja/k0MH+68o+QacGJdxCPmCXNsd8Q8hZ37SuKQr1Jmck2u
l3UazDgep+RboX/i3AqPXWiziit8DiDeSC9/TbZfV7DYetqviji4jhjyv28B
nHfEB3h36cQwS8ux6in/H8z7U8fW14r47Zas2xzEb44fXS3S8WVeUtOemVb4
X8Y58kjfy7Hv6QUv+RBf7ZPyLsRLXaQvzXj/Gy1/V9KWHi3f3E0/gdPC5xVi
zqYyJtdpl57rYFHy/5f8/xHfCDi4dRcxcGepn5bnJj9ZV2kYA7BDSxObghVj
HK9uIaGha77UfjfuN1W5twcGmp1kDseeFmol073QdYWJoNt6rok4aMHFXJND
6lgYOIV5vaMMJF+tMrZlUhODfVR+xqphYDD9kV70NfHwovJQfJeJFKWYd6yR
YLnV2k7azSJvu2n7Xa9YGP1R6X/Sy7nJS/f4ETkbXZqm5as+W1g/ljH5Zf9+
5f7N3sbCy0vapv8IC8dmMd6F7LkVzCF7fo+J/t70ZSogmLA9/dYuW6j7hjlz
k5v4QP/2VEcMeBKrDjoyxYBVQPtrWSaOFdbxqSx7PdlXbbPEaANevxWzzQ03
0cnSOsNXCbaZr/orVjoLI3cyh1QRNzJd0LuhHBdDULmVxitIhFDcL6w663Jk
qOgqxTDnol24MVnxUqW6YYheprp1o/TpzCXVuZMKBmNIIeYcnOhC9Tz6Xd99
gj+Z6+3b4BD4bVS/9ErdTDRbx3dwNdzoVE4x1c8tLhgX9betZ7rxfZ7q1tUp
3WjVXnmedMoDn8uK/TJU9uBbD9XvXcqYCHuuY1jemc9yqt+7lbBx0tIxP54p
ABcYp6Jl37bIUvVGDH74XL08Xveu7jPVyXnrXwzt/OP6JKhi4svBFJjnu8X7
2kUPbj347RPZeZz34g8y58lzo9zTpzGYqkud0ig9Ka/PvzsNFMycGH3jLY8p
r/61E/b1fKk2tCXlkThDLb3rtKoiNHKYT6qJNhLtLoh2aX7E1M+V1xf7n2aI
4W17w174tkDvGU/eaIPGFa75xJU1W7t4DixP/yCmfoI+5ZGrfw2f+UkEI6TM
gxLLX8SU/0jdBOsHbfN5I+fPcwUK4uiwbzHl6TqVw6d/K8fwMDBFJ3xO+yyG
blynJcLrnvQpnk7Ou6Pz4PSTlzH1520oi51xy/u8FR2ZLlEeXA9/4d3jvYU4
sXKjwyHte6ZdTTD0/I6Ydkr1743aYWpzGxHlQolNOo87H4chH/NxD6hp4nYJ
nffJv0Nxs5/eVz747ME53ul/lP3qu0zX1aZhHvSYo2eNMyXD8LWmrj13qzDk
vqf0wNcubD2p63POhyAsr6WYf/eQMKSZ2yWGfp0zBNc7aJuPChuYEcQYsxvd
GER7bKIsBuKX0PKNuSx0oj287VkLOflO5Kzo1vyZVdYle2bhbmOVCQVF7r5n
DIrWUTYyRGido9ttlOadl5fozwBirdqil4sS24yTM3F9vrXcIZitHd/o7RIZ
vJvxLtKKXhpNe0j5A6KD3mibw0Ufrf0TQ1J0xCHeE/UQXTmE5/GaoqdeUk+N
FPlfmDhwisj2lrStZRMdN//PWznR2094p7nWyblDe8tV0V+daGO5KHQj0k68
jlHUTXdEL60orLRzX1rsh/LZWXDljMIqD2vKeebpeh3PLa0Fd+XR8mwb5Ozc
UsvXyvgFMI73z04W5r1VGVvyrom2J1SeDHlqwaYPWPgmCxm7aP2Bgh8vMYfU
mOMW4u9lDMnYFor2JMYOFKy+UmXm250m4pXUNrd6LCQJUBleWfiJ3YrxMPPa
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
5GqTfLLEjSZ81zm8uQeFTyheelvSA78qSifI5cHKz6r7plX2IGlvLV/2f2R9
ZXRUS9P1JcHdLbjDhRA8gWQKDxAgaHCCQyCEECAyM+cM7u7u7u5OcOdycbm4
u/u3z9Tme1jrXfygVqenT2vV7qrqKozJ7KPtv3gaIxvS61r/nckuJ3uqTCw+
KEYaNVIZ2h889lu4zsnhO3b5ckdl6IF4Q8Ja6f10Ym+nrKKOK0EbU5q/0Hk4
vsKUQn46D6Uwxxuf6lgGPsEe+Kq/bRptl3XpdCyv3uNObei6nK0WJbmWaGyx
0Qs7yay9yWTNF6eku55SpvdfExA3Evi3dAZZcWBvwLQ3wLD9U4rHyNUBN3A3
2Jnroe3c/ZZujBR8q67ER62zTVoWJoHP4m3Z//GwZfMwZXevrHLV43RArSem
bB+XT3KMexzwOpEp+2dmlXsxpwNiv2Ne4xPIyCbjAm6OMWRY8wySteg+d5sp
W/tITFhaN7aJ7+wnTW43tLXO5JBftV/Zfk3u6q5z07ukJL+fxF3n2/5gOfVA
bYXL31eU8CJt3PRr74rSeXwzW63e4XJ34AlbU0+1Y+5+4C2hFxLZHKc6Sp3i
O2xD9+W0JawaJZlLXLIdHLE14NRzp6ytk1IOfloVEF/LkNMN04rfi60BnrUN
GdskrWx7vzWgTedI+R55wXZqueLJMseDZZznTvd3AzNFSlwFfUP69ArGtlHX
4n1iU0z6cH4u7pTycbpP9ng6JflR3Xu3jsfI5UGqBxtr9JXy1fT96ZSsdhnr
1P3zanuclLtNO/hTh0xoob/NVt4uXt+1ztCcDil1X/fnnIpO+XuzfsuGO1Pk
Ad1jFvY9UUr3VY/SDnHadA/PBJbNxPfRd3Gmn9gV/78obcrACrr3XFVx5z2t
Z3ZBT1NKlWN+EOCTLxHKT7qBpx6aarLPLnlA3FUHvLNgea2z7CQwCW2USSBr
qvGd1HHw8IaU0TOtvIdDKFshW8r05V0YOO0scVoy8OHqtCWdR3lgOOsDQ51h
rNfckCnTaAOag3v0A+o0UoEHepEHFoGMMClDLRnYijl9RkLOXieuW4r+GOzP
R9SZxDp7IQOLT6PcBxaYRh+5INR/Sx3g9liXdNqm5z24qUva5lI6Mfjzi6F6
NksAv0RWpU9INssurPPss9MFvqRzmH6zS+5sU/ozcFBX5v5u3w735fra5pkx
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
erSTpsB87KfO2fLzXEO9ZS306yP7Xwbtf+XZ3Ix2vLl2lp9ncc7VAGCt7cSx
KzGvcTy/51CemvbNrDibQTybcXtdcum+7rF0FTA/1DUNzIK+ZVDa+5Ahs5oo
D5y805StA+jPid8dq6Dn5WFl4Ki8jPn53pRfdi1vvs6QBz+VT97/4pRDL5XH
3s9vysiPikOCWhrSepz+dsdLQw4zB9NK3DWD+vE+5e+S0lu0P/N6WbZdPUdt
cbe7VEnrrDOBD89T99UCPMFb6cfApyvsWqf1ZOBw5rGdjfM4i+cxURGXrKKv
/qFol7xcyzvUQOzJ/5grE5jQi5hwWTmczSla/+tWU4pGMQ5PCPgYfVzD07kk
wRedh32vTTnbQ+kVY015wxydn8uZsrK6yoh13U2JLqLlhzYasiqVzvnar4b0
rq5z8hfko4OxQUzIl/2p9bfFLjmlXRPmZ09hl2/VFD/74Y7Y7L3qIrLcc4rf
aK0zsrBT9rRX/cObHw75vkbrfBzolHPP6cMGvlWwin73Voo4afhO9aX+SQzp
WUTlXdWCcZK6vdpMF5QCvmKM0KQHgEWYW6ox8Nh44rHVRRzSOqPiwHyX42Rn
e8V1vcrYZepr7fP0405JmYs4bU2cfFylsvj+q34ybZDavF6v6CwXfNTfKYFH
WwkfrHhp8c3usmiVxjvNVLixnC57RH3yDzSVvfPP2h50c8qFQYklU+XZbkzi
17GxTE+t8R+mL6stoWcXuemQG93FY6m2czZXI9kXozErmrjaSo06rxQ7hTSW
sneO2GbhDnD6Tg4J8roa0OmFQ3J6JZBJw8e42092ooL4+9W0jb7tkEeuvyTw
7ih9L1Cirkx5s9rWY5opd77kkuun1a+syM1e8qZ6RTlUyynDvRLJuR7T3eXF
BpeWVknz2H6+i5Wcs+7ZLr3pHfB3OkPsd1NJ7XrrAz4UM+WyX3apdud8QKO9
/eR1sZu26U7FfvkKh8qXFW/cfW5Rwk8212zgplOd7STPTY2PMWNTtDQ8r/bo
9dfiJENvXZexTQ25y7zbg4BtiiTS/VlkvlO+dVcMf/WaU+Z00/WaHYD9GKu2
7+jHsdKope6Zjk+i5cAOxdJZ8jik5iu9I2TEuqd+peu+ZZRTZlOv3iUoTm4z
3l2dSzEyeIdiudkNHPJ+v+4fn2DcKXYqHZzZkAlhuseyAjus3q5nJNl2p3hf
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
1fs75O5YLe/xwS63mIc0480+smeMxvxv/ytWWu/RfRiXzy61l+mdwo5/iwqo
fiznK9zj9msfIow4SX9L1/HrCEPC2uheGr7HIYum6f4RnKOKPEd9zjok/QMt
X3fPKafGajsVcO67Mo9SG+C3Dd6K357jLjazoZ7ZqNouycEYg9kgr1rTl2kX
+L0H44ZdugCeSb+m6eCfv+hTlADy9jDf37UGznpC3UsuCy8Rm10D/8nEvJD3
frqk1O8YTZCHhxm3v99ll5ymvug45MVAypE5lkyjzioBZNMZyiBf1En5O84S
9ocXbalvIdurEY/9Y/lBMZfxW8iXDbxv3oEcmU8/8+rABb341tKKv9GX2Gz4
OZfc4pvEg8dcbj7uXjvIIiu+mHvtgG32TaRf1hzIzab0x8OclCLOPIx5G815
k7Eu6Uk/25qY10z00R3mAGY+RN+wey5pSptv8y3AD3voVxPokj2MM9alLXBR
Dfq0NHHJ++xKbwbPz0VZZmG9RGHMXznUJa9p9/wMDPmAuoiP/2GMjIMxDDI/
gjHHwiFz11DmJrR84IkBTmNN7nVVuhfWpSJtxNMw/45F/xefFMQ6e1BP0grt
1KafvC/oTcQq+VB/Duu/A52f9kQ7ftuX9ruFKLty/f/W3/9HvIt2kPvrKfd9
Uecr6/jjtzm5T34BM1xi/CsrJ9cG4sBA4Jx5xD+XsMc6Ef9YMdAqU6d3A+P4
zHvBO3yrBDFPdnzLwW/tQZsP2WYDlHemHiwI5d+I095YsXOpA2yMOlGsE2rZ
Sdn/d+jPUM65P+go9i0d6jfitzqiPPvveP4Y4ySeFy/0+QV1yLNBZ6durSbm
cwLX4pulfyaW9kSdgaxfAGPvTNw4G3WiiVfnor9FeYeqjDPyiWdkNvp+jNi7
Cs7XVsajy4NxDKKtswbqNPh9p8Pc2KlvnIrv/qRutiDKT9PGHQVcUVuoC8KZ
m8jYWRljDUmTVnndrHPWG0zaIq14lJ91nzffZEiJtCo3n841xTu51tn3zSH9
qbfxymXKSMbEeBYMHpWE5yi1S/o857dwhzrLmHuZcc96b1O6B+agKPOLLcaZ
TRivvy3QGuteibGjfbAf6M+w2uaSccyjkbkF9htjkR3EuF3kCf8Az96j30h2
fLOSl/ZhpK9LUi+kXfKUKc3P6liy4o6YuDR5CHhMXYP+DJ/w2995BIJMybVI
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
KO9K3NvN0rPxuwes95W/33iifgfiq6/Ann6MLeZ/Gji/gNINsRa3aefNjm96
EHPWtM4l18t6DzuJOtULVs5Z6sr88J19xLGWr10V2oKX4beL+N0wzE0Dru8R
jG8a7xSvMJ8tGT8wCufoOPW0+aebcv+58q6GNbAP6WPZHXszIf27nr0y5F0m
5p3EeTqcVfGM70FTdi9U+j7uRgVjtJ2Z6U35Z5XWz4q7VKLuWsdnuCkfl2md
CvjtTv7W7OeSPiv0rD3HXecadWJmI2BL+uTfxJmYx9iw63B3ucMYGm3AV44d
oM9/lEueUh/+Hb9tnJHvFMBfC0zSby0Zb8pg5lVphD0YQJ7pBT5QhbbOHrHA
nx21znHw6uvRfKeJ9jfMVrp2qCllPynGyDfDiuOh9a9ON2TNHJURucOAOfNq
eYKyphTzZy4h3P8y/KNy52hKQzpUVnkXvcAp8yJVFzHigENeL1e5M2y1U6Lm
a/mQgYb4BGj7hYJB01ctbVmn3JymGOz7YrsEXlfcUmuCXQoOpa0zkyGbOum3
pk+3y74lWu68HSvDy6ivdSf0Z4tN63R7Eifr16uc/RThlC5Ttc/dqhnSr7h+
d3Jtp1x+r9/9ct0hJb0Y67WLKWUy6djTxeGsbdd5O3HHlKJ/6776/saQ27l0
n4SONyR1nI7LOdIpTVPpePNfjpESexQTBgB3H9yt67g2sq9MTaG6l/k5ekrH
dqovMn62k7dN1A+/+MrOcrGUxqLvnKac5OpX2l3+vm4ViR47xFZhrClrJ+aS
DFs0lpdv6vJyYKWfu05Io0hpIupzFfi9r1zsonokZ+m28r2M5k568DpWDjFe
7qZCtWRAG42BX0YqyJogfec4NNRX3vdR7PejTB05eVLjx65OUUsWflPftqST
qoht9FDbzmhTGo/KKcMfX3P3x/NkdfErO9FdJ/23OrJv9nL12+/aS7YF+rq/
W7VFHTnYSGNxXF1fT8r11LcA3s2CZVkXxWCHM4ZKdFfNZekcBrzdSXWn7xbE
SNPLSk/8akoV5tTogfV1cX0LGIa8KajrcvaRQ0Lq6/o2rGLK5n66n33EISv7
KQab8daQ4YyZ8+GhIRVfKWYbH2eIPbO2M2yQU6q/0r3Uu4whsY90v+UbbZeH
vXRPnm4fJ2u6qN5sK7DW11G6l7J+d8jPJdqHM/2dYt7TdqLPOyV1Zb3j9P1u
SM662gf/aJcsY+6PLbijDR2sZ/zuNNx56af62A4MQ7tYc2CqYil49wff7kW+
PWKtSz7N0/p7wJt3MjZ7h23AXUeoh5kHXhGqdJudLpxx6s3GuORGWqU9IOsO
0Ka5HDzbQX/+y5CToXzvmdCKaUn7l8cll4wgJrHePw6mvu4kZOIkysQjVjxY
+pm3xm/nUp9wEXKqCeVycsiOd9TDvIdMqcs7+wHcYVPS3+wM+GEI7/jbId9O
0ldtAvrwpi77gPYqUS4HApPmZk7J6f1dEsH4+Ushx/LSR/cFMGB+6iJCgNM6
8C3qbuDeDPto50VfenxWOudQl9R+Qx9jtF+UMTf+Kw+5MJN5yUGvmKa0THZJ
C+YmbgGZO4BvJJNhLJ7UUQh4fJnrWsfKUfiSfj4pJ2K9CjA2Edar2gWlQzHP
vnOpu0A7xWmzKwwMEE8M1gB0P+phmgM/3CWWaI75H8/5/zOHkZVTMjllfR70
wU5d5S/Lx5t1flo2N+Lz7mizBDHJa2AkBzHVLsuuR/3VCOCxXz94L8Dv8hAH
WnEz7lC/dA3lA1hu2TyTE49NRP8nEOf8i73Rjlj9z1ismYChJvLeURv7LZR2
veVofyz1WlaOoL3EWrvRZiAx0gX08y37ORB9rEhsuRblTVn+AeUliMeaoPzM
b38z4LRRLLd8wIJ/vy3FPPz6Iw9mDWLXg+jDD/anEPp5gr76W/HN4cRR3fH3
r7RXNsFYx1EnlgV7pvMw9gd0AWK2dehPC/azGfowhWs9DPOZnVhrA+btMP30
TqL+Bda33t5OO/W/MxjC+XyH+g84zzGYswq8N3nhrOUdxHkraUqWYspXz/xt
yq6sSm+ubkrIYKUL9DUk5S/lz6OA0yYRp53NYcrry8r3qgMrZRml9V2LwD9z
qtxMBF6Uh3nKeu8Ary6m/HlpEeyBNnynXMYlp0YznmoW8LdMjHGBO0rlW/Qd
xRzEMIbYZOCi68RFdXH3WsS75GDg0KyMczsfuPUe9dgfvXF+Y7XNGYdNab5B
+ybAYDeIwcoEu+Szp7YZA/78Zq/Sc3F2+4Zrm2mACQvTr9W2yZTEHbQdj6TY
w+d0TpLgHpxuus7J9aOYk11a5++uhvw8onPYPNKQJS+VLgH+vfujzlvP6k6Z
fEuxTS3Lj/qBlh/LB5k1T2XWhEOG1AxhTiXIh0WptP2tL4HZqHNrDFmx6ZCO
6/VRh8yJV1xXo64B2a3fTd/dJdmYZyQiwi4j6LdWOsQhma6qbP2vukP8+Y4y
L8Y90tD+ZM1sytOdOsaWwPsVh+icvMWcpO3MHOuYt1OctwW4Q9ehHjLQy5Tg
8/pbAzKxtb/WefOvIRuW6Lg2nDSkU5zS3yRWAgaqjqXszVhZUVTxT75GvaTY
8wpuevuTblK7ktoWv23vJfOW+7np/8fWVUdl2TxtW1+7u7sb85UxUDGwsAtU
BAkFBQWU577t7u7uTszX7kbF7u5WbL9rmYuj53y/v5iz7LP35sy1M7MznUrX
lDkDBzn7TrGlRMLi8uDSj1icMyO6iXScFBmLTyLr1ZCMMT1j6d3+fSXcVeN7
tKpaTy52VV+yfT0byue5inmCEniLywb118pwLFBGPNJv9XvrIld2K3Y6Nb2p
JHHTnEo53naUYUs1p9KHyVVlemH3WPrY6EZSZpnGaG3h2kscgWo/nVerruy8
pzq9+HPcZc5VzXteMqSRtHDX+pmWdJHfK7/F0lFL6kjFpONj6aNfKsvBMfX1
regTf5lbpFhsm7d2h0NeMM7J277yz0j1Jxxg/MeWqf9Y83b9pfFU3QNTLgHn
uNGXr5clgZUVCwXMc0jQJsVUS/0d0uK67qW6qQbI+3lq757QzJJJ23WfXMpj
ya+HutYPM1qyfRtzs5Z1yJ6rup+fno2Q+E76rbHNBsg65g0PuhsuL0fpXSC6
doRsuqLnwujlftfRvZFqsUN6H9H+tFzmkLkXlb4RHzJim57HK8ApfZmv51wY
ePV2pZfh3urOmA+J5tkiLembCjkc2l7pKPDyNMwfvRq4y+eYlr81eR7Ta7nr
bNzfXYklRkMWJ6CtfyF4F3U4x91tOZaFvGWtLfFnaHlZyNgr9A2bDTyQgzm7
XfDdTbTHjTPxKik3v4DfZ6J8HAG89pp2kz24l6en3a0hZIoQk7SBPE/BmBit
DH6jPP3btnUbWKtGE8pZ9Ocu/ce6AFPMZbyLrZBB1ymDQnH/NfdwQ+cGHjxc
UstzTbQlIqeWf4As6sY49rlQZzfrTIKsvsd3qd/wrTrUB44A3un6jG+4jK8v
fYmP5AR+KK584+y/aJ+5mTKYMU3S+rUDgE+YhyUGcu0a3zjkxfga+ir9HTiw
OPuQAHOwmH0bCfm88xV1nsBs+6+ThvxPx/zvJoZEZvrptQUeeElfLCdggDnU
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
st6mfy9wzSW+uTt935KhZZh7Dvu9DG2OzXEHzTtVZfqskbYkoh3wwwFLJi3S
37445JAzbfRbb8FHl3TW+o3qY87v8S3kW0ui/KmPKm9soFreBXegkzH0By5p
i1MAfYBXWMCXjFeJdubcpS0M7U/pxJiW+G3MF6VdwPNX8X1BU9R52kHLm4y2
xZt56+6B3yS+oP1fCRnUu7bSjU5bUv+sfms6sGUUsWWvPpa8aaDypf1c8HbG
2ioC3unP96erfR1yhHnb+y1xyOhTOv9Lmzvkk6+WlwU+zEF8WPNrhPx8ofjn
VvQAORlP371eD3DIhDuMqQ7ZtWCV5nROXD1C3mxTmZu3ToR8uKq0E3hzHdoi
R4Sh7fT63SNeljxnHOB04P37k2kdae+QIhO0/fDsllw7ozL68ZYIabhf7Yad
0MdnWXUdH/ywxGUhcd0rS1p5KF0f/G8S43zOB38911vpaGDtl9S9FK5jyVyH
4oFVXxyyq7p+6/Bch8xbr/3M9SJc0u7QN4xNj3lI0tfqZ1VsYXu54nIvlh5d
3Uv6xled1dNFbpK98ubY8uMFuskwV/X/rz66hyydnz2Wfj6uheRKflj9tVZ1
kqwuL2Pp3UVbS+KsUbF0vBk+MmaIxsTYuqWXjBb1yb9Xra907KvxYO8UCJFV
+9RWmGVKhAwrr/NTpVwvWZFC/dmKufeVBre1fhFgs7I3FZuV6dld6hdX/7G1
l+vJvLma1+lkpZZyMKXaKxO0ry2XOo6KpW/sbyMJbl+OpR+FdZInU144n8de
DihSQG6V0Ni2C1+JFJ0+UPVva7pKpVrxY9tf1LiftM/YWvfbgwiZM1731aUK
A2SKi2L79VUckuWX4nb/abYEMD7JkNmWFIzRfXISd5pznXS9sjRwSMK63Leb
UKednov4JS2ZlU3rJMK9J/yermnrHQ45UEj3TFlghN/M27XogiUrmAO3B8ZT
Z6juHzfgoJWM2zxgBPbqUu3DIRfcdxiXJmGoLUk36r4K2GzLQeY3dAU2EeKo
8+CXgdTnFIOMbk257wfccpDxDEPBd1tSX+QGDDOAb7cduIdGMp6YiQNZkbYM
ky/FoyT5/0ETb5z3XOCLjMyH+AzyoTP1wAvBgxcxnmFayOr3jBP7EtgmMbHN
wy22ZN2u5d8gA2uNVfop2qxP/PYdffOjH+wZ3OMzrKfuDhiyIzFkLZOfiNiv
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
2M/Cq+spv4ZCVtRg3rYDh+zS4bWO2T7GLq1oG70BTNj/ubY/wb7FMm50OeYW
9vd/PmZn6WO2HZhwDjHtw/fAqPSlOQu5WoT+WrnwrHDGnO7E3Gpybp0gGwPp
J/wG+zmYMQ6PIOv86fPjC1nmSt1aFcjQKdQ/3IPsq0/bUDbggZTUcTkC75Qk
jlr2BPtPXZmLVSuHOOos5PIcyuW2kOGDqUNzQHtp6kNeoj0j/V5qAMM0/4dh
IKNXUUaPwd7m4t42gowuS/3JGfQ/Qx1aamCPcPqDXUf/vsRgw9Fnztv/4Yds
xA9W7e+hlPXuFv765+cPPJOCtSkPYL2viH+qY91elPXxGD8Vbam3MX5W6qY+
YPwSHL8EsGEO4tV8PyyfbaVvWX5x7H8Tc9j1r64T8Mk32gcfWn7+xCodMZdU
xFcZLVzKNW5C24//T97+MPTfxv5rMf/pnL8dvx3GNVp48Ni/GpFo92T7fYwx
jvtWGHObzf3ZZtU65/6XtHKJcJ7Z8O4CqU+LxZpieCa7YI3n+B4zYPzJnHNa
7MNs7sN5tE0jPhyHdZylHjUcY9/j+bHyAM/iPj/Hs9LwnBzAmtx4rhZh7gOJ
93pgni2pm5120srboPSvtabE11WZmAk8b3q83ltfOJvS9Knyz+wbTEnfVPt8
zABs/0z53vWcwJwZlO9V8jelZiPlsdPAD93ctd0p1C4FNiovKohvMf9epePf
m1KBPlfe4D2/6+l3V6s3+EN91sE8hTlE63PToj2oHnOdlbdyPuv43ouxV4yZ
CgKfDHKmDQV4LAX1aXZ8i+8Havud+nbZSf3bf8AAC5mLciJ49cCs2sfjjClb
j+hziwM3phimz30PzFaBmO3nduArL/Ypim+hPvVFwJWNJ+u+PbpkyOXJKssy
NrXqaGt7ZtD1SO98YZOKS1TGOe2yye2zKtfGJjHlqIu+i0o9DRk7TmXf13WG
fHyjOC3fRFOqH6CvGvaj/XDFcisfRErG8ooNNoTaZOdubW9UG/1b63ObtzIk
hvnNApYDv8XomMdyGRI1ULHH8LrAhEm1T2s8N9Mr7VPqiiFt6f+WZAK+U/rn
1NpnSghrGezLYsr+5Tr/AqUNKb9Nx3w8ySZdi+gaC7cwpGIdHf9FL0Paz1L6
Gt7Le2Kz/cCTE4gnJVeYLIhUPU+BI4MlNFxzbf1XyyajV6jt8qx3oMxupD5a
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
bPbLeifc21ZYS3NiY6tO2QVisA9Y3x3i3gDcBVoMJY29jGetMSvHRS9ivJuY
b1+esUi0V+EcrLqfj9mnIc7SbNqCrfjROJ5nywabjPt2AvP04r49xRw2cA53
sA/9ifmtmM1w4rrT+L8T873c623K/resV9LJlLr7lS76O1LKrlJZXC+tKV1H
qPwNvQOskpm51nebUoA1j47EmnLjs9Kh4DdpnFR2P+hqSrWzOmbH9qbc2ai0
00FDtojy9nxepvTIQl8s8GnjuLZ/LAk81kl51G7gvXLEe4Ej7HLoGXOoWjbQ
fcyN3wXvMY/Se8eaMmeTjtkkDfaBPnLL6gBLL6OeDbKm8iJtDzljSqqjOv+W
W0yp3o20K+b8mXXV4wzJUlb3obqnIdd3qgxaHm/IbEdtv/nGECfW7Gs02ZSI
k/R1jzGkWLiuK1NSQ/ZmVOxRpJcpdViDcppbpMxOyljClpFSbL7axXbkipSd
J9WnvVzdSFnSS9s/QOb2GKcyt+l0Q8aOUtk3DvLic3Xezb8YcqqkzieqVqTU
76i//Ts2Uj7v0WetL26T5J1YxxB4aSnxUsNFEVL6oMYSFrADY1di7YBmhrSu
omtf0gp8lTrJ5ZCZ/oyPC+2A95JS6Sn+ptxvzLiD/IYMMHXtaXBP2cA83nLb
kDZ7dH9CW5jydrzOoUSMTfbTh+1CwWDxW6l+X9FdDWkbpnO40dNdji/+qbW/
/bvL7QJXEmi/LeESGa1+Wfk29pQlsfcS2kPvhsiSympDNLL4y4li6ief5ZOb
NByleGx6PW/wAY2RHLM1SCZcVtzyuI+fvCqv+quYOHfp3v231gqvMVju56P/
fO0u0spP8+q3G99VLjaMSaDd/DvIwyOaT8x/s4Pkrd4rgc4R5yyHgjX37ImZ
LhL2W22UoY0DZIuj4k/XD01kd7jWgRrw2VumZ1K/slq/O0jr/dEJ7Zm2e4i7
u+rcqpcaIK+mqW//nYG+cmqX+pK5tvKUD6+TJ9DvC4ZIY2LLHlVxr2F8Za14
fL/M07K/rinvu/LuEG3I84r6ji6ivUk35rJIZ5OqT5RX1G1qyNry+l5c0T+q
kvbfbuWSZa5Ch4qQm8yV8RvYKcZFz0njZ6aUcNDn9u9hyrBbOv6N7Lins15G
sn2mzGQdzOLAS+uy6G+zgf88/qDtndPa5b9rOo5TBrtkeKL07rum1M/JnIfg
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
Ix7LijH30P/cyuXVknL/Avo2pn7Mspe9JYaZDLoMx29r1YFi/wkYJ4aYqtpn
YDPq7gwr1wT7FMJ8nhHXjcO6MhArJo5LtdZbhuu14iJTEXdZurLPXItVa2k1
8U92K7cb9XWJa2iex36O5X5WwFqiiA+fYuy+zKeauHbDR7zfbozb3Q/cVYK4
qyDW9IS5YmZjHCfusxuek5a6Yptl22UscFm861KX/++5TYe5nOH41zDmH9aw
6IR93cz6F96gM9F/wKqxMJd7vhX7aTIeMxDrvsizmhRtrjz/c9uCR61S/tb2
lSFdf6rMNdKaEsRadZNwz9vnrPxqAfhN2oHavq+CKfsL6G9dcfc8SH+h/HZD
/KlLKQ++FzBNv/fTVcFjq2n/HJ1NKXZQ6d4xhnwL0+e+dTNk02qV0W1d7VKT
dSdrXzZl7BOdw4giOLfMCRmEe+u1PrxrAzsN5x25Ifjw/Uw6nw74zvoU0nFW
XjDF76b2eb4Ha49QuizunQM7KT+3AXP2G6FzOzfDkIqs/T1hkCH17+vcMow2
ZHBbbXcfa0qBjfrbPO1MmbdGf9upqSlOzJO5+A+eu1znM7CkIffXKf6ZH2NK
hxidw7OgcHm4gzUoL4RJylnqHz4kKEzCMmmu9YkLwiTpYaVvXbdJN9aUPP0n
XKLTqG/2tqHhUvWtjpP9xBDxos9Sk6WGpDiqc5453JDgBko7AceOL6x72Ar7
/3aFrnGPa4QsX6/yfVNjU5rTZr0/q01GJlf565/ZynnC+FPINZM2rI3zDXmx
Vsf//tEm1U7rPM+lMKWCv56frnhf699q/4ltbOLyR8fsMMaQWt31t/FFh8jc
JK66/wawOnPkLj4VLpsKqQ98K1svSebxNAFvZMtfXbr+P7KuOjqqp4fiUqxI
cXd3h25wd3coUApFWijV3X0Piru7u7u7OxQoXry4u9t33+b2/HrO99fmzM4b
n+ROJpM0zmurACwwPXd2cR9+xzM4zJBqO7LJ/A63XXim2KSaErh/git/ngtN
5Wpq1S/57rBJ4rYhiq+GVZM328JVf7UHGGyvxgR/WMdHGhZSP/9dn/aUzY/U
fuxGl+Yy8fAhV57Wm/zklaG+WHfFbSHeKY+60jfdqCN1Fs9x0flmN5Dw8qtc
dJkPJWR6jxS2bt+wz4rlkcSeL13tzPGqhrTzHWfzLW7KhZn55MO5967030c7
StLujH1ZuI1UzaYx06ck7ShTjqqe7e6hnlLXU9s2r0NX6dpT4z3ZZ4bJ3Pmq
8yzTJ1BGeyo2W/HQIT9H6BwFQ25PKKhzHYy9loh7bXUnp0yao2ujTjlDVlXX
PMZbh4Qf0G9nOA3JE0b7/NZOSevQ/OG9nXL2vNImMM6NMbrfIzYYMryBrgH7
HlNq0o+90QFrKZq8AnNZZqaWmTWvIY5vun4qLDGlF33vb0e9q1jv3XqmzHzO
e882kE356LcfWKPNbS2zw3esvfG6bjMHGHKLvmcblTVl5yT9tinOfRlH6rcX
ceY6d0Xzz7F8xtJnQmheyOuGmt+rHbBoEeI30AGFlW71AlixIe1scW5+GqJt
tmzMp9GHxsxxkJW8e30HfLEji9Ifcd784KfllxsD+cW73VHjLSzKvs9AOmMP
jdthijCOwCNgh970fVEKsqtFJDEY5GEqvi9z22ZKf9rUlR8NOfVTy2+/GWfM
VZre8JApXozTdHAmZFwlpTfPNmVCdb4nhWyvR5uxj6DTk94OmdWfMqsi5OMr
+hBLBTm4iT5mb5w35U1uytwI4FLGF8gEOXaA5USinHcsp9N1yDvq4qJuo509
lF5u2ZjxjWfs2FW9gSP6E9dd/2zKcd4zHga+q0v/6l+AF07SVm0C5OZD2vMP
gfw9Qd8Rv4BBilLv4QUMMIT3d7sxnq04noFYG0OJzXZC7t+l3P9sxZsmhukK
zJOUmGc78k/jWqoMHJKOeqqeyJODeZZZeifqi/z+mlKF+rGnwGKTiMeafrXs
DJW+ZGFR6vH+vTYlmjqigsA/7tSb1QEuekq89M7yh0asewXldCR+qwtMso6Y
5Ary/GMb0qH+9NSV7UE5N4nHrHvDWrw39EF/I6jfC/pmxTFU2orROZPlPEOe
78RaAejHAuqLSqHMcWzbCnz7mN8mx7zsoA3bXXx7nt/G1sVVxe8z6j/foe/z
2PeNGNddXYjZgH/68p3Ie7S3NDH2g1vA6tT9VsOcNqTt6AzMw3PaNvzAONl4
1qiNsfpIfDgeYzCeWK4a6l21lhgV/SjL9ZAIfanAO9ZfaGce6uveYS8E91ba
dt8pjy4obywzziF93VVHMX6EIZPmK4+KfmNI/67KT5JCzuZapTJxzgqnnL7K
mNFjHHI3iX77FXxr8nfVadw74ZAPKZRXSyanVKctt1cm4Nss9HNl2XUeoR+w
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
5/kz/jK1pr4ZfLdIZPEPw+YGPnFmaHE5OCqBxv7O3FJuJFQ7rnTxysnadKVd
dNJ1ZSRlt4KKqSa3lILbTqm/iHBPKbzCz0U/m19C3OIm07iWTztK00eqj0qR
vrEsrrpZ9WleAdImWN82NlzdUvYkOa02bPEdkv2Utr/MhXoSsnux3pNm7CVb
3d21L2vrSeqqmv4wTmep9fCFLVdayISeeWX+uDcufHViRE3pMVf1ePeT15Of
/xbYOoPn5u5fTLqnim9rXt0ua/J8sp1JOciVf+Da0jInWy5X/sR3ykkVqWhb
FRd8fXEeCQt65cqzfZeXbPz005Xnat/2Uu25+vn/0CRMAn103b5L4hAn33oM
PW+X9jcVd8WJa5fXvRVjf65mSE7GrJ+Z1y7b4+n8dkrgkD1n9NvgjKFyvJCu
AbdaDnl6RzG2WxqnZGX803OzneK/QM8j3doYsv2SllkqMeQv/QmXLIBzPd/j
7DhvSGr6+U9R0JQLHTT913VDgn9r+tYDhpSZxLcDOYANaG/frbwhfepo+RPA
h//Ql1ehM04JGKD8rcdlnFmmKp1kjCFz1+lavTfZKSXt2s4u4C2FQrT80YkN
+WVXHnUffCmwJeMalDJlJu3x2jY1pAnfSXUtA0zFO/38S0zJSv3eEuCj+S3p
Kxvn93dJKB+zmPKaPgyvYn30oR1d68mmDMzGu06bKcv4XiA9yrfzvjWtuyml
PukYHt1iygP6rd302JTP1CN1wBk9gD75J+wxZSL1k6Vxvi87QekOwEq5aI8a
AdlaNcYXOvJEjqeuD+Xf3hjjL8iUX/ST3xQ46gJtuopAnq+k7qv9WWASvpuw
/FL4Me5SX8xLP87Lh4uQifTD3wByLzP1UZWwz5NQ93IXsvoP33W2u2bKGvoh
CYDsu8b7oAQfrXcT/+k0PlGnYfmjWMM7u0TALz0Yk/QDZOVlvmvIir5eoGz9
g7x1SAdYPuKIIa33drepf/v1Gt9SJ7PgL3AdbbSsuEUVeU93CThlEe/jMqMN
JaP/w2mFiNPe4LvU1KdZ92ttqGezfJNuiHVfOT7GfgxpQ4nf1iPPe+KZFBi3
tLzLs/SiKWL0eGhPZ9prxY6R9A/1dmW9VYA3dlJP9RbfVqYdlBXXshOxq/WW
0857xl+WfowYbCXKL0ud1Q9gpyXEilPQx9Ic89ugB3MtxfY/NgDfCts2COUl
oX7MiqWehP0KRpl+xHJulo0c9U49rRjf1G16o82vqeOy3iDsYx/bYV0EME5i
BdRv4z3jRJR3nnowP5TflOUbVvx66kgvYL3tillv6NNI3sWvBDYcyRhhpTFm
XrQlK4S5TcH7/XVYd6kZI/sy+rqTOD8a432A9m+5bjrkbifFDPd6OGXvbpW/
VVY75MEE6rtKOCTvSOWlt6McsqK35n/X0ZC9z5XPREWHybKnqt9YdNEhGStq
Hited79Uyq8u46ydj2ftJ80NaU8/oiNXI89D5XUDIK9rUl4fBgYbl0zztF5l
yCT6Dt14zJBUjOt0/KohT/iOoNJHQ4oPYoxI7Pvv5NW7wds96DP8BfKPYMzE
7QkMOeZH/c9pQ3wOaHqaYEP+dqbP0gNO6VRF+fMB8PN/dbU9X2sZEjCC5+U8
pnjWoZ3bOrvsbKjyK+5Mp/Scov1a5mWXEW6KN762D5O0s1T2/ZsQJp+CFZsd
WBkgT5eq3XjK5sFyKFRte24tCpIfdvVLED01UNZ80Dumi7/9JX5OcdGPMYfh
qdXnw72hwDYztK6Z0YNEWmrMoInpAqR4kXouuv+SAPkwTusqkjtMfq9QHGUO
dMriT3ynUDdMHtMf/pWyYeALmufd7iDp9lzbc+RrsETUVp+igd3CpMA2ze+B
dbGhneLJyjlCZOtnzdP9pF2eHNDx+ZQbMvSjjn+qdU7xeq1jddPdIWv+qUz3
SOWUdg1Udn8Sf3n4TvVR/yZ6S4/96hO114YyUmRgQVunEZjDEtnly8o7LuyR
19ZWlia4ZutXGfL5WWa0+4orfUGPATLgidreG+dry9qbM1yYJMeM2pLfXel8
EZXFmbqT4q5PNkmfMcxFf83SW3IeVVv6Bf59pFx4dhcdcruyxBvUyfaqlCH3
R2WWKTsiXXX5vikpLUemc31bKqKnlLW7ycMDkDP3i0jpj3Fsqzub4lxdQLL3
/+oZudaQHldyyIpsD13fJmzaW44sVDuxieVLS+Xr2Ww/Iu1y/ck/25buY115
nC9KyrM+Wv7KB4PkYQOd61Vr0eakIbY0dZwys4y7JJi305X/aqoKMu1zNVf+
etNqibev2rPVqhYg6Z/r2qg73intfXQuQt7Zxd9P52JFMuzxWroGOiU0ZPYg
nTsn+EaGXTxPGYYkNHTvvG8bKimrqs5tRpJQyfVE14O5NExGXdI1//2SIWHR
uu9G5TNk4R8t8zHwfwrGLa1+1Sk+C3UP+vYz5GMJYiTwgXvkAwceG/KyAn2m
JTTlJG3YnK1MuZ6Zd3xpDYmkP7R24NkjaBOVycspR9Zr+3+mBNbi+bH9CFN+
vtFvL2EvP5iuYzKrseX3kr50kuA8W0LbmX2iU5r4MeYs+Hc0bbGuZzTk+Ekt
M/EW8I122uadc3B2rk27/bJo52TGNBlryt4EMT4uDFm0QPP3QJu3s81WPJnj
5O1T45hSfHOM3yFTstP37Ebgl3SMAVdiiik5+N4z7LgppxmXMylwyjj66OiC
c/z94kpXRd/t7PvB3pC/jEW1D/Kn93Gle/cypQb9bD+bC2zZUL+VNaZkGqP0
KeCuf5mISYDTCjFO+unnlr9upecDawxurnTsO6ZjNyFz+XbS8qmelPJrLuTv
rpj4Qci/gbY9S5DnMe+MhkLmFyPmLA9McpKYJAm+tcX4R4VsfUvZGg/y9CDf
ey6GfFxG/xuP8e1O3v1lRl0JeA/1E1gjG++bWkJ2X6c9mIH0BIypZN0DBhGH
FAfGKEo9TypgJzdiwq5ozw7eUVo25+VZZhHgiirUX/1D/oxscwpgkuoxdlbA
YiOIx9JYfmhjyvxsyiHquzIAXwVSlzXM+pZ4phN+E1B3VBHlHeeb0FL49gff
JnxE3z+w7/XeWvfaHDfgqAHEUbHfNsaOTbkZ9abgfeJCy68ssVlS5CnB9g+1
7PyJuxZY/seo0xsNbBaP2Ow7xqcBsZ8VA3MAdXcPMT4NqbNyorw3tPFLjvrb
sP0nUY473zNexvx60qfEcpwdevBsEuecKV8yc75QZ0Xi9mPAxT/5DncV+jGA
OsZvKG89672DdbKUOGooxvgK3wX/Rl0/WNc1zP8S3omPxRiO5xuQ6uhTFH3R
pMdc/aQ/5y/L7TK4mMrH3A9DZFVl5ZmfwQ+bkx/OOWhI+mnKEx6ucsqSe8pz
pj5wSLuhtBtp5pAsaVVfNK6sQ97PUfyW7SswTLjyitcZnDLGn7F+2jvFnKA8
0O+JIS/4rqr7IUOcM+kDf5QhpxmbeOAayOsntFEHZjtKew8r1skDxjrZ9duQ
UXybXz7SkJvPtJxTo0wJ+U6bVZyf/jJewJpZhlzhneZay5aM+rSX3QyRv4q1
rBg+k56oLAh1OMU9j7bhxCfIghCta14Xp/xeon2pjjrX/lBc+uhrmFTyVH3C
ku+hEvZR7x/DnjvlzBeWWTRMhkSqjHv5OEBmblJdUO8jQfInueqsTs4dLM4j
TVx0zoiBMn51DZYZIOcSqI5r14YgebRLMdKcsQPkyQT1C3ohp5/8S1/BRWds
4Cf+Z5ReEDxIfg1X/NapeKh4jVY9xuyUoZLtn64BX68wabBL8ZXPcqfMu6h9
P57ZLrVvar8mQebki9KxytEsTCb10/zlkefuNc1zE5jrRVnFY8eThcrjj1r+
Q8iHKL6J6LzFKYsS65jYGzglcUPaGsW3y44A1tUkTCK8tfy2tk5yNKf65lqQ
1Fe8M+SSzB52qVvrnc1/hI/nrRbgEyUKSJM8Xzz3F3VIk4fx5U66GZ4rJtpl
5Ysftqa2cE+/nXZ54f3Hluf3SBdWqdumm5z8pLbxTYCXbw3X+8SrWVqKW3LV
sy3L1FAGJVM/YD672simrFdc9OiizaRB3322rgsNuVo3h7xfct9zZlpTEvrm
lZlzVN9VfGpVGXG7tyv/2RxV5fdCb31rIN5S0Du5y29O26NFxa1APFutIoY0
9swsG19e9hx1pbe8q37MlnxpItvs/X4SmP2ybfvuC64yX93qLi2Tqg/bnkUq
Stef9WwH+xsyJ382sV+/5Zk0C85tB/LKKcdbV/7R7t2k1Dd9j5ApawOpG7jC
RdsGDpb4KXWNTcxklyRXdMx7ljIl/zDdL9WT2mXmeE0/Zzok133d76/WOsQx
h+9KUpvyhPFtN70JkwAPzZ/e7pS02XT9JF3okMtemn+wM0yCSio2+7o4TJ6f
UXrC0TBJ3lH30bVQp6zKoN9W9DbkFt9iX8xgyvx02rYVOw3Zw/hN6esbUm8W
3/JUMGRGQ6VXj8XZqht5F+R8ZB7GV9rkkHgbtT23bjll8k5dh4/Sga8m1vKb
LHLKtD367fY7OPfxnebOrE6pPEJ52g3wmKFVdT1/PWfI9fPanqngXZ/Iu2oU
MKULdX0jrhgylPebg8SUR4zf2hf9ek2fHst6GBLfTfs795chO+ZqvV8rmVKa
MdYPLTLkJOOztwF/+/OQOsMBwP30qZirDOQI9WbTgkzJSV802byR3p3voMOB
Tx7yvhLYLGVJvrOYASxRTuk7XqbMZbyDIeNMmUCbt9yQR5XoZ9XrCrAQbfKt
2M6DaBv/Feu7C99T5wMGC2iq9F3grgfEXYGQ841pC10KGOcZfYslewd5Tf3M
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
ZT4CPZ5lbkd7fGJ0QbF8anVHW9zYLyvOTlWmz7fw0o//X/NzkP6O6cuQ/zJx
kWVrtJpje9iyq6f+wXqHOJX5x4DeQDoMdF/SL9HXpexvSUtXE4Mf0Kdjkf+t
yQCujS3WfiEP74Q2LGKb/ZC+mPLI8jP/kTiwHsqszvFfh3qmEtssxPj0JMbo
CboX5/EU/t/DsVqI/O2Yfwl+PZgeAfoq6Qwov28MPkF6K85vD0ufxj5auDqU
dGydWDl8+5bf+iO9GvMEIP0H23zR0r+xrgWWLxTO9TjkzcJxsPSmI9kXO9p8
jJjqKX5fEafVtXAUy/RFmflZ1w/Ldo5tnm35J2F/ffD7v7bOPNzHqvv/ESqU
Iak80TzJkChC3TKEY2pAoYEmQ4byLfUczvmgPKQQZVZKhEKGTKFSKQoZoiQK
GSIiMg+/9/t3v+7rs6/r9Me5PuvaZ91rrz2tvfZaa699CTgd9O0PfHuO24IO
1lTlXSm3LSjFHOggXo6hV1ys9XQ18ZzPCz83/Nv/eRc5lidqnX2GrJgiXhoy
f54UzSuh2U7f3cZ8+ER8baPt56t8OrKohOb739xHdgzhniSG0DYo5I9lxm5o
zhKdb6BzmXjrzVj4baxj6PbFnBOPNVXFMX7MtzL28yJbXpTc+4AcR6FPv4Xw
h4D/qubjcOS234k4w5pyf/SC/9K2JyOfP1SdnbDn237bkHVaTf3fkvlzjsZr
BWMX5lEZp2/r8u1m1VMUGd5Q4/IC4zLd5zN04J/V329iiyuhvWAy59+Vat/6
XjHsNytq8S7GUdHsBc05zgWNTL5N4/gj+9eHP2u9k694psalF/pSffXHLZy7
w7tIrwRvi0xX+9qx3m3fHUC9m8XbP9xhsb++H2PXXDgnOAv4zdwq+GveFZ0b
oJNL8+1j/CwDO6aidb1j+9jFGeJ/L37Ym7KjvhfHutCa57Kj2k1j3azWuuwo
H3kPxvyQFe0dG9umWv2SFT21OIY/f71H1O4GYtLe7RGV7BrDgwpkRnV5L/vk
pVnR87zf+uP+HtHEb2Idb3KvrKj77bGN7rc9WdGLeeJ7EBuqZ0WlCsc6T8fS
PaJKnWMdr8j6rKj6+3G9e9tnR+Wvjfm85IFUVPw67glekxW9MzGuq/x5mVGu
qjEPD57VPbrkqVhnW9MhM9r3a3yX4e1rM6Mt5D/J1+q/0eP1Y11uUf+s6GPe
Z8yQfr2ffA6tnFd5fFzveM2XmcmdmjtTUYEFcX++It1q2/y43LFDBZkn3bTW
zkUOZGrcqzPujoV4D7uB46NvQSdpoTVVhTXl919GJD4jla1F945Ery/2mUdF
Jz9r/A6VpyjvqLVSmXW0XeX3Y6vfJB7+QH9zjoLf2TuKaU1didzoKZojoDlK
sqHS2PRe1hE5uVT4pdEtx2tuLuFceVJ1zU/8AqprM+2dKvxZnPXaCKcE8m26
cK6Hn82i3QtZsVp9+CDnlAbqnyz6Z7R4O5957ljsicj/9ywzOa8tF52K0Lle
POdFhkxVe+9B3u6SvDqB3DtHMr4qepFjsa5FtlhPqIZMu1E0Lkdenafy23ek
97jn/8W28KPqyssZ+U79vzvfPiD4d+CKghsAv2IdjPEK33MM/YOTBP/KXNop
+ADlXwhuArzSdyGB54lON/ZT50z4gH3T+RDOZtxXCGcNOB8I501wfCfxSuCJ
wikLTmijC9+F/FU4VyKfi+v3K/TJ6084j3MMXy78geC/apsebblI43gedq2v
9JuXOX9MddaDjvOqtqJ8uOrayTwcKZyJ7H2m8St9fptwatOHbVXXN+zdt6j8
Vsr3qt5p6GMF9e0evm2o/ivKHPB9zFW0a6PoLPyXPv9S9OYzJ8MYv1Gi2SR5
Q1Nww8RnKpx2tL2f4KbAoU3ycdXbgrn9kuDfgR3/9jw4q0TzdvrkLZXnYoys
v10IbJvhMPr2pH6Pgz9Z9LZS72b3D22ZLPx+6EXF9DsT/edrwbOhuUT9MZd1
1FjfPkh7fRf1AnjbJ7gN/ebzwmd8+6PoN6LPf7COncw9lQ2g3kKC9ydnB8HN
4d8+0wfA/1P15j2SlpMjadcWzZcF+C5v17y7lViRHoIfmJiTh5Oidx9zbLvo
DIXOPWpHCXTsoo7lS+a8cBowjhni8X3m9kT1ZT3kj89WGzhb9VL5eGTdO4LL
rE3L0uRc8LbqvAmdoYzK/8P8nCHeCiGjDjr2j/ZeIfxz2fcPaRxyo8PMEk4R
xrGOaIxEttyren9kX7B99GN4q+RzxL/knCmtObsdG6Bt4edzHq+k9t5Ne88V
b5WRgWdEpyDw18L5hLlx9UbNGfx9b4u3mcy30Gc0Uf3ZjzXiu7rP45dZo/1n
P3Yz51heRr2zVM8U7F1PqN6ujFEz31NI9j7BGfT5OsEXsB9lOxYCWdFW7RpB
uxwbO5X+PyXeLkZPG6O+j9j7JginATiv2BaHf7mp+L+K/dpxtfdg/yyu/Wc6
7/O2E89PojPvm6r1wr2DbiskP4kF2rgjOyrEWwzX3KQ9kTxUL0/Qmn0xxl+Q
mR2t6BTrIX1LZEdFV8a60+JZ2dEdT8Q62w01sqJ2pWI96p8GWdGT98bwgPpZ
Ua66MTypmvaIj2L6mw9lR6Oy4nrblUlFYzrF5eWnZkc/kdth6m3S4cmL/nAb
nYnui/Wu3Mezov53xTws25kdFasT02kyTnvl0+QrKJYVVWsd62bOH7zlxljn
/OyCrGhrvbj88FWpaCV3H6b90yMa/EusKxbflhWlNse6X80q2dFrjeNvFxaX
blwI/OGpqMIdxO+9oX4rE8MnNF6fYZuaKPhexs7vuWzFR3aT7y4xb2v5nMVa
GKZxnMI4OsdmMcbXvpsD6EWr/b4J8/xRrbkn2C8sn15DZ3hU9ZYknryO5nZd
5vY2rfFbkr1SdfVhvtl/tJnz0WGVNwB+RmvnL2RsAfGfC/7reL/7K6f8eUht
aci68L383si0Ej47cL/sEfH8CDw7r+Ya+iclnCnz0t/24dv7tUaHcp6y3L15
Q1r2Dgengtq+K5EDKi9EeXfHwyfrTm0vgdyz7rYBmWA7VTfkcAfHJ8N/6O9L
Cb88+OUEr0zeZBScj/5x/oGnkIGhT/Bs8fMldB6R7K/JflpKOJvBCWO/r1X5
ScpHC78Be9Mvjgti71iu35LAn+j/2exNd6mu7xmX8YK7I9/yCee55F6kyl+l
fy5XG/fQ9peFM4z+8dnhHNpr+8aftMu2iOcTPgVPDO7uPUz5Zvczc6yk6qoI
P3VU9vqenO11DHkR6pqlb1vTlkGCl8DPvcJpD35Plb9E+WjRb0Ybn/a9S+b/
1eqbOuzdg/VtD+iH9xAfEryb/W6/497pz09F+yBnXussn7CW31H5c5Rb95vM
vLpY7fo22ced14LYts0qv5Zxn6+6Mqm3q/iawLq+RXX2gc8dwq8NfhPhz4C3
Zh5r5kx1wTPBD+P5/1LZp4xptspvor0Zwv8T/En6HUhffSqcO/m2gnBeAuca
wRnA1tO2QOcPwUfBHyacW5mTjfQ7OfHDCr6TcQnfPsjSt9dDJ9QV/0903qVd
oX71hMofOpWe/42o6379LqauhoLfA7at+Efo/yB4bHL/VGVV2Yt9h7QqMRj2
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
4rZxgdNddLoke4TKr6MPFwiuwLefSP7/wL7jt3UeTHIRqKwvPPyl8gtZ+wWF
vwWerWNsQ8cYKrgidOoG5Y0F52KP81s5nSj/znYq6npK310EnwsE96be3wVX
oi77Ze5lD82n36WUH7d8S+4gBDaNS1T+DP1wi/UZ4PBs217wKuA/RHMM9C/W
b2H4tF7XCxm1wbFq7CP2Gy7h2zmCL/uX+CLHpzUM7Cpn0651Kn8X/NDXs9xn
E3DaCWcFdGqLnzXwY71oH/j3CJ7F3nFYOOvgf4vKqrC/hPlgQ3vCFH1bk7qG
CWcvdgyfzZ9hPV4nnNNHcvJmu+ZN8FNZ5fWC89GCxH4rnBTzYYp1ntPpuZ0X
Or4Pepq58bLgP4Avt/0K+iWEvwIeWqu8MTgr9JuiDycI52po2nfchjYe9hrh
2zDm3/a03tAPc+r2EPwVOFcJrgWO511Byq1nPpHYi1TekvKU1xFwK+FsA8fn
lE8p972GD4Nxb09f/ST4DPw75nEQ9W70/WLGoqhwJtGWT1Ven/ILVT6Vcucq
+YxxX6fyg4kdNYgDdD7bXeCH77//ovIiJ3KuC6/pyrSloL5rzL5wwPMW/P94
bkDzWevqfLve9mfo91ebCiLfrOefoPwn4X6H7L1ZcnEqcSxHhb8jyWun+scm
Z1jhr8Yn8rDqP0q7HMfxMvvFrY5bww7WV3V2QyZ3Ev4dzPMw5nZ7YNd17OL9
tMtvKxxBtmfaB/Fnuo0HaaP9DA3xV/pd2gLsKfcI50lw+jqvMraCpwSvQ9eq
o321K3cNwhjOfrZP0t5pmsvt0Jd6if5f6ELee9ez9+0VD2vh4WHx/BA8+7ww
MznDik5R9GSfq+bB5zaVN6K8pnB70Z/PCX6I9oYxpZ6D+2nLNO3n+4jtWSqd
dFj1GJ6pvbE8eZmG90lFef6K9ZAB9XQG3xnrKov1XR7eyaopPapKF3SnWano
nzkxXKC7ZNHi+NvVjbSPnOYtCelmxz6M4ZG9U1Fxcras0d4+ifcali7S+G7J
mYOu+UCd2Ytxv1LtuLENMnao9C7uAqyblR0NxmeaKZ737ojr6r8xO7qxcKyD
1bpA/bOHHPI11CdLYpzimoMlifM8r5j6Nk9cviylsVsX81n9tVS0qAA5UTXO
T+DL/u1b7Y8lYrip+vkV5ol9OBOIGXtdY3EzetQSzZmnkAPNBPdk/oR+RsuA
spzFvtCYTk38kpqf7zM/n1VdeRlT559sg1zymetz9k37moZja/Ld+b9YO5O9
RyNnylkOIys2ieZP2OXOUb294cG+ksuRh75T9X5yd0k448GppLpacu7Yqnqc
H9BwWdG/AvpntF774K88Jn4PM5/zqN5yyKjJonPP2rTcS/J4t5BcyZ3k8hLv
DdBvHU/SDNkb5vFeLX4HHU7vR8uP5JTztgHUol1tHduf+I/cP+DUFTzgaLqf
W9PPZfVtF+r1WbgN+l55wb0SX6FoL2dfu1X4Q8B/VXRmQ8d+n8rss2HMTBjr
Zf/UjCSeSvAZcI5Y30v8zoI/oY1LhVscORz6HDcJ52Lwa4rOcmiG8dLe4zoB
h7Hie4T7ETQdD/8hOL+ovCPlzof/J/iOzR5EXXkFd4W3X90njMul4uESeAjj
msIYyzBeyLpEA8bL/sqX4cF2wurUZV9PVcqN2zDxnwa2yhGiV5d97aTKG8Db
UdH/DX2spOhtYW73EM7V/+Ts58ts5wH2nYnDzMnF+nZScI/gjX+ZM2EM2Hbh
VEn2L8H9j6XnySzgML79Uf0eYk5a56kBzfsFF4Vm+Ia49/rv4fN/tm0m/Agu
BZ1V+u5V+udh2/GOpufAj9AJ7R7hWaCK6h0HD47533g8LTcSW1koo66w7RT8
z1Q+DPyNwv0k8PUPP5LGeRMcx+ndezhnf5YXnAm81n11Js1zZ3i2r/MLYL/5
NQmZE75P2tVnikSnFb07WMu369t7+PaAypcFsYuJnda23wy+DW3y1o1vgzef
Naon97P07epELql8COWtVM+RzfSz45Goy7a+ysjM8pov5dj3a+q7mtwRG6my
dRPTsm4HPA9xnCr6ySS1qQ32n5/Ur3PYj+z7Lcc5PY/Kr0IfWy65PQlf3gyt
m9LYiCqLt/foH7/tdRm6h+8BVaT/N/qeJvh+G6sRvsXRoj+T9WL7w2rsD5bH
ZeiHu0SzJ23s4Ny5+AStt69NdH7J7I4L0uu6Huva+ZIXolO1E72d9M8g9ff/
2Ddni35X1un5wj8b+8BZ6u/e2ABDe+k88bCPPd35iHqhX/ktuYHgnxDN99BL
y6k/KzGOO0SjI/aEx8X7XNrofDZ/s1c6NqE9/Z9b/VGe9++qfZOKpuWP4XpP
paL5vC/j/H/jsXM+pn1venfaVVu6H+84X9EvFR0nV+dA8fUWdwYrP5KKNtWO
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
L+m6Ah9l8o5nS8Fb4cd+9j7Qse99YuLXtv0Q2P7ZGvA2XvCzwOHfLpWPZCw2
qc4l9GFDwU2ZD8PVjjrMSdvYTiR2S/XZEfwU4VsGjre8DR7mqewHvvVZpkmS
T+NU+q6x9eQZwXwrRLnteDMYF/uFS1JvmK9suuqdSLsOuS7G1/a9/HwbvstQ
zedE2mUdMAP4Ta2Do+zFjSTXXyIX0L22W1JvmKfXvr8x6DaOFyiF/u83xZrS
J7ZNHWYf8T7THD9XWdG7Bd3J91vHQf9a267pw/Bu0WTV9SH7hXMGHmA+eJ6+
h67rWOJ57AWPuu85gzhGZhBtn6I+zoUNsJHa+wV78Sn1ZW3ySOxX/Uvow++t
H7LPZujbltjWDqr8f+x3PtttBn+rfu/nDnVLlVdL3sU4nc6P9Jx4n4uP0na8
yozjxRqHfsTjhfH89pO8gL1xWSDfLhV8NX3+udq6El/edtE5G71ujtp3pDJy
Xrzf/0gMF3xbe+uDsU7ST3pOZvMYzhRcA/gJ1VMBH1PR2amoEu9bTZuXipZ/
F8P7ntV5YRT3E8fo3M371CcXq58P4UPUmOwkhq2v5sJN6JPnzXbOkxjnKZWP
wR5bTPrhIt6c6lxBPL/UI8dcjSqlop6D4vISwyTreIfIucM3cY4ooH1+x8m4
fLd4XrU8hltO9/vaMdy+dyq6e0vMf3m1tz66wTzpIBvR38Lc1/00P08kNgfN
t/HMN78dXCe4y5PEmf+itfAt9rQzGv+FzJmBHkdkgmMpqyV5rb1ekdXTXQ9r
rb71N3hwfMcX2IonaW68mbwxZ1kHb8MFV0MmfKh5exK9aL/ol4K+9/rrE9+H
1uYH5LexTjIx8VXp/5cz5/0W3y3o8873eD1r8Li+7Yw+5rswGbS9sfj8D3w2
0Vxezlrzvr818UuK5ufElPpM2YR9Lbx/51iM8azZ8Gwe3nWyX+5x+vCI/XeJ
nUrlTSkPczg4z3z/P3PWtSmwSzg+/M/EHuV4D8bLOs8C+A/35XNFvwz07ePY
lNgNBHdnLMI9zr6nFnwbxsA7pqUp/NhHUBJ5GL7FM874yIeLVfY5dMJYoHDv
sL/sB/hxnoEM6IT340I5bzvMFGj6/fFt9FW4f0Wi83liKxC8ANg6YJIDwTnD
RzLfHNd2PWtku/uBMbrT+gD1hjqS/T4dEz4Fjzudcw9y7tDuR3K2JbyXd8Zr
Vn//D/4Q7sE=
   "], {{-0.0026600985221674877`, -31.25}, {1.0826600985221675`, 8031.25}}, {
   0, 1}],
  AspectRatio->NCache[
    Rational[1, 3], 0.3333333333333333],
  AxesLabel->None,
  Frame->Automatic,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{{{0., 
       FormBox["0", TraditionalForm]}, {1000., 
       FormBox["1000", TraditionalForm]}, {2000., 
       FormBox["2000", TraditionalForm]}, {3000., 
       FormBox["3000", TraditionalForm]}, {4000., 
       FormBox["4000", TraditionalForm]}, {5000., 
       FormBox["5000", TraditionalForm]}}, None}, {{{0., 
       FormBox["0", TraditionalForm]}, {0.25, 
       FormBox["0.25`", TraditionalForm]}, {0.5, 
       FormBox["0.5`", TraditionalForm]}, {0.75, 
       FormBox["0.75`", TraditionalForm]}, {1., 
       FormBox["1", TraditionalForm]}, {1.25, 
       FormBox["1.25`", TraditionalForm]}}, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Automatic,
  Method->{
   "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{0., 1.08}, {0., 5000}},
  PlotRangeClipping->Automatic,
  Ticks->Automatic]], "Output",
 CellChangeTimes->{3.960241923815126*^9, 3.9602818223102293`*^9, 
  3.960284788642314*^9, 3.960285400991205*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"00d7f988-a769-4035-9a34-23fb9ae07d43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ss", "=", 
  RowBox[{"SpectrogramArray", "[", "audioSpanish", "]"}]}]], "Input",
 CellChangeTimes->{{3.96024192427826*^9, 3.960241930185914*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"8e4e158f-327f-4c23-959a-a95af412f926"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             RowBox[{
               RowBox[{"0.0003662109375`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
             RowBox[{
               RowBox[{"0.0002633865620832231`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.00002695611144869949`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.00005597743738265917`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.00020235654060410022`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.0001645607449366136`"}], "+", 
               RowBox[{"0.00018642980492777466`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.00026081110638380477`"}], "-", 
               RowBox[{"0.0003908686650826404`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.000684080434498781`"}], "-", 
               RowBox[{"0.0002087564972096208`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.00029284397496269704`"}], "-", 
               RowBox[{"0.00037707777805757596`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0008171666344774523`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.00049678514603384`", " ", "\[ImaginaryI]"}]}], ",", 
             
             RowBox[{
               RowBox[{"0.00013026193374666295`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.0003112770528716094`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             TemplateBox[{"239"}, "OutputSizeLimit`Skeleton"], ",", 
             RowBox[{
               RowBox[{"0.00013026193374666295`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.0003112770528716094`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0008171666344774523`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.00049678514603384`", " ", "\[ImaginaryI]"}]}], ",", 
             
             RowBox[{
               RowBox[{"-", "0.00029284397496269704`"}], "+", 
               RowBox[{"0.00037707777805757596`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.000684080434498781`"}], "+", 
               RowBox[{"0.0002087564972096208`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.00026081110638380477`"}], "+", 
               RowBox[{"0.0003908686650826404`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.0001645607449366136`"}], "-", 
               RowBox[{"0.00018642980492777466`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.00005597743738265917`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.00020235654060410022`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0002633865620832231`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.00002695611144869949`", " ", "\[ImaginaryI]"}]}]}], 
           "}"}], ",", 
         RowBox[{"{", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], ",", 
         TemplateBox[{"197"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{"{", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], ",", 
         RowBox[{"{", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}]}], "}"}], 
     Short[#, 8]& ], "line" -> 96, "sessionID" -> 26404238865306352439, 
   "byteCount" -> 823504, "size" -> 8, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.960241930736801*^9, 3.96024222392523*^9, 
  3.96028182282654*^9, 3.960285401467634*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"763e8bc1-8073-433b-b0a1-7c8a7a44eb87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sf", "=", 
  RowBox[{"SpectrogramArray", "[", "audioFrench", "]"}]}]], "Input",
 CellChangeTimes->{{3.960241930908038*^9, 3.960241936193334*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"d09c2d59-4e71-429d-9078-e477fae2a0ed"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             RowBox[{
               RowBox[{"0.000701904296875`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.`", " ", "\[ImaginaryI]"}]}], ",", 
             RowBox[{
               RowBox[{"-", "0.0004889724095829384`"}], "-", 
               RowBox[{"0.00024297728487588`", " ", "\[ImaginaryI]"}]}], ",", 
             
             RowBox[{
               RowBox[{"-", "0.00014271094913676364`"}], "-", 
               RowBox[{"0.0003733596849431871`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0006039784707870268`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.00013096570610055983`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.00078125237640245`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.00024224703422477206`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0001207933285817175`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.00017698695014363615`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.000014180870724917566`"}], "-", 
               RowBox[{"0.000010300862107479893`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.00024524390107550547`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.0004744729133113865`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.00004979479778899549`"}], "+", 
               RowBox[{"0.0006449224449850539`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             TemplateBox[{"239"}, "OutputSizeLimit`Skeleton"], ",", 
             RowBox[{
               RowBox[{"-", "0.00004979479778899549`"}], "-", 
               RowBox[{"0.0006449224449850539`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.00024524390107550547`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.0004744729133113865`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.000014180870724917566`"}], "+", 
               RowBox[{"0.000010300862107479893`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0001207933285817175`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.00017698695014363615`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.00078125237640245`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.00024224703422477206`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"0.0006039784707870268`", "\[VeryThinSpace]"}], "-", 
               RowBox[{"0.00013096570610055983`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.00014271094913676364`"}], "+", 
               RowBox[{"0.0003733596849431871`", " ", "\[ImaginaryI]"}]}], 
             ",", 
             RowBox[{
               RowBox[{"-", "0.0004889724095829384`"}], "+", 
               RowBox[{"0.00024297728487588`", " ", "\[ImaginaryI]"}]}]}], 
           "}"}], ",", 
         RowBox[{"{", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], ",", 
         TemplateBox[{"200"}, "OutputSizeLimit`Skeleton"], ",", 
         RowBox[{"{", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}], ",", 
         RowBox[{"{", 
           TemplateBox[{"1"}, "OutputSizeLimit`Skeleton"], "}"}]}], "}"}], 
     Short[#, 8]& ], "line" -> 97, "sessionID" -> 26404238865306352439, 
   "byteCount" -> 835792, "size" -> 8, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{3.96028248024597*^9, 3.960285401864682*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"f0095852-a8c0-4417-8bab-5f310f1769a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetModel", "[", "\"\<Whisper-V1 Multilingual Turbo\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.96028383744044*^9, 3.960283837440486*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"924541de-f17b-4985-9472-50b096685d3d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {
                  ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
                   Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                   ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], 
                 GridBox[{{
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox["\"audio stft\"", "SummaryItem"], 
                    "SummaryItem"]}, {
                    TagBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], "SummaryItem"], 
                    TagBox[
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {
                  ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    4 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], ImagePadding -> {{0, 1}, {1, 0}}, 
                   Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                   ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], 
                 GridBox[{{
                    TagBox[
                    
                    DynamicModuleBox[{
                    NeuralNetworks`Private`NetGraph`selection = None}, 
                    GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    
                    Offset[{0, -9}, {-20.13953488434406, 
                    20.813954028631997`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"logMelSpe..\"", "\"logMelSpectrogram\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "logMelSpectrogram", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-19.13953488434406, 
                    20.8139540018371}], 
                    
                    Offset[{0, -20.5}, {-19.13953488434406, 
                    20.8139540018371}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"+\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-13.139534884344059`, 
                    20.81395384106772}], 
                    
                    Offset[{0, -20.5}, {-13.139534884344059`, 
                    20.81395384106772}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-12.139534884344059`, 
                    20.81395381427282}], 
                    
                    Offset[{0, -20.5}, {-12.139534884344059`, 
                    20.81395381427282}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-11.139534884344062`, 
                    20.813953787477924`}], 
                    
                    Offset[{0, -20.5}, {-11.139534884344062`, 
                    20.813953787477924`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att10\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-3.139534884344066, 
                    20.813953573118745`}], 
                    
                    Offset[{0, -20.5}, {-3.139534884344066, 
                    20.813953573118745`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att11\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-2.139534884344066, 
                    20.813953546323848`}], 
                    
                    Offset[{0, -20.5}, {-2.139534884344066, 
                    20.813953546323848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att12\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-1.1395348843440658`, 
                    20.81395351952895}], 
                    
                    Offset[{0, -20.5}, {-1.1395348843440658`, 
                    20.81395351952895}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att13\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-0.1395348843440658, 
                    20.813953492734054`}], 
                    
                    Offset[{0, -20.5}, {-0.1395348843440658, 
                    20.813953492734054`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att14\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {0.8604651156559342, 
                    20.813953465939157`}], 
                    
                    Offset[{0, -20.5}, {0.8604651156559342, 
                    20.813953465939157`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att15\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {1.8604651156559342`, 
                    20.81395343914426}], 
                    
                    Offset[{0, -20.5}, {1.8604651156559342`, 
                    20.81395343914426}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att16\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {2.860465115655934, 
                    20.813953412349363`}], 
                    
                    Offset[{0, -20.5}, {2.860465115655934, 
                    20.813953412349363`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att17\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {3.860465115655934, 
                    20.813953385554466`}], 
                    
                    Offset[{0, -20.5}, {3.860465115655934, 
                    20.813953385554466`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att18\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {4.860465115655932, 
                    20.81395335875957}], 
                    
                    Offset[{0, -20.5}, {4.860465115655932, 
                    20.81395335875957}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att19\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {5.860465115655932, 
                    20.813953331964672`}], 
                    
                    Offset[{0, -20.5}, {5.860465115655932, 
                    20.813953331964672`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att20\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {6.860465115655932, 
                    20.813953305169775`}], 
                    
                    Offset[{0, -20.5}, {6.860465115655932, 
                    20.813953305169775`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att3\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-10.139534884344062`, 
                    20.813953760683027`}], 
                    
                    Offset[{0, -20.5}, {-10.139534884344062`, 
                    20.813953760683027`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att21\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {7.860465115655931, 
                    20.81395327837488}], 
                    
                    Offset[{0, -20.5}, {7.860465115655931, 
                    20.81395327837488}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att22\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {8.86046511565593, 20.81395325157998}], 
                    
                    Offset[{0, -20.5}, {8.86046511565593, 
                    20.81395325157998}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att23\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {9.86046511565593, 
                    20.813953224785084`}], 
                    
                    Offset[{0, -20.5}, {9.86046511565593, 
                    20.813953224785084`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att24\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {10.86046511565593, 
                    20.813953197990188`}], 
                    
                    Offset[{0, -20.5}, {10.86046511565593, 
                    20.813953197990188`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att25\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {11.86046511565593, 
                    20.81395317119529}], 
                    
                    Offset[{0, -20.5}, {11.86046511565593, 
                    20.81395317119529}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att26\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {12.86046511565593, 
                    20.813953144400394`}], 
                    
                    Offset[{0, -20.5}, {12.86046511565593, 
                    20.813953144400394`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att27\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {13.86046511565593, 
                    20.813953117605497`}], 
                    
                    Offset[{0, -20.5}, {13.86046511565593, 
                    20.813953117605497`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att28\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {14.860465115655929`, 
                    20.8139530908106}], 
                    
                    Offset[{0, -20.5}, {14.860465115655929`, 
                    20.8139530908106}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att29\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {15.860465115655929`, 
                    20.813953064015703`}], 
                    
                    Offset[{0, -20.5}, {15.860465115655929`, 
                    20.813953064015703`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att30\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {16.860465115655927`, 
                    20.813953037220806`}], 
                    
                    Offset[{0, -20.5}, {16.860465115655927`, 
                    20.813953037220806`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att4\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-9.139534884344062, 
                    20.81395373388813}], 
                    
                    Offset[{0, -20.5}, {-9.139534884344062, 
                    20.81395373388813}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att31\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {17.860465115655927`, 
                    20.81395301042591}], 
                    
                    Offset[{0, -20.5}, {17.860465115655927`, 
                    20.81395301042591}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att32\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {18.860465115655927`, 
                    20.81395298363101}], 
                    
                    Offset[{0, -20.5}, {18.860465115655927`, 
                    20.81395298363101}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"norm\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {19.860465115655927`, 
                    20.813952956836115`}], 
                    
                    Offset[{0, -20.5}, {19.860465115655927`, 
                    20.813952956836115`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att5\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-8.139534884344062, 
                    20.81395370709323}], 
                    
                    Offset[{0, -20.5}, {-8.139534884344062, 
                    20.81395370709323}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att6\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-7.139534884344062, 
                    20.813953680298333`}], 
                    
                    Offset[{0, -20.5}, {-7.139534884344062, 
                    20.813953680298333`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att7\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-6.139534884344062, 
                    20.813953653503436`}], 
                    
                    Offset[{0, -20.5}, {-6.139534884344062, 
                    20.813953653503436`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att8\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-5.139534884344066, 
                    20.81395362670854}], 
                    
                    Offset[{0, -20.5}, {-5.139534884344066, 
                    20.81395362670854}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"att9\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-4.139534884344066, 
                    20.813953599913642`}], 
                    
                    Offset[{0, -20.5}, {-4.139534884344066, 
                    20.813953599913642`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"conv1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-18.13953488434406, 
                    20.813953975042203`}], 
                    
                    Offset[{0, -20.5}, {-18.13953488434406, 
                    20.813953975042203`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"gelu1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-17.13953488434406, 
                    20.813953948247306`}], 
                    
                    Offset[{0, -20.5}, {-17.13953488434406, 
                    20.813953948247306`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"conv2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-16.13953488434406, 
                    20.81395392145241}], 
                    
                    Offset[{0, -20.5}, {-16.13953488434406, 
                    20.81395392145241}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"gelu2\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-15.139534884344059`, 
                    20.813953894657512`}], 
                    
                    Offset[{0, -20.5}, {-15.139534884344059`, 
                    20.813953894657512`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"transpose\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-14.139534884344059`, 
                    20.813953867862615`}], 
                    
                    Offset[{0, -20.5}, {-14.139534884344059`, 
                    20.813953867862615`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -9}, {20.860465115655927`, 
                    20.813952930041218`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"positiona..\"", "\"positional_embedding\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "positional_embedding", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-41, 2]}, {-14.139534857549162`, 
                    21.813953867862615`}], 
                    
                    Offset[{0, -20.5}, {-14.139534857549162`, 
                    21.813953867862615`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3000\"", 
                    "\"401\"", "\"2\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-19.58953488434406, 
                    20.813954013894804`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-12.589534884344058`, 
                    20.813953826330525`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.143591757430847*^-7, 
                    5.4999999999999964`}, {-11.589534884344062`, 
                    20.813953799535625`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965176*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-2.589534884344066, 
                    20.813953558381552`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-1.5895348843440658`, 
                    20.813953531586655`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-0.5895348843440658, 
                    20.81395350479176}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    0.41046511565593424`, 20.81395347799686}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    1.4104651156559342`, 20.81395345120196}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    2.410465115655934, 20.813953424407067`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    3.410465115655934, 20.81395339761217}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308432`*^-7, 5.4999999999999964`}, {
                    4.410465115655933, 20.813953370817273`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395589651695`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    5.410465115655933, 20.813953344022373`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    6.410465115655932, 20.81395331722748}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-10.589534884344062`, 
                    20.81395377274073}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308432`*^-7, 5.4999999999999964`}, {
                    7.410465115655931, 20.813953290432583`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395589651695`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    8.410465115655931, 20.813953263637686`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    9.410465115655931, 20.81395323684279}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    10.410465115655931`, 20.81395321004789}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    11.410465115655931`, 20.81395318325299}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    12.410465115655931`, 20.813953156458098`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    13.410465115655931`, 20.8139531296632}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308432`*^-7, 5.4999999999999964`}, {
                    14.410465115655931`, 20.813953102868304`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395589651695`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    15.410465115655928`, 20.813953076073403`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308432`*^-7, 5.4999999999999964`}, {
                    16.410465115655928`, 20.81395304927851}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.8974395589651695`*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-9.589534884344062, 
                    20.813953745945835`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    17.410465115655928`, 20.813953022483613`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    18.410465115655928`, 20.813952995688716`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    19.410465115655924`, 20.81395296889382}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435920416479332`*^-7, 
                    5.4999999999999964`}, {-8.589534884344062, 
                    20.813953719150934`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897440075723515*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-7.5895348843440615`, 
                    20.813953692356037`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-6.589534884344062, 
                    20.81395366556114}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.143591757430847*^-7, 
                    5.4999999999999964`}, {-5.589534884344064, 
                    20.813953638766243`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965176*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-4.589534884344065, 
                    20.813953611971343`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-3.589534884344066, 
                    20.81395358517645}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"3000\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-17.589534884344058`, 
                    20.813953960305007`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"1500\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-15.589534884344058`, 
                    20.813953906715216`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"3000\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-16.589534884344058`, 
                    20.813953933510113`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"1500\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-14.589534884344058`, 
                    20.81395387992032}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"3000\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-18.589534884344058`, 
                    20.813953987099907`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 5.4999999999999964`}, {
                    20.410465115655928`, 20.813952942098922`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{4.532230661050465, 
                    3.1159084124913012`}, {-13.589534872286354`, 
                    21.26395385312542}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.5665288022711457, -0.8240419383728119}], 
                    InsetBox[
                    FormBox[
                    StyleBox[
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1500\"", 
                    "\"1280\""}, "RowWithSeparators"], 
                    RGBColor[
                    0.5615686274509804, 0.6211764705882353, 
                    0.6305882352941177], StripOnInput -> False], 
                    TraditionalForm], 
                    
                    Offset[{2.1435917574308392`*^-7, 
                    5.4999999999999964`}, {-13.589534884344058`, 
                    20.813953853125422`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999993, -3.897439558965162*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-20.13953488434406, 
                    20.813954028631997`}, {-19.13953488434406, 
                    20.8139540018371}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3000\[Times]401\[Times]2\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3000\[Times]401\[Times]2\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.139534884344059`, 
                    20.81395384106772}, {-12.139534884344059`, 
                    20.81395381427282}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-12.139534884344059`, 
                    20.81395381427282}, {-11.139534884344062`, 
                    20.813953787477924`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.139534884344066, 
                    20.813953573118745`}, {-2.139534884344066, 
                    20.813953546323848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.139534884344066, 
                    20.813953546323848`}, {-1.1395348843440658`, 
                    20.81395351952895}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.1395348843440658`, 
                    20.81395351952895}, {-0.1395348843440658, 
                    20.813953492734054`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.1395348843440658, 20.813953492734054`}, {
                    0.8604651156559342, 20.813953465939157`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{0.8604651156559342, 20.813953465939157`}, {
                    1.8604651156559342`, 20.81395343914426}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{1.8604651156559342`, 20.81395343914426}, {
                    2.860465115655934, 20.813953412349363`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{2.860465115655934, 20.813953412349363`}, {
                    3.860465115655934, 20.813953385554466`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{3.860465115655934, 20.813953385554466`}, {
                    4.860465115655932, 20.81395335875957}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{4.860465115655932, 20.81395335875957}, {
                    5.860465115655932, 20.813953331964672`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{5.860465115655932, 20.813953331964672`}, {
                    6.860465115655932, 20.813953305169775`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-11.139534884344062`, 
                    20.813953787477924`}, {-10.139534884344062`, 
                    20.813953760683027`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{6.860465115655932, 20.813953305169775`}, {
                    7.860465115655931, 20.81395327837488}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{7.860465115655931, 20.81395327837488}, {
                    8.86046511565593, 20.81395325157998}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{8.86046511565593, 20.81395325157998}, {
                    9.86046511565593, 20.813953224785084`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{9.86046511565593, 20.813953224785084`}, {
                    10.86046511565593, 20.813953197990188`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{10.86046511565593, 20.813953197990188`}, {
                    11.86046511565593, 20.81395317119529}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{11.86046511565593, 20.81395317119529}, {
                    12.86046511565593, 20.813953144400394`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{12.86046511565593, 20.813953144400394`}, {
                    13.86046511565593, 20.813953117605497`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{13.86046511565593, 20.813953117605497`}, {
                    14.860465115655929`, 20.8139530908106}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{14.860465115655929`, 20.8139530908106}, {
                    15.860465115655929`, 20.813953064015703`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{15.860465115655929`, 20.813953064015703`}, {
                    16.860465115655927`, 20.813953037220806`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.139534884344062`, 
                    20.813953760683027`}, {-9.139534884344062, 
                    20.81395373388813}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{16.860465115655927`, 20.813953037220806`}, {
                    17.860465115655927`, 20.81395301042591}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{17.860465115655927`, 20.81395301042591}, {
                    18.860465115655927`, 20.81395298363101}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{18.860465115655927`, 20.81395298363101}, {
                    19.860465115655927`, 20.813952956836115`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.139534884344062, 
                    20.81395373388813}, {-8.139534884344062, 
                    20.81395370709323}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.139534884344062, 
                    20.81395370709323}, {-7.139534884344062, 
                    20.813953680298333`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.139534884344062, 
                    20.813953680298333`}, {-6.139534884344062, 
                    20.813953653503436`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.139534884344062, 
                    20.813953653503436`}, {-5.139534884344066, 
                    20.81395362670854}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.139534884344066, 
                    20.81395362670854}, {-4.139534884344066, 
                    20.813953599913642`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.139534884344066, 
                    20.813953599913642`}, {-3.139534884344066, 
                    20.813953573118745`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-18.13953488434406, 
                    20.813953975042203`}, {-17.13953488434406, 
                    20.813953948247306`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-16.13953488434406, 
                    20.81395392145241}, {-15.139534884344059`, 
                    20.813953894657512`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-17.13953488434406, 
                    20.813953948247306`}, {-16.13953488434406, 
                    20.81395392145241}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-15.139534884344059`, 
                    20.813953894657512`}, {-14.139534884344059`, 
                    20.813953867862615`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-19.13953488434406, 
                    20.8139540018371}, {-18.13953488434406, 
                    20.813953975042203`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]3000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]3000\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{19.860465115655927`, 20.813952956836115`}, {
                    20.860465115655927`, 20.813952930041218`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-14.139534857549162`, 
                    21.813953867862615`}, {-13.139534884344059`, 
                    20.81395384106772}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-14.139534884344059`, 
                    20.813953867862615`}, {-13.139534884344059`, 
                    20.81395384106772}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-19.58953488434406, 
                    20.813954013894804`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3000\[Times]401\[Times]2\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 3000\[Times]401\[Times]2\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-12.589534884344058`, 
                    20.813953826330525`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-11.589534884344062`, 
                    20.813953799535625`}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999964, -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-2.589534884344066, 
                    20.813953558381552`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-1.5895348843440658`, 
                    20.813953531586655`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-0.5895348843440658, 
                    20.81395350479176}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.41046511565593424`, 20.81395347799686}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    1.4104651156559342`, 20.81395345120196}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    2.410465115655934, 20.813953424407067`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    3.410465115655934, 20.81395339761217}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    4.410465115655933, 20.813953370817273`}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999982, -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    5.410465115655933, 20.813953344022373`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    6.410465115655932, 20.81395331722748}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-10.589534884344062`, 
                    20.81395377274073}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    7.410465115655931, 20.813953290432583`}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999982, -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    8.410465115655931, 20.813953263637686`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    9.410465115655931, 20.81395323684279}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    10.410465115655931`, 20.81395321004789}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    11.410465115655931`, 20.81395318325299}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    12.410465115655931`, 20.813953156458098`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    13.410465115655931`, 20.8139531296632}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    14.410465115655931`, 20.813953102868304`}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999982, -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    15.410465115655928`, 20.813953076073403`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    16.410465115655928`, 20.81395304927851}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999982, -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-9.589534884344062, 
                    20.813953745945835`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    17.410465115655928`, 20.813953022483613`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    18.410465115655928`, 20.813952995688716`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    19.410465115655924`, 20.81395296889382}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-8.589534884344062, 
                    20.813953719150934`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897440075723518*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-7.5895348843440615`, 
                    20.813953692356037`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-6.589534884344062, 
                    20.81395366556114}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-5.589534884344064, 
                    20.813953638766243`}, {-0.25, 0}, 
                    Offset[10], {0.9999999999999964, -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-4.589534884344065, 
                    20.813953611971343`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-3.589534884344066, 
                    20.81395358517645}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-17.589534884344058`, 
                    20.813953960305007`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-15.589534884344058`, 
                    20.813953906715216`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-16.589534884344058`, 
                    20.813953933510113`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]3000\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-14.589534884344058`, 
                    20.81395387992032}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1280\[Times]1500\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-18.589534884344058`, 
                    20.813953987099907`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
128\[Times]3000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 128\[Times]3000\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    20.410465115655928`, 20.813952942098922`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["", 
                    
                    Offset[{0, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-13.589534872286354`, 
                    21.26395385312542}, {-0.25, 0}, 
                    Offset[10], {0.999999973205103, -1.45454549351985}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> 
                    False]], {-13.589534884344058`, 
                    20.813953853125422`}, {-0.25, 0}, 
                    Offset[10], {1., -3.897439558965165*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    LineBox[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]}, StripOnInput -> False]], {
                    0.05000000000000002, 0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], {
                    
                    Line[{{-0.49999999999999983`, 0.5000000133974485}, {
                    0.49999999999999983`, 0.49999998660255146`}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]]], {0.05000000000000002, 
                    0.49999999866025513`}, {-0.25, 0}, 
                    Offset[10], {
                    0.9999999999999997, -2.6794897023396658`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{-0.49999999999999983`, 0.5000000133974485}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.49999999999999983`, 
                    0.5000000133974485}]]}}, {{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    Disk[{0.49999999999999983`, 0.49999998660255146`}, 
                    Offset[{2, 2}]]}, {
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    Text["[", 
                    
                    Offset[{-5, 0}, {0.49999999999999983`, 
                    0.49999998660255146`}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    RGBColor[
                    0.4658823529411765, 0.6176470588235294, 
                    0.6494117647058824]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{-20.13953488434406, 20.813954028631997`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-19.13953488434406, 
                    20.8139540018371}], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"logMelSpectrogram\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["logMelSpectrogram", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], 
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{13.19140625, 
                    13.171142578125}, {10.551025390625, 13.171142578125}, {
                    10.551025390625, 14.731201171875}, {13.19140625, 
                    14.731201171875}, {13.19140625, 17.48876953125}, {
                    14.81005859375, 17.48876953125}, {14.81005859375, 
                    14.731201171875}, {17.450439453125, 14.731201171875}, {
                    17.450439453125, 13.171142578125}, {14.81005859375, 
                    13.171142578125}, {14.81005859375, 10.409912109375}, {
                    13.19140625, 10.409912109375}, {13.19140625, 
                    13.171142578125}}}]}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-13.139534884344059`, 20.81395384106772}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"+\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["+", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-12.139534884344059`, 20.81395381427282}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att1", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-11.139534884344062`, 20.813953787477924`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att2", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-3.139534884344066, 
                    20.813953573118745`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att10", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-2.139534884344066, 
                    20.813953546323848`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att11", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-1.1395348843440658`, 20.81395351952895}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att12", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-0.1395348843440658,
                     20.813953492734054`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att13\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att13", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {0.8604651156559342, 
                    20.813953465939157`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att14\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att14", Bold], 
                    Style[NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {1.8604651156559342`,
                     20.81395343914426}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att15\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att15", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {2.860465115655934, 
                    20.813953412349363`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att16\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att16", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {3.860465115655934, 
                    20.813953385554466`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att17\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att17", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {4.860465115655932, 
                    20.81395335875957}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att18\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att18", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {5.860465115655932, 
                    20.813953331964672`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att19\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att19", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {6.860465115655932, 
                    20.813953305169775`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att20\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att20", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-10.139534884344062`, 20.813953760683027`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att3", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {7.860465115655931, 
                    20.81395327837488}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att21\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att21", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {8.86046511565593, 
                    20.81395325157998}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att22\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att22", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {9.86046511565593, 
                    20.813953224785084`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att23\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att23", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {10.86046511565593, 
                    20.813953197990188`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att24\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att24", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {11.86046511565593, 
                    20.81395317119529}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att25\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att25", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {12.86046511565593, 
                    20.813953144400394`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att26\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att26", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {13.86046511565593, 
                    20.813953117605497`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att27\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att27", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {14.860465115655929`,
                     20.8139530908106}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att28\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att28", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {15.860465115655929`,
                     20.813953064015703`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att29\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att29", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {16.860465115655927`,
                     20.813953037220806`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att30\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att30", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 27), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-9.139534884344062, 
                    20.81395373388813}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att4", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 28), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {17.860465115655927`,
                     20.81395301042591}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att31\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att31", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 29), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {18.860465115655927`,
                     20.81395298363101}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att32\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att32", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 30), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], 
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJpIGZiAIOEBfJqDiDGhgYjEJ3QYKCJwl+wVxfMf5Cn
DeY/CNYH8x0uqYP5CemofIVwCF9hiwZE3gEqvwxsbsIBFSh/lRaEzwXlr4OY
f+CvHkT/Kh0UfsN8XRQ+1H0GB94bYOUzMKhA3H9OD4Xf4Ai2lyFhOsS8B2vA
7mSYMN0AYv50VP6ClRC+gQqEn3AAwncI04fwb0H4ByL0IPwvEP6DGIj5DMyQ
8HRI0UHhw8ITxoe7Fxof6HyQ/wDn9FU8
                    "]]}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 30}}}], {
                    19.860465115655927`, 20.813952956836115`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"norm\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NormalizationLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["norm", Bold], 
                    Style[
                    NormalizationLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 31), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-8.139534884344062, 
                    20.81395370709323}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att5", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 32), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-7.139534884344062, 
                    20.813953680298333`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att6", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 33), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-6.139534884344062, 
                    20.813953653503436`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att7", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 34), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-5.139534884344066, 
                    20.81395362670854}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att8", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 35), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{19.903200149536133`, 
                    20.}, {19.903200149536133`, 16.}, {17.903200149536133`, 
                    14.}, {13.903200149536133`, 14.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    16.}, {7.903200149536133, 20.}}}, CurveClosed -> {0}]}, {
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{13.903200149536133`, 
                    14.}, {9.903200149536133, 14.}, {7.903200149536133, 
                    12.}, {7.903200149536133, 8.}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[
                    0.8313725490196079, 0.4117647058823529, 
                    0.12941176470588237`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18., 21.}, {22., 21.}, {22., 17.}, {18., 17.}, {
                    18., 21.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12., 16.}, {16., 16.}, {16., 12.}, {12., 12.}, {
                    12., 16.}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.6274509803921569, 0.8156862745098039, 
                    0.49411764705882355`], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 21.}, {10., 21.}, {10., 17.}, {6., 17.}, {6.,
                     21.}}}]}, {
                    FaceForm[{
                    Hue[0.5247747747747747, 0.43, 0.86], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{6., 10.}, {10., 10.}, {10., 6.}, {6., 6.}, {6., 
                    10.}}}]}}}}}, {Background -> GrayLevel[1, 0], BaseStyle -> 
                    GrayLevel[1], ImageSize -> 36, 
                    PlotRange -> {{-2, 30}, {-2, 30}}}], {-4.139534884344066, 
                    20.813953599913642`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"att9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGraph", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["att9", Bold], 
                    Style[
                    NetGraph, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 36), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGZiAIOEHfOkHYD0AUYbUwck/oaVTWD+QokWGYj8
Hpi8LDLfIOa8Kna+jRkyf9PKJjBfYE0MTD1MXgWZDzRfEpm/RKJFAk1eHNk8
GB9mHxLfCJl/IfKrIZp5hmj2wfjS2PnA8AEAsGpJ2w==
                    "]]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGZiAAOFmPOKDkD6AKONsQMSf8PKJhC/wYHHSQki
vwcmj87XxM63MUHmb1rZBOYzrImBqYfJa6DxFZD5TjxOKHyHHfPkkc2D8WH2
IfENkPkLNr/SRzavgblCH9k+JL4iNj44fAC7eEN3
                    "]]}, {
                    FaceForm[{
                    RGBColor[
                    0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{
                    11.405099868774414`, 17.73440170288086}, {
                    21.405099868774414`, 17.73440170288086}, {
                    21.68109893798828, 17.73440170288086}, {
                    21.905099868774414`, 17.51040171086788}, {
                    21.905099868774414`, 17.23440170288086}, {
                    21.905099868774414`, 7.234401702880859}, {
                    21.905099868774414`, 6.958402633666992}, {
                    21.68109893798828, 6.734401702880859}, {
                    21.405099868774414`, 6.734401702880859}, {
                    11.405099868774414`, 6.734401702880859}, {
                    11.12909984588623, 6.734401702880859}, {
                    10.905099868774414`, 6.958402633666992}, {
                    10.905099868774414`, 7.234401702880859}, {
                    10.905099868774414`, 17.23440170288086}, {
                    10.905099868774414`, 17.51040171086788}, {
                    11.12909984588623, 17.73440170288086}, {
                    11.405099868774414`, 17.73440170288086}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 13.733999252319336`}, {
                    17.904998779296875`, 13.733999252319336`}, {
                    17.904998779296875`, 14.733999252319336`}, {
                    18.904998779296875`, 14.733999252319336`}, {
                    18.904998779296875`, 13.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 13.733999252319336`}, {
                    19.904998779296875`, 13.733999252319336`}, {
                    19.904998779296875`, 14.733999252319336`}, {
                    20.904998779296875`, 14.733999252319336`}, {
                    20.904998779296875`, 13.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 15.733999252319336`}, {
                    17.904998779296875`, 15.733999252319336`}, {
                    17.904998779296875`, 16.733999252319336`}, {
                    18.904998779296875`, 16.733999252319336`}, {
                    18.904998779296875`, 15.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 15.733999252319336`}, {
                    19.904998779296875`, 15.733999252319336`}, {
                    19.904998779296875`, 16.733999252319336`}, {
                    20.904998779296875`, 16.733999252319336`}, {
                    20.904998779296875`, 15.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 13.733999252319336`}, {
                    15.904998779296875`, 13.733999252319336`}, {
                    15.904998779296875`, 14.733999252319336`}, {
                    16.904998779296875`, 14.733999252319336`}, {
                    16.904998779296875`, 13.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 15.733999252319336`}, {
                    15.904998779296875`, 15.733999252319336`}, {
                    15.904998779296875`, 16.733999252319336`}, {
                    16.904998779296875`, 16.733999252319336`}, {
                    16.904998779296875`, 15.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 9.733999252319336}, {
                    17.904998779296875`, 9.733999252319336}, {
                    17.904998779296875`, 10.733999252319336`}, {
                    18.904998779296875`, 10.733999252319336`}, {
                    18.904998779296875`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 7.734000205993652}, {
                    17.904998779296875`, 7.734000205993652}, {
                    17.904998779296875`, 8.734000205993652}, {
                    18.904998779296875`, 8.734000205993652}, {
                    18.904998779296875`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 9.733999252319336}, {
                    19.904998779296875`, 9.733999252319336}, {
                    19.904998779296875`, 10.733999252319336`}, {
                    20.904998779296875`, 10.733999252319336`}, {
                    20.904998779296875`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 7.734000205993652}, {
                    19.904998779296875`, 7.734000205993652}, {
                    19.904998779296875`, 8.734000205993652}, {
                    20.904998779296875`, 8.734000205993652}, {
                    20.904998779296875`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 9.733999252319336}, {
                    15.904998779296875`, 9.733999252319336}, {
                    15.904998779296875`, 10.733999252319336`}, {
                    16.904998779296875`, 10.733999252319336`}, {
                    16.904998779296875`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 7.734000205993652}, {
                    15.904998779296875`, 7.734000205993652}, {
                    15.904998779296875`, 8.734000205993652}, {
                    16.904998779296875`, 8.734000205993652}, {
                    16.904998779296875`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 11.733999252319336`}, {
                    15.904998779296875`, 11.733999252319336`}, {
                    15.904998779296875`, 12.733999252319336`}, {
                    16.904998779296875`, 12.733999252319336`}, {
                    16.904998779296875`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 11.733999252319336`}, {
                    17.904998779296875`, 11.733999252319336`}, {
                    17.904998779296875`, 12.733999252319336`}, {
                    18.904998779296875`, 12.733999252319336`}, {
                    18.904998779296875`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 11.733999252319336`}, {
                    19.904998779296875`, 11.733999252319336`}, {
                    19.904998779296875`, 12.733999252319336`}, {
                    20.904998779296875`, 12.733999252319336`}, {
                    20.904998779296875`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{14.904999732971191`, 9.733999252319336}, {
                    13.904999732971191`, 9.733999252319336}, {
                    13.904999732971191`, 10.733999252319336`}, {
                    14.904999732971191`, 10.733999252319336`}, {
                    14.904999732971191`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{14.904999732971191`, 7.734000205993652}, {
                    13.904999732971191`, 7.734000205993652}, {
                    13.904999732971191`, 8.734000205993652}, {
                    14.904999732971191`, 8.734000205993652}, {
                    14.904999732971191`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{14.904999732971191`, 11.733999252319336`}, {
                    13.904999732971191`, 11.733999252319336`}, {
                    13.904999732971191`, 12.733999252319336`}, {
                    14.904999732971191`, 12.733999252319336`}, {
                    14.904999732971191`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.904999732971191`, 9.733999252319336}, {
                    11.904999732971191`, 9.733999252319336}, {
                    11.904999732971191`, 10.733999252319336`}, {
                    12.904999732971191`, 10.733999252319336`}, {
                    12.904999732971191`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.904999732971191`, 7.734000205993652}, {
                    11.904999732971191`, 7.734000205993652}, {
                    11.904999732971191`, 8.734000205993652}, {
                    12.904999732971191`, 8.734000205993652}, {
                    12.904999732971191`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.904999732971191`, 11.733999252319336`}, {
                    11.904999732971191`, 11.733999252319336`}, {
                    11.904999732971191`, 12.733999252319336`}, {
                    12.904999732971191`, 12.733999252319336`}, {
                    12.904999732971191`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{
                    10.405099868774414`, 18.73440170288086}, {
                    14.405099868774414`, 18.73440170288086}, {
                    14.681099891662598`, 18.73440170288086}, {
                    14.905099868774414`, 18.51040171086788}, {
                    14.905099868774414`, 18.23440170288086}, {
                    14.905099868774414`, 14.23440170288086}, {
                    14.905099868774414`, 13.958401679992676`}, {
                    14.681099891662598`, 13.73440170288086}, {
                    14.405099868774414`, 13.73440170288086}, {
                    10.405099868774414`, 13.73440170288086}, {
                    10.12909984588623, 13.73440170288086}, {9.905099868774414,
                     13.958401679992676`}, {9.905099868774414, 
                    14.23440170288086}, {9.905099868774414, 
                    18.23440170288086}, {9.905099868774414, 
                    18.51040171086788}, {10.12909984588623, 
                    18.73440170288086}, {10.405099868774414`, 
                    18.73440170288086}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-18.13953488434406, 20.813953975042203`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ConvolutionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["conv1", Bold], 
                    Style[
                    ConvolutionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 37), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571]}}}, 
                    InsetBox[
                    GraphicsBox[{{}, {{{}, {}, 
                    TagBox[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[
                    NCache[
                    Rational[1, 60], 0.016666666666666666`]], 
                    Hue[0.47, 0.97, 0.61], 
                    AbsoluteThickness[1.3]], 
                    LineBox[CompressedData["
1:eJxdkk9IVFEUxh8SLSxcRG5LdxqWoO5CjlTioo0OVASSYrmQkCYhkqnFbCRw
48aF2YDjP8ooYUprTPK8GWeIAZGokZBgeBNDIg7m33E0x5rz3bPywuW9751z
fue7953Stgeu9gLLsqrzW5667Px2YtdfcvBcz1pT8Ijl43TmNT+sLfwx6s6J
Lpk9mOTy5r7wbtmh6NaViQAnPWcnG5IHor2u3HsefC5rX3Td+a4P7AIwC96C
NcNCqy3cQ/3I0CznYUIEf/zKHD8RnGcH8c+dNldjbYu2Z96EON0kwE3wvsXD
POYWgxui/T0/59X/OvT96QiDXpYW7TTfjKq/VfibCETVzwr83/gUZRzHk0J+
y92o9kvCzyl/RPkJ8CvuzfMAeMvw/2gsxE9RH4df79s5zV9E/F0qyN2IR9C/
wwmwF3oK/fsrRtk6tjRO8n4pNk5GR0TX3S7+SLbhi7az9WEy/LjokoKhGKk/
6JYvX0n9i269fHKJ9HyivSeeLZPxn4I+cy1Bp839oP+rF0nymftDfeXFFOn9
Iv/O99/KXxftZHpXSf+PaP9CY1r7bcLvUukfqjH/F3xfbkP77yC/vHOLdD4Q
b09sk84Pzn+1cZd0vsBLhDKk84f6x1VZ+mXmE367hvfpgplf1N8q+ktuM9/g
L3Yfqv8j3JfPMd8lV3jD9f/oPz1/X6Q=
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag#1"]& ]}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> NCache[
                    GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, AxesStyle -> GrayLevel[0, 0.3], 
                    Background -> GrayLevel[0, 0], DisplayFunction :> 
                    Identity, Frame -> {{False, False}, {False, False}}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> {25, 25}, 
                    Method -> {"AxisPadding" -> Scaled[0.02], 
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {"Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {"freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> AbsolutePointSize[6], 
                    "DefaultPlotStyle" -> {
                    Directive[
                    RGBColor[0.24, 0.6, 0.8], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.95, 0.627, 0.1425], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.455, 0.7, 0.21], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.578, 0.51, 0.85], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.4, 0.64, 1.], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[1., 0.75, 0.], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.8, 0.4, 0.76], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.637, 0.65, 0.], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
                    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> 
                    True, "IncludeHighlighting" -> "CurrentSet", 
                    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2., 2.}, {-0.1697489619255066, 
                    1.9544998407363892`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {{}, {}}}], {14, 14}, Center, 
                    Scaled[0.784]]}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-17.13953488434406, 20.813953948247306`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"gelu1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["gelu1", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 38), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGZiAIOEHfOkHYD0AUYbUwck/oaVTWD+QokWGYj8
Hpi8LDLfIOa8Kna+jRkyf9PKJjBfYE0MTD1MXgWZDzRfEpm/RKJFAk1eHNk8
GB9mHxLfCJl/IfKrIZp5hmj2wfjS2PnA8AEAsGpJ2w==
                    "]]}, {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJhIGZiAAOFmPOKDkD6AKONsQMSf8PKJhC/wYHHSQki
vwcmj87XxM63MUHmb1rZBOYzrImBqYfJa6DxFZD5TjxOKHyHHfPkkc2D8WH2
IfENkPkLNr/SRzavgblCH9k+JL4iNj44fAC7eEN3
                    "]]}, {
                    FaceForm[{
                    RGBColor[
                    0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{
                    11.405099868774414`, 17.73440170288086}, {
                    21.405099868774414`, 17.73440170288086}, {
                    21.68109893798828, 17.73440170288086}, {
                    21.905099868774414`, 17.51040171086788}, {
                    21.905099868774414`, 17.23440170288086}, {
                    21.905099868774414`, 7.234401702880859}, {
                    21.905099868774414`, 6.958402633666992}, {
                    21.68109893798828, 6.734401702880859}, {
                    21.405099868774414`, 6.734401702880859}, {
                    11.405099868774414`, 6.734401702880859}, {
                    11.12909984588623, 6.734401702880859}, {
                    10.905099868774414`, 6.958402633666992}, {
                    10.905099868774414`, 7.234401702880859}, {
                    10.905099868774414`, 17.23440170288086}, {
                    10.905099868774414`, 17.51040171086788}, {
                    11.12909984588623, 17.73440170288086}, {
                    11.405099868774414`, 17.73440170288086}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 13.733999252319336`}, {
                    17.904998779296875`, 13.733999252319336`}, {
                    17.904998779296875`, 14.733999252319336`}, {
                    18.904998779296875`, 14.733999252319336`}, {
                    18.904998779296875`, 13.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 13.733999252319336`}, {
                    19.904998779296875`, 13.733999252319336`}, {
                    19.904998779296875`, 14.733999252319336`}, {
                    20.904998779296875`, 14.733999252319336`}, {
                    20.904998779296875`, 13.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 15.733999252319336`}, {
                    17.904998779296875`, 15.733999252319336`}, {
                    17.904998779296875`, 16.733999252319336`}, {
                    18.904998779296875`, 16.733999252319336`}, {
                    18.904998779296875`, 15.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 15.733999252319336`}, {
                    19.904998779296875`, 15.733999252319336`}, {
                    19.904998779296875`, 16.733999252319336`}, {
                    20.904998779296875`, 16.733999252319336`}, {
                    20.904998779296875`, 15.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 13.733999252319336`}, {
                    15.904998779296875`, 13.733999252319336`}, {
                    15.904998779296875`, 14.733999252319336`}, {
                    16.904998779296875`, 14.733999252319336`}, {
                    16.904998779296875`, 13.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 15.733999252319336`}, {
                    15.904998779296875`, 15.733999252319336`}, {
                    15.904998779296875`, 16.733999252319336`}, {
                    16.904998779296875`, 16.733999252319336`}, {
                    16.904998779296875`, 15.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 9.733999252319336}, {
                    17.904998779296875`, 9.733999252319336}, {
                    17.904998779296875`, 10.733999252319336`}, {
                    18.904998779296875`, 10.733999252319336`}, {
                    18.904998779296875`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 7.734000205993652}, {
                    17.904998779296875`, 7.734000205993652}, {
                    17.904998779296875`, 8.734000205993652}, {
                    18.904998779296875`, 8.734000205993652}, {
                    18.904998779296875`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 9.733999252319336}, {
                    19.904998779296875`, 9.733999252319336}, {
                    19.904998779296875`, 10.733999252319336`}, {
                    20.904998779296875`, 10.733999252319336`}, {
                    20.904998779296875`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 7.734000205993652}, {
                    19.904998779296875`, 7.734000205993652}, {
                    19.904998779296875`, 8.734000205993652}, {
                    20.904998779296875`, 8.734000205993652}, {
                    20.904998779296875`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 9.733999252319336}, {
                    15.904998779296875`, 9.733999252319336}, {
                    15.904998779296875`, 10.733999252319336`}, {
                    16.904998779296875`, 10.733999252319336`}, {
                    16.904998779296875`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 7.734000205993652}, {
                    15.904998779296875`, 7.734000205993652}, {
                    15.904998779296875`, 8.734000205993652}, {
                    16.904998779296875`, 8.734000205993652}, {
                    16.904998779296875`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{16.904998779296875`, 11.733999252319336`}, {
                    15.904998779296875`, 11.733999252319336`}, {
                    15.904998779296875`, 12.733999252319336`}, {
                    16.904998779296875`, 12.733999252319336`}, {
                    16.904998779296875`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{18.904998779296875`, 11.733999252319336`}, {
                    17.904998779296875`, 11.733999252319336`}, {
                    17.904998779296875`, 12.733999252319336`}, {
                    18.904998779296875`, 12.733999252319336`}, {
                    18.904998779296875`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{20.904998779296875`, 11.733999252319336`}, {
                    19.904998779296875`, 11.733999252319336`}, {
                    19.904998779296875`, 12.733999252319336`}, {
                    20.904998779296875`, 12.733999252319336`}, {
                    20.904998779296875`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{14.904999732971191`, 9.733999252319336}, {
                    13.904999732971191`, 9.733999252319336}, {
                    13.904999732971191`, 10.733999252319336`}, {
                    14.904999732971191`, 10.733999252319336`}, {
                    14.904999732971191`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{14.904999732971191`, 7.734000205993652}, {
                    13.904999732971191`, 7.734000205993652}, {
                    13.904999732971191`, 8.734000205993652}, {
                    14.904999732971191`, 8.734000205993652}, {
                    14.904999732971191`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{14.904999732971191`, 11.733999252319336`}, {
                    13.904999732971191`, 11.733999252319336`}, {
                    13.904999732971191`, 12.733999252319336`}, {
                    14.904999732971191`, 12.733999252319336`}, {
                    14.904999732971191`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.904999732971191`, 9.733999252319336}, {
                    11.904999732971191`, 9.733999252319336}, {
                    11.904999732971191`, 10.733999252319336`}, {
                    12.904999732971191`, 10.733999252319336`}, {
                    12.904999732971191`, 9.733999252319336}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.904999732971191`, 7.734000205993652}, {
                    11.904999732971191`, 7.734000205993652}, {
                    11.904999732971191`, 8.734000205993652}, {
                    12.904999732971191`, 8.734000205993652}, {
                    12.904999732971191`, 7.734000205993652}}}]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.904999732971191`, 11.733999252319336`}, {
                    11.904999732971191`, 11.733999252319336`}, {
                    11.904999732971191`, 12.733999252319336`}, {
                    12.904999732971191`, 12.733999252319336`}, {
                    12.904999732971191`, 11.733999252319336`}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, {{{
                    10.405099868774414`, 18.73440170288086}, {
                    14.405099868774414`, 18.73440170288086}, {
                    14.681099891662598`, 18.73440170288086}, {
                    14.905099868774414`, 18.51040171086788}, {
                    14.905099868774414`, 18.23440170288086}, {
                    14.905099868774414`, 14.23440170288086}, {
                    14.905099868774414`, 13.958401679992676`}, {
                    14.681099891662598`, 13.73440170288086}, {
                    14.405099868774414`, 13.73440170288086}, {
                    10.405099868774414`, 13.73440170288086}, {
                    10.12909984588623, 13.73440170288086}, {9.905099868774414,
                     13.958401679992676`}, {9.905099868774414, 
                    14.23440170288086}, {9.905099868774414, 
                    18.23440170288086}, {9.905099868774414, 
                    18.51040171086788}, {10.12909984588623, 
                    18.73440170288086}, {10.405099868774414`, 
                    18.73440170288086}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-16.13953488434406, 20.81395392145241}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"conv2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ConvolutionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["conv2", Bold], 
                    Style[
                    ConvolutionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 39), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571]}}}, 
                    InsetBox[
                    GraphicsBox[{{}, {{{}, {}, 
                    TagBox[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[
                    NCache[
                    Rational[1, 60], 0.016666666666666666`]], 
                    Hue[0.47, 0.97, 0.61], 
                    AbsoluteThickness[1.3]], 
                    LineBox[CompressedData["
1:eJxdkk9IVFEUxh8SLSxcRG5LdxqWoO5CjlTioo0OVASSYrmQkCYhkqnFbCRw
48aF2YDjP8ooYUprTPK8GWeIAZGokZBgeBNDIg7m33E0x5rz3bPywuW9751z
fue7953Stgeu9gLLsqrzW5667Px2YtdfcvBcz1pT8Ijl43TmNT+sLfwx6s6J
Lpk9mOTy5r7wbtmh6NaViQAnPWcnG5IHor2u3HsefC5rX3Td+a4P7AIwC96C
NcNCqy3cQ/3I0CznYUIEf/zKHD8RnGcH8c+dNldjbYu2Z96EON0kwE3wvsXD
POYWgxui/T0/59X/OvT96QiDXpYW7TTfjKq/VfibCETVzwr83/gUZRzHk0J+
y92o9kvCzyl/RPkJ8CvuzfMAeMvw/2gsxE9RH4df79s5zV9E/F0qyN2IR9C/
wwmwF3oK/fsrRtk6tjRO8n4pNk5GR0TX3S7+SLbhi7az9WEy/LjokoKhGKk/
6JYvX0n9i269fHKJ9HyivSeeLZPxn4I+cy1Bp839oP+rF0nymftDfeXFFOn9
Iv/O99/KXxftZHpXSf+PaP9CY1r7bcLvUukfqjH/F3xfbkP77yC/vHOLdD4Q
b09sk84Pzn+1cZd0vsBLhDKk84f6x1VZ+mXmE367hvfpgplf1N8q+ktuM9/g
L3Yfqv8j3JfPMd8lV3jD9f/oPz1/X6Q=
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag#1"]& ]}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> NCache[
                    GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, AxesStyle -> GrayLevel[0, 0.3], 
                    Background -> GrayLevel[0, 0], DisplayFunction :> 
                    Identity, Frame -> {{False, False}, {False, False}}, 
                    FrameLabel -> {{None, None}, {None, None}}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> {25, 25}, 
                    Method -> {"AxisPadding" -> Scaled[0.02], 
                    "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {"Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {"freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> AbsolutePointSize[6], 
                    "DefaultPlotStyle" -> {
                    Directive[
                    RGBColor[0.24, 0.6, 0.8], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.95, 0.627, 0.1425], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.455, 0.7, 0.21], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.578, 0.51, 0.85], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.4, 0.64, 1.], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[1., 0.75, 0.], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.8, 0.4, 0.76], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.637, 0.65, 0.], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.915, 0.3325, 0.2125], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                    
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[
                    0.9728288904374106, 0.621644452187053, 
                    0.07336199581899142], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                    AbsoluteThickness[2]], 
                    Directive[
                    RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                    AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
                    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> 
                    True, "IncludeHighlighting" -> "CurrentSet", 
                    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-2., 2.}, {-0.1697489619255066, 
                    1.9544998407363892`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {{}, {}}}], {14, 14}, Center, 
                    Scaled[0.784]]}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-15.139534884344059`, 20.813953894657512`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"gelu2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["gelu2", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 40), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.25, 0.599125, 0.5153350000000001], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.975, 0.9866375000000001, 0.9838445]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    RGBColor[
                    0.6509803921568628, 0.6509803921568628, 
                    0.6509803921568628], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJ1IGZigAAWS1UHINXwd7O2A5hvpwCiD/SlGEL4/5RR
+C4vIer3/tOH8FXVwPzamRD+kQwIf64ehM+yAcL/u18Pov47hG8bDOGnOKhD
9D/TBfOXtEP4eysh/JblqPwj9yH8uU+gfGkNFPNc4iH8vYch/CcLoPImUPfd
g/Bl50PdJ64J9p8cswFE/1UtVP+W66Hwj5RoQvRHQMJL5bIexP18KhC+sDYK
v+UjxL6739Qg5q2C2h+jjureUxD+Ej6oegcNiPv3Q/z7dxuEz1IMDS91TYh+
FQjfdgqUz4bKZ9kPCe+9yhD+kkoIX3Yr1HxLaHy5QPgqvyDxe/c61D3bIPza
VAg/JR/Cj30P8Y9KizKKfz2OyKPwkdMXAFMdgM0=
                    "]]}, {
                    FaceForm[{
                    RGBColor[0., 0.46549999999999997`, 0.3537800000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    17.69199418160133, 19.88481747941114}, {
                    15.890045962994918`, 19.88481747941114}, {
                    15.890045962994918`, 20.74309139396064}, {
                    20.50807202560827, 20.74309139396064}, {20.50807202560827,
                     19.88481747941114}, {18.70612380700186, 
                    19.88481747941114}, {18.70612380700186, 
                    15.02340030670166}, {17.69199418160133, 
                    15.02340030670166}, {17.69199418160133, 
                    19.88481747941114}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-14.139534884344059`, 20.813953867862615`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"transpose\"", Bold, StripOnInput -> False]}, {
                    
                    StyleBox[
                    "TransposeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["transpose", Bold], 
                    Style[
                    TransposeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 41), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    EdgeForm[
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823]], 
                    DiskBox[{20.860465115655927`, 20.813952930041218`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 42), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{{{{
                    EdgeForm[{
                    RGBColor[0.5654919999999999, 0.263725, 0.7075], 
                    Thickness[0.03]}], 
                    FaceForm[
                    RGBColor[0.9855164, 0.9754575, 0.99025]], 
                    
                    RectangleBox[{-1.5, -1.5}, {29.5, 29.5}, RoundingRadius -> 
                    7]}, {
                    Thickness[0.03571428571428571], {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJZIGZiAIMD5hWSDiCGgbQyiI5TXyAFoluk3yqA6JTa
dTIguuHEcVkQ/cF+iTyITpBiAKvb0Gkgh8xv0lWUBtEOIv/B6p9nMIDNn3Cc
UxFEbzE9Kw6kORqPyoHta2CaJQbW72CsCqKfZDCA+XO+VKsh8y2S+bSQ+Qbb
P+oi83fwHDRANi9ANdUQyT6GA0n5RsjuMVhQaYzs3g+O9SbI/pnA1mCK7F8Y
HxYeE272miCH1wPbTrB5sPDcYFwEtu+RUJEEWP55Fdg9JQzvwe5ROHnVAJkP
8w+MD/MvjG/SF6qGbN6Ny9yqyPaB4w8AtDplaw==
                    "]]}, {
                    FaceForm[{
                    GrayLevel[0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJZIGZigAAHFjMHIKUQxqflgMSXWPVRF5mvwnLNAEg7
pFQ/NgXxIx5WGYJo3U8LwfwVeUVGINr1WziY/6Ci0xhEW8lfMQGbc7kXTCt8
EIPwGRrA6rTmFKPwjYvNwXSBdT1IvOHx0/1gvsHtSpB5Chs28YDdYxGTD7av
tj4SzD8hl2oIUV8P5puwHTRA5kP9A+dD/QvntzyvVkM2L8DYWBXZvoIdcsrI
7plgy6WI7F4glkP2DxBLIfsXxoeFR8K647LI4VXA91YBOTxfKEkrI4f3gWPc
qijx0RiqhswH+wcAlDNmoQ==
                    "]]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.703999519348145, 9.703999519348145}, {10.6589994430542, 
                    9.703999519348145}, {10.6589994430542, 
                    10.6589994430542}, {9.703999519348145, 
                    10.6589994430542}, {9.703999519348145, 
                    9.703999519348145}}, {{8.75, 8.75}, {11.61400032043457, 
                    8.75}, {11.61400032043457, 11.61400032043457}, {8.75, 
                    11.61400032043457}, {8.75, 8.75}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    17.340999603271484`, 9.703999519348145}, {
                    18.29599952697754, 9.703999519348145}, {18.29599952697754,
                     10.6589994430542}, {17.340999603271484`, 
                    10.6589994430542}, {17.340999603271484`, 
                    9.703999519348145}}, {{16.38599967956543, 8.75}, {19.25, 
                    8.75}, {19.25, 11.61400032043457}, {16.38599967956543, 
                    11.61400032043457}, {16.38599967956543, 8.75}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    13.523000717163086`, 9.703999519348145}, {
                    14.47800064086914, 9.703999519348145}, {14.47800064086914,
                     10.6589994430542}, {13.523000717163086`, 
                    10.6589994430542}, {13.523000717163086`, 
                    9.703999519348145}}, {{12.568000793457031`, 8.75}, {
                    15.432001113891602`, 8.75}, {15.432001113891602`, 
                    11.61400032043457}, {12.568000793457031`, 
                    11.61400032043457}, {12.568000793457031`, 8.75}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.703999519348145, 13.522000312805176`}, {
                    10.6589994430542, 13.522000312805176`}, {10.6589994430542,
                     14.47700023651123}, {9.703999519348145, 
                    14.47700023651123}, {9.703999519348145, 
                    13.522000312805176`}}, {{8.75, 12.568000793457031`}, {
                    11.61400032043457, 12.568000793457031`}, {
                    11.61400032043457, 15.432001113891602`}, {8.75, 
                    15.432001113891602`}, {8.75, 12.568000793457031`}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    17.340999603271484`, 13.522000312805176`}, {
                    18.29599952697754, 13.522000312805176`}, {
                    18.29599952697754, 14.47700023651123}, {
                    17.340999603271484`, 14.47700023651123}, {
                    17.340999603271484`, 13.522000312805176`}}, {{
                    16.38599967956543, 12.568000793457031`}, {19.25, 
                    12.568000793457031`}, {19.25, 15.432001113891602`}, {
                    16.38599967956543, 15.432001113891602`}, {
                    16.38599967956543, 12.568000793457031`}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    13.523000717163086`, 13.522000312805176`}, {
                    14.47800064086914, 13.522000312805176`}, {
                    14.47800064086914, 14.47700023651123}, {
                    13.523000717163086`, 14.47700023651123}, {
                    13.523000717163086`, 13.522000312805176`}}, {{
                    12.568000793457031`, 12.568000793457031`}, {
                    15.432001113891602`, 12.568000793457031`}, {
                    15.432001113891602`, 15.432001113891602`}, {
                    12.568000793457031`, 15.432001113891602`}, {
                    12.568000793457031`, 12.568000793457031`}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    9.703999519348145, 17.340999603271484`}, {
                    10.6589994430542, 17.340999603271484`}, {10.6589994430542,
                     18.29599952697754}, {9.703999519348145, 
                    18.29599952697754}, {9.703999519348145, 
                    17.340999603271484`}}, {{8.75, 16.38599967956543}, {
                    11.61400032043457, 16.38599967956543}, {11.61400032043457,
                     19.25}, {8.75, 19.25}, {8.75, 16.38599967956543}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    17.340999603271484`, 17.340999603271484`}, {
                    18.29599952697754, 17.340999603271484`}, {
                    18.29599952697754, 18.29599952697754}, {
                    17.340999603271484`, 18.29599952697754}, {
                    17.340999603271484`, 17.340999603271484`}}, {{
                    16.38599967956543, 16.38599967956543}, {19.25, 
                    16.38599967956543}, {19.25, 19.25}, {16.38599967956543, 
                    19.25}, {16.38599967956543, 16.38599967956543}}}]}, {
                    FaceForm[{
                    RGBColor[
                    0.42065599999999986`, 0.018300000000000014`, 0.61], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    13.523000717163086`, 17.340999603271484`}, {
                    14.47800064086914, 17.340999603271484`}, {
                    14.47800064086914, 18.29599952697754}, {
                    13.523000717163086`, 18.29599952697754}, {
                    13.523000717163086`, 17.340999603271484`}}, {{
                    12.568000793457031`, 16.38599967956543}, {
                    15.432001113891602`, 16.38599967956543}, {
                    15.432001113891602`, 19.25}, {12.568000793457031`, 
                    19.25}, {12.568000793457031`, 
                    16.38599967956543}}}]}}}}}, {
                    Background -> GrayLevel[1, 0], BaseStyle -> GrayLevel[1], 
                    ImageSize -> 36, PlotRange -> {{-2, 30}, {-2, 
                    30}}}], {-14.139534857549162`, 21.813953867862615`}], 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"positional_embedding\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["positional_embedding", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 43), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, 
                    DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    
                    GeneralUtilities`Graphics`PackagePrivate`\
makeSelectionHighlighter[
                    Part[CompressedData["
1:eJxTTMoPSmViYGDQBmIQvebFk74dyiYHGHJ6veIvmDhA+MYHNodJgfkRF0/K
FrprHXh6Ld0dwdc4MOPgFzcQPwrMVzvgvaYRzC9wVS8/Ist54BHjSycEn/HA
1DelYP6DLr93Hdaf9ntcZwLzGcJLitzvHNz/+2C/I4jv8CpJ+V3Ha/t1a2TA
fIXSjYLlR/7aJ05f6QDiT9h1o8P6EZuDSJMZEp/P4XjOYXsQ3y0254hsobBD
VXgAEl/cQdfprh2CL+3wQCfLDuF+lQP/pvGB3e8Clpd3mCz+3RbEX6Rn9qhv
h6KDG1MLEl/Z4ecbASS+qsOa63NtEHx1h/hDWkh8TQehtdutEXxth6PTXcD8
hWC+rkNF00UrBF/fQTs3DswPEJcudL9j4HAv/LUlwr1KBzY2znZFyBs6THSq
sETwjRxcdFmR+MYO38UnWSD0KxxIztEA69+yaLL1oz6ZA2LhW10QfIkDJx2d
wPwdYL7IgRqd884IvsABffEYZ0R6MTqQ5rjcE8E3PCCpY4LENzhwRuygByL9
6B2oZ/RD4uscMHpzyx3hXhOHVUzyYPfuW/ZYBiFv6gAAYvgv3A==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    
                    Part[{8, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
                    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 
                    31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 8,
                     31}, NeuralNetworks`Private`NetGraph`selection], 
                    Part[{
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[0.565492, 0.263725, 0.7075], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[0.25, 0.599125, 0.515335], 
                    RGBColor[
                    0.6317647058823529, 0.6988235294117647, 
                    0.7094117647058823], 
                    RGBColor[0.565492, 0.263725, 0.7075]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    StandardForm, Graphics]]}, 
                    ImageSize -> {2324.999999999999, 140.0000750257118}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{35., 35.}, {35., 25.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Port", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"audio stft\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
1500\[Times]1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "positional_embedding" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{1500, 1280}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1500, 1280}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "logMelSpectrogram" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3000, 401, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"filterbank" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> 
                    NeuralNetworks`Private`DummyArray[{128, 201}]|>, 
                    "Parameters" -> <|"Dimensions" -> 
                    NeuralNetworks`TensorT[{128, 201}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128, 201}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 201}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "part" -> <|"Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 
                    Span[1, 201], 
                    Span[1, -1]}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3000, 401, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3000, 201, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "squared" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[#^2& ], 
                    "$Dimensions" -> {3000, 201, 2}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3000, 201, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3000, 201, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "magnitudes" -> <|"Type" -> "Aggregation", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3000, 201, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{3000, 201}, 
                    NeuralNetworks`RealT]|>|>, 
                    "transpose" -> <|"Type" -> "Transpose", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{3000, 201}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{201, 3000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "melspec" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{128, 201}, NeuralNetworks`AtomT], 
                    "Input2" -> NeuralNetworks`TensorT[{201, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "logMelSpec" -> <|"Type" -> "Elementwise", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    0.43429448190325176` Log[2.220446049250313*^-16 + #]& ], 
                    "$Dimensions" -> {128, 3000}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "max" -> <|"Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[All]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>|>, 
                    "postProcess" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    0.25 (4 + Max[#2, -8 + #])& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "Input2" -> NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "melspec", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "filterbank", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squared", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "magnitudes", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squared", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "magnitudes", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "melspec", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logMelSpec", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "melspec", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "max", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logMelSpec", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "postProcess", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logMelSpec", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "postProcess", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "postProcess", "Outputs", "Output"]}|>, 
                    "conv1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1280, 128, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {3}, 
                    "Stride" -> {1}, "PaddingSize" -> {{1, 1}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$InputChannels" -> 128, 
                    "$InputSize" -> {3000}, "$OutputSize" -> {3000}, 
                    "$WeightsInputChannels" -> 128|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{128, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 3000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu1" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1280, 3000}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 3000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "conv2" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1280, 1280, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {3}, 
                    "Stride" -> {2}, "PaddingSize" -> {{1, 1}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> False, "$InputChannels" -> 1280, 
                    "$InputSize" -> {3000}, "$OutputSize" -> {1500}, 
                    "$WeightsInputChannels" -> 1280|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 3000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1280, 1500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 1500}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1280, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "transpose" -> <|
                    "Type" -> "Transpose", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    TwoWayRule[1, 2]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1280, 1500}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    Automatic]|>, "Inputs" -> <|
                    "Input1" -> NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "att1" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att2" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att3" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att4" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att5" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att6" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att7" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att8" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att9" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att10" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att11" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att12" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att13" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att14" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att15" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att16" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att17" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att18" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att19" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att20" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att21" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att22" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att23" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att24" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att25" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att26" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att27" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att28" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att29" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att30" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att31" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "att32" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Nodes" -> <|"norm" -> <|
                    "Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "attention" -> <|"Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"query" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "key" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> None|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20, 64}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "value" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {20, 
                    64}, "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{20, 64}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>|>, 
                    "qkvAttention" -> <|"Type" -> "Attention", 
                    "Arrays" -> <||>, "Parameters" -> <|
                    "ScoringNet" -> <|"Type" -> "Dot", "Arrays" -> <||>, 
                    "Parameters" -> <|"TransposeSpecifications" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`AtomT], "Query" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>, "Mask" -> None, 
                    "ScoreRescaling" -> "DimensionSqrt", "MultiHead" -> True, 
                    "Dropout" -> 0., "$InputPorts" -> "KeyValueQuery", 
                    "$KeyAndValueShape" -> {1500, 20}, 
                    "$QueryShape" -> {1500, 20}, "$QueryChannels" -> {64}, 
                    "$KeyChannels" -> {64}, "$ValueChannels" -> {64}|>, 
                    "Inputs" -> <|"Key" -> NeuralNetworks`TensorT[{1500, 20, 
                    64}, NeuralNetworks`RealT], "Value" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT], "Query" -> 
                    NeuralNetworks`TensorT[{1500, 20, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    20, 64}, NeuralNetworks`RealT]|>, 
                    "ExtraOutputs" -> <|"AttentionWeights" -> 
                    NeuralNetworks`TensorT[{1500, 20, 1500}, 
                    NeuralNetworks`RealT]|>|>, 
                    "out" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|"OutputDimensions" -> {1280}, 
                    "$OutputSize" -> 1280, "$InputSize" -> 1280, 
                    "$InputDimensions" -> {20, 64}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT]|>, "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{20, 64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1500, 20,
                     64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1500, 
                    1280}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "query", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "key", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Query"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "query", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Key"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "key", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Inputs", "Value"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "value", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "out", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "qkvAttention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "out", "Outputs", "Output"]}|>, 
                    "+" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "mlp_norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|"AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp1" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{5120, 
                    1280}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    5120}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {5120}, "$OutputSize" -> 5120, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{5120}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "gelu" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    "GaussianErrorLinearUnit"], 
                    "$Dimensions" -> {1500, 5120}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "mlp2" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|"Net" -> <|
                    "Type" -> "Linear", "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 
                    5120}], "Biases" -> NeuralNetworks`Private`DummyArray[{
                    1280}]|>, "Parameters" -> <|
                    "OutputDimensions" -> {1280}, "$OutputSize" -> 1280, 
                    "$InputSize" -> 5120, "$InputDimensions" -> {5120}|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1500, 
                    "$InputShape" -> NeuralNetworks`TensorT[{5120}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 5120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "plus" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Plus], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[Automatic]|>, 
                    "Inputs" -> <|"Input1" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT], "Input2" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "attention", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp_norm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mlp2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "plus", "Outputs", "Output"]}|>, 
                    "norm" -> <|"Type" -> "Normalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1280}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    Span[2, All]], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter["Same"], "GroupNumber" -> 
                    None, "Epsilon" -> 0.00001, "Unbiased" -> False, 
                    "$Dimensions" -> {1500, 1280}, 
                    "$StatsDimensions" -> {1280}, "Method" -> "Standardize"|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> <|"Form" -> 
                    NeuralNetworks`TensorT[{3000, 401, 2}, 
                    NeuralNetworks`RealT], "Type" -> "AudioSTFT", 
                    "SampleRate" -> 16000, "Normalization" -> 
                    NeuralNetworks`ValidatedParameter[None], "WindowSize" -> 
                    401, "Offset" -> 160, "WindowFunction" -> HannWindow, 
                    "Augmentation" -> NeuralNetworks`ValidatedParameter[None],
                     "$PreEmphasis" -> None, "TargetLength" -> 
                    Quantity[30, "Seconds"], "$TargetLength" -> 3000, "$Size" -> 
                    401, "$Version" -> "14.2.1"|>|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1500, 1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "logMelSpectrogram", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "positional_embedding", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logMelSpectrogram", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "gelu2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "+", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "transpose", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "+", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "att2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att30", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att29", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att31", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att30", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "att32", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att31", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "att32", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "norm", "Outputs", "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "logMelSpectrogram"], 
                    NeuralNetworks`NetPath["Nodes", "+"], 
                    NeuralNetworks`NetPath["Nodes", "att1"], 
                    NeuralNetworks`NetPath["Nodes", "att2"], 
                    NeuralNetworks`NetPath["Nodes", "att10"], 
                    NeuralNetworks`NetPath["Nodes", "att11"], 
                    NeuralNetworks`NetPath["Nodes", "att12"], 
                    NeuralNetworks`NetPath["Nodes", "att13"], 
                    NeuralNetworks`NetPath["Nodes", "att14"], 
                    NeuralNetworks`NetPath["Nodes", "att15"], 
                    NeuralNetworks`NetPath["Nodes", "att16"], 
                    NeuralNetworks`NetPath["Nodes", "att17"], 
                    NeuralNetworks`NetPath["Nodes", "att18"], 
                    NeuralNetworks`NetPath["Nodes", "att19"], 
                    NeuralNetworks`NetPath["Nodes", "att20"], 
                    NeuralNetworks`NetPath["Nodes", "att3"], 
                    NeuralNetworks`NetPath["Nodes", "att21"], 
                    NeuralNetworks`NetPath["Nodes", "att22"], 
                    NeuralNetworks`NetPath["Nodes", "att23"], 
                    NeuralNetworks`NetPath["Nodes", "att24"], 
                    NeuralNetworks`NetPath["Nodes", "att25"], 
                    NeuralNetworks`NetPath["Nodes", "att26"], 
                    NeuralNetworks`NetPath["Nodes", "att27"], 
                    NeuralNetworks`NetPath["Nodes", "att28"], 
                    NeuralNetworks`NetPath["Nodes", "att29"], 
                    NeuralNetworks`NetPath["Nodes", "att30"], 
                    NeuralNetworks`NetPath["Nodes", "att4"], 
                    NeuralNetworks`NetPath["Nodes", "att31"], 
                    NeuralNetworks`NetPath["Nodes", "att32"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "att5"], 
                    NeuralNetworks`NetPath["Nodes", "att6"], 
                    NeuralNetworks`NetPath["Nodes", "att7"], 
                    NeuralNetworks`NetPath["Nodes", "att8"], 
                    NeuralNetworks`NetPath["Nodes", "att9"], 
                    NeuralNetworks`NetPath["Nodes", "conv1"], 
                    NeuralNetworks`NetPath["Nodes", "gelu1"], 
                    NeuralNetworks`NetPath["Nodes", "conv2"], 
                    NeuralNetworks`NetPath["Nodes", "gelu2"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "positional_embedding"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "logMelSpectrogram"], 
                    NeuralNetworks`NetPath["Nodes", "+"], 
                    NeuralNetworks`NetPath["Nodes", "att1"], 
                    NeuralNetworks`NetPath["Nodes", "att2"], 
                    NeuralNetworks`NetPath["Nodes", "att10"], 
                    NeuralNetworks`NetPath["Nodes", "att11"], 
                    NeuralNetworks`NetPath["Nodes", "att12"], 
                    NeuralNetworks`NetPath["Nodes", "att13"], 
                    NeuralNetworks`NetPath["Nodes", "att14"], 
                    NeuralNetworks`NetPath["Nodes", "att15"], 
                    NeuralNetworks`NetPath["Nodes", "att16"], 
                    NeuralNetworks`NetPath["Nodes", "att17"], 
                    NeuralNetworks`NetPath["Nodes", "att18"], 
                    NeuralNetworks`NetPath["Nodes", "att19"], 
                    NeuralNetworks`NetPath["Nodes", "att20"], 
                    NeuralNetworks`NetPath["Nodes", "att3"], 
                    NeuralNetworks`NetPath["Nodes", "att21"], 
                    NeuralNetworks`NetPath["Nodes", "att22"], 
                    NeuralNetworks`NetPath["Nodes", "att23"], 
                    NeuralNetworks`NetPath["Nodes", "att24"], 
                    NeuralNetworks`NetPath["Nodes", "att25"], 
                    NeuralNetworks`NetPath["Nodes", "att26"], 
                    NeuralNetworks`NetPath["Nodes", "att27"], 
                    NeuralNetworks`NetPath["Nodes", "att28"], 
                    NeuralNetworks`NetPath["Nodes", "att29"], 
                    NeuralNetworks`NetPath["Nodes", "att30"], 
                    NeuralNetworks`NetPath["Nodes", "att4"], 
                    NeuralNetworks`NetPath["Nodes", "att31"], 
                    NeuralNetworks`NetPath["Nodes", "att32"], 
                    NeuralNetworks`NetPath["Nodes", "norm"], 
                    NeuralNetworks`NetPath["Nodes", "att5"], 
                    NeuralNetworks`NetPath["Nodes", "att6"], 
                    NeuralNetworks`NetPath["Nodes", "att7"], 
                    NeuralNetworks`NetPath["Nodes", "att8"], 
                    NeuralNetworks`NetPath["Nodes", "att9"], 
                    NeuralNetworks`NetPath["Nodes", "conv1"], 
                    NeuralNetworks`NetPath["Nodes", "gelu1"], 
                    NeuralNetworks`NetPath["Nodes", "conv2"], 
                    NeuralNetworks`NetPath["Nodes", "gelu2"], 
                    NeuralNetworks`NetPath["Nodes", "transpose"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "positional_embedding"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    Initialization :> {NetGraph}], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[NetGraph, 2550594016, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           "Choose", NetGraph, 2550594016, 
            8984896897832280092307940732054929242792336783279730908728, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<41>, <42>]"& )],
  False,
  BoxID -> 8984896897832280092307940732054929242792336783279730908728,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.960283976595799*^9, 3.960285402699657*^9},
 CellLabel->"Out[98]=",ExpressionUUID->"bed7250f-63ac-4741-903a-51e0c32ca3dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extractor", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "NetModel", "[", "\"\<Whisper-V1 Multilingual Turbo\>\"", "]"}], ",", 
       RowBox[{"AggregationLayer", "[", 
        RowBox[{"Max", ",", "1"}], "]"}]}], "}"}], "]"}], "[", 
    RowBox[{
     RowBox[{"AudioPartition", "[", 
      RowBox[{"#", ",", "30"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{3.96028439959028*^9, 3.9602845315827427`*^9},
 CellLabel->"In[99]:=",ExpressionUUID->"fbbcc027-4863-4488-bb54-3afabc1015f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NetModel", "[", "\<\"Whisper-V1 Multilingual Turbo\"\>", "]"}],
       ",", 
      RowBox[{"AggregationLayer", "[", 
       RowBox[{"Max", ",", "1"}], "]"}]}], "}"}], "]"}], "[", 
   RowBox[{
    RowBox[{"AudioPartition", "[", 
     RowBox[{"#1", ",", "30"}], "]"}], "\[LeftDoubleBracket]", "1", 
    "\[RightDoubleBracket]"}], "]"}], "&"}]], "Output",
 CellChangeTimes->{3.9602845345915813`*^9, 3.96028540292941*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"5d6d2eda-b8bd-47ec-89fe-dadbb0ae74e4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"audios", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"audioSpanish", "\[Rule]", "\"\<Spanish\>\""}], ",", 
     RowBox[{"audioFrench", "\[Rule]", "\"\<French\>\""}], ",", 
     RowBox[{"audioEnglish", "->", "\"\<English\>\""}], ",", " ", 
     RowBox[{"audioGerman", "->", "\"\<German\>\""}]}], " ", "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.945364488259308*^9, 3.945364499159975*^9}, 
   3.9453676713970737`*^9, 3.945371678400694*^9, {3.96028476895752*^9, 
   3.960284782380404*^9}, {3.960284824068385*^9, 3.9602848282473583`*^9}, {
   3.960284865568932*^9, 3.960284870843733*^9}, {3.960284967478672*^9, 
   3.960284975574917*^9}},
 CellLabel->"In[100]:=",
 "NodeID" -> 48,ExpressionUUID->"1d539281-1dd1-5d41-995f-c04b3a8cf63c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FeatureSpacePlot", "[", 
  RowBox[{"audios", ",", 
   RowBox[{"FeatureExtractor", "->", "extractor"}], ",", 
   RowBox[{"LabelingFunction", "->", "Callout"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.96028441390804*^9, 3.960284413908062*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"80108941-5e0d-4f30-b316-e6692e0e2a03"],

Cell[BoxData[
 GraphicsBox[{{}, 
   TagBox[
    {RGBColor[0.24, 0.6, 0.8], PointSize[0.012833333333333334`], 
     AbsoluteThickness[2], 
     PointBox[{{624.69775390625, -351.197998046875}, {
      545.9253540039062, -599.7313232421875}, {-702.1576538085938, 
      524.841796875}, {-468.46533203125, 426.0875549316406}}]},
    Annotation[#, "Charting`Private`Tag#1"]& ], {{}, {{GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.121320343559643, 
            2.1213203435596424`}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{5.656854249492381, 
            5.65685424949238}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-461.44164955866495`,
             432.0404601743533}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-461.44164955866495`,
             432.0404601743533}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-461.44164955866495`,
             432.0404601743533}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.121320343559643, 
            2.1213203435596424`}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{5.656854249492381, 
            5.65685424949238}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-461.44164955866495`,
             432.0404601743533}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-461.44164955866495`,
             432.0404601743533}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-461.44164955866495`,
             432.0404601743533}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{54.65685424949238, 
            12.856854249492384`}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{54.65685424949238, 
            0.8568542494923843}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{9.656854249492383, 
            0.8568542494923737}, {-461.44164955866495`, 432.0404601743533}], 
           Offset[{9.656854249492383, 
            12.856854249492374`}, {-461.44164955866495`, 
            432.0404601743533}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"German\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{32.15685424949238, 6.856854249492379}, \
{-461.44164955866495, 432.0404601743533}], NCache[
         ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
          ImageScaled[{0.5, 0.5}]]]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{2.121320343559643, 
            2.1213203435596424`}, {-695.1339713360087, 530.7947021177126}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{2.121320343559643, 
            2.1213203435596424`}, {-695.1339713360087, 530.7947021177126}], 
           Offset[{5.656854249492381, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}], 
           Offset[{7.65685424949238, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}], 
           Offset[{9.65685424949238, 5.65685424949238}, {-695.1339713360087, 
            530.7947021177126}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{50.65685424949238, 
            14.056854249492384`}, {-695.1339713360087, 530.7947021177126}], 
           Offset[{50.65685424949238, 
            0.0568542494923836}, {-695.1339713360087, 530.7947021177126}], 
           Offset[{9.65685424949238, 
            0.05685424949237472}, {-695.1339713360087, 530.7947021177126}], 
           Offset[{9.65685424949238, 
            14.056854249492375`}, {-695.1339713360087, 530.7947021177126}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"English\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{30.15685424949238, 7.056854249492379}, \
{-695.1339713360087, 530.7947021177126}], NCache[
         ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
          ImageScaled[{0.5, 0.5}]]]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.1213203435596424`, 2.121320343559643}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.1213203435596424`, 2.121320343559643}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            538.9016715313212, -593.7784179994749}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.65685424949238, 12.856854249492386`}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-9.65685424949238, 0.8568542494923852}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-48.65685424949238, 0.8568542494923763}, {
            538.9016715313212, -593.7784179994749}], 
           Offset[{-48.65685424949238, 12.856854249492375`}, {
            538.9016715313212, -593.7784179994749}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"French\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-29.15685424949238, 6.856854249492381}, \
{538.9016715313212, -593.7784179994749}], NCache[
         ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
          ImageScaled[{0.5, 0.5}]]]}], GraphicsGroupBox[{
        {GrayLevel[1], AbsoluteThickness[4], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]], CapForm["Butt"], JoinForm[
         "Round"], 
         BSplineCurveBox[{
          Offset[{-2.1213203435596424`, 2.121320343559643}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], 
         BSplineCurveBox[{
          Offset[{-2.1213203435596424`, 2.121320343559643}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-5.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-7.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-9.65685424949238, 5.656854249492381}, {
            617.674071433665, -345.2450928041623}]}]}, 
        {EdgeForm[None], FaceForm[{GrayLevel[1], Opacity[
          NCache[
           Rational[2, 3], 0.6666666666666666]]}], 
         PolygonBox[{
          Offset[{-9.65685424949238, 14.056854249492385`}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-9.65685424949238, 0.05685424949238538}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-53.65685424949238, 0.05685424949237472}, {
            617.674071433665, -345.2450928041623}], 
           Offset[{-53.65685424949238, 14.056854249492375`}, {
            617.674071433665, -345.2450928041623}]}]}, 
        {RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
          AbsoluteThickness[1.25], EdgeForm[None]}, {}, InsetBox[
         StyleBox[
          RotationBox["\<\"Spanish\"\>",
           BoxRotation->0.],
          StripOnInput->False,
          LineOpacity->1,
          FrontFaceOpacity->1,
          BackFaceOpacity->1,
          Opacity->1,
          FontOpacity->1], 
         Offset[{-31.65685424949238, 7.05685424949238}, \
{617.674071433665, -345.2450928041623}], NCache[
         ImageScaled[{Rational[1, 2], Rational[1, 2]}], 
          ImageScaled[{0.5, 0.5}]]]}]}, {}}}},
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->{{All, All}, {All, All}},
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.24, 0.6, 0.8], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.95, 0.627, 0.1425], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.455, 0.7, 0.21], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.578, 0.51, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.4, 0.64, 1.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[1., 0.75, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.8, 0.4, 0.76], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.637, 0.65, 0.], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[2]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05], 
    "OptimizePlotMarkers" -> True, "IncludeHighlighting" -> "CurrentPoint", 
    "HighlightStyle" -> Automatic, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->All,
  PlotRangePadding->{{
     Scaled[0.05], 
     Scaled[0.05]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.960284526723102*^9, 3.960284644127619*^9, 
  3.960284858600865*^9, 3.960285025617529*^9, 3.960285450694035*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"dd87c228-d566-40b5-828f-b28195a4f59d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"featuresEnglish", " ", "=", " ", 
  RowBox[{"extractor", "[", "audioEnglish", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"featuresGerman", " ", "=", " ", 
  RowBox[{"extractor", "[", "audioGerman", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"featuresFrench", " ", "=", " ", 
  RowBox[{"extractor", "[", "audioFrench", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"featuresSpanish", " ", "=", " ", 
  RowBox[{"extractor", "[", "audioSpanish", "]"}]}]}], "Input",
 CellChangeTimes->{{3.9602851099559107`*^9, 3.960285185212448*^9}, {
  3.96028529092264*^9, 3.96028530297618*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"2819672f-1e51-4ea2-b0a2-466c49b2a896"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.7814096212387085`", ",", "0.8147442936897278`", ",", 
   "0.7629739046096802`", ",", "0.6350752115249634`", ",", 
   "0.845123291015625`", ",", "1.013846755027771`", ",", 
   "0.7416359186172485`", ",", "1.209362506866455`", ",", 
   "1.2696791887283325`", ",", "0.9752967357635498`", ",", 
   "0.843000054359436`", ",", "1.0212163925170898`", ",", 
   "0.8296914100646973`", ",", "0.7814470529556274`", ",", 
   "0.8862894177436829`", ",", "1.1850899457931519`", ",", 
   "0.9661453366279602`", ",", "0.9701955914497375`", ",", 
   "1.3460315465927124`", ",", "1.1747113466262817`", ",", 
   "1.0754873752593994`", ",", "1.1779788732528687`", ",", 
   "0.8386973738670349`", ",", "0.9106819033622742`", ",", 
   "0.6864610910415649`", ",", "0.7484582662582397`", ",", 
   "0.7189717292785645`", ",", "0.7966206073760986`", ",", 
   "1.0786393880844116`", ",", "0.8097032308578491`", ",", 
   "1.0225951671600342`", ",", "0.752374529838562`", ",", 
   "0.7711654305458069`", ",", "0.8235425353050232`", ",", 
   "1.3904733657836914`", ",", "0.9707899689674377`", ",", 
   "0.7747044563293457`", ",", "0.9688301682472229`", ",", 
   "0.8427728414535522`", ",", "0.9459127187728882`", ",", 
   "1.1004135608673096`", ",", "1.0114564895629883`", ",", 
   "0.9353741407394409`", ",", "0.9800033569335938`", ",", 
   "0.6457761526107788`", ",", "1.2110145092010498`", ",", 
   "0.9801093935966492`", ",", "0.9550374150276184`", ",", 
   "1.3810691833496094`", ",", "0.9837127923965454`", ",", 
   "0.9331400990486145`", ",", "0.7635622620582581`", ",", 
   "1.3129444122314453`", ",", "0.8182506561279297`", ",", 
   "1.3018643856048584`", ",", "1.1957242488861084`", ",", 
   "1.3616957664489746`", ",", "1.1678597927093506`", ",", 
   "1.6400949954986572`", ",", "1.0813766717910767`", ",", 
   "1.083832025527954`", ",", "3.018698215484619`", ",", "1.215618371963501`",
    ",", "1.1943050622940063`", ",", "0.8843774199485779`", ",", 
   "1.0536692142486572`", ",", "0.9926767349243164`", ",", 
   "1.3310294151306152`", ",", "0.8892887234687805`", ",", 
   "1.3911793231964111`", ",", "0.8065874576568604`", ",", 
   "1.0912612676620483`", ",", "1.004565715789795`", ",", 
   "0.8155051469802856`", ",", "1.1534557342529297`", ",", 
   "0.9309070706367493`", ",", "0.9104539752006531`", ",", 
   "1.0163213014602661`", ",", "0.7887711524963379`", ",", 
   "0.8596228957176208`", ",", "1.00932776927948`", ",", 
   "0.8770374059677124`", ",", "0.8439130783081055`", ",", 
   "0.9561430811882019`", ",", "1.3052159547805786`", ",", 
   "1.001716136932373`", ",", "0.8600565195083618`", ",", 
   "0.7992666959762573`", ",", "1.0722051858901978`", ",", 
   "1.0609949827194214`", ",", "1.8898673057556152`", ",", 
   "0.7586063146591187`", ",", "0.901616096496582`", ",", 
   "0.47880685329437256`", ",", "0.8758402466773987`", ",", 
   "1.1080169677734375`", ",", "1.0711168050765991`", ",", 
   "0.7535602450370789`", ",", "1.225939393043518`", ",", 
   "0.9602848291397095`", ",", "1.4415788650512695`", ",", 
   "0.9567776918411255`", ",", "0.8523546457290649`", ",", 
   "0.7641178965568542`", ",", "0.802091121673584`", ",", 
   "0.8632723093032837`", ",", "1.2427407503128052`", ",", 
   "0.8301481604576111`", ",", "1.2603967189788818`", ",", 
   "0.9363153576850891`", ",", "1.0161712169647217`", ",", 
   "1.3216748237609863`", ",", "0.9140992164611816`", ",", 
   "1.1221787929534912`", ",", "1.0107370615005493`", ",", 
   "0.9462261199951172`", ",", "2.253615379333496`", ",", 
   "1.1515153646469116`", ",", "0.9948841333389282`", ",", 
   "0.9937307834625244`", ",", "1.1733158826828003`", ",", 
   "0.8553985953330994`", ",", "1.2509781122207642`", ",", 
   "1.2449030876159668`", ",", "0.8586471676826477`", ",", 
   "0.9573168158531189`", ",", "1.0781430006027222`", ",", 
   "0.8487415313720703`", ",", "0.7004718780517578`", ",", 
   "0.8344171643257141`", ",", "1.0401685237884521`", ",", 
   "1.0680443048477173`", ",", "0.8765579462051392`", ",", 
   "0.9963765144348145`", ",", "0.7480785846710205`", ",", 
   "0.9288830757141113`", ",", "1.0150399208068848`", ",", 
   "0.9626864194869995`", ",", "0.7102504372596741`", ",", 
   "1.1081953048706055`", ",", "1.0974427461624146`", ",", 
   "1.2818866968154907`", ",", "1.145638346672058`", ",", 
   "1.136701226234436`", ",", "0.9433680176734924`", ",", 
   "0.9107699394226074`", ",", "0.9963635206222534`", ",", 
   "0.9954119920730591`", ",", "0.9342066645622253`", ",", 
   "0.924921452999115`", ",", "0.9337016940116882`", ",", 
   "3.959794044494629`", ",", "0.8131206631660461`", ",", 
   "0.8948593139648438`", ",", "1.2177351713180542`", ",", 
   "0.9189326167106628`", ",", "1.6977983713150024`", ",", 
   "0.8927373290061951`", ",", "1.59645414352417`", ",", 
   "1.1271857023239136`", ",", "1.719252347946167`", ",", 
   "1.118669033050537`", ",", "0.9490153193473816`", ",", 
   "0.8319711089134216`", ",", "0.9165849685668945`", ",", 
   "0.9540528655052185`", ",", "0.9788287281990051`", ",", 
   "0.8209973573684692`", ",", "0.947499692440033`", ",", 
   "0.7211357951164246`", ",", "1.2802447080612183`", ",", 
   "1.4785879850387573`", ",", "0.8881099820137024`", ",", 
   "0.9869219064712524`", ",", "1.0834811925888062`", ",", 
   "1.1483380794525146`", ",", "1.2232047319412231`", ",", 
   "1.189224123954773`", ",", "1.2529449462890625`", ",", 
   "0.8627481460571289`", ",", "1.3789539337158203`", ",", 
   "0.7847607135772705`", ",", "4.261788845062256`", ",", 
   "0.7388603091239929`", ",", "1.105589509010315`", ",", 
   "1.2094700336456299`", ",", "1.0236635208129883`", ",", 
   "0.6629917621612549`", ",", "0.7275898456573486`", ",", 
   "1.0829049348831177`", ",", "1.3310672044754028`", ",", 
   "0.995558500289917`", ",", "1.1484819650650024`", ",", 
   "1.159633755683899`", ",", "1.5045329332351685`", ",", 
   "1.283980369567871`", ",", "1.1789695024490356`", ",", 
   "1.4315736293792725`", ",", "1.641849398612976`", ",", 
   "1.2314000129699707`", ",", "1.2661858797073364`", ",", 
   "1.1091617345809937`", ",", "1.2286325693130493`", ",", 
   "0.9988361597061157`", ",", "0.7910271883010864`", ",", 
   "0.8110724687576294`", ",", "1.0440913438796997`", ",", 
   "0.9754356741905212`", ",", "1.2202214002609253`", ",", 
   "0.8061028718948364`", ",", "0.7811328768730164`", ",", 
   "0.7990905046463013`", ",", "0.7399560809135437`", ",", 
   "0.8909203410148621`", ",", "0.9865044355392456`", ",", 
   "1.3501955270767212`", ",", "1.467324137687683`", ",", 
   "0.9967100620269775`", ",", "1.217345952987671`", ",", 
   "1.0814003944396973`", ",", "1.2684956789016724`", ",", 
   "0.8480416536331177`", ",", "1.0420597791671753`", ",", 
   "1.3333559036254883`", ",", "0.9408223628997803`", ",", 
   "0.7030193209648132`", ",", "1.0454636812210083`", ",", 
   "2.703495979309082`", ",", "1.0909806489944458`", ",", 
   "1.324562430381775`", ",", "1.1468055248260498`", ",", 
   "2.618936538696289`", ",", "0.9186348915100098`", ",", 
   "0.6930016875267029`", ",", "1.2350986003875732`", ",", 
   "1.198294997215271`", ",", "1.1724154949188232`", ",", 
   "0.9609798192977905`", ",", "0.9622291326522827`", ",", 
   "0.9684975743293762`", ",", "0.9775440692901611`", ",", 
   "1.1301735639572144`", ",", "1.168609857559204`", ",", 
   "0.8318767547607422`", ",", "1.025670051574707`", ",", 
   "0.8965232372283936`", ",", "0.930204451084137`", ",", 
   "1.2798815965652466`", ",", "1.1762256622314453`", ",", 
   "0.857813835144043`", ",", "1.1022056341171265`", ",", 
   "0.7975829243659973`", ",", "1.0164066553115845`", ",", 
   "0.8752739429473877`", ",", "1.305271863937378`", ",", 
   "0.8440781235694885`", ",", "1.1534912586212158`", ",", 
   "1.3026565313339233`", ",", "1.199204683303833`", ",", 
   "0.9502216577529907`", ",", "0.881483256816864`", ",", 
   "0.8662559390068054`", ",", "1.1871079206466675`", ",", 
   "0.9528337717056274`", ",", "1.129244327545166`", ",", 
   "1.2169795036315918`", ",", "1.3037691116333008`", ",", 
   "0.7882176637649536`", ",", "1.1225851774215698`", ",", 
   "0.8972115516662598`", ",", "0.8039590716362`", ",", "1.186346173286438`", 
   ",", "1.1512926816940308`", ",", "1.161953091621399`", ",", 
   "1.0381048917770386`", ",", "0.8947300910949707`", ",", 
   "1.1541597843170166`", ",", "1.0549947023391724`", ",", 
   "0.7083166241645813`", ",", "0.6009681820869446`", ",", 
   "0.7069769501686096`", ",", "1.039057731628418`", ",", 
   "1.092337965965271`", ",", "1.075774908065796`", ",", 
   "1.2500945329666138`", ",", "0.8513337969779968`", ",", 
   "1.2988024950027466`", ",", "0.971138596534729`", ",", 
   "1.0045206546783447`", ",", "1.1883947849273682`", ",", 
   "0.9254393577575684`", ",", "0.8887921571731567`", ",", 
   "0.9317417740821838`", ",", "0.9477190971374512`", ",", 
   "1.1610866785049438`", ",", "1.0905636548995972`", ",", 
   "0.844993531703949`", ",", "0.8001274466514587`", ",", 
   "1.3748705387115479`", ",", "1.3712764978408813`", ",", 
   "0.8988330960273743`", ",", "0.8511214852333069`", ",", 
   "0.8263971209526062`", ",", "1.3052375316619873`", ",", 
   "0.9473157525062561`", ",", "0.635725200176239`", ",", 
   "1.5225859880447388`", ",", "1.063817024230957`", ",", 
   "1.3273471593856812`", ",", "1.1478184461593628`", ",", 
   "1.1309938430786133`", ",", "0.7815253138542175`", ",", 
   "0.8422038555145264`", ",", "1.1917822360992432`", ",", 
   "1.0095258951187134`", ",", "0.8558363318443298`", ",", 
   "1.1875364780426025`", ",", "1.2460789680480957`", ",", 
   "2.2958569526672363`", ",", "7.199969291687012`", ",", 
   "0.6972190737724304`", ",", "0.9056340456008911`", ",", 
   "1.1183936595916748`", ",", "1.1490811109542847`", ",", 
   "0.7533189654350281`", ",", "0.8369187116622925`", ",", 
   "1.0521024465560913`", ",", "0.8300495147705078`", ",", 
   "3.038249969482422`", ",", "0.6412972807884216`", ",", 
   "0.885761559009552`", ",", "1.256697177886963`", ",", 
   "0.8735300898551941`", ",", "0.9569929838180542`", ",", 
   "0.7439942359924316`", ",", "0.8207120895385742`", ",", 
   "1.1571259498596191`", ",", "1.2233572006225586`", ",", 
   "0.9004871845245361`", ",", "0.9543792009353638`", ",", 
   "0.7303920388221741`", ",", "1.0690184831619263`", ",", 
   "0.8571252822875977`", ",", "1.1091963052749634`", ",", 
   "1.084221363067627`", ",", "0.846943199634552`", ",", 
   "0.9489364624023438`", ",", "0.9506214261054993`", ",", 
   "0.8632678389549255`", ",", "1.1394010782241821`", ",", 
   "1.0813308954238892`", ",", "1.3733867406845093`", ",", 
   "0.9014514684677124`", ",", "1.1022965908050537`", ",", 
   "1.039933681488037`", ",", "1.107659101486206`", ",", 
   "0.8194560408592224`", ",", "1.1594821214675903`", ",", 
   "1.2015947103500366`", ",", "1.0796849727630615`", ",", 
   "0.832435667514801`", ",", "1.1683635711669922`", ",", 
   "1.1449741125106812`", ",", "1.1729977130889893`", ",", 
   "1.2503095865249634`", ",", "1.1406651735305786`", ",", 
   "0.879085123538971`", ",", "0.8677040934562683`", ",", 
   "1.3024497032165527`", ",", "1.0982052087783813`", ",", 
   "1.1695648431777954`", ",", "0.9126219153404236`", ",", 
   "1.0374691486358643`", ",", "1.0214627981185913`", ",", 
   "1.1911932229995728`", ",", "0.9207610487937927`", ",", 
   "1.041952133178711`", ",", "0.8486736416816711`", ",", 
   "1.350084662437439`", ",", "1.307600498199463`", ",", 
   "1.0839722156524658`", ",", "1.15717351436615`", ",", 
   "0.9306474328041077`", ",", "1.1791988611221313`", ",", 
   "0.8123360872268677`", ",", "1.2561265230178833`", ",", 
   "0.9584992527961731`", ",", "1.117543339729309`", ",", 
   "1.0364556312561035`", ",", "0.7197229862213135`", ",", 
   "0.9228623509407043`", ",", "2.053948402404785`", ",", 
   "2.388601064682007`", ",", "0.9171776175498962`", ",", 
   "1.3181363344192505`", ",", "0.7801941633224487`", ",", 
   "0.956218957901001`", ",", "0.8150385618209839`", ",", 
   "1.2567031383514404`", ",", "0.46882522106170654`", ",", 
   "0.7306504845619202`", ",", "0.7461825013160706`", ",", 
   "0.6587992310523987`", ",", "2.1142635345458984`", ",", 
   "0.9408478736877441`", ",", "0.9658043384552002`", ",", 
   "1.0950645208358765`", ",", "1.0155367851257324`", ",", 
   "0.8016096949577332`", ",", "1.1064050197601318`", ",", 
   "1.0081552267074585`", ",", "1.0093398094177246`", ",", 
   "1.1160615682601929`", ",", "0.7380051612854004`", ",", 
   "0.9679251313209534`", ",", "1.377423882484436`", ",", 
   "1.024151086807251`", ",", "1.4757741689682007`", ",", 
   "1.0556812286376953`", ",", "1.125569462776184`", ",", 
   "0.9687902331352234`", ",", "1.0684319734573364`", ",", 
   "0.6710175275802612`", ",", "0.9153996706008911`", ",", 
   "0.9104900360107422`", ",", "0.718010425567627`", ",", 
   "1.098183274269104`", ",", "0.9656131863594055`", ",", 
   "0.7158288955688477`", ",", "1.1434494256973267`", ",", 
   "1.0657596588134766`", ",", "0.8731268048286438`", ",", 
   "1.0807163715362549`", ",", "1.0889403820037842`", ",", 
   "1.2454502582550049`", ",", "1.1510522365570068`", ",", 
   "0.8798976540565491`", ",", "0.9598649740219116`", ",", 
   "1.0700732469558716`", ",", "0.8464226126670837`", ",", 
   "1.3823524713516235`", ",", "0.9190743565559387`", ",", 
   "0.8982951045036316`", ",", "0.8138909339904785`", ",", 
   "1.2424657344818115`", ",", "1.6790390014648438`", ",", 
   "0.9507540464401245`", ",", "0.7790993452072144`", ",", 
   "1.2888026237487793`", ",", "0.9095727801322937`", ",", 
   "1.146880030632019`", ",", "1.4072381258010864`", ",", 
   "0.934817373752594`", ",", "1.1445960998535156`", ",", 
   "0.8270404934883118`", ",", "0.6140444874763489`", ",", 
   "0.7976765632629395`", ",", "1.4965004920959473`", ",", 
   "0.9631321430206299`", ",", "1.09047269821167`", ",", 
   "0.9852727651596069`", ",", "1.0656638145446777`", ",", 
   "1.0677286386489868`", ",", "0.7758592367172241`", ",", 
   "0.7748394012451172`", ",", "0.8692407608032227`", ",", 
   "1.804129958152771`", ",", "0.9742400050163269`", ",", 
   "1.0021309852600098`", ",", "1.0819138288497925`", ",", 
   "1.1208299398422241`", ",", "0.6935141086578369`", ",", 
   "1.291939616203308`", ",", "0.9634758830070496`", ",", "1.1906818151474`", 
   ",", "0.932634711265564`", ",", "1.1434203386306763`", ",", 
   "2.034147262573242`", ",", "0.8775098323822021`", ",", 
   "1.0123307704925537`", ",", "0.8704954385757446`", ",", 
   "1.0108989477157593`", ",", "1.152519702911377`", ",", 
   "1.3829288482666016`", ",", "0.9385667443275452`", ",", 
   "0.9856938719749451`", ",", "1.0541589260101318`", ",", 
   "0.6103178262710571`", ",", "1.0111292600631714`", ",", 
   "0.7077469229698181`", ",", "0.8722672462463379`", ",", 
   "0.8090611696243286`", ",", "0.8623020052909851`", ",", 
   "0.7316918969154358`", ",", "0.8904427886009216`", ",", 
   "0.6466662883758545`", ",", "1.3013687133789062`", ",", 
   "1.0844428539276123`", ",", "1.2503443956375122`", ",", 
   "1.2496987581253052`", ",", "0.9426162838935852`", ",", 
   "1.1431875228881836`", ",", "0.8659396171569824`", ",", 
   "1.2924896478652954`", ",", "0.9579176902770996`", ",", 
   "0.8780574202537537`", ",", "0.8618539571762085`", ",", 
   "0.8684304356575012`", ",", "0.9648000597953796`", ",", 
   "1.0874629020690918`", ",", "0.8042250275611877`", ",", 
   "0.6059490442276001`", ",", "0.7478551268577576`", ",", 
   "0.7609593868255615`", ",", "0.8252922296524048`", ",", 
   "0.9079559445381165`", ",", "0.8382810950279236`", ",", 
   "0.8797274231910706`", ",", "1.1107672452926636`", ",", 
   "0.6839281320571899`", ",", "0.8932097554206848`", ",", 
   "0.9519158601760864`", ",", "1.208706021308899`", ",", 
   "0.9540929794311523`", ",", "0.7199150323867798`", ",", 
   "0.8820925354957581`", ",", "0.8648152947425842`", ",", 
   "1.0058457851409912`", ",", "0.8013722896575928`", ",", 
   "0.8867719173431396`", ",", "0.9251962900161743`", ",", 
   "0.8580517768859863`", ",", "1.1555119752883911`", ",", 
   "0.9388103485107422`", ",", "1.1595909595489502`", ",", 
   "1.323954701423645`", ",", "0.8043401837348938`", ",", 
   "1.199699878692627`", ",", "0.9110965728759766`", ",", 
   "1.2149934768676758`", ",", "0.9443555474281311`", ",", 
   "1.013286828994751`", ",", "0.7602047920227051`", ",", 
   "0.9266890287399292`", ",", "1.64759361743927`", ",", 
   "1.0735535621643066`", ",", "0.739056408405304`", ",", 
   "1.298068881034851`", ",", "0.9386438131332397`", ",", 
   "1.1182892322540283`", ",", "0.9248680472373962`", ",", 
   "0.9758581519126892`", ",", "1.5991809368133545`", ",", 
   "0.9199824333190918`", ",", "1.096440076828003`", ",", 
   "1.046624779701233`", ",", "0.6001601219177246`", ",", 
   "0.9279556274414062`", ",", "1.2767888307571411`", ",", 
   "0.871385931968689`", ",", "0.8555724620819092`", ",", 
   "1.0766152143478394`", ",", "0.927417516708374`", ",", 
   "0.8337759375572205`", ",", "0.7788748145103455`", ",", 
   "0.8274507522583008`", ",", "0.7649789452552795`", ",", 
   "0.7788688540458679`", ",", "0.7202165722846985`", ",", 
   "0.6097050309181213`", ",", "0.7818489670753479`", ",", 
   "0.9069200158119202`", ",", "0.8127079010009766`", ",", 
   "1.001814365386963`", ",", "1.1573606729507446`", ",", 
   "0.8714603781700134`", ",", "1.136644959449768`", ",", 
   "0.947884202003479`", ",", "0.931806206703186`", ",", 
   "0.8076695203781128`", ",", "1.1126447916030884`", ",", 
   "0.9046091437339783`", ",", "0.8950186967849731`", ",", 
   "1.24776291847229`", ",", "0.8583575487136841`", ",", 
   "0.9893500804901123`", ",", "1.6639807224273682`", ",", 
   "1.1640022993087769`", ",", "1.1406723260879517`", ",", 
   "1.2605950832366943`", ",", "0.8863651752471924`", ",", 
   "0.8134059309959412`", ",", "0.9711154103279114`", ",", 
   "0.9355611205101013`", ",", "2.4636130332946777`", ",", 
   "1.1294827461242676`", ",", "0.7390501499176025`", ",", 
   "0.7547147274017334`", ",", "0.7866143584251404`", ",", 
   "0.7815456390380859`", ",", "0.8166041374206543`", ",", 
   "0.8626318573951721`", ",", "1.110053300857544`", ",", 
   "0.8521499037742615`", ",", "0.8829078078269958`", ",", 
   "0.8558363914489746`", ",", "1.0043038129806519`", ",", 
   "1.0784846544265747`", ",", "1.4889447689056396`", ",", 
   "0.7332176566123962`", ",", "0.9735326170921326`", ",", 
   "1.299172282218933`", ",", "0.6995381712913513`", ",", 
   "0.6614595055580139`", ",", "0.97046959400177`", ",", 
   "1.2346932888031006`", ",", "1.0289944410324097`", ",", 
   "1.3845256567001343`", ",", "1.0755542516708374`", ",", 
   "1.1200116872787476`", ",", "0.9050152897834778`", ",", 
   "0.7846964597702026`", ",", "0.6370547413825989`", ",", 
   "1.3289330005645752`", ",", "0.9201993942260742`", ",", 
   "1.2458999156951904`", ",", "0.6227209568023682`", ",", 
   "0.9371863603591919`", ",", "1.0109251737594604`", ",", 
   "1.0312837362289429`", ",", "1.275437831878662`", ",", 
   "0.8307894468307495`", ",", "0.9242498874664307`", ",", 
   "1.0685392618179321`", ",", "1.1016161441802979`", ",", 
   "10.018220901489258`", ",", "0.6954251527786255`", ",", 
   "0.9394800662994385`", ",", "1.0951638221740723`", ",", 
   "1.080583095550537`", ",", "1.4570491313934326`", ",", 
   "0.8273369073867798`", ",", "1.160662055015564`", ",", 
   "1.0454866886138916`", ",", "1.6739983558654785`", ",", 
   "0.8985316157341003`", ",", "0.9582327604293823`", ",", 
   "0.9097880721092224`", ",", "1.0308374166488647`", ",", 
   "0.715840220451355`", ",", "0.840318500995636`", ",", 
   "1.3459337949752808`", ",", "0.8225691318511963`", ",", 
   "0.9756945967674255`", ",", "1.043816328048706`", ",", 
   "1.0476282835006714`", ",", "1.2468808889389038`", ",", 
   "0.7873640060424805`", ",", "0.7964413166046143`", ",", 
   "0.8604746460914612`", ",", "0.8819752931594849`", ",", 
   "0.8353511095046997`", ",", "1.1299272775650024`", ",", 
   "1.1264457702636719`", ",", "0.930895209312439`", ",", 
   "0.8024288415908813`", ",", "0.865074098110199`", ",", 
   "1.3216246366500854`", ",", "0.693244993686676`", ",", 
   "0.9267441034317017`", ",", "1.0257830619812012`", ",", 
   "0.8276496529579163`", ",", "0.8422681093215942`", ",", 
   "1.438244104385376`", ",", "0.8065766096115112`", ",", 
   "1.0199685096740723`", ",", "1.1284903287887573`", ",", 
   "0.8506460189819336`", ",", "0.9135993123054504`", ",", 
   "0.8215759992599487`", ",", "1.1588846445083618`", ",", 
   "1.0443699359893799`", ",", "0.966850757598877`", ",", 
   "0.9167417883872986`", ",", "1.218476414680481`", ",", 
   "1.0633275508880615`", ",", "1.095076560974121`", ",", 
   "0.7855852246284485`", ",", "1.2355138063430786`", ",", 
   "0.970339298248291`", ",", "1.1301275491714478`", ",", 
   "2.1715192794799805`", ",", "0.9170922636985779`", ",", 
   "1.1251647472381592`", ",", "1.1461327075958252`", ",", 
   "1.2808666229248047`", ",", "1.2266947031021118`", ",", 
   "1.1562682390213013`", ",", "0.941872775554657`", ",", 
   "0.8901645541191101`", ",", "0.8607997894287109`", ",", 
   "1.401754379272461`", ",", "1.2243150472640991`", ",", 
   "1.1268380880355835`", ",", "0.8906726241111755`", ",", 
   "1.6197422742843628`", ",", "0.775035560131073`", ",", 
   "0.7995904088020325`", ",", "0.6700552105903625`", ",", 
   "1.31198251247406`", ",", "0.958386242389679`", ",", "0.9943202137947083`",
    ",", "0.7191818356513977`", ",", "0.7933993339538574`", ",", 
   "0.9878864884376526`", ",", "1.00737726688385`", ",", "1.221887230873108`",
    ",", "1.155415654182434`", ",", "1.1042286157608032`", ",", 
   "0.8836774230003357`", ",", "0.9949360489845276`", ",", 
   "1.1591308116912842`", ",", "0.9217859506607056`", ",", 
   "1.0519089698791504`", ",", "1.2899824380874634`", ",", 
   "0.7537555694580078`", ",", "0.9009354114532471`", ",", 
   "0.7290788888931274`", ",", "1.1937495470046997`", ",", 
   "2.1651692390441895`", ",", "1.1787090301513672`", ",", 
   "1.176632285118103`", ",", "1.2025398015975952`", ",", 
   "1.098356008529663`", ",", "0.9069141745567322`", ",", 
   "1.2458032369613647`", ",", "1.0833983421325684`", ",", 
   "0.8549893498420715`", ",", "1.2089630365371704`", ",", 
   "1.163938045501709`", ",", "1.008744478225708`", ",", 
   "0.9136626720428467`", ",", "1.0146889686584473`", ",", 
   "0.9847506880760193`", ",", "1.096531629562378`", ",", 
   "1.0465166568756104`", ",", "0.7273749709129333`", ",", 
   "1.004461646080017`", ",", "0.9932880401611328`", ",", 
   "0.9911721348762512`", ",", "1.2521847486495972`", ",", 
   "1.1719900369644165`", ",", "1.603265643119812`", ",", 
   "1.146154761314392`", ",", "1.0098271369934082`", ",", 
   "1.2411613464355469`", ",", "2.4032480716705322`", ",", 
   "1.039785623550415`", ",", "1.0475183725357056`", ",", 
   "1.0261881351470947`", ",", "1.0282148122787476`", ",", 
   "1.1745595932006836`", ",", "0.9498677253723145`", ",", 
   "1.3690437078475952`", ",", "1.1399807929992676`", ",", 
   "1.005098819732666`", ",", "0.707686722278595`", ",", 
   "0.9723279476165771`", ",", "1.0823729038238525`", ",", 
   "1.2453866004943848`", ",", "0.9119285345077515`", ",", 
   "1.04949951171875`", ",", "0.8495668768882751`", ",", 
   "0.9626157283782959`", ",", "0.9805490374565125`", ",", 
   "0.924169659614563`", ",", "0.8959470391273499`", ",", 
   "1.3109943866729736`", ",", "1.1937880516052246`", ",", 
   "0.7989538311958313`", ",", "1.282507300376892`", ",", 
   "0.9736149311065674`", ",", "0.8345394730567932`", ",", 
   "1.0755008459091187`", ",", "1.2029426097869873`", ",", 
   "0.2340264469385147`", ",", "0.7796154022216797`", ",", 
   "1.0864814519882202`", ",", "0.8915355801582336`", ",", 
   "1.2551993131637573`", ",", "0.7726359367370605`", ",", 
   "0.9904864430427551`", ",", "1.0473297834396362`", ",", 
   "1.3631027936935425`", ",", "1.3120932579040527`", ",", 
   "0.9149521589279175`", ",", "1.027818202972412`", ",", 
   "0.7804621458053589`", ",", "1.3326396942138672`", ",", 
   "0.9220018982887268`", ",", "1.880729079246521`", ",", 
   "0.9718213081359863`", ",", "0.9359322190284729`", ",", 
   "1.219930648803711`", ",", "1.0770872831344604`", ",", 
   "0.7673172950744629`", ",", "0.8647145628929138`", ",", 
   "0.8687320947647095`", ",", "1.0658788681030273`", ",", 
   "1.1642980575561523`", ",", "1.0222954750061035`", ",", 
   "0.9610373973846436`", ",", "0.6986346244812012`", ",", 
   "1.0352070331573486`", ",", "0.9270523190498352`", ",", 
   "0.9165186285972595`", ",", "1.109397292137146`", ",", 
   "1.0343825817108154`", ",", "1.0443159341812134`", ",", 
   "1.3241136074066162`", ",", "1.1299476623535156`", ",", 
   "1.1177273988723755`", ",", "1.2155945301055908`", ",", 
   "1.180993676185608`", ",", "1.199830174446106`", ",", 
   "0.7983494400978088`", ",", "1.590881586074829`", ",", 
   "0.9902482628822327`", ",", "0.9922529458999634`", ",", 
   "0.9381816983222961`", ",", "1.2784888744354248`", ",", 
   "1.0795342922210693`", ",", "1.1315664052963257`", ",", 
   "1.245273470878601`", ",", "1.0785564184188843`", ",", 
   "1.197928547859192`", ",", "0.8784247636795044`", ",", 
   "1.147707223892212`", ",", "1.380852460861206`", ",", 
   "1.0852465629577637`", ",", "0.9645747542381287`", ",", 
   "1.2551608085632324`", ",", "1.2365812063217163`", ",", 
   "0.7528150677680969`", ",", "1.0711772441864014`", ",", 
   "1.0919559001922607`", ",", "1.203104853630066`", ",", 
   "0.9852448105812073`", ",", "0.8329910635948181`", ",", 
   "1.028973937034607`", ",", "0.8613653182983398`", ",", 
   "1.2214010953903198`", ",", "0.9831708669662476`", ",", 
   "1.1810147762298584`", ",", "1.1351619958877563`", ",", 
   "0.9498013257980347`", ",", "0.9021514654159546`", ",", 
   "0.6498523354530334`", ",", "0.8885440230369568`", ",", 
   "1.0150032043457031`", ",", "0.7734269499778748`", ",", 
   "1.2297693490982056`", ",", "0.8227344155311584`", ",", 
   "0.778494119644165`", ",", "1.0842899084091187`", ",", 
   "1.1271088123321533`", ",", "1.133565902709961`", ",", 
   "1.0893090963363647`", ",", "0.7176021933555603`", ",", 
   "0.978421688079834`", ",", "1.0235289335250854`", ",", 
   "0.9031219482421875`", ",", "1.1685799360275269`", ",", 
   "0.8702783584594727`", ",", "1.047539472579956`", ",", 
   "0.7875086665153503`", ",", "1.0503108501434326`", ",", 
   "1.2145825624465942`", ",", "1.0593079328536987`", ",", 
   "1.4543375968933105`", ",", "0.693877637386322`", ",", "0.9031942486763`", 
   ",", "0.9150721430778503`", ",", "0.9181346297264099`", ",", 
   "0.9121853113174438`", ",", "1.0146907567977905`", ",", 
   "0.9747090935707092`", ",", "0.7564526796340942`", ",", 
   "0.8176385164260864`", ",", "1.3772079944610596`", ",", 
   "1.2194511890411377`", ",", "1.016883373260498`", ",", 
   "0.9791853427886963`", ",", "0.9754489660263062`", ",", 
   "1.1511894464492798`", ",", "1.03175950050354`", ",", 
   "0.8324171900749207`", ",", "0.9196974635124207`", ",", 
   "0.8810534477233887`", ",", "0.9449460506439209`", ",", 
   "1.4662083387374878`", ",", "0.8957811594009399`", ",", 
   "0.5950962901115417`", ",", "1.060608148574829`", ",", 
   "1.0047109127044678`", ",", "1.065916657447815`", ",", 
   "1.2848312854766846`", ",", "1.1700278520584106`", ",", 
   "0.8069270849227905`", ",", "0.7364922165870667`", ",", 
   "0.8274611830711365`", ",", "1.1559224128723145`", ",", 
   "0.7445716857910156`", ",", "1.2383099794387817`", ",", 
   "0.8490603566169739`", ",", "1.5737560987472534`", ",", 
   "0.9811697006225586`", ",", "1.2933968305587769`", ",", 
   "1.465185284614563`", ",", "1.0229506492614746`", ",", 
   "0.8455690741539001`", ",", "0.9579141736030579`", ",", 
   "0.6761019229888916`", ",", "0.7884628176689148`", ",", 
   "0.7161311507225037`", ",", "1.2667796611785889`", ",", 
   "0.6497010588645935`", ",", "1.3322193622589111`", ",", 
   "1.0215110778808594`", ",", "1.0505839586257935`", ",", 
   "0.9788269400596619`", ",", "1.0550076961517334`", ",", 
   "1.0635720491409302`", ",", "1.1869947910308838`", ",", 
   "0.6878264546394348`", ",", "1.348875641822815`", ",", 
   "0.9392178654670715`", ",", "0.8513957858085632`", ",", 
   "1.1419345140457153`", ",", "0.9318000674247742`", ",", 
   "1.0688376426696777`", ",", "1.3873915672302246`", ",", 
   "0.8212728500366211`", ",", "1.4144582748413086`", ",", 
   "0.9548332691192627`", ",", "0.836406946182251`", ",", 
   "0.9099165797233582`", ",", "0.8662256598472595`", ",", 
   "0.9940537214279175`", ",", "1.3359460830688477`", ",", 
   "1.1426341533660889`", ",", "1.3029476404190063`", ",", 
   "1.0805754661560059`", ",", "1.0354783535003662`", ",", 
   "0.8056752681732178`", ",", "0.9068267345428467`", ",", 
   "0.8763181567192078`", ",", "0.6333695650100708`", ",", 
   "0.9980642795562744`", ",", "0.7397084832191467`", ",", 
   "1.0473629236221313`", ",", "0.8257594108581543`", ",", 
   "1.117051601409912`", ",", "0.6620837450027466`", ",", 
   "0.8946298956871033`", ",", "0.888384997844696`", ",", 
   "1.133445143699646`", ",", "1.1708301305770874`", ",", 
   "0.9043304920196533`", ",", "1.0762892961502075`", ",", 
   "1.0525259971618652`", ",", "0.879632830619812`", ",", 
   "1.1568007469177246`", ",", "1.4183543920516968`", ",", 
   "0.7344131469726562`", ",", "0.9441649913787842`", ",", 
   "0.8704655766487122`", ",", "1.3601171970367432`", ",", 
   "0.915810227394104`", ",", "1.2872397899627686`", ",", 
   "1.055371880531311`", ",", "1.1942634582519531`", ",", 
   "1.1802332401275635`", ",", "0.9827799201011658`", ",", 
   "1.0009851455688477`", ",", "0.9152823686599731`", ",", 
   "1.231156349182129`", ",", "6.627890110015869`", ",", "4.762137413024902`",
    ",", "0.8920040726661682`", ",", "1.0932074785232544`", ",", 
   "0.8291571140289307`", ",", "1.2945618629455566`", ",", 
   "0.9461309909820557`", ",", "1.6578305959701538`", ",", 
   "0.6006938815116882`", ",", "1.1349197626113892`", ",", 
   "1.0216938257217407`", ",", "1.1618832349777222`", ",", 
   "1.113134503364563`", ",", "1.1197562217712402`", ",", 
   "1.343037724494934`", ",", "1.163723111152649`", ",", 
   "1.1505873203277588`", ",", "1.1609973907470703`", ",", 
   "0.8566253185272217`", ",", "1.203113079071045`", ",", 
   "1.2589733600616455`", ",", "1.3742650747299194`", ",", 
   "1.0090701580047607`", ",", "0.8666359782218933`", ",", 
   "0.6602947115898132`", ",", "0.8386256098747253`", ",", 
   "1.3186177015304565`", ",", "0.9605150818824768`", ",", 
   "1.3255966901779175`", ",", "0.8765275478363037`", ",", 
   "0.7921414971351624`", ",", "1.1036393642425537`", ",", 
   "0.8663285374641418`", ",", "0.8351144790649414`", ",", 
   "0.8372464776039124`", ",", "1.0760149955749512`", ",", 
   "0.6661266684532166`", ",", "1.2312285900115967`", ",", 
   "0.917109489440918`", ",", "0.8537205457687378`", ",", 
   "0.9220027923583984`", ",", "1.081489086151123`", ",", 
   "1.1449363231658936`", ",", "1.951545000076294`", ",", 
   "0.8031640648841858`", ",", "0.7786189317703247`", ",", 
   "1.2201727628707886`", ",", "1.011623501777649`", ",", 
   "1.1217612028121948`", ",", "0.9309411644935608`", ",", 
   "0.8206539750099182`", ",", "0.8724155426025391`", ",", 
   "1.000713586807251`", ",", "0.6601318717002869`", ",", 
   "1.101129412651062`", ",", "0.9652476906776428`", ",", 
   "0.8606115579605103`", ",", "1.0933310985565186`", ",", 
   "1.0995885133743286`", ",", "0.9871669411659241`", ",", 
   "1.140255093574524`", ",", "1.2284001111984253`", ",", 
   "0.8007851243019104`", ",", "1.1523094177246094`", ",", 
   "0.89046311378479`", ",", "1.149612545967102`", ",", "1.2310736179351807`",
    ",", "0.8445628881454468`", ",", "1.1014059782028198`", ",", 
   "0.8860511183738708`", ",", "0.7140119671821594`", ",", "1.2131427526474`",
    ",", "1.0819873809814453`", ",", "0.6591609716415405`", ",", 
   "1.2301534414291382`", ",", "0.654438853263855`", ",", 
   "1.1452052593231201`", ",", "0.9209789037704468`", ",", 
   "1.1588209867477417`", ",", "0.8970916867256165`", ",", 
   "0.7536716461181641`", ",", "0.9532679915428162`", ",", 
   "0.8536595702171326`", ",", "0.9922130107879639`", ",", 
   "1.0249147415161133`", ",", "1.0339972972869873`", ",", 
   "0.7449514269828796`", ",", "0.9956073760986328`", ",", 
   "3.035618305206299`", ",", "0.7823724150657654`", ",", 
   "0.8881223201751709`", ",", "0.9847438931465149`", ",", 
   "0.8317961096763611`", ",", "0.9238446950912476`", ",", 
   "0.8978798985481262`", ",", "0.8651419878005981`", ",", 
   "0.8144840598106384`", ",", "0.8998308181762695`", ",", 
   "1.0139294862747192`", ",", "1.1624608039855957`", ",", 
   "1.1117693185806274`", ",", "1.1549335718154907`", ",", 
   "0.992369532585144`", ",", "0.6867418885231018`", ",", 
   "0.9291520118713379`", ",", "2.910956859588623`", ",", 
   "1.153045415878296`", ",", "0.9377549290657043`", ",", 
   "1.0418527126312256`", ",", "1.3460925817489624`", ",", 
   "1.2228108644485474`", ",", "1.2613550424575806`", ",", 
   "1.2597914934158325`", ",", "0.8976629376411438`", ",", 
   "1.0811814069747925`", ",", "0.9486050605773926`", ",", 
   "0.7453002333641052`", ",", "0.7706681489944458`", ",", 
   "0.9221921563148499`", ",", "1.0692085027694702`", ",", 
   "1.0217846632003784`", ",", "0.9082097411155701`", ",", 
   "1.284700632095337`", ",", "1.1070268154144287`", ",", 
   "0.9547936320304871`", ",", "0.7755080461502075`", ",", 
   "0.9160860180854797`", ",", "1.2942067384719849`", ",", 
   "0.997351884841919`", ",", "1.4883512258529663`", ",", 
   "0.9717437624931335`", ",", "0.7402106523513794`", ",", 
   "0.8578663468360901`", ",", "0.7568397521972656`", ",", 
   "0.7947632074356079`", ",", "0.8964294791221619`", ",", 
   "0.8151296973228455`", ",", "0.9431856274604797`", ",", 
   "1.0432195663452148`", ",", "0.9447469711303711`", ",", 
   "1.0433489084243774`", ",", "0.7220669984817505`", ",", 
   "0.6905857920646667`", ",", "1.2872339487075806`", ",", 
   "0.866685688495636`", ",", "1.1603964567184448`", ",", 
   "1.0048151016235352`", ",", "1.1284443140029907`", ",", 
   "0.9119820594787598`", ",", "0.9612917900085449`", ",", 
   "1.1263943910598755`", ",", "0.8861058950424194`", ",", 
   "1.4115561246871948`", ",", "1.178037166595459`", ",", 
   "0.8501861691474915`", ",", "3.4318809509277344`", ",", 
   "0.9072361588478088`", ",", "0.8694815039634705`", ",", 
   "0.8931466341018677`", ",", "0.9091764688491821`", ",", 
   "1.322523593902588`", ",", "1.1195307970046997`", ",", "2.41538143157959`",
    ",", "0.9308925867080688`", ",", "0.8119103908538818`", ",", 
   "0.9545742273330688`", ",", "1.0842692852020264`", ",", 
   "0.9835754036903381`", ",", "0.7001039385795593`", ",", 
   "0.6899312138557434`", ",", "0.9957809448242188`", ",", 
   "1.1233736276626587`", ",", "1.0080310106277466`", ",", 
   "1.0178618431091309`", ",", "0.9528100490570068`", ",", 
   "0.9665059447288513`", ",", "1.2539056539535522`", ",", 
   "1.0331794023513794`", ",", "0.8697250485420227`", ",", 
   "0.9592562913894653`", ",", "1.1371734142303467`", ",", 
   "1.2607380151748657`", ",", "0.9894208312034607`", ",", 
   "0.8448547720909119`", ",", "1.096929669380188`", ",", 
   "0.7987294793128967`", ",", "0.8464488983154297`", ",", 
   "0.9912889003753662`", ",", "0.9200224876403809`", ",", 
   "0.6326473355293274`", ",", "1.0944410562515259`", ",", 
   "1.3791170120239258`", ",", "1.1589256525039673`", ",", 
   "0.9549148082733154`", ",", "0.7335630655288696`", ",", 
   "0.9860024452209473`", ",", "0.8068499565124512`", ",", 
   "1.0496058464050293`", ",", "0.8081232905387878`", ",", 
   "1.1736727952957153`", ",", "1.1502033472061157`", ",", 
   "0.9639850854873657`", ",", "0.7889719009399414`", ",", 
   "1.102295994758606`", ",", "0.6808820962905884`", ",", 
   "0.8615666627883911`", ",", "1.583092451095581`", ",", 
   "0.9218361377716064`", ",", "1.0097041130065918`", ",", 
   "1.3238356113433838`", ",", "1.2734177112579346`", ",", 
   "0.8320512175559998`", ",", "0.9909506440162659`", ",", 
   "1.0726964473724365`", ",", "0.790005624294281`", ",", 
   "0.8094529509544373`", ",", "1.0835106372833252`", ",", 
   "0.9085638523101807`", ",", "0.6730824112892151`", ",", 
   "1.0167020559310913`", ",", "0.9984961748123169`", ",", 
   "1.128373384475708`", ",", "1.029510498046875`", ",", 
   "1.0373715162277222`", ",", "0.9393134713172913`", ",", 
   "1.0575670003890991`", ",", "0.8436214923858643`", ",", 
   "0.7234098315238953`", ",", "1.4247965812683105`", ",", 
   "0.9192869067192078`", ",", "0.6868320107460022`", ",", 
   "0.829201877117157`", ",", "1.1814653873443604`", ",", 
   "0.8514000177383423`", ",", "1.0178673267364502`", ",", 
   "1.5214874744415283`", ",", "1.0198367834091187`", ",", 
   "1.031640648841858`", ",", "1.1152111291885376`", ",", 
   "1.1390984058380127`", ",", "1.0402361154556274`", ",", 
   "0.7766612768173218`", ",", "0.9255890250205994`", ",", 
   "1.3876898288726807`", ",", "0.8565599322319031`", ",", 
   "0.9909853339195251`", ",", "0.8043804168701172`", ",", 
   "0.8983334898948669`", ",", "1.1774533987045288`", ",", 
   "0.997493326663971`", ",", "0.7880885601043701`", ",", 
   "1.1068037748336792`", ",", "0.9841527342796326`", ",", 
   "0.8536312580108643`", ",", "0.848168134689331`", ",", 
   "1.0251407623291016`", ",", "0.7637900114059448`", ",", 
   "1.4804810285568237`", ",", "1.1144353151321411`", ",", 
   "0.9289491176605225`", ",", "1.0296897888183594`", ",", 
   "1.0641546249389648`", ",", "0.9900229573249817`", ",", 
   "1.4500160217285156`", ",", "0.8301816582679749`", ",", 
   "0.930551290512085`", ",", "0.9121413826942444`", ",", 
   "1.2156076431274414`", ",", "0.8119972944259644`", ",", 
   "0.904366672039032`", ",", "0.8053421974182129`", ",", 
   "1.537461519241333`", ",", "0.9335266351699829`", ",", 
   "1.1939468383789062`", ",", "0.760613203048706`", ",", 
   "0.7617493271827698`", ",", "1.159818410873413`", ",", 
   "1.1026724576950073`", ",", "1.0160552263259888`", ",", 
   "1.1974021196365356`", ",", "0.7462180256843567`", ",", 
   "0.8617261648178101`", ",", "0.8739203810691833`", ",", 
   "0.6891355514526367`", ",", "0.9613031148910522`", ",", 
   "0.9893268942832947`", ",", "0.9758038520812988`", ",", 
   "0.8742415308952332`", ",", "0.7630628943443298`", ",", 
   "0.9346075057983398`", ",", "0.8736055493354797`", ",", 
   "1.0074799060821533`", ",", "0.7734600901603699`"}], "}"}]], "Output",
 CellChangeTimes->{{3.960285118789804*^9, 3.9602851403042994`*^9}, 
   3.960285174594451*^9, 3.9602852451970587`*^9, 3.96028531039098*^9, 
   3.960285457295383*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"2fd3e53b-da1f-458e-9945-223f94dec066"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.7805812358856201`", ",", "0.7793864607810974`", ",", 
   "0.7652260661125183`", ",", "0.6311535239219666`", ",", 
   "0.8197933435440063`", ",", "0.8917551040649414`", ",", 
   "0.7179846167564392`", ",", "1.1716610193252563`", ",", 
   "1.3079502582550049`", ",", "0.9516016840934753`", ",", 
   "0.8060364127159119`", ",", "1.0993666648864746`", ",", 
   "0.761494517326355`", ",", "0.7658857107162476`", ",", 
   "0.8847767114639282`", ",", "1.268763542175293`", ",", 
   "0.9989731907844543`", ",", "0.9553675651550293`", ",", 
   "1.2228771448135376`", ",", "1.1853935718536377`", ",", 
   "1.0551379919052124`", ",", "1.172244906425476`", ",", 
   "0.8463544249534607`", ",", "0.9030523300170898`", ",", 
   "0.7147291898727417`", ",", "0.7197386622428894`", ",", 
   "0.728643000125885`", ",", "0.7941803932189941`", ",", 
   "1.0129433870315552`", ",", "0.908992350101471`", ",", 
   "0.9202597737312317`", ",", "0.7511439323425293`", ",", 
   "0.8061625957489014`", ",", "0.7964079976081848`", ",", 
   "1.3886168003082275`", ",", "1.0429216623306274`", ",", 
   "0.765332043170929`", ",", "0.8274825811386108`", ",", 
   "0.9239230751991272`", ",", "0.8938062787055969`", ",", 
   "1.0784906148910522`", ",", "1.0669995546340942`", ",", 
   "0.9181926846504211`", ",", "0.8766050934791565`", ",", 
   "0.826656699180603`", ",", "1.386799931526184`", ",", "0.988599956035614`",
    ",", "1.0003578662872314`", ",", "1.3505430221557617`", ",", 
   "1.0274685621261597`", ",", "0.8672608733177185`", ",", 
   "0.7038466930389404`", ",", "1.2977458238601685`", ",", 
   "0.8049961924552917`", ",", "1.3957571983337402`", ",", 
   "1.231820821762085`", ",", "1.3521335124969482`", ",", 
   "1.1260627508163452`", ",", "1.4093599319458008`", ",", 
   "0.973522424697876`", ",", "1.0448490381240845`", ",", 
   "2.9361276626586914`", ",", "1.145318865776062`", ",", 
   "1.161433458328247`", ",", "1.0189745426177979`", ",", 
   "1.0891237258911133`", ",", "1.0600579977035522`", ",", 
   "1.1902457475662231`", ",", "0.8177291750907898`", ",", 
   "1.3828673362731934`", ",", "0.8090295791625977`", ",", 
   "1.133035659790039`", ",", "0.8927674889564514`", ",", 
   "0.8867080211639404`", ",", "1.1303521394729614`", ",", 
   "0.9407494068145752`", ",", "1.0167272090911865`", ",", 
   "0.9455766081809998`", ",", "0.8242632746696472`", ",", 
   "0.9769277572631836`", ",", "0.9671253561973572`", ",", 
   "0.884183406829834`", ",", "0.8181329369544983`", ",", 
   "0.8993735313415527`", ",", "1.2158969640731812`", ",", 
   "0.9769048690795898`", ",", "1.0194722414016724`", ",", 
   "0.7718828916549683`", ",", "1.0131230354309082`", ",", 
   "1.0363683700561523`", ",", "1.8901890516281128`", ",", 
   "0.6637101173400879`", ",", "0.9510135650634766`", ",", 
   "0.46597617864608765`", ",", "0.925330400466919`", ",", 
   "1.0993696451187134`", ",", "0.9117981791496277`", ",", 
   "0.820561408996582`", ",", "1.1444785594940186`", ",", 
   "0.9582287669181824`", ",", "1.2675106525421143`", ",", 
   "0.8993718028068542`", ",", "0.8412960171699524`", ",", 
   "0.82569420337677`", ",", "0.7398865222930908`", ",", 
   "0.8693311214447021`", ",", "1.171116828918457`", ",", 
   "0.7904919981956482`", ",", "1.2673619985580444`", ",", 
   "1.0574349164962769`", ",", "0.9496960639953613`", ",", 
   "1.263454794883728`", ",", "0.9194421768188477`", ",", 
   "1.0977600812911987`", ",", "1.045002818107605`", ",", 
   "0.867538571357727`", ",", "2.3328185081481934`", ",", 
   "1.186368465423584`", ",", "1.0146616697311401`", ",", 
   "0.8628585934638977`", ",", "1.1886067390441895`", ",", 
   "0.814367413520813`", ",", "1.1870747804641724`", ",", 
   "1.2555798292160034`", ",", "0.7815070748329163`", ",", 
   "0.9253473281860352`", ",", "1.0903105735778809`", ",", 
   "0.8323034644126892`", ",", "0.6970586180686951`", ",", 
   "0.7529164552688599`", ",", "0.941067099571228`", ",", 
   "0.9628578424453735`", ",", "0.859646737575531`", ",", 
   "0.9625080227851868`", ",", "0.7423136830329895`", ",", 
   "1.0371272563934326`", ",", "0.9302080869674683`", ",", 
   "1.0466889142990112`", ",", "0.7300134897232056`", ",", 
   "1.03132963180542`", ",", "1.1972242593765259`", ",", 
   "1.2514690160751343`", ",", "1.119908094406128`", ",", 
   "1.0963801145553589`", ",", "0.9231477379798889`", ",", 
   "0.7967104911804199`", ",", "1.0543471574783325`", ",", 
   "1.0049464702606201`", ",", "0.9955540895462036`", ",", 
   "0.8994357585906982`", ",", "0.953728437423706`", ",", 
   "4.020326614379883`", ",", "0.8220158219337463`", ",", 
   "0.8843482136726379`", ",", "1.0539847612380981`", ",", 
   "0.9518901705741882`", ",", "1.7251880168914795`", ",", 
   "0.8942241072654724`", ",", "1.5235004425048828`", ",", 
   "1.1242324113845825`", ",", "1.7146668434143066`", ",", 
   "1.1099647283554077`", ",", "1.0369322299957275`", ",", 
   "0.8293708562850952`", ",", "0.911695122718811`", ",", 
   "0.9246353507041931`", ",", "0.9105709791183472`", ",", 
   "0.8351447582244873`", ",", "0.8580266237258911`", ",", 
   "0.8417025804519653`", ",", "1.226489543914795`", ",", 
   "1.4784034490585327`", ",", "0.8466145992279053`", ",", 
   "0.9820331335067749`", ",", "1.1211495399475098`", ",", 
   "1.1720130443572998`", ",", "1.2529633045196533`", ",", 
   "1.227472186088562`", ",", "1.0849487781524658`", ",", 
   "0.8960990309715271`", ",", "1.394359827041626`", ",", 
   "0.8187757730484009`", ",", "4.252077579498291`", ",", 
   "0.7203226089477539`", ",", "1.0946162939071655`", ",", 
   "1.2185018062591553`", ",", "1.180953025817871`", ",", 
   "0.5794777274131775`", ",", "0.7069746255874634`", ",", 
   "1.1615262031555176`", ",", "1.2630597352981567`", ",", 
   "0.966545820236206`", ",", "1.151257872581482`", ",", 
   "1.1503214836120605`", ",", "1.4641798734664917`", ",", 
   "1.3757531642913818`", ",", "1.146061658859253`", ",", 
   "1.4270532131195068`", ",", "1.625066876411438`", ",", 
   "1.2194138765335083`", ",", "1.3432600498199463`", ",", 
   "1.0797923803329468`", ",", "1.1546604633331299`", ",", 
   "1.060364007949829`", ",", "0.7844942808151245`", ",", 
   "0.8484877347946167`", ",", "0.9678294658660889`", ",", 
   "0.9420107007026672`", ",", "1.223023533821106`", ",", 
   "0.7926117181777954`", ",", "0.7635073065757751`", ",", 
   "0.7737482190132141`", ",", "0.7053571343421936`", ",", 
   "0.8654678463935852`", ",", "1.0712703466415405`", ",", 
   "1.2144629955291748`", ",", "1.4018592834472656`", ",", 
   "0.936428964138031`", ",", "0.9275177717208862`", ",", 
   "1.0262006521224976`", ",", "1.2680708169937134`", ",", 
   "0.8481301069259644`", ",", "1.0675952434539795`", ",", 
   "1.421547770500183`", ",", "0.857725203037262`", ",", "0.684239387512207`",
    ",", "1.0850359201431274`", ",", "2.722193717956543`", ",", 
   "1.0976696014404297`", ",", "1.3496876955032349`", ",", 
   "1.1406086683273315`", ",", "2.561788320541382`", ",", 
   "0.9376760721206665`", ",", "0.9650601744651794`", ",", 
   "1.18539559841156`", ",", "1.236594796180725`", ",", "1.1631476879119873`",
    ",", "1.0867376327514648`", ",", "0.9017944931983948`", ",", 
   "1.087773323059082`", ",", "1.0814255475997925`", ",", 
   "1.1314631700515747`", ",", "1.2277735471725464`", ",", 
   "0.9890375733375549`", ",", "1.1012874841690063`", ",", 
   "0.95087730884552`", ",", "0.9402239322662354`", ",", 
   "1.2489022016525269`", ",", "1.2082860469818115`", ",", 
   "1.0156387090682983`", ",", "0.9715899229049683`", ",", 
   "0.9145334959030151`", ",", "0.9600222706794739`", ",", 
   "0.8461501598358154`", ",", "1.1969351768493652`", ",", 
   "0.8346888422966003`", ",", "0.9965355396270752`", ",", 
   "1.329284429550171`", ",", "1.129945158958435`", ",", 
   "0.9409879446029663`", ",", "0.8634372353553772`", ",", 
   "0.7640910744667053`", ",", "1.3396432399749756`", ",", 
   "1.0011389255523682`", ",", "1.139204740524292`", ",", 
   "1.1764003038406372`", ",", "1.3074785470962524`", ",", 
   "0.8520728349685669`", ",", "1.1065363883972168`", ",", 
   "0.922976016998291`", ",", "0.8319824934005737`", ",", 
   "1.1126900911331177`", ",", "1.0874669551849365`", ",", 
   "1.1448711156845093`", ",", "1.0948498249053955`", ",", 
   "0.8597343564033508`", ",", "1.088228464126587`", ",", 
   "1.0038498640060425`", ",", "0.8177709579467773`", ",", 
   "0.578563392162323`", ",", "0.6915478110313416`", ",", 
   "1.0628859996795654`", ",", "1.2391622066497803`", ",", 
   "1.091105341911316`", ",", "1.3898605108261108`", ",", 
   "0.8379008173942566`", ",", "1.317489743232727`", ",", 
   "0.9459923505783081`", ",", "1.188780426979065`", ",", 
   "1.2085111141204834`", ",", "0.8398258090019226`", ",", 
   "0.8496989607810974`", ",", "0.9551993012428284`", ",", 
   "0.8162772059440613`", ",", "1.237261414527893`", ",", 
   "0.9103798866271973`", ",", "0.9073498845100403`", ",", 
   "0.8202785849571228`", ",", "1.2529191970825195`", ",", 
   "1.3516325950622559`", ",", "0.9371135234832764`", ",", 
   "0.9186363220214844`", ",", "0.8752871155738831`", ",", 
   "1.296872615814209`", ",", "0.8813374638557434`", ",", 
   "0.5788581371307373`", ",", "1.3637202978134155`", ",", 
   "0.9830637574195862`", ",", "1.192539930343628`", ",", 
   "1.1609563827514648`", ",", "1.140777587890625`", ",", 
   "0.7524977326393127`", ",", "0.6825367212295532`", ",", 
   "1.2150129079818726`", ",", "1.0012753009796143`", ",", 
   "0.9036673903465271`", ",", "0.9496777057647705`", ",", 
   "1.156770944595337`", ",", "2.0600225925445557`", ",", 
   "7.142095565795898`", ",", "0.6898609399795532`", ",", 
   "0.8760715126991272`", ",", "0.9903467297554016`", ",", 
   "1.1653798818588257`", ",", "0.8004586100578308`", ",", 
   "0.9932715892791748`", ",", "1.1443371772766113`", ",", 
   "0.9593130350112915`", ",", "3.044938325881958`", ",", 
   "0.5945599675178528`", ",", "0.8738688826560974`", ",", 
   "1.1163983345031738`", ",", "0.9033583998680115`", ",", 
   "0.954640805721283`", ",", "0.8065184950828552`", ",", 
   "0.8010485172271729`", ",", "1.188416600227356`", ",", 
   "1.2328993082046509`", ",", "0.8349460959434509`", ",", 
   "0.9188794493675232`", ",", "0.803581953048706`", ",", 
   "1.0738641023635864`", ",", "0.8653395771980286`", ",", 
   "1.0139358043670654`", ",", "1.0907520055770874`", ",", 
   "0.8155602812767029`", ",", "0.9264294505119324`", ",", 
   "0.8274978399276733`", ",", "0.8600899577140808`", ",", 
   "1.0978692770004272`", ",", "1.0134516954421997`", ",", 
   "1.3626536130905151`", ",", "0.962907075881958`", ",", 
   "1.073641300201416`", ",", "1.0167255401611328`", ",", 
   "1.1022956371307373`", ",", "0.8093538284301758`", ",", 
   "1.050593614578247`", ",", "1.2245572805404663`", ",", 
   "1.1603522300720215`", ",", "0.7899865508079529`", ",", 
   "1.1180095672607422`", ",", "1.151221513748169`", ",", 
   "1.0990525484085083`", ",", "1.2599563598632812`", ",", 
   "1.1043084859848022`", ",", "0.7591556310653687`", ",", 
   "0.8604530096054077`", ",", "1.3185627460479736`", ",", 
   "1.3334839344024658`", ",", "1.0559769868850708`", ",", 
   "0.9029436707496643`", ",", "1.0264865159988403`", ",", 
   "1.0273503065109253`", ",", "1.1590324640274048`", ",", 
   "0.955100953578949`", ",", "1.0851854085922241`", ",", 
   "0.8129131197929382`", ",", "1.3885798454284668`", ",", 
   "1.3191790580749512`", ",", "0.9790428876876831`", ",", 
   "1.1841627359390259`", ",", "1.014642596244812`", ",", 
   "1.1646631956100464`", ",", "0.8260722160339355`", ",", 
   "1.1375960111618042`", ",", "0.8818005919456482`", ",", 
   "1.1191198825836182`", ",", "1.0808345079421997`", ",", 
   "0.6404491066932678`", ",", "0.8478446006774902`", ",", 
   "2.0540900230407715`", ",", "2.381671667098999`", ",", 
   "0.9741290807723999`", ",", "1.2859011888504028`", ",", 
   "0.6948699355125427`", ",", "0.8112170696258545`", ",", 
   "0.871493935585022`", ",", "1.2303591966629028`", ",", 
   "0.46763187646865845`", ",", "0.7421587109565735`", ",", 
   "0.7593404054641724`", ",", "0.6600368618965149`", ",", 
   "2.100029945373535`", ",", "0.9332186579704285`", ",", 
   "1.120661735534668`", ",", "1.05669367313385`", ",", "1.052832841873169`", 
   ",", "0.8158360123634338`", ",", "1.0541644096374512`", ",", 
   "0.9973032474517822`", ",", "0.9872122406959534`", ",", 
   "1.118638515472412`", ",", "0.7405219078063965`", ",", 
   "0.9762452244758606`", ",", "1.3655539751052856`", ",", 
   "1.0719422101974487`", ",", "1.4106024503707886`", ",", 
   "1.0624134540557861`", ",", "1.0796078443527222`", ",", 
   "0.998711109161377`", ",", "1.0527057647705078`", ",", 
   "0.6518861651420593`", ",", "0.9428198337554932`", ",", 
   "0.951775848865509`", ",", "0.7878866791725159`", ",", 
   "1.0087873935699463`", ",", "0.9556227922439575`", ",", 
   "0.8519482612609863`", ",", "1.1632120609283447`", ",", 
   "0.9669632315635681`", ",", "0.9850932955741882`", ",", 
   "1.0119051933288574`", ",", "1.0558652877807617`", ",", 
   "1.2715394496917725`", ",", "1.0547734498977661`", ",", 
   "0.9187576770782471`", ",", "0.9432451128959656`", ",", 
   "1.089267373085022`", ",", "0.8368855118751526`", ",", 
   "1.4137459993362427`", ",", "0.9197267889976501`", ",", 
   "0.7695229649543762`", ",", "0.8184512257575989`", ",", 
   "1.1678457260131836`", ",", "1.6448092460632324`", ",", 
   "0.9785827398300171`", ",", "0.7768751978874207`", ",", 
   "1.2993780374526978`", ",", "0.8943877220153809`", ",", 
   "1.1428782939910889`", ",", "1.410523533821106`", ",", 
   "0.9282989501953125`", ",", "1.0704721212387085`", ",", 
   "0.8107206225395203`", ",", "0.6031576991081238`", ",", 
   "0.9599329233169556`", ",", "1.3882298469543457`", ",", 
   "0.904418408870697`", ",", "0.9386797547340393`", ",", 
   "1.0187216997146606`", ",", "1.1126219034194946`", ",", 
   "1.0236623287200928`", ",", "0.8021237850189209`", ",", 
   "0.7161868214607239`", ",", "0.9464010000228882`", ",", 
   "1.7777332067489624`", ",", "1.0549647808074951`", ",", 
   "1.0245633125305176`", ",", "1.1043221950531006`", ",", 
   "1.0586422681808472`", ",", "0.7008083462715149`", ",", 
   "1.0577430725097656`", ",", "0.9722785353660583`", ",", 
   "1.2189754247665405`", ",", "0.9189422726631165`", ",", 
   "1.1005085706710815`", ",", "2.0829381942749023`", ",", 
   "0.8801249861717224`", ",", "1.0965044498443604`", ",", 
   "0.9151193499565125`", ",", "0.9997211694717407`", ",", 
   "1.252709150314331`", ",", "1.3701294660568237`", ",", 
   "0.9711465835571289`", ",", "0.9399104714393616`", ",", 
   "1.0272353887557983`", ",", "0.6377055644989014`", ",", 
   "0.9231354594230652`", ",", "0.7195514440536499`", ",", 
   "0.847670316696167`", ",", "0.8753767013549805`", ",", 
   "0.7127236723899841`", ",", "0.7663064002990723`", ",", 
   "0.9455453753471375`", ",", "0.6166123151779175`", ",", 
   "1.2933827638626099`", ",", "1.0338577032089233`", ",", 
   "1.2618041038513184`", ",", "1.2217862606048584`", ",", 
   "1.036159873008728`", ",", "1.1203981637954712`", ",", 
   "0.9399611353874207`", ",", "1.2982888221740723`", ",", 
   "0.9750298261642456`", ",", "0.9106497764587402`", ",", 
   "0.8416308760643005`", ",", "0.8637695908546448`", ",", 
   "1.0435396432876587`", ",", "1.0100221633911133`", ",", 
   "0.7416550517082214`", ",", "0.5960775017738342`", ",", 
   "0.7294011116027832`", ",", "0.7589505314826965`", ",", 
   "0.8043647408485413`", ",", "0.9029907584190369`", ",", 
   "0.8453745245933533`", ",", "0.9050889015197754`", ",", 
   "1.0695972442626953`", ",", "0.6804121136665344`", ",", 
   "0.9340986609458923`", ",", "1.0058034658432007`", ",", 
   "1.1391204595565796`", ",", "0.888835072517395`", ",", 
   "0.7103205323219299`", ",", "0.8670624494552612`", ",", 
   "0.839995801448822`", ",", "1.057786226272583`", ",", 
   "0.8752155900001526`", ",", "0.8499454855918884`", ",", 
   "0.8761530518531799`", ",", "0.9882047772407532`", ",", 
   "1.121330738067627`", ",", "0.9196257591247559`", ",", 
   "1.1720343828201294`", ",", "1.1049213409423828`", ",", 
   "0.8494361042976379`", ",", "1.2512531280517578`", ",", 
   "1.1529349088668823`", ",", "1.2788422107696533`", ",", 
   "0.9553015828132629`", ",", "1.091071367263794`", ",", 
   "0.8596816658973694`", ",", "0.8731743097305298`", ",", 
   "1.618556022644043`", ",", "1.0717620849609375`", ",", 
   "0.9118912220001221`", ",", "1.5156431198120117`", ",", 
   "0.8979066014289856`", ",", "1.1305668354034424`", ",", 
   "1.1913602352142334`", ",", "0.9243503212928772`", ",", 
   "1.6924546957015991`", ",", "0.8803518414497375`", ",", 
   "0.9537482261657715`", ",", "1.0511069297790527`", ",", 
   "0.7223079204559326`", ",", "0.8332440853118896`", ",", 
   "1.0982004404067993`", ",", "0.876415491104126`", ",", 
   "0.9409322738647461`", ",", "1.001124620437622`", ",", 
   "0.9411642551422119`", ",", "0.8693928122520447`", ",", 
   "0.8022639751434326`", ",", "1.1696759462356567`", ",", 
   "0.7404597997665405`", ",", "0.7188414335250854`", ",", 
   "0.7054393887519836`", ",", "0.6284869909286499`", ",", 
   "0.73954176902771`", ",", "0.918673574924469`", ",", "0.7918651700019836`",
    ",", "0.9403411149978638`", ",", "1.1218329668045044`", ",", 
   "0.9318886995315552`", ",", "1.0968598127365112`", ",", 
   "0.964519739151001`", ",", "0.9137795567512512`", ",", 
   "0.7712934613227844`", ",", "1.1011202335357666`", ",", 
   "0.8879460692405701`", ",", "0.903084933757782`", ",", 
   "1.2217669486999512`", ",", "0.9061323404312134`", ",", 
   "1.133093237876892`", ",", "1.6056355237960815`", ",", 
   "1.0073883533477783`", ",", "1.141270399093628`", ",", 
   "1.2737609148025513`", ",", "0.728608250617981`", ",", 
   "0.8273046612739563`", ",", "0.9951810240745544`", ",", 
   "0.8174130320549011`", ",", "2.4658288955688477`", ",", 
   "1.1170457601547241`", ",", "0.7255058288574219`", ",", 
   "0.7725939750671387`", ",", "0.7226786017417908`", ",", 
   "0.8034599423408508`", ",", "0.8241092562675476`", ",", 
   "0.874538779258728`", ",", "1.1163476705551147`", ",", 
   "0.8997710943222046`", ",", "0.8990877270698547`", ",", 
   "0.8091541528701782`", ",", "0.9905668497085571`", ",", 
   "1.0568312406539917`", ",", "1.483292579650879`", ",", 
   "0.7909696102142334`", ",", "0.9918817281723022`", ",", 
   "1.3323917388916016`", ",", "0.6709088087081909`", ",", 
   "0.7492181062698364`", ",", "1.0517703294754028`", ",", 
   "1.2941480875015259`", ",", "0.9685240983963013`", ",", 
   "1.3004300594329834`", ",", "1.068583369255066`", ",", 
   "1.1436065435409546`", ",", "0.9127229452133179`", ",", 
   "0.8828028440475464`", ",", "0.5548462867736816`", ",", 
   "1.3169503211975098`", ",", "0.7952125072479248`", ",", 
   "1.2055895328521729`", ",", "0.6445904970169067`", ",", 
   "0.9857430458068848`", ",", "1.0794365406036377`", ",", 
   "1.01739501953125`", ",", "1.3632442951202393`", ",", 
   "0.9508540034294128`", ",", "0.8612436056137085`", ",", 
   "0.9614455699920654`", ",", "1.0913811922073364`", ",", 
   "10.132194519042969`", ",", "0.8288925290107727`", ",", 
   "0.929696798324585`", ",", "1.0184290409088135`", ",", 
   "1.1530773639678955`", ",", "1.3985518217086792`", ",", 
   "0.9539079666137695`", ",", "1.1266608238220215`", ",", 
   "0.966471791267395`", ",", "1.552015781402588`", ",", "0.892028272151947`",
    ",", "0.907714307308197`", ",", "0.9201964139938354`", ",", 
   "1.0000067949295044`", ",", "0.6929827928543091`", ",", 
   "0.8259035348892212`", ",", "1.3296477794647217`", ",", 
   "0.8473777770996094`", ",", "0.9389360547065735`", ",", 
   "0.991827130317688`", ",", "1.0610020160675049`", ",", 
   "1.3902970552444458`", ",", "0.8489181995391846`", ",", 
   "0.6733658909797668`", ",", "0.8928787112236023`", ",", 
   "0.9311820864677429`", ",", "0.8688148260116577`", ",", 
   "1.02686607837677`", ",", "1.1111838817596436`", ",", 
   "0.9058699011802673`", ",", "0.7832229137420654`", ",", 
   "0.8492011427879333`", ",", "1.2776473760604858`", ",", 
   "0.6848602294921875`", ",", "0.9780229926109314`", ",", 
   "1.0486475229263306`", ",", "0.8063195943832397`", ",", 
   "0.8473213315010071`", ",", "1.4066709280014038`", ",", 
   "0.7701495289802551`", ",", "0.9740903973579407`", ",", 
   "1.0440465211868286`", ",", "0.7921034097671509`", ",", 
   "0.9457853436470032`", ",", "0.7986524105072021`", ",", 
   "1.11472749710083`", ",", "0.9502827525138855`", ",", 
   "1.0683029890060425`", ",", "0.8888323307037354`", ",", 
   "1.435626745223999`", ",", "1.0843169689178467`", ",", 
   "1.0940964221954346`", ",", "0.7784926295280457`", ",", 
   "1.271026611328125`", ",", "0.9768511652946472`", ",", 
   "1.0735759735107422`", ",", "2.152042865753174`", ",", 
   "0.9161107540130615`", ",", "1.1064895391464233`", ",", 
   "1.1704069375991821`", ",", "1.2410248517990112`", ",", 
   "1.1706950664520264`", ",", "1.1470476388931274`", ",", 
   "0.9506387114524841`", ",", "0.7875465154647827`", ",", 
   "0.8706508278846741`", ",", "1.4414100646972656`", ",", 
   "1.2735861539840698`", ",", "1.2999017238616943`", ",", 
   "0.7513719797134399`", ",", "1.6837522983551025`", ",", 
   "0.7576789855957031`", ",", "0.767155647277832`", ",", 
   "0.6678617000579834`", ",", "1.0980154275894165`", ",", 
   "0.8326703310012817`", ",", "0.9860550761222839`", ",", 
   "0.7807645201683044`", ",", "0.7029592990875244`", ",", 
   "1.0559970140457153`", ",", "1.0275936126708984`", ",", 
   "1.2129414081573486`", ",", "1.0115768909454346`", ",", 
   "1.1037548780441284`", ",", "1.2491575479507446`", ",", 
   "0.9955242276191711`", ",", "1.0886121988296509`", ",", 
   "0.9206225872039795`", ",", "1.0504305362701416`", ",", 
   "1.2572299242019653`", ",", "0.8127641081809998`", ",", 
   "0.725280225276947`", ",", "0.6928672194480896`", ",", 
   "1.2073862552642822`", ",", "2.0528249740600586`", ",", 
   "1.1761183738708496`", ",", "1.1886425018310547`", ",", 
   "1.1920547485351562`", ",", "1.0993015766143799`", ",", 
   "0.9204017519950867`", ",", "1.2410131692886353`", ",", 
   "1.109129548072815`", ",", "0.9495581388473511`", ",", 
   "1.014931559562683`", ",", "1.161469578742981`", ",", 
   "0.9171704053878784`", ",", "0.9071914553642273`", ",", 
   "1.023308515548706`", ",", "0.9853991270065308`", ",", 
   "1.0783759355545044`", ",", "1.024281620979309`", ",", 
   "0.6909540891647339`", ",", "1.0872297286987305`", ",", 
   "0.9107404947280884`", ",", "1.004258155822754`", ",", 
   "1.3739306926727295`", ",", "1.1271029710769653`", ",", 
   "1.5770119428634644`", ",", "1.168333649635315`", ",", 
   "0.9188763499259949`", ",", "1.293053388595581`", ",", 
   "2.254258155822754`", ",", "1.0475478172302246`", ",", 
   "1.065428376197815`", ",", "1.0759748220443726`", ",", 
   "1.065659523010254`", ",", "1.118290662765503`", ",", 
   "0.9114130139350891`", ",", "1.329819679260254`", ",", 
   "1.1416640281677246`", ",", "1.055098533630371`", ",", 
   "0.704795777797699`", ",", "0.9843349456787109`", ",", 
   "1.0771976709365845`", ",", "1.1896226406097412`", ",", 
   "0.924060583114624`", ",", "1.028447151184082`", ",", 
   "0.7620540857315063`", ",", "0.9653298854827881`", ",", 
   "1.0012675523757935`", ",", "0.913754403591156`", ",", 
   "0.8593881726264954`", ",", "1.3584524393081665`", ",", 
   "1.059004306793213`", ",", "0.8325374126434326`", ",", 
   "1.2730457782745361`", ",", "0.9432515501976013`", ",", 
   "0.9189999103546143`", ",", "1.0305171012878418`", ",", 
   "1.2134252786636353`", ",", "0.20983272790908813`", ",", 
   "0.733837366104126`", ",", "1.0318841934204102`", ",", 
   "0.8694809079170227`", ",", "1.2832188606262207`", ",", 
   "0.7996053695678711`", ",", "0.9242765307426453`", ",", 
   "1.0194145441055298`", ",", "1.3861829042434692`", ",", 
   "1.2759473323822021`", ",", "0.9177344441413879`", ",", 
   "1.1603074073791504`", ",", "0.7707741260528564`", ",", 
   "1.2145987749099731`", ",", "0.8870380520820618`", ",", 
   "1.8594943284988403`", ",", "0.9181694984436035`", ",", 
   "0.9263917207717896`", ",", "1.1595849990844727`", ",", 
   "1.1601765155792236`", ",", "0.7562555074691772`", ",", 
   "0.8235061168670654`", ",", "1.0818880796432495`", ",", 
   "1.038415551185608`", ",", "1.128915786743164`", ",", 
   "0.9987361431121826`", ",", "1.0410624742507935`", ",", 
   "0.7132803201675415`", ",", "0.9949191808700562`", ",", 
   "0.933424174785614`", ",", "1.0432082414627075`", ",", 
   "1.0824873447418213`", ",", "1.057472586631775`", ",", 
   "1.1230098009109497`", ",", "1.340925931930542`", ",", 
   "1.1940425634384155`", ",", "1.1108341217041016`", ",", 
   "1.2555580139160156`", ",", "1.1887397766113281`", ",", 
   "1.21454656124115`", ",", "0.7484062910079956`", ",", 
   "1.6369929313659668`", ",", "1.0828547477722168`", ",", 
   "1.0086853504180908`", ",", "0.9379408955574036`", ",", 
   "1.3060369491577148`", ",", "1.0462591648101807`", ",", 
   "1.180985927581787`", ",", "1.197686791419983`", ",", 
   "1.0366822481155396`", ",", "1.1682898998260498`", ",", 
   "0.9472020268440247`", ",", "1.1933048963546753`", ",", 
   "1.351464867591858`", ",", "1.0571174621582031`", ",", 
   "0.9878021478652954`", ",", "1.2561105489730835`", ",", "1.3110431432724`",
    ",", "0.6880003213882446`", ",", "1.0673574209213257`", ",", 
   "1.0241916179656982`", ",", "1.1951764822006226`", ",", 
   "0.9684231877326965`", ",", "0.8689988851547241`", ",", 
   "0.9722239375114441`", ",", "0.8686708807945251`", ",", 
   "1.1431723833084106`", ",", "1.035555362701416`", ",", 
   "1.1769440174102783`", ",", "1.3402180671691895`", ",", 
   "0.9512876868247986`", ",", "0.9423909187316895`", ",", 
   "0.6892924308776855`", ",", "0.8786730170249939`", ",", 
   "0.971746027469635`", ",", "0.8414880037307739`", ",", 
   "1.233454704284668`", ",", "0.7860199809074402`", ",", 
   "0.8819793462753296`", ",", "1.012827754020691`", ",", 
   "0.9716504216194153`", ",", "1.1149142980575562`", ",", 
   "1.077761173248291`", ",", "0.7672638893127441`", ",", 
   "0.941209614276886`", ",", "1.0885813236236572`", ",", 
   "0.8985346555709839`", ",", "1.12002694606781`", ",", 
   "0.8436970114707947`", ",", "1.0687273740768433`", ",", 
   "0.8820217251777649`", ",", "1.0206464529037476`", ",", 
   "1.203623652458191`", ",", "1.0167003870010376`", ",", 
   "1.3641622066497803`", ",", "0.7140445709228516`", ",", 
   "0.8382515907287598`", ",", "0.8649438619613647`", ",", 
   "0.8764123320579529`", ",", "1.0405575037002563`", ",", 
   "1.0635408163070679`", ",", "0.862911581993103`", ",", 
   "0.738460898399353`", ",", "0.8375880122184753`", ",", 
   "1.4898529052734375`", ",", "1.2097268104553223`", ",", 
   "1.0755387544631958`", ",", "0.9324086308479309`", ",", 
   "1.021296739578247`", ",", "1.2568175792694092`", ",", "0.87531977891922`",
    ",", "0.9258149266242981`", ",", "0.8906227946281433`", ",", 
   "0.8678799867630005`", ",", "0.7943268418312073`", ",", 
   "1.4555449485778809`", ",", "0.8821207284927368`", ",", 
   "0.6134024262428284`", ",", "1.1262239217758179`", ",", 
   "0.9737247228622437`", ",", "1.0188404321670532`", ",", 
   "1.1027884483337402`", ",", "1.2237722873687744`", ",", 
   "0.8506971597671509`", ",", "0.7385355830192566`", ",", 
   "0.8133643865585327`", ",", "1.1737306118011475`", ",", 
   "0.6852591037750244`", ",", "1.2202333211898804`", ",", 
   "0.8422691822052002`", ",", "1.6928194761276245`", ",", 
   "1.0165520906448364`", ",", "1.1096504926681519`", ",", 
   "1.4020428657531738`", ",", "0.9857895374298096`", ",", 
   "0.8948151469230652`", ",", "0.9598442912101746`", ",", 
   "0.6844759583473206`", ",", "0.7552043795585632`", ",", 
   "0.8423029780387878`", ",", "1.3227053880691528`", ",", 
   "0.6459378600120544`", ",", "1.4171565771102905`", ",", 
   "0.9897958040237427`", ",", "1.0681366920471191`", ",", 
   "0.9420690536499023`", ",", "1.0539829730987549`", ",", 
   "1.0477389097213745`", ",", "1.2386162281036377`", ",", 
   "0.6820415258407593`", ",", "1.0970669984817505`", ",", 
   "0.9269211292266846`", ",", "0.8783069849014282`", ",", 
   "1.0592187643051147`", ",", "1.0838969945907593`", ",", 
   "1.0881305932998657`", ",", "1.4718117713928223`", ",", 
   "0.8106948733329773`", ",", "1.3697128295898438`", ",", 
   "1.0066776275634766`", ",", "0.896030068397522`", ",", 
   "0.8852813839912415`", ",", "0.9189265966415405`", ",", 
   "0.9841790795326233`", ",", "1.214982032775879`", ",", 
   "1.228573203086853`", ",", "1.2727998495101929`", ",", 
   "0.9537403583526611`", ",", "1.091199517250061`", ",", 
   "0.7715230584144592`", ",", "0.886695146560669`", ",", 
   "0.8887295126914978`", ",", "0.6108505725860596`", ",", 
   "1.00909423828125`", ",", "0.7063965201377869`", ",", 
   "1.0594513416290283`", ",", "0.9403240084648132`", ",", 
   "1.1276910305023193`", ",", "0.6872570514678955`", ",", 
   "0.9651026725769043`", ",", "0.8157985806465149`", ",", 
   "1.1950916051864624`", ",", "1.1664011478424072`", ",", 
   "0.8904459476470947`", ",", "0.963585376739502`", ",", 
   "1.1599931716918945`", ",", "0.9050177931785583`", ",", 
   "1.3297924995422363`", ",", "1.263468623161316`", ",", 
   "0.6083478927612305`", ",", "0.9592859148979187`", ",", 
   "1.0190579891204834`", ",", "1.3783440589904785`", ",", 
   "0.8680258989334106`", ",", "1.1820871829986572`", ",", 
   "1.026923418045044`", ",", "1.2959120273590088`", ",", 
   "1.2741553783416748`", ",", "0.9810838103294373`", ",", 
   "1.0478843450546265`", ",", "0.9323115944862366`", ",", 
   "1.2610033750534058`", ",", "6.6882429122924805`", ",", 
   "4.736980438232422`", ",", "0.9070224165916443`", ",", 
   "1.102094054222107`", ",", "0.8170246481895447`", ",", 
   "1.0702487230300903`", ",", "0.9259665012359619`", ",", 
   "1.629917025566101`", ",", "0.6028343439102173`", ",", 
   "1.108594536781311`", ",", "1.0143154859542847`", ",", 
   "1.1923342943191528`", ",", "1.2101380825042725`", ",", 
   "1.0149911642074585`", ",", "1.2896333932876587`", ",", 
   "1.1573457717895508`", ",", "1.1952848434448242`", ",", 
   "1.1657956838607788`", ",", "1.1177419424057007`", ",", 
   "1.164534091949463`", ",", "1.243152379989624`", ",", 
   "1.3681564331054688`", ",", "1.0469692945480347`", ",", 
   "0.8219565153121948`", ",", "0.644523024559021`", ",", 
   "0.7637315392494202`", ",", "1.3130525350570679`", ",", 
   "0.8731914162635803`", ",", "1.2951562404632568`", ",", 
   "0.9993422031402588`", ",", "0.863560676574707`", ",", 
   "1.032013177871704`", ",", "0.8304299712181091`", ",", 
   "0.9741983413696289`", ",", "0.8582223653793335`", ",", 
   "1.0880759954452515`", ",", "0.8330262303352356`", ",", 
   "1.1336383819580078`", ",", "0.8308263421058655`", ",", 
   "0.8430281281471252`", ",", "0.8974242210388184`", ",", 
   "1.089644432067871`", ",", "1.2260558605194092`", ",", 
   "1.933287501335144`", ",", "0.855611264705658`", ",", 
   "0.7164144515991211`", ",", "1.2644000053405762`", ",", 
   "0.9517393708229065`", ",", "1.08786940574646`", ",", 
   "0.9028704762458801`", ",", "0.6170687675476074`", ",", 
   "0.7977560758590698`", ",", "0.934234619140625`", ",", 
   "0.681550920009613`", ",", "1.0828521251678467`", ",", 
   "0.9872478246688843`", ",", "1.0086255073547363`", ",", 
   "1.093628168106079`", ",", "1.1768931150436401`", ",", 
   "0.9402520060539246`", ",", "1.0515774488449097`", ",", 
   "1.3215574026107788`", ",", "0.7795701622962952`", ",", 
   "1.115102767944336`", ",", "0.9364230036735535`", ",", 
   "1.0546993017196655`", ",", "1.2076478004455566`", ",", 
   "0.8621050119400024`", ",", "1.061086654663086`", ",", 
   "0.8983977437019348`", ",", "0.6543258428573608`", ",", 
   "1.16551673412323`", ",", "1.0829412937164307`", ",", 
   "0.6432787179946899`", ",", "1.1390801668167114`", ",", 
   "0.6319660544395447`", ",", "1.1322129964828491`", ",", 
   "1.0141520500183105`", ",", "1.081987738609314`", ",", 
   "0.8981189727783203`", ",", "0.8081315755844116`", ",", 
   "0.9345657229423523`", ",", "0.7771770358085632`", ",", 
   "0.9014877676963806`", ",", "0.9240328669548035`", ",", 
   "0.9815065860748291`", ",", "0.7764314413070679`", ",", 
   "0.9768396019935608`", ",", "2.9756858348846436`", ",", 
   "0.7768820524215698`", ",", "1.0234322547912598`", ",", 
   "0.7870684862136841`", ",", "0.8251490592956543`", ",", 
   "1.0080997943878174`", ",", "1.0063321590423584`", ",", 
   "0.8851985335350037`", ",", "0.8141555190086365`", ",", 
   "0.9104255437850952`", ",", "1.0595240592956543`", ",", 
   "1.0628852844238281`", ",", "0.9870525002479553`", ",", 
   "1.1313244104385376`", ",", "1.0090298652648926`", ",", 
   "0.6875993013381958`", ",", "0.8977177143096924`", ",", 
   "2.9158709049224854`", ",", "1.11555814743042`", ",", 
   "0.9320491552352905`", ",", "1.050520896911621`", ",", 
   "1.2452667951583862`", ",", "1.250533103942871`", ",", 
   "1.2244755029678345`", ",", "1.2275587320327759`", ",", 
   "0.9382513761520386`", ",", "1.0856714248657227`", ",", 
   "0.9303464293479919`", ",", "0.7361713647842407`", ",", 
   "0.7645681500434875`", ",", "1.0078599452972412`", ",", 
   "1.035250186920166`", ",", "1.0134774446487427`", ",", 
   "0.8911725282669067`", ",", "1.1853644847869873`", ",", 
   "0.9601473212242126`", ",", "0.930271327495575`", ",", 
   "0.8199060559272766`", ",", "1.0268316268920898`", ",", 
   "1.03523588180542`", ",", "1.0052396059036255`", ",", 
   "1.4750436544418335`", ",", "0.9618430137634277`", ",", 
   "0.7200588583946228`", ",", "0.918574333190918`", ",", 
   "0.8143653273582458`", ",", "0.7690680623054504`", ",", 
   "0.8740269541740417`", ",", "0.7091346383094788`", ",", 
   "1.0444458723068237`", ",", "0.9688860774040222`", ",", 
   "0.9435837864875793`", ",", "1.1795305013656616`", ",", 
   "0.8100270628929138`", ",", "0.7237449884414673`", ",", 
   "1.1337952613830566`", ",", "0.8998786807060242`", ",", 
   "1.2536059617996216`", ",", "0.9289240837097168`", ",", 
   "1.0538573265075684`", ",", "0.8638831377029419`", ",", 
   "0.960132360458374`", ",", "1.1623855829238892`", ",", 
   "0.9097323417663574`", ",", "1.3813122510910034`", ",", 
   "1.163559079170227`", ",", "0.7951173186302185`", ",", 
   "3.4298598766326904`", ",", "0.974016010761261`", ",", 
   "0.8677615523338318`", ",", "0.8873121738433838`", ",", 
   "0.9445449709892273`", ",", "1.3608245849609375`", ",", 
   "1.1110624074935913`", ",", "2.411742687225342`", ",", 
   "0.8898957967758179`", ",", "0.8089183568954468`", ",", 
   "0.943108320236206`", ",", "0.9832327365875244`", ",", 
   "0.863334596157074`", ",", "0.7032908797264099`", ",", 
   "0.7219979763031006`", ",", "0.9262465238571167`", ",", 
   "1.1872708797454834`", ",", "0.9934673309326172`", ",", 
   "1.0419096946716309`", ",", "0.9406288266181946`", ",", 
   "0.9506847858428955`", ",", "1.2674428224563599`", ",", 
   "1.1351652145385742`", ",", "0.9761314988136292`", ",", 
   "1.0130573511123657`", ",", "1.0716328620910645`", ",", 
   "1.2429202795028687`", ",", "0.8833419680595398`", ",", 
   "0.8670242428779602`", ",", "1.1483267545700073`", ",", 
   "0.775030255317688`", ",", "0.8932546973228455`", ",", 
   "0.9166609048843384`", ",", "0.9433313608169556`", ",", 
   "0.6208812594413757`", ",", "1.1623990535736084`", ",", 
   "1.3715322017669678`", ",", "1.128861427307129`", ",", 
   "0.8543241620063782`", ",", "0.9144250750541687`", ",", 
   "0.9751432538032532`", ",", "0.7967391610145569`", ",", 
   "1.1654084920883179`", ",", "0.8277869820594788`", ",", 
   "1.0730080604553223`", ",", "1.1297043561935425`", ",", 
   "1.1573587656021118`", ",", "0.791321337223053`", ",", 
   "1.0575958490371704`", ",", "0.7397465705871582`", ",", 
   "0.7709004282951355`", ",", "1.556557059288025`", ",", 
   "1.007338047027588`", ",", "0.9764788150787354`", ",", 
   "1.3201922178268433`", ",", "1.2986968755722046`", ",", 
   "0.9004735946655273`", ",", "1.0250226259231567`", ",", 
   "1.1090856790542603`", ",", "0.8956307172775269`", ",", 
   "0.92964768409729`", ",", "1.0929813385009766`", ",", 
   "0.8936777114868164`", ",", "0.6773864030838013`", ",", 
   "1.0390400886535645`", ",", "0.9867169857025146`", ",", 
   "1.11396324634552`", ",", "0.9468305110931396`", ",", 
   "1.0153266191482544`", ",", "0.8598983883857727`", ",", 
   "1.0295917987823486`", ",", "0.8303439021110535`", ",", 
   "0.7271316051483154`", ",", "1.3257174491882324`", ",", 
   "0.8280379772186279`", ",", "0.7750967741012573`", ",", 
   "0.8104175925254822`", ",", "1.1090407371520996`", ",", 
   "0.8579246401786804`", ",", "0.9467782378196716`", ",", 
   "1.576600432395935`", ",", "1.0377840995788574`", ",", 
   "1.0968679189682007`", ",", "1.1271144151687622`", ",", 
   "0.9582504034042358`", ",", "1.018149971961975`", ",", 
   "0.836254894733429`", ",", "0.9281885623931885`", ",", 
   "1.3874754905700684`", ",", "0.9559492468833923`", ",", 
   "1.0260897874832153`", ",", "0.7664240598678589`", ",", 
   "0.8626888394355774`", ",", "1.244079351425171`", ",", 
   "1.0434521436691284`", ",", "0.8891056180000305`", ",", 
   "1.067016363143921`", ",", "1.1020991802215576`", ",", 
   "0.857740044593811`", ",", "0.9025295972824097`", ",", 
   "0.8403183817863464`", ",", "0.7070962190628052`", ",", 
   "1.4822132587432861`", ",", "1.1840908527374268`", ",", 
   "0.933333694934845`", ",", "1.0267118215560913`", ",", 
   "1.0813101530075073`", ",", "1.073572039604187`", ",", 
   "1.295765995979309`", ",", "0.8002544045448303`", ",", 
   "0.9320424199104309`", ",", "0.9340699911117554`", ",", 
   "1.1325511932373047`", ",", "0.7849119901657104`", ",", 
   "0.8127914667129517`", ",", "0.7813092470169067`", ",", 
   "1.535325288772583`", ",", "0.9343809485435486`", ",", 
   "1.2129491567611694`", ",", "0.7048019766807556`", ",", 
   "0.7777014374732971`", ",", "1.155365228652954`", ",", 
   "1.1047452688217163`", ",", "0.9973180890083313`", ",", 
   "1.1797734498977661`", ",", "0.7758979201316833`", ",", 
   "1.0341516733169556`", ",", "0.8450578451156616`", ",", 
   "0.6960884928703308`", ",", "0.9203348159790039`", ",", 
   "0.9892762899398804`", ",", "0.9360560774803162`", ",", 
   "0.9524883031845093`", ",", "0.7311866879463196`", ",", 
   "0.9716055393218994`", ",", "0.8874457478523254`", ",", 
   "0.9844233989715576`", ",", "0.783103883266449`"}], "}"}]], "Output",
 CellChangeTimes->{{3.960285118789804*^9, 3.9602851403042994`*^9}, 
   3.960285174594451*^9, 3.9602852451970587`*^9, 3.96028531039098*^9, 
   3.960285464069674*^9},
 CellLabel->
  "Out[103]=",ExpressionUUID->"7ff4f4eb-0c57-4fb7-a3aa-fea5b9c3253d"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Length", "[", "featuresEnglish", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "featuresFrench", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "featuresGerman", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "[", "featuresSpanish", "]"}]}], "Input",
 CellChangeTimes->{{3.960285035755374*^9, 3.960285076604887*^9}, {
  3.960285121486885*^9, 3.96028512924962*^9}, {3.9602851716408033`*^9, 
  3.960285225727172*^9}, {3.9602852725835733`*^9, 3.960285283537922*^9}, {
  3.9602853210917997`*^9, 3.960285337834669*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"521a057c-f55e-4b05-aa59-fe36ef90b32b"],

Cell[BoxData["1280"], "Output",
 CellChangeTimes->{{3.960285280589279*^9, 3.960285283762467*^9}, 
   3.960285339366929*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"7dcf3a00-3012-4a78-aeb5-743c96f2f109"],

Cell[BoxData["1280"], "Output",
 CellChangeTimes->{{3.960285280589279*^9, 3.960285283762467*^9}, 
   3.960285339384842*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"77d47c17-ddef-41a6-bbe8-a1087d0cb97d"],

Cell[BoxData["1280"], "Output",
 CellChangeTimes->{{3.960285280589279*^9, 3.960285283762467*^9}, 
   3.9602853393903313`*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"51a3cd05-1d14-41b8-9662-ab058d6b0911"],

Cell[BoxData["1280"], "Output",
 CellChangeTimes->{{3.960285280589279*^9, 3.960285283762467*^9}, 
   3.9602853393950663`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"fe3ccc5f-772c-442e-910a-6920919d2834"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.9602853670487213`*^9, 
  3.9602854628966227`*^9},ExpressionUUID->"6a55f8c1-6709-44e6-811b-\
3bd7c850e5ca"]
},
WindowSize->{1080, 625.5},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>0.9 Inherited,
FrontEndVersion->"14.2 for Linux x86 (64-bit) (March 16, 2025)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"4aed53ca-5d35-465a-bf49-55c83e8195ec"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 802, 13, 50, "Text",ExpressionUUID->"2227085f-80b7-4b90-b27f-2eb6d8c42935"],
Cell[1359, 35, 771, 16, 28, "Input",ExpressionUUID->"3c5a1a4e-fb67-41f4-a066-4a5741d3b6ec"],
Cell[CellGroupData[{
Cell[2155, 55, 212, 3, 26, "Input",ExpressionUUID->"03fac5f5-d962-416d-9f16-d079d6adf5f1"],
Cell[2370, 60, 53496, 1204, 606, "Output",ExpressionUUID->"8b2b8049-0607-430f-b5d4-1cdb5463ae85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55903, 1269, 362, 6, 26, "Input",ExpressionUUID->"36a82d30-9092-46ea-82b6-89f9809c1044"],
Cell[56268, 1277, 4663, 69, 216, "Output",ExpressionUUID->"04a7fbac-cade-4afd-b8b1-6813b0f53a76"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60968, 1351, 286, 5, 28, "Input",ExpressionUUID->"caa2f2f5-e720-4418-9ce9-b03666ef2f08"],
Cell[61257, 1358, 6886, 167, 318, "Output",ExpressionUUID->"f4fa1f16-f5dc-4bc4-a014-cd81abca4432"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68180, 1530, 403, 8, 28, "Input",ExpressionUUID->"c50aff40-23f2-4e0a-a187-ee845c4b08f0"],
Cell[68586, 1540, 699, 13, 63, "Output",ExpressionUUID->"7c416152-8b8d-4f30-8065-817aa71cdb0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69322, 1558, 414, 8, 28, "Input",ExpressionUUID->"a0aba922-eb13-4ca4-a42d-7579f1dd13f2"],
Cell[69739, 1568, 653, 12, 63, "Output",ExpressionUUID->"468bf66a-5390-4657-b79d-fa9c9e7ce831"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70429, 1585, 453, 9, 28, "Input",ExpressionUUID->"5e8fae65-461d-4338-ac1e-c2a3adf532de"],
Cell[70885, 1596, 727, 13, 63, "Output",ExpressionUUID->"c4d3d975-927b-42cd-997d-8d910e24e196"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71649, 1614, 412, 8, 28, "Input",ExpressionUUID->"d524eeb2-53c5-4a98-b0a8-9a099789a9db"],
Cell[72064, 1624, 680, 13, 63, "Output",ExpressionUUID->"c9691388-03b3-43d5-a5c1-e6b1069c306e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72781, 1642, 218, 3, 26, "Input",ExpressionUUID->"5f91e7a9-5b68-40f6-ba8a-f3357ee2fdc0"],
Cell[73002, 1647, 247313, 4066, 133, "Output",ExpressionUUID->"933ca726-5625-4e00-90d2-de94a73f301f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[320352, 5718, 221, 3, 26, "Input",ExpressionUUID->"bc48dc94-c0d5-461d-a721-4c326ac6d57d"],
Cell[320576, 5723, 248187, 4081, 133, "Output",ExpressionUUID->"00d7f988-a769-4035-9a34-23fb9ae07d43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568800, 9809, 248, 4, 26, "Input",ExpressionUUID->"8e4e158f-327f-4c23-959a-a95af412f926"],
Cell[569051, 9815, 4160, 87, 124, "Output",ExpressionUUID->"763e8bc1-8073-433b-b0a1-7c8a7a44eb87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[573248, 9907, 248, 4, 26, "Input",ExpressionUUID->"d09c2d59-4e71-429d-9078-e477fae2a0ed"],
Cell[573499, 9913, 4118, 86, 124, "Output",ExpressionUUID->"f0095852-a8c0-4417-8bab-5f310f1769a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[577654, 10004, 244, 4, 28, "Input",ExpressionUUID->"924541de-f17b-4985-9472-50b096685d3d"],
Cell[577901, 10010, 1579882, 30230, 78, "Output",ExpressionUUID->"bed7250f-63ac-4741-903a-51e0c32ca3dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2157820, 40245, 629, 16, 28, "Input",ExpressionUUID->"fbbcc027-4863-4488-bb54-3afabc1015f3"],
Cell[2158452, 40263, 607, 15, 32, "Output",ExpressionUUID->"5d6d2eda-b8bd-47ec-89fe-dadbb0ae74e4"]
}, Open  ]],
Cell[2159074, 40281, 778, 16, 28, "Input",ExpressionUUID->"1d539281-1dd1-5d41-995f-c04b3a8cf63c"],
Cell[CellGroupData[{
Cell[2159877, 40301, 349, 7, 26, "Input",ExpressionUUID->"80108941-5e0d-4f30-b316-e6692e0e2a03"],
Cell[2160229, 40310, 16492, 374, 339, "Output",ExpressionUUID->"dd87c228-d566-40b5-828f-b28195a4f59d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2176758, 40689, 679, 12, 83, "Input",ExpressionUUID->"2819672f-1e51-4ea2-b0a2-466c49b2a896"],
Cell[2177440, 40703, 38445, 642, 1785, "Output",ExpressionUUID->"2fd3e53b-da1f-458e-9945-223f94dec066"],
Cell[2215888, 41347, 38439, 643, 70, "Output",ExpressionUUID->"7ff4f4eb-0c57-4fb7-a3aa-fea5b9c3253d"]
}, Closed]],
Cell[CellGroupData[{
Cell[2254364, 41995, 638, 9, 80, "Input",ExpressionUUID->"521a057c-f55e-4b05-aa59-fe36ef90b32b"],
Cell[2255005, 42006, 202, 3, 30, "Output",ExpressionUUID->"7dcf3a00-3012-4a78-aeb5-743c96f2f109"],
Cell[2255210, 42011, 202, 3, 30, "Output",ExpressionUUID->"77d47c17-ddef-41a6-bbe8-a1087d0cb97d"],
Cell[2255415, 42016, 204, 3, 30, "Output",ExpressionUUID->"51a3cd05-1d14-41b8-9662-ab058d6b0911"],
Cell[2255622, 42021, 204, 3, 30, "Output",ExpressionUUID->"fe3ccc5f-772c-442e-910a-6920919d2834"]
}, Open  ]],
Cell[2255841, 42027, 154, 3, 26, "Input",ExpressionUUID->"6a55f8c1-6709-44e6-811b-3bd7c850e5ca"]
}
]
*)

